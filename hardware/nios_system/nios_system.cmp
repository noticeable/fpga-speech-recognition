	component nios_system is
		port (
			HEX4_from_the_HEX7_HEX4                   : out   std_logic_vector(6 downto 0);                     -- HEX4
			HEX5_from_the_HEX7_HEX4                   : out   std_logic_vector(6 downto 0);                     -- HEX5
			HEX6_from_the_HEX7_HEX4                   : out   std_logic_vector(6 downto 0);                     -- HEX6
			HEX7_from_the_HEX7_HEX4                   : out   std_logic_vector(6 downto 0);                     -- HEX7
			SRAM_DQ_to_and_from_the_SRAM              : inout std_logic_vector(15 downto 0) := (others => 'X'); -- DQ
			SRAM_ADDR_from_the_SRAM                   : out   std_logic_vector(19 downto 0);                    -- ADDR
			SRAM_LB_N_from_the_SRAM                   : out   std_logic;                                        -- LB_N
			SRAM_UB_N_from_the_SRAM                   : out   std_logic;                                        -- UB_N
			SRAM_CE_N_from_the_SRAM                   : out   std_logic;                                        -- CE_N
			SRAM_OE_N_from_the_SRAM                   : out   std_logic;                                        -- OE_N
			SRAM_WE_N_from_the_SRAM                   : out   std_logic;                                        -- WE_N
			LCD_DATA_to_and_from_the_Char_LCD_16x2    : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- DATA
			LCD_ON_from_the_Char_LCD_16x2             : out   std_logic;                                        -- ON
			LCD_BLON_from_the_Char_LCD_16x2           : out   std_logic;                                        -- BLON
			LCD_EN_from_the_Char_LCD_16x2             : out   std_logic;                                        -- EN
			LCD_RS_from_the_Char_LCD_16x2             : out   std_logic;                                        -- RS
			LCD_RW_from_the_Char_LCD_16x2             : out   std_logic;                                        -- RW
			sys_clk                                   : out   std_logic;                                        -- clk
			UART_RXD_to_the_Serial_Port               : in    std_logic                     := 'X';             -- RXD
			UART_TXD_from_the_Serial_Port             : out   std_logic;                                        -- TXD
			AUD_ADCDAT_to_the_Audio                   : in    std_logic                     := 'X';             -- ADCDAT
			AUD_ADCLRCK_to_the_Audio                  : in    std_logic                     := 'X';             -- ADCLRCK
			AUD_BCLK_to_the_Audio                     : in    std_logic                     := 'X';             -- BCLK
			AUD_DACDAT_from_the_Audio                 : out   std_logic;                                        -- DACDAT
			AUD_DACLRCK_to_the_Audio                  : in    std_logic                     := 'X';             -- DACLRCK
			LEDR_from_the_Red_LEDs                    : out   std_logic_vector(17 downto 0);                    -- export
			reset_n                                   : in    std_logic                     := 'X';             -- reset_n
			zs_addr_from_the_SDRAM                    : out   std_logic_vector(12 downto 0);                    -- addr
			zs_ba_from_the_SDRAM                      : out   std_logic_vector(1 downto 0);                     -- ba
			zs_cas_n_from_the_SDRAM                   : out   std_logic;                                        -- cas_n
			zs_cke_from_the_SDRAM                     : out   std_logic;                                        -- cke
			zs_cs_n_from_the_SDRAM                    : out   std_logic;                                        -- cs_n
			zs_dq_to_and_from_the_SDRAM               : inout std_logic_vector(31 downto 0) := (others => 'X'); -- dq
			zs_dqm_from_the_SDRAM                     : out   std_logic_vector(3 downto 0);                     -- dqm
			zs_ras_n_from_the_SDRAM                   : out   std_logic;                                        -- ras_n
			zs_we_n_from_the_SDRAM                    : out   std_logic;                                        -- we_n
			GPIO_to_and_from_the_Expansion_JP5        : inout std_logic_vector(31 downto 0) := (others => 'X'); -- export
			LEDG_from_the_Green_LEDs                  : out   std_logic_vector(8 downto 0);                     -- export
			PS2_CLK_to_and_from_the_PS2_Port_Dual     : inout std_logic                     := 'X';             -- CLK
			PS2_DAT_to_and_from_the_PS2_Port_Dual     : inout std_logic                     := 'X';             -- DAT
			Slider_Switches_external_interface_export : in    std_logic_vector(17 downto 0) := (others => 'X'); -- export
			I2C_SDAT_to_and_from_the_AV_Config        : inout std_logic                     := 'X';             -- SDAT
			I2C_SCLK_from_the_AV_Config               : out   std_logic;                                        -- SCLK
			PS2_CLK_to_and_from_the_PS2_Port          : inout std_logic                     := 'X';             -- CLK
			PS2_DAT_to_and_from_the_PS2_Port          : inout std_logic                     := 'X';             -- DAT
			KEY_to_the_Pushbuttons                    : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- export
			clk                                       : in    std_logic                     := 'X';             -- clk
			HEX0_from_the_HEX3_HEX0                   : out   std_logic_vector(6 downto 0);                     -- HEX0
			HEX1_from_the_HEX3_HEX0                   : out   std_logic_vector(6 downto 0);                     -- HEX1
			HEX2_from_the_HEX3_HEX0                   : out   std_logic_vector(6 downto 0);                     -- HEX2
			HEX3_from_the_HEX3_HEX0                   : out   std_logic_vector(6 downto 0);                     -- HEX3
			clk_27                                    : in    std_logic                     := 'X';             -- clk
			audio_clk                                 : out   std_logic;                                        -- clk
			sdram_clk                                 : out   std_logic;                                        -- clk
			irda_TXD                                  : out   std_logic;                                        -- TXD
			irda_RXD                                  : in    std_logic                     := 'X';             -- RXD
			sdcard_b_SD_cmd                           : inout std_logic                     := 'X';             -- b_SD_cmd
			sdcard_b_SD_dat                           : inout std_logic                     := 'X';             -- b_SD_dat
			sdcard_b_SD_dat3                          : inout std_logic                     := 'X';             -- b_SD_dat3
			sdcard_o_SD_clock                         : out   std_logic;                                        -- o_SD_clock
			flash_ADDR                                : out   std_logic_vector(22 downto 0);                    -- ADDR
			flash_CE_N                                : out   std_logic;                                        -- CE_N
			flash_OE_N                                : out   std_logic;                                        -- OE_N
			flash_WE_N                                : out   std_logic;                                        -- WE_N
			flash_RST_N                               : out   std_logic;                                        -- RST_N
			flash_DQ                                  : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- DQ
			video_in_TD_CLK27                         : in    std_logic                     := 'X';             -- TD_CLK27
			video_in_TD_DATA                          : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- TD_DATA
			video_in_TD_HS                            : in    std_logic                     := 'X';             -- TD_HS
			video_in_TD_VS                            : in    std_logic                     := 'X';             -- TD_VS
			video_in_clk27_reset                      : in    std_logic                     := 'X';             -- clk27_reset
			video_in_TD_RESET                         : out   std_logic;                                        -- TD_RESET
			video_in_overflow_flag                    : out   std_logic;                                        -- overflow_flag
			camera_config_I2C_SDAT                    : inout std_logic                     := 'X';             -- I2C_SDAT
			camera_config_I2C_SCLK                    : out   std_logic;                                        -- I2C_SCLK
			camera_config_exposure                    : in    std_logic_vector(15 downto 0) := (others => 'X'); -- exposure
			camera_in_PIXEL_CLK                       : in    std_logic                     := 'X';             -- PIXEL_CLK
			camera_in_LINE_VALID                      : in    std_logic                     := 'X';             -- LINE_VALID
			camera_in_FRAME_VALID                     : in    std_logic                     := 'X';             -- FRAME_VALID
			camera_in_pixel_clk_reset                 : in    std_logic                     := 'X';             -- pixel_clk_reset
			camera_in_PIXEL_DATA                      : in    std_logic_vector(11 downto 0) := (others => 'X'); -- PIXEL_DATA
			lcd_controller_external_interface_CLK     : out   std_logic;                                        -- CLK
			lcd_controller_external_interface_HS      : out   std_logic;                                        -- HS
			lcd_controller_external_interface_VS      : out   std_logic;                                        -- VS
			lcd_controller_external_interface_DATA_EN : out   std_logic;                                        -- DATA_EN
			lcd_controller_external_interface_R       : out   std_logic_vector(7 downto 0);                     -- R
			lcd_controller_external_interface_G       : out   std_logic_vector(7 downto 0);                     -- G
			lcd_controller_external_interface_B       : out   std_logic_vector(7 downto 0);                     -- B
			vga_clk_out_clk_clk                       : out   std_logic;                                        -- clk
			accelerometer_I2C_SDAT                    : inout std_logic                     := 'X';             -- I2C_SDAT
			accelerometer_I2C_SCLK                    : out   std_logic;                                        -- I2C_SCLK
			accelerometer_G_SENSOR_CS_N               : out   std_logic;                                        -- G_SENSOR_CS_N
			accelerometer_G_SENSOR_INT                : in    std_logic                     := 'X';             -- G_SENSOR_INT
			usb_INT1                                  : in    std_logic                     := 'X';             -- INT1
			usb_DATA                                  : inout std_logic_vector(15 downto 0) := (others => 'X'); -- DATA
			usb_RST_N                                 : out   std_logic;                                        -- RST_N
			usb_ADDR                                  : out   std_logic_vector(1 downto 0);                     -- ADDR
			usb_CS_N                                  : out   std_logic;                                        -- CS_N
			usb_RD_N                                  : out   std_logic;                                        -- RD_N
			usb_WR_N                                  : out   std_logic;                                        -- WR_N
			usb_INT0                                  : in    std_logic                     := 'X';             -- INT0
			vga_controller_external_interface_CLK     : out   std_logic;                                        -- CLK
			vga_controller_external_interface_HS      : out   std_logic;                                        -- HS
			vga_controller_external_interface_VS      : out   std_logic;                                        -- VS
			vga_controller_external_interface_BLANK   : out   std_logic;                                        -- BLANK
			vga_controller_external_interface_SYNC    : out   std_logic;                                        -- SYNC
			vga_controller_external_interface_R       : out   std_logic_vector(7 downto 0);                     -- R
			vga_controller_external_interface_G       : out   std_logic_vector(7 downto 0);                     -- G
			vga_controller_external_interface_B       : out   std_logic_vector(7 downto 0);                     -- B
			enet_pcs_mac_tx_clk                       : in    std_logic                     := 'X';             -- clk
			enet_pcs_mac_rx_clk                       : in    std_logic                     := 'X';             -- clk
			enet_mac_status_set_10                    : in    std_logic                     := 'X';             -- set_10
			enet_mac_status_set_1000                  : in    std_logic                     := 'X';             -- set_1000
			enet_mac_status_eth_mode                  : out   std_logic;                                        -- eth_mode
			enet_mac_status_ena_10                    : out   std_logic;                                        -- ena_10
			enet_mac_rgmii_rgmii_in                   : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- rgmii_in
			enet_mac_rgmii_rgmii_out                  : out   std_logic_vector(3 downto 0);                     -- rgmii_out
			enet_mac_rgmii_rx_control                 : in    std_logic                     := 'X';             -- rx_control
			enet_mac_rgmii_tx_control                 : out   std_logic;                                        -- tx_control
			enet_mac_mdio_mdc                         : out   std_logic;                                        -- mdc
			enet_mac_mdio_mdio_in                     : in    std_logic                     := 'X';             -- mdio_in
			enet_mac_mdio_mdio_out                    : out   std_logic;                                        -- mdio_out
			enet_mac_mdio_mdio_oen                    : out   std_logic;                                        -- mdio_oen
			enet_mac_misc_xon_gen                     : in    std_logic                     := 'X';             -- xon_gen
			enet_mac_misc_xoff_gen                    : in    std_logic                     := 'X';             -- xoff_gen
			enet_mac_misc_magic_wakeup                : out   std_logic;                                        -- magic_wakeup
			enet_mac_misc_magic_sleep_n               : in    std_logic                     := 'X';             -- magic_sleep_n
			enet_mac_misc_ff_tx_crc_fwd               : in    std_logic                     := 'X';             -- ff_tx_crc_fwd
			enet_mac_misc_ff_tx_septy                 : out   std_logic;                                        -- ff_tx_septy
			enet_mac_misc_tx_ff_uflow                 : out   std_logic;                                        -- tx_ff_uflow
			enet_mac_misc_ff_tx_a_full                : out   std_logic;                                        -- ff_tx_a_full
			enet_mac_misc_ff_tx_a_empty               : out   std_logic;                                        -- ff_tx_a_empty
			enet_mac_misc_rx_err_stat                 : out   std_logic_vector(17 downto 0);                    -- rx_err_stat
			enet_mac_misc_rx_frm_type                 : out   std_logic_vector(3 downto 0);                     -- rx_frm_type
			enet_mac_misc_ff_rx_dsav                  : out   std_logic;                                        -- ff_rx_dsav
			enet_mac_misc_ff_rx_a_full                : out   std_logic;                                        -- ff_rx_a_full
			enet_mac_misc_ff_rx_a_empty               : out   std_logic                                         -- ff_rx_a_empty
		);
	end component nios_system;

