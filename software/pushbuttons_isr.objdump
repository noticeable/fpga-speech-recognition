
C:/Users/pavmeh/Desktop/fpga-speech-recognition/software/pushbuttons_isr.elf:     file format elf32-littlenios2
C:/Users/pavmeh/Desktop/fpga-speech-recognition/software/pushbuttons_isr.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000fc8c memsz 0x0000fc8c flags r-x
    LOAD off    0x00010cac vaddr 0x0000fcac paddr 0x00019bdc align 2**12
         filesz 0x00009f30 memsz 0x00009f30 flags rw-
    LOAD off    0x0001bb0c vaddr 0x00023b0c paddr 0x00023b0c align 2**12
         filesz 0x00000000 memsz 0x00083b08 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f5b4  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000590  0000f71c  0000f71c  0001071c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00009f30  0000fcac  00019bdc  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00083d78  00023b0c  00023b0c  0001bb0c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001abdc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001058  00000000  00000000  0001ac08  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002631  00000000  00000000  0001bc60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000275a4  00000000  00000000  0001e291  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a24b  00000000  00000000  00045835  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000194ef  00000000  00000000  0004fa80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002448  00000000  00000000  00068f70  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004c41  00000000  00000000  0006b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f2af  00000000  00000000  0006fff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0007f2a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b28  00000000  00000000  0007f2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00084d49  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00084d4c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00084d4f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00084d50  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00084d51  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00084d55  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00084d59  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00084d5d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00084d66  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00084d6f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00084d78  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0018eb10  00000000  00000000  00084d83  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
0000f71c l    d  .rodata	00000000 .rodata
0000fcac l    d  .rwdata	00000000 .rwdata
00023b0c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 audio_isr.c
00023b5c l     O .bss	00000200 left_buffer
00023d5c l     O .bss	00000200 right_buffer
00023b0c l     O .bss	00000004 startVal
00000000 l    df *ABS*	00000000 kiss_fft.c
00000000 l    df *ABS*	00000000 audio.c
00019b38 l     O .rwdata	00000004 audio_ptr
00019b34 l     O .rwdata	00000004 fifospace_ptr
00019b2c l     O .rwdata	00000004 leftdata_ptr
00019b30 l     O .rwdata	00000004 rightdata_ptr
00023b10 l     O .bss	00000004 audio_isr
00000000 l    df *ABS*	00000000 char_lcd.c
00000000 l    df *ABS*	00000000 green_leds.c
00019b44 l     O .rwdata	00000004 data_reg
00000000 l    df *ABS*	00000000 hex.c
00019b4c l     O .rwdata	00000004 hex_3to0
00019b48 l     O .rwdata	00000004 hex_7to4
00000770 l     F .text	00000074 lookup_16
0000f71c l     O .rodata	00000010 table
000007e4 l     F .text	00000098 lookup_10
00000000 l    df *ABS*	00000000 lcd.c
00019b5c l     O .rwdata	00000004 status_reg
00019b50 l     O .rwdata	00000004 back_buff_reg
00019b58 l     O .rwdata	00000004 front_buff_reg
00019b54 l     O .rwdata	00000004 char_buff_base
00000000 l    df *ABS*	00000000 pushbuttons.c
00019b68 l     O .rwdata	00000004 data_reg
00019b64 l     O .rwdata	00000004 interrupt_mask_reg
00019b60 l     O .rwdata	00000004 edge_capture_reg
00000000 l    df *ABS*	00000000 red_leds.c
00019b6c l     O .rwdata	00000004 data_reg
00000000 l    df *ABS*	00000000 rs232.c
00000000 l    df *ABS*	00000000 switches.c
00019b78 l     O .rwdata	00000004 data_reg
00019b74 l     O .rwdata	00000004 interrupt_mask_reg
00019b70 l     O .rwdata	00000004 edge_capture_reg
00000000 l    df *ABS*	00000000 vga.c
00019b84 l     O .rwdata	00000004 status_reg
00019b88 l     O .rwdata	00000004 back_buff_reg
00019b80 l     O .rwdata	00000004 front_buff_reg
00019b7c l     O .rwdata	00000004 char_buff_base
00000000 l    df *ABS*	00000000 main.c
00000e50 l     F .text	00000254 fft_mag_window
000012c0 l     F .text	00000078 clearLCDChar
00001338 l     F .text	00000820 mfcc
00023f5c l     O .bss	00020000 yesBuffer
00043f5c l     O .bss	00020000 noBuffer
00019b8c l     O .rwdata	00000001 bruteForce
00063f5c l     O .bss	00020000 sampleBuffer
00083f5c l     O .bss	000101f8 windowedSampleBuffer
00094154 l     O .bss	00003398 sampleMFCC
00000000 l    df *ABS*	00000000 pushbuttons_isr.c
00000000 l    df *ABS*	00000000 switches_isr.c
00000000 l    df *ABS*	00000000 system_globals.c
00000000 l    df *ABS*	00000000 w_log10.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_log10.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00003198 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00017cdc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000527c l     F .text	00000058 __sprint_r
0000f952 l     O .rodata	00000010 blanks.3452
0000f942 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000072e0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008cdc l     F .text	00000058 std
00008de8 l     F .text	00000008 __fp_lock
00008df0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00019ba8 l     O .rwdata	00000004 charset
0000f984 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000facc l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000ca90 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000ccbc l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019bc8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00018698 l     O .rwdata	00001060 JTAG_UART
000196f8 l     O .rwdata	00000030 sgdma_rx
00019728 l     O .rwdata	00000030 sgdma_tx
00019758 l     O .rwdata	0000002c Accelerometer
00019784 l     O .rwdata	00000030 Camera_Config
000197b4 l     O .rwdata	00000030 OnBoard_AV
000197e4 l     O .rwdata	00000030 Audio
00019814 l     O .rwdata	0000002c Char_LCD_16x2
00019840 l     O .rwdata	0000002c IrDA
0001986c l     O .rwdata	0000002c Expansion_JP5
00019898 l     O .rwdata	0000002c Green_LEDs
000198c4 l     O .rwdata	0000002c HEX3_HEX0
000198f0 l     O .rwdata	0000002c HEX7_HEX4
0001991c l     O .rwdata	0000002c Pushbuttons
00019948 l     O .rwdata	0000002c Red_LEDs
00019974 l     O .rwdata	0000002c Slider_Switches
000199a0 l     O .rwdata	00000038 PS2_Port
000199d8 l     O .rwdata	00000038 PS2_Port_Dual
00019a10 l     O .rwdata	0000002c Serial_Port
00019a3c l     O .rwdata	00000034 USB
00019a70 l     O .rwdata	00000048 LCD_Char_Buffer
00019ab8 l     O .rwdata	00000048 VGA_Char_Buffer
00019b00 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000d658 l     F .text	00000054 altera_avalon_jtag_uart_timeout
0000d724 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0000ddf4 l     F .text	00000068 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e224 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000efb8 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000f550 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000006d0 g     F .text	00000010 char_lcd_cursor_off
0000a358 g     F .text	00000094 _mprec_log10
0000067c g     F .text	0000002c char_lcd_move_cursor
00000d20 g     F .text	00000018 vga_set_front_buffer
0000a444 g     F .text	00000088 __any_on
0000bab0 g     F .text	00000070 _isatty_r
0000faa4 g     O .rodata	00000028 __mprec_tinytens
0000cfe0 g     F .text	00000050 alt_main
000167ec g     O .rwdata	00001450 TRIBANK
00004f74 g     F .text	000000a0 _puts_r
0000eaa0 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
000a7514 g     O .bss	00000100 alt_irq
0000bb20 g     F .text	00000078 _lseek_r
000022f4 g     F .text	00000130 sqrt
00019bdc g       *ABS*	00000000 __flash_rwdata_start
0000e324 g     F .text	00000010 alt_up_character_lcd_send_cmd
00003cb8 g     F .text	00000088 __eqdf2
000006f0 g     F .text	00000010 char_lcd_shift_right
000a7614 g       *ABS*	00000000 __alt_heap_start
00004efc g     F .text	00000044 printf
00000aa0 g     F .text	00000060 lcd_draw_rectangle_back
0000dcc4 g     F .text	00000094 alt_avalon_sgdma_do_sync_transfer
0000b57c g     F .text	00000068 __sseek
00008d44 g     F .text	000000a4 __sinit
0000eca8 g     F .text	00000088 alt_up_char_buffer_string
0000e760 g     F .text	0000000c read_CE_bit
00009a1c g     F .text	00000084 _setlocale_r
00008e44 g     F .text	00000068 __sfmoreglue
0000d034 g     F .text	00000004 __malloc_unlock
0000e830 g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
00000a08 g     F .text	00000038 lcd_write
0000eb4c g     F .text	00000080 alt_up_rs232_read_fd
00097514 g     O .bss	00010000 samples_for_fft
000008c0 g     F .text	00000044 hex_write_3to0
00000bcc g     F .text	0000000c red_leds_set
0000ed30 g     F .text	00000058 alt_up_char_buffer_draw
0000de5c g     F .text	0000012c alt_avalon_sgdma_construct_descriptor_burst
000009dc g     F .text	0000000c lcd_set_back_buffer
00009dd4 g     F .text	000000e0 memmove
000163dc g     O .rwdata	00000410 DCT_LIFTER
00008e34 g     F .text	00000010 _cleanup
00005098 g     F .text	000000bc snprintf
0000a4cc g     F .text	000000bc _Balloc
00023b14 g     O .bss	00000001 audio_ready
00000a40 g     F .text	00000060 lcd_draw_rectangle
00003d40 g     F .text	00000088 __gtdf2
00004784 g     F .text	00000010 __errno
0000e260 g     F .text	0000001c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
0000070c g     F .text	00000014 green_leds_update
0000e060 g     F .text	0000004c alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000ba3c g     F .text	00000074 _fstat_r
00023b34 g     O .bss	00000004 errno
00004058 g     F .text	00000038 __make_dp
00000644 g     F .text	00000038 audio_init
00000dfc g     F .text	00000048 vga_char_buffer_clear
00023b20 g     O .bss	00000004 numRead
00000b48 g     F .text	0000000c lcd_get_backbuffer_addr
00023b4c g     O .bss	00000004 alt_argv
00021b2c g       *ABS*	00000000 _gp
000009c4 g     F .text	00000018 lcd_set_front_buffer
00023b1c g     O .bss	00000001 samples_for_fft_requested
000009e8 g     F .text	00000020 lcd_swap_buffers
00018518 g     O .rwdata	00000180 alt_fd_list
00000e44 g     F .text	0000000c signal_audio_ready
0000ef28 g     F .text	00000070 alt_find_dev
00009d34 g     F .text	000000a0 memcpy
0000e2f4 g     F .text	00000020 alt_up_character_lcd_write_fd
00000b54 g     F .text	0000000c pushbuttons_get_data
0000ed88 g     F .text	00000028 alt_up_char_buffer_clear
00008e28 g     F .text	0000000c _cleanup_r
00003f60 g     F .text	000000f8 __floatsidf
0000f01c g     F .text	00000098 alt_io_redirect
00003e50 g     F .text	00000088 __ltdf2
0000e68c g     F .text	0000007c alt_up_irda_write_fd
0000eb00 g     F .text	0000004c alt_up_rs232_read_data
00005014 g     F .text	00000014 puts
0000a2a8 g     F .text	000000b0 __ratio
0000dfd0 g     F .text	00000050 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0000e73c g     F .text	00000010 alt_up_irda_get_used_space_in_read_FIFO
0000d8cc g     F .text	00000168 altera_avalon_jtag_uart_read
000047a8 g     F .text	00000014 malloc
00004f40 g     F .text	00000034 _printf_r
0000cbcc g     F .text	00000008 __udivsi3
0000ce00 g     F .text	00000084 isatty
0000f9b4 g     O .rodata	000000c8 __mprec_tens
00023b18 g     O .bss	00000004 fft_cfg
000099f8 g     F .text	00000008 __locale_charset
00000ca0 g     F .text	00000010 switches_clear_edge_capture
0000e708 g     F .text	0000001c alt_up_irda_disable_read_interrupt
0000f468 g     F .text	0000003c alt_icache_flush
00023b28 g     O .bss	00000004 __malloc_top_pad
00000b78 g     F .text	0000000c pushbuttons_get_edge_capture
00000d9c g     F .text	00000060 vga_draw_rectangle
00019ba4 g     O .rwdata	00000004 __mb_cur_max
00009a00 g     F .text	0000000c _localeconv_r
0000abc4 g     F .text	0000003c __i2b
000093dc g     F .text	0000049c __sfvwrite_r
0000dc90 g     F .text	0000001c alt_avalon_sgdma_stop
00005028 g     F .text	00000070 _sbrk_r
00000904 g     F .text	0000008c hex_write
0000bb98 g     F .text	00000078 _read_r
00002424 g     F .text	00000218 __ieee754_log10
0000ccb8 g     F .text	00000004 alt_dcache_flush
000184e4 g     O .rwdata	0000000c __lc_ctype
00019bbc g     O .rwdata	00000004 alt_max_fd
0000ead4 g     F .text	0000000c alt_up_rs232_check_parity
00004584 g     F .text	00000138 __unpack_d
0000b918 g     F .text	00000110 _fclose_r
0000e76c g     F .text	00000008 read_num_bytes_available
00008ca8 g     F .text	00000034 fflush
00000434 g     F .text	000000d0 kiss_fft_alloc_twiddles
00023b2c g     O .bss	00000004 __malloc_max_sbrked_mem
0000cd44 g     F .text	000000bc alt_irq_register
0000e74c g     F .text	0000000c read_RI_bit
00003144 g     F .text	00000054 __extendsfdf2
00003628 g     F .text	00000074 __adddf3
00023b24 g     O .bss	00000001 working
0000a188 g     F .text	00000120 __b2d
0000c1ec g     F .text	000005b0 __umoddi3
0000cf48 g     F .text	00000098 lseek
00019b90 g     O .rwdata	00000004 __fdlib_version
00019b98 g     O .rwdata	00000004 _global_impure_ptr
0000af40 g     F .text	000005f4 _realloc_r
000a7614 g       *ABS*	00000000 __bss_end
00000c7c g     F .text	0000000c switches_set_interrupt_mask
0000dd58 g     F .text	0000009c alt_avalon_sgdma_do_async_transfer
000001b4 g     F .text	00000154 audio_isr
0000f28c g     F .text	000000ac alt_tick
0000bc10 g     F .text	000005dc __udivdi3
00000540 g     F .text	00000024 audio_clear_write_fifo
0000fa7c g     O .rodata	00000028 __mprec_bigtens
0000ae20 g     F .text	00000120 __s2b
0000c8fc g     F .text	00000194 __floatunsidf
0000a0a8 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000e780 g     F .text	00000008 read_data_byte
00008e10 g     F .text	00000018 __fp_lock_all
0000f258 g     F .text	00000034 alt_alarm_stop
0000e758 g     F .text	00000008 read_RE_bit
08200000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00023b44 g     O .bss	00000004 alt_irq_active
0000e664 g     F .text	00000010 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	0000007c alt_irq_handler
000184f0 g     O .rwdata	00000028 alt_dev_null
00000564 g     F .text	00000070 audio_read
000041a8 g     F .text	000000c8 __unpack_f
0000e334 g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
0000e1b0 g     F .text	00000030 alt_avalon_sgdma_check_descriptor_status
0000e934 g     F .text	00000040 alt_up_ps2_write_data_byte
0000eeb4 g     F .text	00000004 alt_dcache_flush_all
00009f74 g     F .text	00000070 __hi0bits
00000c70 g     F .text	0000000c switches_get_positions
0000c824 g     F .text	000000d8 __fixdfsi
00000700 g     F .text	0000000c green_leds_set
00000d44 g     F .text	00000020 vga_swap_buffers
00019bdc g       *ABS*	00000000 __ram_rwdata_end
00019bb4 g     O .rwdata	00000008 alt_dev_list
0000d1a4 g     F .text	000000f4 write
0000dc60 g     F .text	00000030 alt_avalon_sgdma_enable_desc_poll
0000fcac g       *ABS*	00000000 __ram_rodata_end
0000ccc4 g     F .text	00000080 fstat
0000ebf4 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00003ed8 g     F .text	00000088 __ledf2
00000d64 g     F .text	00000038 vga_write
0000ad00 g     F .text	00000120 __pow5mult
00023b38 g     O .bss	00000004 __nlocale_changed
0000cbd4 g     F .text	00000008 __umodsi3
00000c10 g     F .text	00000024 get_char
0000e020 g     F .text	00000040 alt_avalon_sgdma_construct_mem_to_stream_desc
00002168 g     F .text	00000004 switches_isr
0000dbb0 g     F .text	00000010 alt_avalon_sgdma_register_callback
000a7614 g       *ABS*	00000000 end
0000e974 g     F .text	00000070 alt_up_ps2_write_fd
00000b84 g     F .text	00000010 pushbuttons_clear_edge_capture
0000e56c g     F .text	0000000c alt_up_irda_check_parity
0000edd0 g     F .text	00000050 alt_up_char_buffer_init
00000c88 g     F .text	0000000c switches_get_interrupt_mask
0000d6ac g     F .text	00000078 altera_avalon_jtag_uart_init
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000dc40 g     F .text	00000020 alt_avalon_sgdma_disable_desc_poll
0000e1e0 g     F .text	00000044 alt_avalon_timer_sc_init
00004128 g     F .text	00000080 __clzsi2
00005154 g     F .text	000000b4 _snprintf_r
0000da34 g     F .text	0000017c altera_avalon_jtag_uart_write
0000e11c g     F .text	00000038 alt_avalon_sgdma_construct_mem_to_mem_desc
0000030c g     F .text	0000010c kiss_fft_stride
00008d34 g     F .text	00000004 __sfp_lock_acquire
00009c50 g     F .text	000000e4 memchr
00000418 g     F .text	0000001c kiss_fft
0000e2c8 g     F .text	0000002c alt_up_character_lcd_write
000052d4 g     F .text	00001eac ___vfprintf_internal_r
0000e0ac g     F .text	00000028 alt_avalon_sgdma_construct_stream_to_mem_desc
000090c8 g     F .text	00000314 _free_r
0000f554 g     F .text	000001b0 __call_exitprocs
00000720 g     F .text	00000018 green_leds_clear
00023b3c g     O .bss	00000004 __mlocale_changed
00000c04 g     F .text	0000000c red_leds_clear_all
00019ba0 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
00019b40 g     O .rwdata	00000004 data_ptr
00023b54 g     O .bss	00000004 _alt_tick_rate
0000e154 g     F .text	0000005c alt_avalon_sgdma_open
0000a890 g     F .text	0000014c __lshift
00023b58 g     O .bss	00000004 _alt_nticks
0000d038 g     F .text	000000f8 read
0000d2b8 g     F .text	000002d0 alt_sys_init
0000e3d8 g     F .text	00000090 alt_up_character_lcd_shift_display
0000e7a8 g     F .text	00000030 alt_up_ps2_clear_fifo
0000ebcc g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
0000f230 g     F .text	00000028 alt_remap_uncached
0000a9dc g     F .text	000001e8 __multiply
0000e36c g     F .text	0000006c alt_up_character_lcd_erase_pos
0000d620 g     F .text	00000038 altera_avalon_jtag_uart_close
0000fcac g       *ABS*	00000000 __ram_rwdata_start
0000f71c g       *ABS*	00000000 __ram_rodata_start
000974ec g     O .bss	00000028 __malloc_current_mallinfo
0000a588 g     F .text	0000017c __d2b
0000216c g     F .text	00000188 log10
08201000 g       *ABS*	00000000 __alt_mem_packet_memory
0000d5f8 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
0000f3fc g     F .text	0000006c alt_get_fd
000046bc g     F .text	000000c8 __fpcmp_parts_d
0000b8a8 g     F .text	00000070 _close_r
00001258 g     F .text	00000068 printMFCC
0000f4dc g     F .text	00000074 memcmp
0000d5a8 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
000a7614 g       *ABS*	00000000 __alt_stack_base
0000d588 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
0000e724 g     F .text	00000018 alt_up_irda_enable_read_interrupt
000071a4 g     F .text	0000013c __swsetup_r
00003a60 g     F .text	00000258 __divdf3
00008eac g     F .text	000000f0 __sfp
0000a3ec g     F .text	00000058 __copybits
000180dc g     O .rwdata	00000408 __malloc_av_
00008d40 g     F .text	00000004 __sinit_lock_release
0000369c g     F .text	000003c4 __muldf3
0000b660 g     F .text	00000060 __sread
0000ec64 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
0000f340 g     F .text	000000bc alt_find_file
0000eeb8 g     F .text	00000070 alt_dev_llist_insert
0000d030 g     F .text	00000004 __malloc_lock
0000d154 g     F .text	00000050 sbrk
0000dcac g     F .text	00000018 alt_avalon_sgdma_start
00008aac g     F .text	000001fc _fflush_r
00000d38 g     F .text	0000000c vga_set_back_buffer
0000b7f4 g     F .text	000000b4 _calloc_r
00023b0c g       *ABS*	00000000 __bss_start
00009eb4 g     F .text	00000098 memset
00001b58 g     F .text	00000524 main
00000cb0 g     F .text	0000003c switches_enable_interrupts
00023b50 g     O .bss	00000004 alt_envp
00023b30 g     O .bss	00000004 __malloc_max_total_mem
0000edb0 g     F .text	00000020 alt_up_char_buffer_open_dev
0000d5d0 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00017c8c g     O .rwdata	00000050 tribankEnd
00019bcc g     O .rwdata	00000008 alt_sgdma_list
0000e468 g     F .text	00000090 alt_up_character_lcd_shift_cursor
0000b574 g     F .text	00000008 __sclose
00002934 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
00000758 g     F .text	0000000c hex_clear_3to0
0000ba28 g     F .text	00000014 fclose
0000e7d8 g     F .text	00000058 alt_up_ps2_read_data_byte
000074f8 g     F .text	000015b4 _dtoa_r
000047bc g     F .text	00000740 _malloc_r
00019bc0 g     O .rwdata	00000004 alt_errno
00009940 g     F .text	000000b8 _fwalk
0000e674 g     F .text	00000018 alt_up_irda_write_data
0000e788 g     F .text	00000020 alt_up_ps2_open_dev
0000cb0c g     F .text	00000060 __divsi3
0000f7d0 g     O .rodata	00000014 __thenan_df
0000e54c g     F .text	00000020 alt_up_character_lcd_open_dev
00008f9c g     F .text	0000012c _malloc_trim_r
0000eabc g     F .text	00000018 alt_up_ps2_enable_read_interrupt
00000744 g     F .text	00000014 hex_clear
0000e314 g     F .text	00000010 alt_up_character_lcd_init
0000b6c0 g     F .text	000000bc strcmp
0000f71c g       *ABS*	00000000 __flash_rodata_start
00000c94 g     F .text	0000000c switches_get_edge_capture
0000fcac g     O .rwdata	00006730 mat
0000eae0 g     F .text	00000020 alt_up_rs232_open_dev
0000c79c g     F .text	00000088 __nedf2
0000d298 g     F .text	00000020 alt_irq_init
0000d130 g     F .text	00000024 alt_release_fd
0000e774 g     F .text	0000000c read_data_valid
0000e350 g     F .text	0000001c alt_up_character_lcd_cursor_off
0000f7e4 g     O .rodata	00000100 __clz_tab
00023b40 g     O .bss	00000004 _PathLocale
000005d4 g     F .text	00000070 audio_write
0000e9e4 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
00000b6c g     F .text	0000000c pushbuttons_get_interrupt_mask
0000b77c g     F .text	00000078 _write_r
00009aa0 g     F .text	0000001c setlocale
00000b00 g     F .text	00000048 lcd_char_buffer_clear
00000bd8 g     F .text	00000014 red_leds_update
00019b94 g     O .rwdata	00000004 _impure_ptr
00023b48 g     O .bss	00000004 alt_argc
0000294c g     F .text	000007f8 __ieee754_log
00000cec g     F .text	00000034 vga_enable_dma
00000020 g       .exceptions	00000000 alt_irq_entry
0000a108 g     F .text	00000080 __ulp
0000b534 g     F .text	00000040 __isinfd
00008df8 g     F .text	00000018 __fp_unlock_all
000010a4 g     F .text	000001b4 fft
00019bac g     O .rwdata	00000008 alt_fs_list
0000ec80 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
0000ebdc g     F .text	00000018 alt_up_rs232_write_data
00000738 g     F .text	0000000c green_leds_clear_all
0000293c g     F .text	00000010 nan
00000020 g       *ABS*	00000000 __ram_exceptions_start
00009a0c g     F .text	00000010 localeconv
0000263c g     F .text	000002c8 __ieee754_sqrt
00000764 g     F .text	0000000c hex_clear_7to4
00019bdc g       *ABS*	00000000 _edata
00000bec g     F .text	00000018 red_leds_clear
000a7614 g       *ABS*	00000000 _end
0000211c g     F .text	0000004c pushbuttons_isr
00000168 g       *ABS*	00000000 __ram_exceptions_end
0000d858 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
0000df88 g     F .text	00000048 alt_avalon_sgdma_construct_descriptor
0000b5e4 g     F .text	0000007c __swrite
00019b9c g     O .rwdata	00000004 __malloc_trim_threshold
0000f338 g     F .text	00000008 altera_nios2_qsys_irq_init
0000f4a4 g     F .text	00000038 exit
0000e598 g     F .text	0000004c alt_up_irda_read_data
00009878 g     F .text	000000c8 _fwalk_reent
0000ea18 g     F .text	00000088 alt_up_ps2_init
0000a704 g     F .text	0000018c __mdiff
00000308 g     F .text	00000004 kiss_fft_cleanup
0000cb6c g     F .text	00000060 __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00008d38 g     F .text	00000004 __sfp_lock_release
00000b60 g     F .text	0000000c pushbuttons_set_interrupt_mask
00000b94 g     F .text	00000038 pushbuttons_enable_interrupts
0000e27c g     F .text	0000004c alt_up_character_lcd_string
0000e578 g     F .text	00000020 alt_up_irda_open_dev
000001a4 g     F .text	00000010 clamp
000006e0 g     F .text	00000010 char_lcd_shift_left
0000f704 g     F .text	00000014 _exit
00002904 g     F .text	00000030 __isnand
0000ee20 g     F .text	00000094 alt_alarm_start
00004090 g     F .text	00000098 __muldi3
00009abc g     F .text	00000194 __smakebuf_r
0000e8d8 g     F .text	0000005c alt_up_ps2_wait_for_ack
00005208 g     F .text	00000074 strlen
0000f0b4 g     F .text	0000017c open
00003dc8 g     F .text	00000088 __gedf2
0000ef98 g     F .text	00000020 alt_icache_flush_all
0000087c g     F .text	00000044 hex_write_7to4
0000e4f8 g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
00019bc4 g     O .rwdata	00000004 alt_priority_mask
00007180 g     F .text	00000024 __vfprintf_internal
0000e8b0 g     F .text	00000028 alt_up_ps2_read_fd
00000504 g     F .text	00000018 kiss_fft_alloc
0000e0d4 g     F .text	00000048 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0000207c g     F .text	000000a0 testMFCC
000035a8 g     F .text	00000080 __subdf3
0000e5e4 g     F .text	00000080 alt_up_irda_read_fd
00019b3c g     O .rwdata	00000004 instruction_ptr
00009fe4 g     F .text	000000c4 __lo0bits
00019bd4 g     O .rwdata	00000008 alt_alarm_list
00000990 g     F .text	00000034 lcd_enable_dma
0000ec98 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
0000cbdc g     F .text	000000dc close
00000c34 g     F .text	0000003c put_char
0000ce84 g     F .text	000000c4 alt_load
00004270 g     F .text	00000314 __pack_d
0000051c g     F .text	00000024 audio_clear_read_fifo
0000dbc0 g     F .text	00000080 alt_avalon_sgdma_init
00004794 g     F .text	00000014 free
00008d3c g     F .text	00000004 __sinit_lock_acquire
0000ac00 g     F .text	00000100 __multadd
00009f4c g     F .text	00000028 _Bfree
000006a8 g     F .text	00000028 char_lcd_write
00017c3c g     O .rwdata	00000050 tribankStart



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	040002b4 	movhi	r16,10
 100:	841d4504 	addi	r16,r16,29972
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     174:	d686cb14 	ori	gp,gp,6956
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     17c:	108ec314 	ori	r2,r2,15116

    movhi r3, %hi(__bss_end)
     180:	00c002b4 	movhi	r3,10
    ori r3, r3, %lo(__bss_end)
     184:	18dd8514 	ori	r3,r3,30228

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	000ce840 	call	ce84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	000cfe00 	call	cfe0 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <clamp>:
void draw_fft ();
void signal_audio_ready ();

int clamp (int value, int ceiling)
{
  if (value < ceiling) return 0;
     1a4:	2140010e 	bge	r4,r5,1ac <clamp+0x8>
     1a8:	0009883a 	mov	r4,zero
  else return value;
}
     1ac:	2005883a 	mov	r2,r4
     1b0:	f800283a 	ret

000001b4 <audio_isr>:

void audio_isr (void *context, unsigned int id) {
     1b4:	defffc04 	addi	sp,sp,-16
     1b8:	dfc00315 	stw	ra,12(sp)
     1bc:	dc800215 	stw	r18,8(sp)
     1c0:	dc400115 	stw	r17,4(sp)
     1c4:	dc000015 	stw	r16,0(sp)
  uint32_t numToRead = (samples_for_fft_requested) ? (NUM_SAMPLES - numRead) : AUDIO_BUF_SIZE;
     1c8:	008000b4 	movhi	r2,2
     1cc:	108ec704 	addi	r2,r2,15132
     1d0:	10800003 	ldbu	r2,0(r2)
     1d4:	10803fcc 	andi	r2,r2,255
     1d8:	1000021e 	bne	r2,zero,1e4 <audio_isr+0x30>
     1dc:	00802004 	movi	r2,128
     1e0:	00000506 	br	1f8 <audio_isr+0x44>
     1e4:	008000b4 	movhi	r2,2
     1e8:	108ec804 	addi	r2,r2,15136
     1ec:	10c00017 	ldw	r3,0(r2)
     1f0:	00880004 	movi	r2,8192
     1f4:	10c5c83a 	sub	r2,r2,r3
  // Want to read step
  size_t count = audio_read (left_buffer, right_buffer, STEP_SIZE*numToRead);
     1f8:	040000b4 	movhi	r16,2
     1fc:	840ed704 	addi	r16,r16,15196
     200:	044000b4 	movhi	r17,2
     204:	8c4f5704 	addi	r17,r17,15708
     208:	108d883a 	add	r6,r2,r2
     20c:	8009883a 	mov	r4,r16
     210:	880b883a 	mov	r5,r17
     214:	318d883a 	add	r6,r6,r6
     218:	00005640 	call	564 <audio_read>
     21c:	1025883a 	mov	r18,r2
  audio_write (left_buffer, right_buffer, count);
     220:	8009883a 	mov	r4,r16
     224:	880b883a 	mov	r5,r17
     228:	100d883a 	mov	r6,r2
     22c:	00005d40 	call	5d4 <audio_write>
  if (samples_for_fft_requested) {
     230:	040000b4 	movhi	r16,2
     234:	840ec704 	addi	r16,r16,15132
     238:	80800003 	ldbu	r2,0(r16)
     23c:	10803fcc 	andi	r2,r2,255
     240:	10002b26 	beq	r2,zero,2f0 <audio_isr+0x13c>
      size_t i;
      red_leds_set (0xFF);
     244:	01003fc4 	movi	r4,255
     248:	0000bcc0 	call	bcc <red_leds_set>
      //modify count by STEP_SIZE since only count/STEP_SIZE samples actually copied
      size_t numSamples = count/STEP_SIZE;
     24c:	9022d0ba 	srli	r17,r18,2
      if (numRead + numSamples >= NUM_SAMPLES) {
     250:	010000b4 	movhi	r4,2
     254:	210ec804 	addi	r4,r4,15136
     258:	20800017 	ldw	r2,0(r4)
     25c:	8885883a 	add	r2,r17,r2
     260:	00c7ffc4 	movi	r3,8191
     264:	1880042e 	bgeu	r3,r2,278 <audio_isr+0xc4>
        numRead = 0;
     268:	20000015 	stw	zero,0(r4)
        samples_for_fft_requested = false;
     26c:	80000005 	stb	zero,0(r16)
        signal_audio_ready();
     270:	0000e440 	call	e44 <signal_audio_ready>
        startVal = 0;
     274:	d007f815 	stw	zero,8160(gp)
      }
      for (i = startVal; i < count; i+= STEP_SIZE) {
     278:	d107f817 	ldw	r4,8160(gp)
     27c:	2480132e 	bgeu	r4,r18,2cc <audio_isr+0x118>
     280:	020000b4 	movhi	r8,2
     284:	420ec804 	addi	r8,r8,15136
     288:	01c000b4 	movhi	r7,2
     28c:	39ced704 	addi	r7,r7,15196
     290:	01800274 	movhi	r6,9
     294:	319d4504 	addi	r6,r6,29972
     298:	01400104 	movi	r5,4
        samples_for_fft[i/STEP_SIZE + numRead].r = left_buffer[i];
     29c:	40800017 	ldw	r2,0(r8)
     2a0:	2006d0ba 	srli	r3,r4,2
     2a4:	1887883a 	add	r3,r3,r2
     2a8:	2105883a 	add	r2,r4,r4
     2ac:	1085883a 	add	r2,r2,r2
     2b0:	11c5883a 	add	r2,r2,r7
     2b4:	10800017 	ldw	r2,0(r2)
     2b8:	180690fa 	slli	r3,r3,3
     2bc:	1987883a 	add	r3,r3,r6
     2c0:	18800015 	stw	r2,0(r3)
        numRead = 0;
        samples_for_fft_requested = false;
        signal_audio_ready();
        startVal = 0;
      }
      for (i = startVal; i < count; i+= STEP_SIZE) {
     2c4:	2149883a 	add	r4,r4,r5
     2c8:	24bff436 	bltu	r4,r18,29c <audio_isr+0xe8>
        samples_for_fft[i/STEP_SIZE + numRead].r = left_buffer[i];
      }
      numRead += numSamples;
     2cc:	008000b4 	movhi	r2,2
     2d0:	108ec804 	addi	r2,r2,15136
     2d4:	10c00017 	ldw	r3,0(r2)
     2d8:	88c7883a 	add	r3,r17,r3
     2dc:	10c00015 	stw	r3,0(r2)
      //maintian proper spacing on next set of samples when next interrupt received
      startVal = count%STEP_SIZE;
     2e0:	908000cc 	andi	r2,r18,3
     2e4:	d087f815 	stw	r2,8160(gp)
      red_leds_clear (0xFF);
     2e8:	01003fc4 	movi	r4,255
     2ec:	0000bec0 	call	bec <red_leds_clear>
    }
}
     2f0:	dfc00317 	ldw	ra,12(sp)
     2f4:	dc800217 	ldw	r18,8(sp)
     2f8:	dc400117 	ldw	r17,4(sp)
     2fc:	dc000017 	ldw	r16,0(sp)
     300:	dec00404 	addi	sp,sp,16
     304:	f800283a 	ret

00000308 <kiss_fft_cleanup>:
/*
 * Empty function, nothing to clean up
 */
void kiss_fft_cleanup (void)
{
}
     308:	f800283a 	ret

0000030c <kiss_fft_stride>:
    return kiss_fft_alloc_twiddles (nfft, inverse_fft, mem, lenmem);
}


void kiss_fft_stride (const kiss_fft_cfg cfg, kiss_fft_cpx *fin, kiss_fft_cpx *fout, int in_stride)
{
     30c:	defffd04 	addi	sp,sp,-12
     310:	dfc00215 	stw	ra,8(sp)
     314:	dc400115 	stw	r17,4(sp)
     318:	dc000015 	stw	r16,0(sp)
     31c:	2021883a 	mov	r16,r4
     320:	2819883a 	mov	r12,r5
     324:	3023883a 	mov	r17,r6

  /*
   * Set the size, source and destination address
   */

  belFftPtr->N.N = cfg->nfft;
     328:	20800017 	ldw	r2,0(r4)
     32c:	00e20834 	movhi	r3,34848
     330:	18cc0004 	addi	r3,r3,12288
     334:	1880020d 	sth	r2,8(r3)
  belFftPtr->Finadr = fin;
     338:	19400315 	stw	r5,12(r3)
  belFftPtr->Foutadr = fout;
     33c:	19800415 	stw	r6,16(r3)

  /*
   * Copy the precalculated factors.
   */

  facbuf = cfg->factors;
     340:	21000204 	addi	r4,r4,8
  i = 0;
  while (1) {
      belFftPtr->Factors[i].P = *facbuf++;
     344:	2080000b 	ldhu	r2,0(r4)
     348:	1880058d 	sth	r2,22(r3)
     34c:	01400084 	movi	r5,2
     350:	2149883a 	add	r4,r4,r5
      belFftPtr->Factors[i].M = *facbuf;
     354:	2080000b 	ldhu	r2,0(r4)
     358:	1880050d 	sth	r2,20(r3)
      if (*facbuf++ == 1) {
     35c:	20c0000f 	ldh	r3,0(r4)
     360:	00800044 	movi	r2,1
     364:	18801526 	beq	r3,r2,3bc <kiss_fft_stride+0xb0>
     368:	214b883a 	add	r5,r4,r5
     36c:	000d883a 	mov	r6,zero
     370:	100f883a 	mov	r7,r2
     374:	02e20834 	movhi	r11,34848
     378:	5acc0004 	addi	r11,r11,12288
     37c:	02800504 	movi	r10,20
     380:	02400084 	movi	r9,2
     384:	02000104 	movi	r8,4
          break;
      }
      i++;
     388:	31cd883a 	add	r6,r6,r7
   */

  facbuf = cfg->factors;
  i = 0;
  while (1) {
      belFftPtr->Factors[i].P = *facbuf++;
     38c:	28c0000b 	ldhu	r3,0(r5)
     390:	3185883a 	add	r2,r6,r6
     394:	1085883a 	add	r2,r2,r2
     398:	12c5883a 	add	r2,r2,r11
     39c:	1285883a 	add	r2,r2,r10
     3a0:	10c0008d 	sth	r3,2(r2)
     3a4:	2a49883a 	add	r4,r5,r9
      belFftPtr->Factors[i].M = *facbuf;
     3a8:	20c0000b 	ldhu	r3,0(r4)
     3ac:	10c0000d 	sth	r3,0(r2)
      if (*facbuf++ == 1) {
     3b0:	2a0b883a 	add	r5,r5,r8
     3b4:	2080000f 	ldh	r2,0(r4)
     3b8:	11fff31e 	bne	r2,r7,388 <kiss_fft_stride+0x7c>

  /*
   * Flush the data cache for the source and destination region
   */

  alt_dcache_flush (fin, cfg->nfft * sizeof (kiss_fft_cpx));
     3bc:	81400017 	ldw	r5,0(r16)
     3c0:	6009883a 	mov	r4,r12
     3c4:	280a90fa 	slli	r5,r5,3
     3c8:	000ccb80 	call	ccb8 <alt_dcache_flush>
  alt_dcache_flush (fout, cfg->nfft * sizeof (kiss_fft_cpx));
     3cc:	81400017 	ldw	r5,0(r16)
     3d0:	8809883a 	mov	r4,r17
     3d4:	280a90fa 	slli	r5,r5,3
     3d8:	000ccb80 	call	ccb8 <alt_dcache_flush>

  /*
   * Start the FFT
   */

  belFftPtr->Control.Start = 1;
     3dc:	00e20834 	movhi	r3,34848
     3e0:	18cc0004 	addi	r3,r3,12288
     3e4:	18800017 	ldw	r2,0(r3)
     3e8:	10800054 	ori	r2,r2,1
     3ec:	18800015 	stw	r2,0(r3)
     3f0:	1809883a 	mov	r4,r3
     3f4:	00c00104 	movi	r3,4
  /*
   * We poll the status register until the FFT is ready. Other implementations
   * like generation an interrupt are possible.
   */

  while (! belFftPtr->Status.Int);
     3f8:	20800117 	ldw	r2,4(r4)
     3fc:	10c4703a 	and	r2,r2,r3
     400:	103ffd26 	beq	r2,zero,3f8 <kiss_fft_stride+0xec>
}
     404:	dfc00217 	ldw	ra,8(sp)
     408:	dc400117 	ldw	r17,4(sp)
     40c:	dc000017 	ldw	r16,0(sp)
     410:	dec00304 	addi	sp,sp,12
     414:	f800283a 	ret

00000418 <kiss_fft>:


void kiss_fft (kiss_fft_cfg cfg, kiss_fft_cpx *fin, kiss_fft_cpx *fout)
{
     418:	deffff04 	addi	sp,sp,-4
     41c:	dfc00015 	stw	ra,0(sp)
    kiss_fft_stride (cfg, fin, fout, 1);
     420:	01c00044 	movi	r7,1
     424:	000030c0 	call	30c <kiss_fft_stride>
}
     428:	dfc00017 	ldw	ra,0(sp)
     42c:	dec00104 	addi	sp,sp,4
     430:	f800283a 	ret

00000434 <kiss_fft_alloc_twiddles>:
 *
 * The parameters inverse_fft, mem, and lenmem are not used.
 */

kiss_fft_cfg kiss_fft_alloc_twiddles (int nfft, int inverse_fft, void *mem, size_t *lenmem)
{
     434:	defffe04 	addi	sp,sp,-8
     438:	dfc00115 	stw	ra,4(sp)
     43c:	dc000015 	stw	r16,0(sp)
     440:	2021883a 	mov	r16,r4
    kiss_fft_cfg cfg;

    cfg = (kiss_fft_cfg) malloc (sizeof (struct kiss_fft_state));
     444:	01002304 	movi	r4,140
     448:	00047a80 	call	47a8 <malloc>
     44c:	100d883a 	mov	r6,r2
    if (cfg) {
     450:	10002726 	beq	r2,zero,4f0 <kiss_fft_alloc_twiddles+0xbc>
        cfg->nfft = nfft;
     454:	14000015 	stw	r16,0(r2)

        cfg->belFftPtr = (struct bel_fft *) FFT_BASE;
     458:	00820834 	movhi	r2,2080
     45c:	108c0004 	addi	r2,r2,12288
     460:	30802215 	stw	r2,136(r6)
     464:	31400204 	addi	r5,r6,8
     468:	01000104 	movi	r4,4
     46c:	01c00144 	movi	r7,5
     470:	02000044 	movi	r8,1
     474:	2015883a 	mov	r10,r4
     478:	02c00084 	movi	r11,2
     47c:	025f4004 	movi	r9,32000
     480:	00000c06 	br	4b4 <kiss_fft_alloc_twiddles+0x80>
    int p = 4;

    /* factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
            switch (p) {
     484:	00800084 	movi	r2,2
     488:	20800326 	beq	r4,r2,498 <kiss_fft_alloc_twiddles+0x64>
     48c:	2280041e 	bne	r4,r10,4a0 <kiss_fft_alloc_twiddles+0x6c>
     490:	1009883a 	mov	r4,r2
     494:	00000406 	br	4a8 <kiss_fft_alloc_twiddles+0x74>
     498:	010000c4 	movi	r4,3
     49c:	00000106 	br	4a4 <kiss_fft_alloc_twiddles+0x70>
                case 4: p = 2; break;
                case 2: p = 3; break;
                default: p += 2; break;
     4a0:	22c9883a 	add	r4,r4,r11
            }
            if (p > 32000 || (int) p *(int) p > n) {
     4a4:	49000216 	blt	r9,r4,4b0 <kiss_fft_alloc_twiddles+0x7c>
     4a8:	2105383a 	mul	r2,r4,r4
     4ac:	8080010e 	bge	r16,r2,4b4 <kiss_fft_alloc_twiddles+0x80>
     4b0:	8009883a 	mov	r4,r16
{
    int p = 4;

    /* factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
     4b4:	8107283a 	div	r3,r16,r4
     4b8:	1905383a 	mul	r2,r3,r4
     4bc:	80bff11e 	bne	r16,r2,484 <kiss_fft_alloc_twiddles+0x50>
            if (p > 32000 || (int) p *(int) p > n) {
                p = n;          /* no more factors, skip to end */
            }
        }
        n /= p;
        if (p>5) {
     4c0:	39000816 	blt	r7,r4,4e4 <kiss_fft_alloc_twiddles+0xb0>
            }
            if (p > 32000 || (int) p *(int) p > n) {
                p = n;          /* no more factors, skip to end */
            }
        }
        n /= p;
     4c4:	1821883a 	mov	r16,r3
        if (p>5) {
            return 0;
        }
        *facbuf++ = (short int) p;
     4c8:	2900000d 	sth	r4,0(r5)
     4cc:	00c00084 	movi	r3,2
     4d0:	28c5883a 	add	r2,r5,r3
        *facbuf++ = (short int) n;
     4d4:	1400000d 	sth	r16,0(r2)
    } while (n > 1);
     4d8:	4400050e 	bge	r8,r16,4f0 <kiss_fft_alloc_twiddles+0xbc>
        n /= p;
        if (p>5) {
            return 0;
        }
        *facbuf++ = (short int) p;
        *facbuf++ = (short int) n;
     4dc:	10cb883a 	add	r5,r2,r3
     4e0:	003ff406 	br	4b4 <kiss_fft_alloc_twiddles+0x80>
    if (cfg) {
        cfg->nfft = nfft;

        cfg->belFftPtr = (struct bel_fft *) FFT_BASE;
        if (! kf_factor (nfft, cfg->factors)) {
            free (cfg);
     4e4:	3009883a 	mov	r4,r6
     4e8:	00047940 	call	4794 <free>
     4ec:	000d883a 	mov	r6,zero
            return NULL;
        }
    }
    return cfg;
}
     4f0:	3005883a 	mov	r2,r6
     4f4:	dfc00117 	ldw	ra,4(sp)
     4f8:	dc000017 	ldw	r16,0(sp)
     4fc:	dec00204 	addi	sp,sp,8
     500:	f800283a 	ret

00000504 <kiss_fft_alloc>:


kiss_fft_cfg kiss_fft_alloc (int nfft, int inverse_fft, void * mem, size_t * lenmem)
{
     504:	deffff04 	addi	sp,sp,-4
     508:	dfc00015 	stw	ra,0(sp)
    return kiss_fft_alloc_twiddles (nfft, inverse_fft, mem, lenmem);
     50c:	00004340 	call	434 <kiss_fft_alloc_twiddles>
}
     510:	dfc00017 	ldw	ra,0(sp)
     514:	dec00104 	addi	sp,sp,4
     518:	f800283a 	ret

0000051c <audio_clear_read_fifo>:
  *audio_ptr |= AUDIO_RE_MASK;
}

void audio_clear_read_fifo ()
{
  *audio_ptr |= AUDIO_CR_MASK;
     51c:	d1200317 	ldw	r4,-32756(gp)
     520:	20800017 	ldw	r2,0(r4)
     524:	10800114 	ori	r2,r2,4
     528:	20800015 	stw	r2,0(r4)
  *audio_ptr &= ~AUDIO_CR_MASK;
     52c:	20800017 	ldw	r2,0(r4)
     530:	00fffec4 	movi	r3,-5
     534:	10c4703a 	and	r2,r2,r3
     538:	20800015 	stw	r2,0(r4)
}
     53c:	f800283a 	ret

00000540 <audio_clear_write_fifo>:

void audio_clear_write_fifo ()
{
  *audio_ptr |= AUDIO_CW_MASK;
     540:	d1200317 	ldw	r4,-32756(gp)
     544:	20800017 	ldw	r2,0(r4)
     548:	10800214 	ori	r2,r2,8
     54c:	20800015 	stw	r2,0(r4)
  *audio_ptr &= ~AUDIO_CW_MASK;
     550:	20800017 	ldw	r2,0(r4)
     554:	00fffdc4 	movi	r3,-9
     558:	10c4703a 	and	r2,r2,r3
     55c:	20800015 	stw	r2,0(r4)
}
     560:	f800283a 	ret

00000564 <audio_read>:

uint32_t audio_read (int *left_buffer, int *right_buffer, uint32_t count)
{
  size_t read_buffer_index = 0;
  while ((*fifospace_ptr & AUDIO_RARC_MASK) && (read_buffer_index < count))
     564:	d3a00217 	ldw	r14,-32760(gp)
     568:	70800017 	ldw	r2,0(r14)
     56c:	10803fcc 	andi	r2,r2,255
     570:	10001526 	beq	r2,zero,5c8 <audio_read+0x64>
     574:	30001426 	beq	r6,zero,5c8 <audio_read+0x64>
    {
      left_buffer[read_buffer_index]  = *leftdata_ptr;
     578:	d3600017 	ldw	r13,-32768(gp)
      right_buffer[read_buffer_index] = *rightdata_ptr;
     57c:	d3200117 	ldw	r12,-32764(gp)
     580:	0011883a 	mov	r8,zero
     584:	000f883a 	mov	r7,zero
     588:	02c00044 	movi	r11,1
     58c:	02803fc4 	movi	r10,255
     590:	02400104 	movi	r9,4
  *audio_ptr |= AUDIO_CW_MASK;
  *audio_ptr &= ~AUDIO_CW_MASK;
}

uint32_t audio_read (int *left_buffer, int *right_buffer, uint32_t count)
{
     594:	3907883a 	add	r3,r7,r4
  size_t read_buffer_index = 0;
  while ((*fifospace_ptr & AUDIO_RARC_MASK) && (read_buffer_index < count))
    {
      left_buffer[read_buffer_index]  = *leftdata_ptr;
     598:	68800017 	ldw	r2,0(r13)
     59c:	18800015 	stw	r2,0(r3)
     5a0:	3947883a 	add	r3,r7,r5
      right_buffer[read_buffer_index] = *rightdata_ptr;
     5a4:	60800017 	ldw	r2,0(r12)
     5a8:	18800015 	stw	r2,0(r3)
      read_buffer_index++;
     5ac:	42d1883a 	add	r8,r8,r11
}

uint32_t audio_read (int *left_buffer, int *right_buffer, uint32_t count)
{
  size_t read_buffer_index = 0;
  while ((*fifospace_ptr & AUDIO_RARC_MASK) && (read_buffer_index < count))
     5b0:	70800017 	ldw	r2,0(r14)
     5b4:	1284703a 	and	r2,r2,r10
     5b8:	10000426 	beq	r2,zero,5cc <audio_read+0x68>
     5bc:	3a4f883a 	add	r7,r7,r9
     5c0:	32000226 	beq	r6,r8,5cc <audio_read+0x68>
     5c4:	003ff306 	br	594 <audio_read+0x30>
     5c8:	0011883a 	mov	r8,zero
      left_buffer[read_buffer_index]  = *leftdata_ptr;
      right_buffer[read_buffer_index] = *rightdata_ptr;
      read_buffer_index++;
    }
  return read_buffer_index;
}
     5cc:	4005883a 	mov	r2,r8
     5d0:	f800283a 	ret

000005d4 <audio_write>:

uint32_t audio_write (int *left_buffer, int *right_buffer, uint32_t count)
{
  size_t write_buffer_index = 0;
  while ((*fifospace_ptr & AUDIO_WSRC_MASK) && (write_buffer_index < count))
     5d4:	d3600217 	ldw	r13,-32760(gp)
     5d8:	68800017 	ldw	r2,0(r13)
     5dc:	10803fec 	andhi	r2,r2,255
     5e0:	10001526 	beq	r2,zero,638 <audio_write+0x64>
     5e4:	30001426 	beq	r6,zero,638 <audio_write+0x64>
    {
      *leftdata_ptr = left_buffer[write_buffer_index];
     5e8:	d3200017 	ldw	r12,-32768(gp)
      *rightdata_ptr = right_buffer[write_buffer_index];
     5ec:	d2e00117 	ldw	r11,-32764(gp)
     5f0:	000f883a 	mov	r7,zero
     5f4:	0007883a 	mov	r3,zero
     5f8:	02800044 	movi	r10,1
     5fc:	02403ff4 	movhi	r9,255
     600:	02000104 	movi	r8,4
    }
  return read_buffer_index;
}

uint32_t audio_write (int *left_buffer, int *right_buffer, uint32_t count)
{
     604:	1905883a 	add	r2,r3,r4
  size_t write_buffer_index = 0;
  while ((*fifospace_ptr & AUDIO_WSRC_MASK) && (write_buffer_index < count))
    {
      *leftdata_ptr = left_buffer[write_buffer_index];
     608:	10800017 	ldw	r2,0(r2)
     60c:	60800015 	stw	r2,0(r12)
     610:	1945883a 	add	r2,r3,r5
      *rightdata_ptr = right_buffer[write_buffer_index];
     614:	10800017 	ldw	r2,0(r2)
     618:	58800015 	stw	r2,0(r11)
      write_buffer_index++;
     61c:	3a8f883a 	add	r7,r7,r10
}

uint32_t audio_write (int *left_buffer, int *right_buffer, uint32_t count)
{
  size_t write_buffer_index = 0;
  while ((*fifospace_ptr & AUDIO_WSRC_MASK) && (write_buffer_index < count))
     620:	68800017 	ldw	r2,0(r13)
     624:	1244703a 	and	r2,r2,r9
     628:	10000426 	beq	r2,zero,63c <audio_write+0x68>
     62c:	1a07883a 	add	r3,r3,r8
     630:	31c00226 	beq	r6,r7,63c <audio_write+0x68>
     634:	003ff306 	br	604 <audio_write+0x30>
     638:	000f883a 	mov	r7,zero
      *leftdata_ptr = left_buffer[write_buffer_index];
      *rightdata_ptr = right_buffer[write_buffer_index];
      write_buffer_index++;
    }
  return write_buffer_index;
}
     63c:	3805883a 	mov	r2,r7
     640:	f800283a 	ret

00000644 <audio_init>:
/***************************************
 ****  PUBLIC FUNCTION DEFINITIONS  ****
 ***************************************/

void audio_init (void *isr)
{
     644:	deffff04 	addi	sp,sp,-4
     648:	dfc00015 	stw	ra,0(sp)
     64c:	200d883a 	mov	r6,r4
  audio_isr = isr;
     650:	d107f915 	stw	r4,8164(gp)

  // Register internal interrupt handler
  alt_irq_register (AUDIO_IRQ, NULL, (alt_isr_func) audio_isr);
     654:	01000184 	movi	r4,6
     658:	000b883a 	mov	r5,zero
     65c:	000cd440 	call	cd44 <alt_irq_register>

  // Enable interrupts from audio module
  *audio_ptr |= AUDIO_RE_MASK;
     660:	d0e00317 	ldw	r3,-32756(gp)
     664:	18800017 	ldw	r2,0(r3)
     668:	10800054 	ori	r2,r2,1
     66c:	18800015 	stw	r2,0(r3)
}
     670:	dfc00017 	ldw	ra,0(sp)
     674:	dec00104 	addi	sp,sp,4
     678:	f800283a 	ret

0000067c <char_lcd_move_cursor>:
void char_lcd_move_cursor (int x, int y)
{
  char address = 0;
  
  address |= (x < LCD_X_MAX) ? x : LCD_X_MAX;
  address |= (y == 0) ? LCD_TOP_ROW : LCD_BOTTOM_ROW;  
     67c:	280ac03a 	cmpne	r5,r5,zero
     680:	280a91ba 	slli	r5,r5,6
  
  // write to the LCD instruction register
  *(instruction_ptr) = LCD_SET_CURSOR | address;		
     684:	d0e00417 	ldw	r3,-32752(gp)
     688:	008009c4 	movi	r2,39
     68c:	1100010e 	bge	r2,r4,694 <char_lcd_move_cursor+0x18>
     690:	1009883a 	mov	r4,r2
     694:	00bfe004 	movi	r2,-128
     698:	2084b03a 	or	r2,r4,r2
     69c:	1144b03a 	or	r2,r2,r5
     6a0:	18800005 	stb	r2,0(r3)
}
     6a4:	f800283a 	ret

000006a8 <char_lcd_write>:
/******************************************************************************
 * Subroutine to send a string of text to the LCD 
******************************************************************************/
void char_lcd_write (char *text)
{
	while (*(text))
     6a8:	20800007 	ldb	r2,0(r4)
     6ac:	10000726 	beq	r2,zero,6cc <char_lcd_write+0x24>
     6b0:	01400044 	movi	r5,1
	{
		*(data_ptr) = *(text);	// write to the LCD data register
     6b4:	20800003 	ldbu	r2,0(r4)
     6b8:	d0e00517 	ldw	r3,-32748(gp)
     6bc:	18800005 	stb	r2,0(r3)
	  text++;
     6c0:	2149883a 	add	r4,r4,r5
/******************************************************************************
 * Subroutine to send a string of text to the LCD 
******************************************************************************/
void char_lcd_write (char *text)
{
	while (*(text))
     6c4:	20800007 	ldb	r2,0(r4)
     6c8:	103ffa1e 	bne	r2,zero,6b4 <char_lcd_write+0xc>
     6cc:	f800283a 	ret

000006d0 <char_lcd_cursor_off>:
/******************************************************************************
 * Subroutine to turn off the LCD cursor
******************************************************************************/
void char_lcd_cursor_off (void)
{
	*(instruction_ptr) = LCD_CURSOR_OFF;	 // turn off the LCD cursor
     6d0:	00c00304 	movi	r3,12
     6d4:	d0a00417 	ldw	r2,-32752(gp)
     6d8:	10c00005 	stb	r3,0(r2)
}
     6dc:	f800283a 	ret

000006e0 <char_lcd_shift_left>:
/******************************************************************************
 * Subroutine to shift the LCD cursor one pixel to the left.
******************************************************************************/
void char_lcd_shift_left (void)
{
	*(instruction_ptr) = LCD_SHIFT_LEFT;	 // shift display to the left
     6e0:	00c00604 	movi	r3,24
     6e4:	d0a00417 	ldw	r2,-32752(gp)
     6e8:	10c00005 	stb	r3,0(r2)
}
     6ec:	f800283a 	ret

000006f0 <char_lcd_shift_right>:
/******************************************************************************
 * Subroutine to shift the LCD cursor one pixel to the right.
******************************************************************************/
void char_lcd_shift_right (void)
{
	*(instruction_ptr) = LCD_SHIFT_RIGHT;	 // shift display to the right
     6f0:	00c00704 	movi	r3,28
     6f4:	d0a00417 	ldw	r2,-32752(gp)
     6f8:	10c00005 	stb	r3,0(r2)
}
     6fc:	f800283a 	ret

00000700 <green_leds_set>:
static volatile int *data_reg = (int*) GREEN_LEDS_BASE;


void green_leds_set (uint32_t mask)
{
  *data_reg = mask;
     700:	d0a00617 	ldw	r2,-32744(gp)
     704:	11000015 	stw	r4,0(r2)
}
     708:	f800283a 	ret

0000070c <green_leds_update>:

void green_leds_update (uint32_t mask)
{
  *data_reg |= mask;
     70c:	d0e00617 	ldw	r3,-32744(gp)
     710:	18800017 	ldw	r2,0(r3)
     714:	1104b03a 	or	r2,r2,r4
     718:	18800015 	stw	r2,0(r3)
}
     71c:	f800283a 	ret

00000720 <green_leds_clear>:

void green_leds_clear (uint32_t mask)
{
  *data_reg &= ~mask;
     720:	d0a00617 	ldw	r2,-32744(gp)
     724:	10c00017 	ldw	r3,0(r2)
     728:	0108303a 	nor	r4,zero,r4
     72c:	1906703a 	and	r3,r3,r4
     730:	10c00015 	stw	r3,0(r2)
}
     734:	f800283a 	ret

00000738 <green_leds_clear_all>:

void green_leds_clear_all (void)
{
  *data_reg = 0;
     738:	d0a00617 	ldw	r2,-32744(gp)
     73c:	10000015 	stw	zero,0(r2)
     740:	f800283a 	ret

00000744 <hex_clear>:
}


void hex_clear (void)
{
  *hex_3to0 = 0;
     744:	d0a00817 	ldw	r2,-32736(gp)
     748:	10000015 	stw	zero,0(r2)
  *hex_7to4 = 0;
     74c:	d0a00717 	ldw	r2,-32740(gp)
     750:	10000015 	stw	zero,0(r2)
}
     754:	f800283a 	ret

00000758 <hex_clear_3to0>:

void hex_clear_3to0 (void)
{
  *hex_3to0 = 0;
     758:	d0a00817 	ldw	r2,-32736(gp)
     75c:	10000015 	stw	zero,0(r2)
}
     760:	f800283a 	ret

00000764 <hex_clear_7to4>:

void hex_clear_7to4 (void)
{
  *hex_7to4 = 0;
     764:	d0a00717 	ldw	r2,-32740(gp)
     768:	10000015 	stw	zero,0(r2)
}
     76c:	f800283a 	ret

00000770 <lookup_16>:



static uint32_t lookup_16 (uint32_t value)
{
     770:	200f883a 	mov	r7,r4
  if (value > 0xFFFF) 
     774:	00bfffd4 	movui	r2,65535
     778:	1100012e 	bgeu	r2,r4,780 <lookup_16+0x10>
    value %= 0x10000;
     77c:	208e703a 	and	r7,r4,r2
     780:	01400074 	movhi	r5,1
     784:	297dc704 	addi	r5,r5,-2276
     788:	3804d13a 	srli	r2,r7,4
     78c:	010003c4 	movi	r4,15
     790:	1104703a 	and	r2,r2,r4
     794:	1145883a 	add	r2,r2,r5
     798:	11800003 	ldbu	r6,0(r2)
     79c:	300c923a 	slli	r6,r6,8
     7a0:	3804d33a 	srli	r2,r7,12
     7a4:	1104703a 	and	r2,r2,r4
     7a8:	1145883a 	add	r2,r2,r5
     7ac:	10800003 	ldbu	r2,0(r2)
     7b0:	1004963a 	slli	r2,r2,24
     7b4:	3806d23a 	srli	r3,r7,8
     7b8:	1906703a 	and	r3,r3,r4
     7bc:	1947883a 	add	r3,r3,r5
     7c0:	18c00003 	ldbu	r3,0(r3)
     7c4:	1806943a 	slli	r3,r3,16
     7c8:	10c4b03a 	or	r2,r2,r3
     7cc:	3908703a 	and	r4,r7,r4
     7d0:	2149883a 	add	r4,r4,r5
     7d4:	20c00003 	ldbu	r3,0(r4)
     7d8:	10c4b03a 	or	r2,r2,r3
    
  return (table[(value >>12) & 0xF] << 24 |  // lookup segments for nibble 3
          table[(value >> 8) & 0xF] << 16 |  // lookup segments for nibble 2 
          table[(value >> 4) & 0xF] <<  8 |  // lookup segments for nibble 1
          table[ value & 0xF      ]);        // lookup segments for nibble 0
}
     7dc:	3084b03a 	or	r2,r6,r2
     7e0:	f800283a 	ret

000007e4 <lookup_10>:

static uint32_t lookup_10 (uint32_t value)
{
     7e4:	2013883a 	mov	r9,r4
  if (value > 9999) 
     7e8:	0089c3c4 	movi	r2,9999
     7ec:	1100042e 	bgeu	r2,r4,800 <lookup_10+0x1c>
    value %= 10000;
     7f0:	00c9c404 	movi	r3,10000
     7f4:	20c5203a 	divu	r2,r4,r3
     7f8:	10c5383a 	mul	r2,r2,r3
     7fc:	2093c83a 	sub	r9,r4,r2
     800:	01c00074 	movhi	r7,1
     804:	39fdc704 	addi	r7,r7,-2276
     808:	01401904 	movi	r5,100
     80c:	4945203a 	divu	r2,r9,r5
     810:	1145383a 	mul	r2,r2,r5
     814:	4885c83a 	sub	r2,r9,r2
     818:	01800284 	movi	r6,10
     81c:	1185203a 	divu	r2,r2,r6
     820:	11c5883a 	add	r2,r2,r7
     824:	12000003 	ldbu	r8,0(r2)
     828:	4010923a 	slli	r8,r8,8
     82c:	0100fa04 	movi	r4,1000
     830:	4907203a 	divu	r3,r9,r4
     834:	19c5883a 	add	r2,r3,r7
     838:	10800003 	ldbu	r2,0(r2)
     83c:	1004963a 	slli	r2,r2,24
     840:	1907383a 	mul	r3,r3,r4
     844:	48c7c83a 	sub	r3,r9,r3
     848:	1947203a 	divu	r3,r3,r5
     84c:	19c7883a 	add	r3,r3,r7
     850:	18c00003 	ldbu	r3,0(r3)
     854:	1806943a 	slli	r3,r3,16
     858:	10c4b03a 	or	r2,r2,r3
     85c:	4987203a 	divu	r3,r9,r6
     860:	1987383a 	mul	r3,r3,r6
     864:	48c7c83a 	sub	r3,r9,r3
     868:	19c7883a 	add	r3,r3,r7
     86c:	18c00003 	ldbu	r3,0(r3)
     870:	10c4b03a 	or	r2,r2,r3
    
  return (table[ value / 1000       ] << 24 |  // lookup segments for thousands digit
          table[(value % 1000) / 100] << 16 |  // lookup segments for hundreds digit
          table[(value % 100)  /  10] <<  8 |  // lookup segments for tens digit
          table[ value % 10         ]);        // lookup segments for ones digit 
}
     874:	4084b03a 	or	r2,r8,r2
     878:	f800283a 	ret

0000087c <hex_write_7to4>:
      break;
  }
}

void hex_write_7to4 (uint32_t value, enum number_base base)
{
     87c:	deffff04 	addi	sp,sp,-4
     880:	dfc00015 	stw	ra,0(sp)
  /* Lookup hex segments for bits 15-0 of value. */
  switch (base)
     884:	00800084 	movi	r2,2
     888:	28800326 	beq	r5,r2,898 <hex_write_7to4+0x1c>
     88c:	008000c4 	movi	r2,3
     890:	2880081e 	bne	r5,r2,8b4 <hex_write_7to4+0x38>
     894:	00000406 	br	8a8 <hex_write_7to4+0x2c>
  {
    case NUM_BASE_10: 
      *hex_7to4 = lookup_10 (value);
     898:	00007e40 	call	7e4 <lookup_10>
     89c:	d0e00717 	ldw	r3,-32740(gp)
     8a0:	18800015 	stw	r2,0(r3)
     8a4:	00000306 	br	8b4 <hex_write_7to4+0x38>
      break;
    case NUM_BASE_16:
      *hex_7to4 = lookup_16 (value);
     8a8:	00007700 	call	770 <lookup_16>
     8ac:	d0e00717 	ldw	r3,-32740(gp)
     8b0:	18800015 	stw	r2,0(r3)
      break;
  }
}
     8b4:	dfc00017 	ldw	ra,0(sp)
     8b8:	dec00104 	addi	sp,sp,4
     8bc:	f800283a 	ret

000008c0 <hex_write_3to0>:
      break;
  }
}

void hex_write_3to0 (uint32_t value, enum number_base base)
{
     8c0:	deffff04 	addi	sp,sp,-4
     8c4:	dfc00015 	stw	ra,0(sp)
  /* Lookup hex segments for bits 15-0 of value. */
  switch (base)
     8c8:	00800084 	movi	r2,2
     8cc:	28800326 	beq	r5,r2,8dc <hex_write_3to0+0x1c>
     8d0:	008000c4 	movi	r2,3
     8d4:	2880081e 	bne	r5,r2,8f8 <hex_write_3to0+0x38>
     8d8:	00000406 	br	8ec <hex_write_3to0+0x2c>
  {
    case NUM_BASE_10: 
      *hex_3to0 = lookup_10 (value);
     8dc:	00007e40 	call	7e4 <lookup_10>
     8e0:	d0e00817 	ldw	r3,-32736(gp)
     8e4:	18800015 	stw	r2,0(r3)
     8e8:	00000306 	br	8f8 <hex_write_3to0+0x38>
      break;
    case NUM_BASE_16:
      *hex_3to0 = lookup_16 (value);
     8ec:	00007700 	call	770 <lookup_16>
     8f0:	d0e00817 	ldw	r3,-32736(gp)
     8f4:	18800015 	stw	r2,0(r3)
      break;
  }
}
     8f8:	dfc00017 	ldw	ra,0(sp)
     8fc:	dec00104 	addi	sp,sp,4
     900:	f800283a 	ret

00000904 <hex_write>:
static uint32_t lookup_10 (uint32_t value);
static uint32_t lookup_16 (uint32_t value);


void hex_write (uint32_t value, enum number_base base)
{
     904:	defffd04 	addi	sp,sp,-12
     908:	dfc00215 	stw	ra,8(sp)
     90c:	dc400115 	stw	r17,4(sp)
     910:	dc000015 	stw	r16,0(sp)
     914:	2023883a 	mov	r17,r4
  /* Lookup hex segments for bits 15-0 of value. */
  switch (base)
     918:	00800084 	movi	r2,2
     91c:	28800326 	beq	r5,r2,92c <hex_write+0x28>
     920:	008000c4 	movi	r2,3
     924:	2880151e 	bne	r5,r2,97c <hex_write+0x78>
     928:	00000c06 	br	95c <hex_write+0x58>
  {
    case NUM_BASE_10: 
      *hex_3to0 = lookup_10 (value % 10000);
     92c:	0109c404 	movi	r4,10000
     930:	8921203a 	divu	r16,r17,r4
     934:	8109383a 	mul	r4,r16,r4
     938:	8909c83a 	sub	r4,r17,r4
     93c:	00007e40 	call	7e4 <lookup_10>
     940:	d0e00817 	ldw	r3,-32736(gp)
     944:	18800015 	stw	r2,0(r3)
      *hex_7to4 = lookup_10 (value / 10000);
     948:	8009883a 	mov	r4,r16
     94c:	00007e40 	call	7e4 <lookup_10>
     950:	d0e00717 	ldw	r3,-32740(gp)
     954:	18800015 	stw	r2,0(r3)
     958:	00000806 	br	97c <hex_write+0x78>
      break;
    case NUM_BASE_16:
      *hex_3to0 = lookup_16 (value & 0x0000FFFF);
     95c:	213fffcc 	andi	r4,r4,65535
     960:	00007700 	call	770 <lookup_16>
     964:	d0e00817 	ldw	r3,-32736(gp)
     968:	18800015 	stw	r2,0(r3)
      *hex_7to4 = lookup_16 (value >> 16);
     96c:	8808d43a 	srli	r4,r17,16
     970:	00007700 	call	770 <lookup_16>
     974:	d0e00717 	ldw	r3,-32740(gp)
     978:	18800015 	stw	r2,0(r3)
      break;
  }
}
     97c:	dfc00217 	ldw	ra,8(sp)
     980:	dc400117 	ldw	r17,4(sp)
     984:	dc000017 	ldw	r16,0(sp)
     988:	dec00304 	addi	sp,sp,12
     98c:	f800283a 	ret

00000990 <lcd_enable_dma>:
/*****************************************************************************
 * Enables DMA transfer of video data from memory to LCD.                    *
******************************************************************************/
void lcd_enable_dma (bool enable)
{
  if (enable)
     990:	21003fcc 	andi	r4,r4,255
     994:	20000526 	beq	r4,zero,9ac <lcd_enable_dma+0x1c>
    *status_reg |= DMA_STATUS_ENABLE_MASK;
     998:	d0e00c17 	ldw	r3,-32720(gp)
     99c:	18800017 	ldw	r2,0(r3)
     9a0:	10800114 	ori	r2,r2,4
     9a4:	18800015 	stw	r2,0(r3)
     9a8:	f800283a 	ret
  else
    *status_reg &= ~DMA_STATUS_ENABLE_MASK;
     9ac:	d0a00c17 	ldw	r2,-32720(gp)
     9b0:	10c00017 	ldw	r3,0(r2)
     9b4:	013ffec4 	movi	r4,-5
     9b8:	1906703a 	and	r3,r3,r4
     9bc:	10c00015 	stw	r3,0(r2)
     9c0:	f800283a 	ret

000009c4 <lcd_set_front_buffer>:
/*****************************************************************************
 * Sets the front buffer base address.                                       *
******************************************************************************/
void lcd_set_front_buffer (int *buff)
{
  *back_buff_reg = buff;
     9c4:	d0a00917 	ldw	r2,-32732(gp)
     9c8:	11000015 	stw	r4,0(r2)
  *front_buff_reg = 1;
     9cc:	00c00044 	movi	r3,1
     9d0:	d0a00b17 	ldw	r2,-32724(gp)
     9d4:	10c00015 	stw	r3,0(r2)
}
     9d8:	f800283a 	ret

000009dc <lcd_set_back_buffer>:
/*****************************************************************************
 * Sets the back buffer base address.                                        *
******************************************************************************/
void lcd_set_back_buffer (int *buff)
{
  *back_buff_reg = buff;
     9dc:	d0a00917 	ldw	r2,-32732(gp)
     9e0:	11000015 	stw	r4,0(r2)
}
     9e4:	f800283a 	ret

000009e8 <lcd_swap_buffers>:
 * Swaps the front and back buffer base addresses.                           *
******************************************************************************/
void lcd_swap_buffers(void)
{
	/* Request a buffer swap */
	*front_buff_reg = 1;
     9e8:	00c00044 	movi	r3,1
     9ec:	d0a00b17 	ldw	r2,-32724(gp)
     9f0:	10c00015 	stw	r3,0(r2)

	/* Wait for vertical synchronization */
	while ((*status_reg & 0x01) != 0);
     9f4:	d1200c17 	ldw	r4,-32720(gp)
     9f8:	20800017 	ldw	r2,0(r4)
     9fc:	10c4703a 	and	r2,r2,r3
     a00:	103ffd1e 	bne	r2,zero,9f8 <lcd_swap_buffers+0x10>
}
     a04:	f800283a 	ret

00000a08 <lcd_write>:
  int char_x = x * 8;
  int char_y = y * 8;

  /* assume that the text string fits on one line */
  offset = (y << 6) + x;
  while ( *(text) )
     a08:	30800007 	ldb	r2,0(r6)
     a0c:	10000b26 	beq	r2,zero,a3c <lcd_write+0x34>
     a10:	280491ba 	slli	r2,r5,6
     a14:	2085883a 	add	r2,r4,r2
     a18:	d0e00a17 	ldw	r3,-32728(gp)
     a1c:	10c9883a 	add	r4,r2,r3
     a20:	00c00044 	movi	r3,1
  {
    *(char_buff_base + offset) = *(text);  // write to the character buffer
     a24:	30800003 	ldbu	r2,0(r6)
     a28:	20800005 	stb	r2,0(r4)
    text++;
     a2c:	30cd883a 	add	r6,r6,r3
  int char_x = x * 8;
  int char_y = y * 8;

  /* assume that the text string fits on one line */
  offset = (y << 6) + x;
  while ( *(text) )
     a30:	20c9883a 	add	r4,r4,r3
     a34:	30800007 	ldb	r2,0(r6)
     a38:	103ffa1e 	bne	r2,zero,a24 <lcd_write+0x1c>
     a3c:	f800283a 	ret

00000a40 <lcd_draw_rectangle>:

/*****************************************************************************
 * Draws a filled rectangle on the LCD.                                      *
******************************************************************************/
void lcd_draw_rectangle(int x, int y, int width, int height, short color)
{
     a40:	da80000b 	ldhu	r10,0(sp)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);
     a44:	d0a00b17 	ldw	r2,-32724(gp)
     a48:	12400017 	ldw	r9,0(r2)

  for(i = x; i <= (x + width - 1); i++)
     a4c:	218d883a 	add	r6,r4,r6
     a50:	31bfffc4 	addi	r6,r6,-1
     a54:	31001116 	blt	r6,r4,a9c <lcd_draw_rectangle+0x5c>
     a58:	29c5883a 	add	r2,r5,r7
     a5c:	11ffffc4 	addi	r7,r2,-1
     a60:	02c00044 	movi	r11,1
     a64:	00000b06 	br	a94 <lcd_draw_rectangle+0x54>
     a68:	2807883a 	mov	r3,r5
     a6c:	02000044 	movi	r8,1
  {
    for(j = y; j <= (y + height -1); j++)
    {
      offset = (j << 9) + i;
      *(pixel_buffer + offset) = color;
     a70:	1804927a 	slli	r2,r3,9
     a74:	1105883a 	add	r2,r2,r4
     a78:	1085883a 	add	r2,r2,r2
     a7c:	4885883a 	add	r2,r9,r2
     a80:	1280000d 	sth	r10,0(r2)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);

  for(i = x; i <= (x + width - 1); i++)
  {
    for(j = y; j <= (y + height -1); j++)
     a84:	1a07883a 	add	r3,r3,r8
     a88:	38fff90e 	bge	r7,r3,a70 <lcd_draw_rectangle+0x30>
void lcd_draw_rectangle(int x, int y, int width, int height, short color)
{
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);

  for(i = x; i <= (x + width - 1); i++)
     a8c:	22c9883a 	add	r4,r4,r11
     a90:	31000216 	blt	r6,r4,a9c <lcd_draw_rectangle+0x5c>
  {
    for(j = y; j <= (y + height -1); j++)
     a94:	397ff40e 	bge	r7,r5,a68 <lcd_draw_rectangle+0x28>
     a98:	003ffc06 	br	a8c <lcd_draw_rectangle+0x4c>
     a9c:	f800283a 	ret

00000aa0 <lcd_draw_rectangle_back>:
    }
  }
}

void lcd_draw_rectangle_back(int x, int y, int width, int height, short color)
{
     aa0:	da80000b 	ldhu	r10,0(sp)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*back_buff_reg);
     aa4:	d0a00917 	ldw	r2,-32732(gp)
     aa8:	12400017 	ldw	r9,0(r2)

  for(i = x; i <= (x + width - 1); i++)
     aac:	218d883a 	add	r6,r4,r6
     ab0:	31bfffc4 	addi	r6,r6,-1
     ab4:	31001116 	blt	r6,r4,afc <lcd_draw_rectangle_back+0x5c>
     ab8:	29c5883a 	add	r2,r5,r7
     abc:	11ffffc4 	addi	r7,r2,-1
     ac0:	02c00044 	movi	r11,1
     ac4:	00000b06 	br	af4 <lcd_draw_rectangle_back+0x54>
     ac8:	2807883a 	mov	r3,r5
     acc:	02000044 	movi	r8,1
  {
    for(j = y; j <= (y + height -1); j++)
    {
      offset = (j << 9) + i;
      *(pixel_buffer + offset) = color;
     ad0:	1804927a 	slli	r2,r3,9
     ad4:	1105883a 	add	r2,r2,r4
     ad8:	1085883a 	add	r2,r2,r2
     adc:	4885883a 	add	r2,r9,r2
     ae0:	1280000d 	sth	r10,0(r2)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*back_buff_reg);

  for(i = x; i <= (x + width - 1); i++)
  {
    for(j = y; j <= (y + height -1); j++)
     ae4:	1a07883a 	add	r3,r3,r8
     ae8:	38fff90e 	bge	r7,r3,ad0 <lcd_draw_rectangle_back+0x30>
void lcd_draw_rectangle_back(int x, int y, int width, int height, short color)
{
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*back_buff_reg);

  for(i = x; i <= (x + width - 1); i++)
     aec:	22c9883a 	add	r4,r4,r11
     af0:	31000216 	blt	r6,r4,afc <lcd_draw_rectangle_back+0x5c>
  {
    for(j = y; j <= (y + height -1); j++)
     af4:	397ff40e 	bge	r7,r5,ac8 <lcd_draw_rectangle_back+0x28>
     af8:	003ffc06 	br	aec <lcd_draw_rectangle_back+0x4c>
     afc:	f800283a 	ret

00000b00 <lcd_char_buffer_clear>:
  int i, j, offset;
  for (i = 0; i < LCD_CHAR_BUFF_RES_X; i++)
    for (j = 0; j < LCD_CHAR_BUFF_RES_Y; j++)
      {
        offset = (j << 6) + i;
        *(char_buff_base + offset) = ' ';  // write to the character buffer
     b00:	d1a00a17 	ldw	r6,-32728(gp)
     b04:	000b883a 	mov	r5,zero
     b08:	00000c06 	br	b3c <lcd_char_buffer_clear+0x3c>
     b0c:	200491ba 	slli	r2,r4,6
     b10:	1145883a 	add	r2,r2,r5
     b14:	3085883a 	add	r2,r6,r2
     b18:	00c00804 	movi	r3,32
     b1c:	10c00005 	stb	r3,0(r2)
  int char_x = 0;
  int char_y = 0;

  int i, j, offset;
  for (i = 0; i < LCD_CHAR_BUFF_RES_X; i++)
    for (j = 0; j < LCD_CHAR_BUFF_RES_Y; j++)
     b20:	00c00044 	movi	r3,1
     b24:	20c9883a 	add	r4,r4,r3
     b28:	00800784 	movi	r2,30
     b2c:	20bff71e 	bne	r4,r2,b0c <lcd_char_buffer_clear+0xc>
{
  int char_x = 0;
  int char_y = 0;

  int i, j, offset;
  for (i = 0; i < LCD_CHAR_BUFF_RES_X; i++)
     b30:	28cb883a 	add	r5,r5,r3
     b34:	00800c84 	movi	r2,50
     b38:	28800226 	beq	r5,r2,b44 <lcd_char_buffer_clear+0x44>
    for (j = 0; j < LCD_CHAR_BUFF_RES_Y; j++)
      {
        offset = (j << 6) + i;
        *(char_buff_base + offset) = ' ';  // write to the character buffer
      }
}
     b3c:	0009883a 	mov	r4,zero
     b40:	003ff206 	br	b0c <lcd_char_buffer_clear+0xc>
     b44:	f800283a 	ret

00000b48 <lcd_get_backbuffer_addr>:

void *lcd_get_backbuffer_addr (void)
{
  return *back_buff_reg;
     b48:	d0a00917 	ldw	r2,-32732(gp)
     b4c:	10800017 	ldw	r2,0(r2)
}
     b50:	f800283a 	ret

00000b54 <pushbuttons_get_data>:
  alt_irq_register (PUSHBUTTONS_IRQ, NULL, isr);
}

uint32_t pushbuttons_get_data (void)
{
  return *data_reg;
     b54:	d0a00f17 	ldw	r2,-32708(gp)
     b58:	10800017 	ldw	r2,0(r2)
}
     b5c:	f800283a 	ret

00000b60 <pushbuttons_set_interrupt_mask>:

void pushbuttons_set_interrupt_mask (uint32_t mask)
{
  *interrupt_mask_reg = mask;
     b60:	d0a00e17 	ldw	r2,-32712(gp)
     b64:	11000015 	stw	r4,0(r2)
}
     b68:	f800283a 	ret

00000b6c <pushbuttons_get_interrupt_mask>:

uint32_t pushbuttons_get_interrupt_mask (void)
{
  return *interrupt_mask_reg;
     b6c:	d0a00e17 	ldw	r2,-32712(gp)
     b70:	10800017 	ldw	r2,0(r2)
}
     b74:	f800283a 	ret

00000b78 <pushbuttons_get_edge_capture>:

uint32_t pushbuttons_get_edge_capture (void)
{
  return *edge_capture_reg;
     b78:	d0a00d17 	ldw	r2,-32716(gp)
     b7c:	10800017 	ldw	r2,0(r2)
}
     b80:	f800283a 	ret

00000b84 <pushbuttons_clear_edge_capture>:

void pushbuttons_clear_edge_capture (void)
{
  *edge_capture_reg = 1;
     b84:	00c00044 	movi	r3,1
     b88:	d0a00d17 	ldw	r2,-32716(gp)
     b8c:	10c00015 	stw	r3,0(r2)
}
     b90:	f800283a 	ret

00000b94 <pushbuttons_enable_interrupts>:
static volatile int *interrupt_mask_reg = (int*) (PUSHBUTTONS_BASE +  8);
static volatile int *edge_capture_reg   = (int*) (PUSHBUTTONS_BASE + 12);


void pushbuttons_enable_interrupts (void *isr)
{
     b94:	defffe04 	addi	sp,sp,-8
     b98:	dfc00115 	stw	ra,4(sp)
     b9c:	dc000015 	stw	r16,0(sp)
     ba0:	2021883a 	mov	r16,r4
  pushbuttons_set_interrupt_mask (DEFAULT_INTERRUPT_MASK);
     ba4:	01000384 	movi	r4,14
     ba8:	0000b600 	call	b60 <pushbuttons_set_interrupt_mask>
  alt_irq_register (PUSHBUTTONS_IRQ, NULL, isr);
     bac:	01000044 	movi	r4,1
     bb0:	000b883a 	mov	r5,zero
     bb4:	800d883a 	mov	r6,r16
     bb8:	000cd440 	call	cd44 <alt_irq_register>
}
     bbc:	dfc00117 	ldw	ra,4(sp)
     bc0:	dc000017 	ldw	r16,0(sp)
     bc4:	dec00204 	addi	sp,sp,8
     bc8:	f800283a 	ret

00000bcc <red_leds_set>:
static volatile int *data_reg = (int*) RED_LEDS_BASE;


void red_leds_set (uint32_t mask)
{
  *data_reg = mask;
     bcc:	d0a01017 	ldw	r2,-32704(gp)
     bd0:	11000015 	stw	r4,0(r2)
}
     bd4:	f800283a 	ret

00000bd8 <red_leds_update>:

void red_leds_update (uint32_t mask)
{
  *data_reg |= mask;
     bd8:	d0e01017 	ldw	r3,-32704(gp)
     bdc:	18800017 	ldw	r2,0(r3)
     be0:	1104b03a 	or	r2,r2,r4
     be4:	18800015 	stw	r2,0(r3)
}
     be8:	f800283a 	ret

00000bec <red_leds_clear>:

void red_leds_clear (uint32_t mask)
{
  *data_reg &= ~mask;
     bec:	d0a01017 	ldw	r2,-32704(gp)
     bf0:	10c00017 	ldw	r3,0(r2)
     bf4:	0108303a 	nor	r4,zero,r4
     bf8:	1906703a 	and	r3,r3,r4
     bfc:	10c00015 	stw	r3,0(r2)
}
     c00:	f800283a 	ret

00000c04 <red_leds_clear_all>:

void red_leds_clear_all (void)
{
  *data_reg = 0;
     c04:	d0a01017 	ldw	r2,-32704(gp)
     c08:	10000015 	stw	zero,0(r2)
}
     c0c:	f800283a 	ret

00000c10 <get_char>:
#include "rs232.h"

char get_char(void) {
volatile int* RS232_UART_ptr = (int*) SERIAL_PORT_BASE; // RS232 UART address
int data;
data = *(RS232_UART_ptr); // read the RS232_UART data register
     c10:	00840034 	movhi	r2,4096
     c14:	10840404 	addi	r2,r2,4112
     c18:	10c00017 	ldw	r3,0(r2)
if (data & 0x00008000) // check RVALID to see if there is new data
     c1c:	18a0000c 	andi	r2,r3,32768
     c20:	10000326 	beq	r2,zero,c30 <get_char+0x20>
	return((char) data & 0xFF);
     c24:	18803fcc 	andi	r2,r3,255
     c28:	1080201c 	xori	r2,r2,128
     c2c:	10bfe004 	addi	r2,r2,-128
else
	return('\0');
}
     c30:	f800283a 	ret

00000c34 <put_char>:

unsigned char put_char(char c) {
	volatile int* RS232_UART_ptr = (int *) SERIAL_PORT_BASE; // RS232 UART address
	int control;
	control = *(RS232_UART_ptr + 1);   // read the RS232_UART control register
     c34:	00840034 	movhi	r2,4096
     c38:	10840504 	addi	r2,r2,4116
     c3c:	10800017 	ldw	r2,0(r2)
	if (control & 0x00FF0000) {
     c40:	10803fec 	andhi	r2,r2,255
     c44:	1000021e 	bne	r2,zero,c50 <put_char+0x1c>
     c48:	00800044 	movi	r2,1
     c4c:	f800283a 	ret
		*(RS232_UART_ptr) = c;
     c50:	20c03fcc 	andi	r3,r4,255
     c54:	18c0201c 	xori	r3,r3,128
     c58:	18ffe004 	addi	r3,r3,-128
     c5c:	00840034 	movhi	r2,4096
     c60:	10840404 	addi	r2,r2,4112
     c64:	10c00015 	stw	r3,0(r2)
     c68:	0005883a 	mov	r2,zero
		//success
		return (unsigned char) 0;
	}
	return (unsigned char) 1;
}
     c6c:	f800283a 	ret

00000c70 <switches_get_positions>:
  alt_irq_register (SLIDER_SWITCHES_IRQ, NULL, isr);
}

uint32_t switches_get_positions (void)
{
  return *data_reg;
     c70:	d0a01317 	ldw	r2,-32692(gp)
     c74:	10800017 	ldw	r2,0(r2)
}
     c78:	f800283a 	ret

00000c7c <switches_set_interrupt_mask>:

void switches_set_interrupt_mask (uint32_t mask)
{
  *interrupt_mask_reg = mask;
     c7c:	d0a01217 	ldw	r2,-32696(gp)
     c80:	11000015 	stw	r4,0(r2)
}
     c84:	f800283a 	ret

00000c88 <switches_get_interrupt_mask>:

uint32_t switches_get_interrupt_mask (void)
{
  return *interrupt_mask_reg;
     c88:	d0a01217 	ldw	r2,-32696(gp)
     c8c:	10800017 	ldw	r2,0(r2)
}
     c90:	f800283a 	ret

00000c94 <switches_get_edge_capture>:

uint32_t switches_get_edge_capture (void)
{
  return *edge_capture_reg;
     c94:	d0a01117 	ldw	r2,-32700(gp)
     c98:	10800017 	ldw	r2,0(r2)
}
     c9c:	f800283a 	ret

00000ca0 <switches_clear_edge_capture>:

void switches_clear_edge_capture (void)
{
  *edge_capture_reg = 1;
     ca0:	00c00044 	movi	r3,1
     ca4:	d0a01117 	ldw	r2,-32700(gp)
     ca8:	10c00015 	stw	r3,0(r2)
}
     cac:	f800283a 	ret

00000cb0 <switches_enable_interrupts>:
static volatile int *interrupt_mask_reg = (int*) (SLIDER_SWITCHES_BASE +  8);
static volatile int *edge_capture_reg   = (int*) (SLIDER_SWITCHES_BASE + 12);


void switches_enable_interrupts (void *isr)
{
     cb0:	defffe04 	addi	sp,sp,-8
     cb4:	dfc00115 	stw	ra,4(sp)
     cb8:	dc000015 	stw	r16,0(sp)
     cbc:	2021883a 	mov	r16,r4
  switches_set_interrupt_mask (DEFAULT_INTERRUPT_MASK);
     cc0:	01000134 	movhi	r4,4
     cc4:	213fffc4 	addi	r4,r4,-1
     cc8:	0000c7c0 	call	c7c <switches_set_interrupt_mask>
  alt_irq_register (SLIDER_SWITCHES_IRQ, NULL, isr);
     ccc:	01000144 	movi	r4,5
     cd0:	000b883a 	mov	r5,zero
     cd4:	800d883a 	mov	r6,r16
     cd8:	000cd440 	call	cd44 <alt_irq_register>
}
     cdc:	dfc00117 	ldw	ra,4(sp)
     ce0:	dc000017 	ldw	r16,0(sp)
     ce4:	dec00204 	addi	sp,sp,8
     ce8:	f800283a 	ret

00000cec <vga_enable_dma>:
static volatile char *char_buff_base = (char*) VGA_CHAR_BUFFER_AVALON_CHAR_BUFFER_SLAVE_BASE;


void vga_enable_dma (bool enable)
{
  if (enable)
     cec:	21003fcc 	andi	r4,r4,255
     cf0:	20000526 	beq	r4,zero,d08 <vga_enable_dma+0x1c>
    *status_reg |= DMA_STATUS_ENABLE_MASK;
     cf4:	d0e01617 	ldw	r3,-32680(gp)
     cf8:	18800017 	ldw	r2,0(r3)
     cfc:	10800114 	ori	r2,r2,4
     d00:	18800015 	stw	r2,0(r3)
     d04:	f800283a 	ret
  else
    *status_reg &= ~DMA_STATUS_ENABLE_MASK;
     d08:	d0a01617 	ldw	r2,-32680(gp)
     d0c:	10c00017 	ldw	r3,0(r2)
     d10:	013ffec4 	movi	r4,-5
     d14:	1906703a 	and	r3,r3,r4
     d18:	10c00015 	stw	r3,0(r2)
     d1c:	f800283a 	ret

00000d20 <vga_set_front_buffer>:
/******************************************************************************
 * Subroutine to set the back buffer base address.
******************************************************************************/
void vga_set_front_buffer (int *buff)
{
  *back_buff_reg = buff;
     d20:	d0a01717 	ldw	r2,-32676(gp)
     d24:	11000015 	stw	r4,0(r2)
  *front_buff_reg = 1;
     d28:	00c00044 	movi	r3,1
     d2c:	d0a01517 	ldw	r2,-32684(gp)
     d30:	10c00015 	stw	r3,0(r2)
}
     d34:	f800283a 	ret

00000d38 <vga_set_back_buffer>:

void vga_set_back_buffer (int *buff)
{
  *back_buff_reg = buff;
     d38:	d0a01717 	ldw	r2,-32676(gp)
     d3c:	11000015 	stw	r4,0(r2)
}
     d40:	f800283a 	ret

00000d44 <vga_swap_buffers>:

void vga_swap_buffers(void)
{
	// Request a buffer swap
	*front_buff_reg = 1;
     d44:	00c00044 	movi	r3,1
     d48:	d0a01517 	ldw	r2,-32684(gp)
     d4c:	10c00015 	stw	r3,0(r2)

	// Wait for vertical synchronization.
	while ((*status_reg & 0x01) != 0);
     d50:	d1201617 	ldw	r4,-32680(gp)
     d54:	20800017 	ldw	r2,0(r4)
     d58:	10c4703a 	and	r2,r2,r3
     d5c:	103ffd1e 	bne	r2,zero,d54 <vga_swap_buffers+0x10>
}
     d60:	f800283a 	ret

00000d64 <vga_write>:
  int char_x = x * 4;
  int char_y = y * 4;

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
  while ( *(text) )
     d64:	30800007 	ldb	r2,0(r6)
     d68:	10000b26 	beq	r2,zero,d98 <vga_write+0x34>
     d6c:	280491fa 	slli	r2,r5,7
     d70:	2085883a 	add	r2,r4,r2
     d74:	d0e01417 	ldw	r3,-32688(gp)
     d78:	10c9883a 	add	r4,r2,r3
     d7c:	00c00044 	movi	r3,1
  {
    *(char_buff_base + offset) = *(text);  // write to the character buffer
     d80:	30800003 	ldbu	r2,0(r6)
     d84:	20800005 	stb	r2,0(r4)
    text++;
     d88:	30cd883a 	add	r6,r6,r3
  int char_x = x * 4;
  int char_y = y * 4;

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
  while ( *(text) )
     d8c:	20c9883a 	add	r4,r4,r3
     d90:	30800007 	ldb	r2,0(r6)
     d94:	103ffa1e 	bne	r2,zero,d80 <vga_write+0x1c>
     d98:	f800283a 	ret

00000d9c <vga_draw_rectangle>:

/*****************************************************************************
 * Draw a filled rectangle on the VGA.
******************************************************************************/
void vga_draw_rectangle(int x, int y, int width, int height, short color)
{
     d9c:	da80000b 	ldhu	r10,0(sp)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);
     da0:	d0a01517 	ldw	r2,-32684(gp)
     da4:	12400017 	ldw	r9,0(r2)

  for(i = x; i <= (x + width - 1); i++)
     da8:	218d883a 	add	r6,r4,r6
     dac:	31bfffc4 	addi	r6,r6,-1
     db0:	31001116 	blt	r6,r4,df8 <vga_draw_rectangle+0x5c>
     db4:	29c5883a 	add	r2,r5,r7
     db8:	11ffffc4 	addi	r7,r2,-1
     dbc:	02c00044 	movi	r11,1
     dc0:	00000b06 	br	df0 <vga_draw_rectangle+0x54>
     dc4:	2807883a 	mov	r3,r5
     dc8:	02000044 	movi	r8,1
  {
    for(j = y; j <= (y + height -1); j++)
    {
      offset = (j << 9) + i;
      *(pixel_buffer + offset) = color;
     dcc:	1804927a 	slli	r2,r3,9
     dd0:	1105883a 	add	r2,r2,r4
     dd4:	1085883a 	add	r2,r2,r2
     dd8:	4885883a 	add	r2,r9,r2
     ddc:	1280000d 	sth	r10,0(r2)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);

  for(i = x; i <= (x + width - 1); i++)
  {
    for(j = y; j <= (y + height -1); j++)
     de0:	1a07883a 	add	r3,r3,r8
     de4:	38fff90e 	bge	r7,r3,dcc <vga_draw_rectangle+0x30>
void vga_draw_rectangle(int x, int y, int width, int height, short color)
{
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);

  for(i = x; i <= (x + width - 1); i++)
     de8:	22c9883a 	add	r4,r4,r11
     dec:	31000216 	blt	r6,r4,df8 <vga_draw_rectangle+0x5c>
  {
    for(j = y; j <= (y + height -1); j++)
     df0:	397ff40e 	bge	r7,r5,dc4 <vga_draw_rectangle+0x28>
     df4:	003ffc06 	br	de8 <vga_draw_rectangle+0x4c>
     df8:	f800283a 	ret

00000dfc <vga_char_buffer_clear>:
  int i, j, offset;
  for (i = 0; i < VGA_CHAR_BUFF_RES_X; i++)
    for (j = 0; j < VGA_CHAR_BUFF_RES_Y; j++)
      {
        offset = (j << 6) + i;
        *(char_buff_base + offset) = ' ';  // write to the character buffer
     dfc:	d1a01417 	ldw	r6,-32688(gp)
     e00:	000b883a 	mov	r5,zero
     e04:	00000c06 	br	e38 <vga_char_buffer_clear+0x3c>
     e08:	200491ba 	slli	r2,r4,6
     e0c:	1145883a 	add	r2,r2,r5
     e10:	3085883a 	add	r2,r6,r2
     e14:	00c00804 	movi	r3,32
     e18:	10c00005 	stb	r3,0(r2)
  int char_x = 0;
  int char_y = 0;

  int i, j, offset;
  for (i = 0; i < VGA_CHAR_BUFF_RES_X; i++)
    for (j = 0; j < VGA_CHAR_BUFF_RES_Y; j++)
     e1c:	00c00044 	movi	r3,1
     e20:	20c9883a 	add	r4,r4,r3
     e24:	00800f04 	movi	r2,60
     e28:	20bff71e 	bne	r4,r2,e08 <vga_char_buffer_clear+0xc>
{
  int char_x = 0;
  int char_y = 0;

  int i, j, offset;
  for (i = 0; i < VGA_CHAR_BUFF_RES_X; i++)
     e2c:	28cb883a 	add	r5,r5,r3
     e30:	00801404 	movi	r2,80
     e34:	28800226 	beq	r5,r2,e40 <vga_char_buffer_clear+0x44>
    for (j = 0; j < VGA_CHAR_BUFF_RES_Y; j++)
      {
        offset = (j << 6) + i;
        *(char_buff_base + offset) = ' ';  // write to the character buffer
      }
}
     e38:	0009883a 	mov	r4,zero
     e3c:	003ff206 	br	e08 <vga_char_buffer_clear+0xc>
     e40:	f800283a 	ret

00000e44 <signal_audio_ready>:
  }
}
/* Called by the audio ISR to signal the main loop that samples are ready
 * for the FFT. */
inline void signal_audio_ready () {
  audio_ready = true;
     e44:	00800044 	movi	r2,1
     e48:	d087fa05 	stb	r2,8168(gp)
}
     e4c:	f800283a 	ret

00000e50 <fft_mag_window>:
      }
  }
  return 0;
}

void fft_mag_window (double* output) {
     e50:	defef204 	addi	sp,sp,-1080
     e54:	dfc10d15 	stw	ra,1076(sp)
     e58:	df010c15 	stw	fp,1072(sp)
     e5c:	ddc10b15 	stw	r23,1068(sp)
     e60:	dd810a15 	stw	r22,1064(sp)
     e64:	dd410915 	stw	r21,1060(sp)
     e68:	dd010815 	stw	r20,1056(sp)
     e6c:	dcc10715 	stw	r19,1052(sp)
     e70:	dc810615 	stw	r18,1048(sp)
     e74:	dc410515 	stw	r17,1044(sp)
     e78:	dc010415 	stw	r16,1040(sp)
     e7c:	d9010115 	stw	r4,1028(sp)
     e80:	d9010315 	stw	r4,1036(sp)
     e84:	d8010215 	stw	zero,1032(sp)
     e88:	d8010015 	stw	zero,1024(sp)
  // Results in 2*NUM_SAMPLES / FFT_LEN - 1 overlapping frames
  // because we loose one at the end
  int offset = FFT_LEN / 2;
  for (j = 0; j < numFrames; j++)
  {
    kiss_fft (fft_cfg, samples_for_fft + j*offset, fft_output);
     e8c:	d107fb17 	ldw	r4,8172(gp)
     e90:	01400274 	movhi	r5,9
     e94:	295d4504 	addi	r5,r5,29972
     e98:	d8810217 	ldw	r2,1032(sp)
     e9c:	114b883a 	add	r5,r2,r5
     ea0:	d80d883a 	mov	r6,sp
     ea4:	00004180 	call	418 <kiss_fft>
    double norm = 0;
    for (i = 0; i < FFT_LEN; i++)
      {
        //printf("%d %d\n", fft_output[i].r, fft_output[i].i);
        mag2 = (double)fft_output[i].r*(double)fft_output[i].r + (double)fft_output[i].i*(double)fft_output[i].i;
     ea8:	d9000017 	ldw	r4,0(sp)
     eac:	0003f600 	call	3f60 <__floatsidf>
     eb0:	1021883a 	mov	r16,r2
     eb4:	1823883a 	mov	r17,r3
     eb8:	d9000117 	ldw	r4,4(sp)
     ebc:	0003f600 	call	3f60 <__floatsidf>
     ec0:	1009883a 	mov	r4,r2
     ec4:	180b883a 	mov	r5,r3
     ec8:	100d883a 	mov	r6,r2
     ecc:	180f883a 	mov	r7,r3
     ed0:	000369c0 	call	369c <__muldf3>
     ed4:	1025883a 	mov	r18,r2
     ed8:	1827883a 	mov	r19,r3
     edc:	8009883a 	mov	r4,r16
     ee0:	880b883a 	mov	r5,r17
     ee4:	800d883a 	mov	r6,r16
     ee8:	880f883a 	mov	r7,r17
     eec:	000369c0 	call	369c <__muldf3>
     ef0:	9009883a 	mov	r4,r18
     ef4:	980b883a 	mov	r5,r19
     ef8:	100d883a 	mov	r6,r2
     efc:	180f883a 	mov	r7,r3
     f00:	00036280 	call	3628 <__adddf3>
     f04:	1021883a 	mov	r16,r2
     f08:	1823883a 	mov	r17,r3
     f0c:	df010017 	ldw	fp,1024(sp)
     f10:	002f883a 	mov	r23,zero
     f14:	0029883a 	mov	r20,zero
     f18:	002b883a 	mov	r21,zero
     f1c:	00001e06 	br	f98 <fft_mag_window+0x148>
     f20:	b1000017 	ldw	r4,0(r22)
     f24:	0003f600 	call	3f60 <__floatsidf>
     f28:	1021883a 	mov	r16,r2
     f2c:	1823883a 	mov	r17,r3
     f30:	b1000117 	ldw	r4,4(r22)
     f34:	0003f600 	call	3f60 <__floatsidf>
     f38:	1025883a 	mov	r18,r2
     f3c:	1827883a 	mov	r19,r3
     f40:	8009883a 	mov	r4,r16
     f44:	880b883a 	mov	r5,r17
     f48:	800d883a 	mov	r6,r16
     f4c:	880f883a 	mov	r7,r17
     f50:	000369c0 	call	369c <__muldf3>
     f54:	1021883a 	mov	r16,r2
     f58:	1823883a 	mov	r17,r3
     f5c:	9009883a 	mov	r4,r18
     f60:	980b883a 	mov	r5,r19
     f64:	900d883a 	mov	r6,r18
     f68:	980f883a 	mov	r7,r19
     f6c:	000369c0 	call	369c <__muldf3>
     f70:	8009883a 	mov	r4,r16
     f74:	880b883a 	mov	r5,r17
     f78:	100d883a 	mov	r6,r2
     f7c:	180f883a 	mov	r7,r3
     f80:	00036280 	call	3628 <__adddf3>
     f84:	1021883a 	mov	r16,r2
     f88:	1823883a 	mov	r17,r3
     f8c:	b5800204 	addi	r22,r22,8
           // if(mag2 == 0) printf("mag2 %d %d\n", j, i);
        if (i < numFFTPoints){
     f90:	00801004 	movi	r2,64
     f94:	15c00e16 	blt	r2,r23,fd0 <fft_mag_window+0x180>
          // Offset by j*offset
          output[i + j*numFFTPoints] = sqrt(mag2);
     f98:	8009883a 	mov	r4,r16
     f9c:	880b883a 	mov	r5,r17
     fa0:	00022f40 	call	22f4 <sqrt>
     fa4:	1009883a 	mov	r4,r2
     fa8:	180b883a 	mov	r5,r3
     fac:	bf05883a 	add	r2,r23,fp
     fb0:	100490fa 	slli	r2,r2,3
     fb4:	d8c10317 	ldw	r3,1036(sp)
     fb8:	10c5883a 	add	r2,r2,r3
     fbc:	11000015 	stw	r4,0(r2)
     fc0:	11400115 	stw	r5,4(r2)
     fc4:	b80490fa 	slli	r2,r23,3
     fc8:	10800204 	addi	r2,r2,8
     fcc:	d8ad883a 	add	r22,sp,r2
        } 
        norm += mag2; 
     fd0:	a009883a 	mov	r4,r20
     fd4:	a80b883a 	mov	r5,r21
     fd8:	800d883a 	mov	r6,r16
     fdc:	880f883a 	mov	r7,r17
     fe0:	00036280 	call	3628 <__adddf3>
     fe4:	100b883a 	mov	r5,r2
     fe8:	1029883a 	mov	r20,r2
     fec:	182b883a 	mov	r21,r3
  int offset = FFT_LEN / 2;
  for (j = 0; j < numFrames; j++)
  {
    kiss_fft (fft_cfg, samples_for_fft + j*offset, fft_output);
    double norm = 0;
    for (i = 0; i < FFT_LEN; i++)
     ff0:	bdc00044 	addi	r23,r23,1
     ff4:	00801fc4 	movi	r2,127
     ff8:	15ffc90e 	bge	r2,r23,f20 <fft_mag_window+0xd0>
          output[i + j*numFFTPoints] = sqrt(mag2);
        } 
        norm += mag2; 
      }
      // FFT is symmetric, so magnitudes of negative freqs will repeat
    norm = sqrt(norm);
     ffc:	2809883a 	mov	r4,r5
    1000:	180b883a 	mov	r5,r3
    1004:	00022f40 	call	22f4 <sqrt>
    1008:	1023883a 	mov	r17,r2
    100c:	1825883a 	mov	r18,r3
    1010:	dc010117 	ldw	r16,1028(sp)
    1014:	0029883a 	mov	r20,zero
    1018:	05401044 	movi	r21,65
    // Normalize
    for (i = 0; i < numFFTPoints; i++)
      {
        output[i + j*numFFTPoints] = output[i + j*numFFTPoints] / norm;
    101c:	81000017 	ldw	r4,0(r16)
    1020:	81400117 	ldw	r5,4(r16)
    1024:	880d883a 	mov	r6,r17
    1028:	900f883a 	mov	r7,r18
    102c:	0003a600 	call	3a60 <__divdf3>
    1030:	80800015 	stw	r2,0(r16)
    1034:	80c00115 	stw	r3,4(r16)
        norm += mag2; 
      }
      // FFT is symmetric, so magnitudes of negative freqs will repeat
    norm = sqrt(norm);
    // Normalize
    for (i = 0; i < numFFTPoints; i++)
    1038:	a5000044 	addi	r20,r20,1
    103c:	84000204 	addi	r16,r16,8
    1040:	a57ff61e 	bne	r20,r21,101c <fft_mag_window+0x1cc>
    1044:	d8810217 	ldw	r2,1032(sp)
    1048:	10808004 	addi	r2,r2,512
    104c:	d8810215 	stw	r2,1032(sp)
    1050:	d8c10117 	ldw	r3,1028(sp)
    1054:	18c08204 	addi	r3,r3,520
    1058:	d8c10115 	stw	r3,1028(sp)
    105c:	d8810017 	ldw	r2,1024(sp)
    1060:	1505883a 	add	r2,r2,r20
    1064:	d8810015 	stw	r2,1024(sp)
  double mag2;
  // Overlap by FFT_LEN / 2
  // Results in 2*NUM_SAMPLES / FFT_LEN - 1 overlapping frames
  // because we loose one at the end
  int offset = FFT_LEN / 2;
  for (j = 0; j < numFrames; j++)
    1068:	00bf8014 	movui	r2,65024
    106c:	d8c10217 	ldw	r3,1032(sp)
    1070:	18bf861e 	bne	r3,r2,e8c <fft_mag_window+0x3c>
      {
        output[i + j*numFFTPoints] = output[i + j*numFFTPoints] / norm;
        //printf("f:%lf\n", output[i + j*numFFTPoints]);
      }
  }
}
    1074:	dfc10d17 	ldw	ra,1076(sp)
    1078:	df010c17 	ldw	fp,1072(sp)
    107c:	ddc10b17 	ldw	r23,1068(sp)
    1080:	dd810a17 	ldw	r22,1064(sp)
    1084:	dd410917 	ldw	r21,1060(sp)
    1088:	dd010817 	ldw	r20,1056(sp)
    108c:	dcc10717 	ldw	r19,1052(sp)
    1090:	dc810617 	ldw	r18,1048(sp)
    1094:	dc410517 	ldw	r17,1044(sp)
    1098:	dc010417 	ldw	r16,1040(sp)
    109c:	dec10e04 	addi	sp,sp,1080
    10a0:	f800283a 	ret

000010a4 <fft>:
 * -------------
 * Perform a hardware FFT on the samples_for_fft array.
 * Also store historical FFT outputs in a ring buffer of length AVERAGING_LENGTH
 * so the animation is smoother.
 */
int fft (double* output) {
    10a4:	defef604 	addi	sp,sp,-1064
    10a8:	dfc10915 	stw	ra,1060(sp)
    10ac:	df010815 	stw	fp,1056(sp)
    10b0:	ddc10715 	stw	r23,1052(sp)
    10b4:	dd810615 	stw	r22,1048(sp)
    10b8:	dd410515 	stw	r21,1044(sp)
    10bc:	dd010415 	stw	r20,1040(sp)
    10c0:	dcc10315 	stw	r19,1036(sp)
    10c4:	dc810215 	stw	r18,1032(sp)
    10c8:	dc410115 	stw	r17,1028(sp)
    10cc:	dc010015 	stw	r16,1024(sp)
    10d0:	202f883a 	mov	r23,r4
    10d4:	0039883a 	mov	fp,zero
  int i, j;
  kiss_fft_cpx fft_output[FFT_LEN];
  for (j = 0; j < NUM_SAMPLES; j+= FFT_LEN)
  {
    kiss_fft (fft_cfg, samples_for_fft + j, fft_output);
    10d8:	d107fb17 	ldw	r4,8172(gp)
    10dc:	01400274 	movhi	r5,9
    10e0:	295d4504 	addi	r5,r5,29972
    10e4:	e14b883a 	add	r5,fp,r5
    10e8:	d80d883a 	mov	r6,sp
    10ec:	00004180 	call	418 <kiss_fft>
    10f0:	0029883a 	mov	r20,zero
    10f4:	002b883a 	mov	r21,zero
    10f8:	d82d883a 	mov	r22,sp
    double norm = 0;
    for (i = 0; i < FFT_LEN; i++)
      {
        norm += (double)fft_output[i].r*(double)fft_output[i].r + (double)fft_output[i].i*(double)fft_output[i].i;
    10fc:	b1000017 	ldw	r4,0(r22)
    1100:	0003f600 	call	3f60 <__floatsidf>
    1104:	1021883a 	mov	r16,r2
    1108:	1823883a 	mov	r17,r3
    110c:	b1000117 	ldw	r4,4(r22)
    1110:	0003f600 	call	3f60 <__floatsidf>
    1114:	1025883a 	mov	r18,r2
    1118:	1827883a 	mov	r19,r3
    111c:	8009883a 	mov	r4,r16
    1120:	880b883a 	mov	r5,r17
    1124:	800d883a 	mov	r6,r16
    1128:	880f883a 	mov	r7,r17
    112c:	000369c0 	call	369c <__muldf3>
    1130:	1021883a 	mov	r16,r2
    1134:	1823883a 	mov	r17,r3
    1138:	9009883a 	mov	r4,r18
    113c:	980b883a 	mov	r5,r19
    1140:	900d883a 	mov	r6,r18
    1144:	980f883a 	mov	r7,r19
    1148:	000369c0 	call	369c <__muldf3>
    114c:	8009883a 	mov	r4,r16
    1150:	880b883a 	mov	r5,r17
    1154:	100d883a 	mov	r6,r2
    1158:	180f883a 	mov	r7,r3
    115c:	00036280 	call	3628 <__adddf3>
    1160:	a009883a 	mov	r4,r20
    1164:	a80b883a 	mov	r5,r21
    1168:	100d883a 	mov	r6,r2
    116c:	180f883a 	mov	r7,r3
    1170:	00036280 	call	3628 <__adddf3>
    1174:	100b883a 	mov	r5,r2
    1178:	1029883a 	mov	r20,r2
    117c:	182b883a 	mov	r21,r3
    1180:	b5800204 	addi	r22,r22,8
  kiss_fft_cpx fft_output[FFT_LEN];
  for (j = 0; j < NUM_SAMPLES; j+= FFT_LEN)
  {
    kiss_fft (fft_cfg, samples_for_fft + j, fft_output);
    double norm = 0;
    for (i = 0; i < FFT_LEN; i++)
    1184:	d8810004 	addi	r2,sp,1024
    1188:	b0bfdc1e 	bne	r22,r2,10fc <fft+0x58>
      {
        norm += (double)fft_output[i].r*(double)fft_output[i].r + (double)fft_output[i].i*(double)fft_output[i].i;
      }
    norm = sqrt(norm);
    118c:	2809883a 	mov	r4,r5
    1190:	180b883a 	mov	r5,r3
    1194:	00022f40 	call	22f4 <sqrt>
    1198:	1029883a 	mov	r20,r2
    119c:	182b883a 	mov	r21,r3
    11a0:	b825883a 	mov	r18,r23
    11a4:	0023883a 	mov	r17,zero

    for (i = 0; i < FFT_LEN*2; i+=2)
      {
        output[i + 2*j] = (double)fft_output[i/2].r / norm;
    11a8:	8820d7fa 	srli	r16,r17,31
    11ac:	8461883a 	add	r16,r16,r17
    11b0:	8021d07a 	srai	r16,r16,1
    11b4:	802090fa 	slli	r16,r16,3
    11b8:	86e1883a 	add	r16,r16,sp
    11bc:	81000017 	ldw	r4,0(r16)
    11c0:	0003f600 	call	3f60 <__floatsidf>
    11c4:	1009883a 	mov	r4,r2
    11c8:	180b883a 	mov	r5,r3
    11cc:	a00d883a 	mov	r6,r20
    11d0:	a80f883a 	mov	r7,r21
    11d4:	0003a600 	call	3a60 <__divdf3>
    11d8:	90800015 	stw	r2,0(r18)
    11dc:	90c00115 	stw	r3,4(r18)
        output[i + 2*j + 1] = (double)fft_output[i/2].i / norm;
    11e0:	81000117 	ldw	r4,4(r16)
    11e4:	0003f600 	call	3f60 <__floatsidf>
    11e8:	1009883a 	mov	r4,r2
    11ec:	180b883a 	mov	r5,r3
    11f0:	a00d883a 	mov	r6,r20
    11f4:	a80f883a 	mov	r7,r21
    11f8:	0003a600 	call	3a60 <__divdf3>
    11fc:	90800215 	stw	r2,8(r18)
    1200:	90c00315 	stw	r3,12(r18)
      {
        norm += (double)fft_output[i].r*(double)fft_output[i].r + (double)fft_output[i].i*(double)fft_output[i].i;
      }
    norm = sqrt(norm);

    for (i = 0; i < FFT_LEN*2; i+=2)
    1204:	8c400084 	addi	r17,r17,2
    1208:	94800404 	addi	r18,r18,16
    120c:	00804004 	movi	r2,256
    1210:	88bfe51e 	bne	r17,r2,11a8 <fft+0x104>
    1214:	e7010004 	addi	fp,fp,1024
    1218:	bdc20004 	addi	r23,r23,2048
 * so the animation is smoother.
 */
int fft (double* output) {
  int i, j;
  kiss_fft_cpx fft_output[FFT_LEN];
  for (j = 0; j < NUM_SAMPLES; j+= FFT_LEN)
    121c:	00800074 	movhi	r2,1
    1220:	e0bfad1e 	bne	fp,r2,10d8 <fft+0x34>
        output[i + 2*j] = (double)fft_output[i/2].r / norm;
        output[i + 2*j + 1] = (double)fft_output[i/2].i / norm;
      }
  }
  return 0;
}
    1224:	0005883a 	mov	r2,zero
    1228:	dfc10917 	ldw	ra,1060(sp)
    122c:	df010817 	ldw	fp,1056(sp)
    1230:	ddc10717 	ldw	r23,1052(sp)
    1234:	dd810617 	ldw	r22,1048(sp)
    1238:	dd410517 	ldw	r21,1044(sp)
    123c:	dd010417 	ldw	r20,1040(sp)
    1240:	dcc10317 	ldw	r19,1036(sp)
    1244:	dc810217 	ldw	r18,1032(sp)
    1248:	dc410117 	ldw	r17,1028(sp)
    124c:	dc010017 	ldw	r16,1024(sp)
    1250:	dec10a04 	addi	sp,sp,1064
    1254:	f800283a 	ret

00001258 <printMFCC>:
    return 1;
  }
  return 0;
}

void printMFCC(double r) {
    1258:	defff804 	addi	sp,sp,-32
    125c:	dfc00715 	stw	ra,28(sp)
    1260:	dc000615 	stw	r16,24(sp)
    1264:	200f883a 	mov	r7,r4
  char buf[20];
  snprintf(buf, 20, "%.6lf,", r);
    1268:	d9400015 	stw	r5,0(sp)
    126c:	d9000104 	addi	r4,sp,4
    1270:	01400504 	movi	r5,20
    1274:	01800074 	movhi	r6,1
    1278:	31bdcb04 	addi	r6,r6,-2260
    127c:	00050980 	call	5098 <snprintf>
    1280:	0021883a 	mov	r16,zero
    1284:	00000706 	br	12a4 <printMFCC+0x4c>
  size_t j;
  for (j = 0; j < strlen(buf); j++) {
    while(put_char(buf[j]));
    1288:	d8c00104 	addi	r3,sp,4
    128c:	1c05883a 	add	r2,r3,r16
    1290:	11000007 	ldb	r4,0(r2)
    1294:	0000c340 	call	c34 <put_char>
    1298:	10803fcc 	andi	r2,r2,255
    129c:	103ffa1e 	bne	r2,zero,1288 <printMFCC+0x30>

void printMFCC(double r) {
  char buf[20];
  snprintf(buf, 20, "%.6lf,", r);
  size_t j;
  for (j = 0; j < strlen(buf); j++) {
    12a0:	84000044 	addi	r16,r16,1
    12a4:	d9000104 	addi	r4,sp,4
    12a8:	00052080 	call	5208 <strlen>
    12ac:	80bff636 	bltu	r16,r2,1288 <printMFCC+0x30>
    while(put_char(buf[j]));
  }
}
    12b0:	dfc00717 	ldw	ra,28(sp)
    12b4:	dc000617 	ldw	r16,24(sp)
    12b8:	dec00804 	addi	sp,sp,32
    12bc:	f800283a 	ret

000012c0 <clearLCDChar>:
  audio_init (audio_isr);
  pushbuttons_enable_interrupts (pushbuttons_isr);
  pushbuttons_set_interrupt_mask (BUTTON2|BUTTON1);
}

static void clearLCDChar() {
    12c0:	defffd04 	addi	sp,sp,-12
    12c4:	dfc00215 	stw	ra,8(sp)
    12c8:	dc400115 	stw	r17,4(sp)
    12cc:	dc000015 	stw	r16,0(sp)
  char_lcd_move_cursor(0,0);
    12d0:	0009883a 	mov	r4,zero
    12d4:	000b883a 	mov	r5,zero
    12d8:	000067c0 	call	67c <char_lcd_move_cursor>
    12dc:	0023883a 	mov	r17,zero
    12e0:	00001306 	br	1330 <clearLCDChar+0x70>
    for (j = 0; j < LCD_CHAR_DISPLAY_SIZE_Y; j++) {
      char_lcd_write(" ");
      char_lcd_move_cursor(i, j);
    }
  }
  char_lcd_cursor_off();
    12e4:	00006d00 	call	6d0 <char_lcd_cursor_off>
}
    12e8:	dfc00217 	ldw	ra,8(sp)
    12ec:	dc400117 	ldw	r17,4(sp)
    12f0:	dc000017 	ldw	r16,0(sp)
    12f4:	dec00304 	addi	sp,sp,12
    12f8:	f800283a 	ret
  char_lcd_move_cursor(0,0);
  int i;
  for (i = 0; i < LCD_CHAR_DISPLAY_SIZE_X; i++) {
    int j;
    for (j = 0; j < LCD_CHAR_DISPLAY_SIZE_Y; j++) {
      char_lcd_write(" ");
    12fc:	01000074 	movhi	r4,1
    1300:	213dcd04 	addi	r4,r4,-2252
    1304:	00006a80 	call	6a8 <char_lcd_write>
      char_lcd_move_cursor(i, j);
    1308:	8809883a 	mov	r4,r17
    130c:	800b883a 	mov	r5,r16
    1310:	000067c0 	call	67c <char_lcd_move_cursor>
static void clearLCDChar() {
  char_lcd_move_cursor(0,0);
  int i;
  for (i = 0; i < LCD_CHAR_DISPLAY_SIZE_X; i++) {
    int j;
    for (j = 0; j < LCD_CHAR_DISPLAY_SIZE_Y; j++) {
    1314:	00c00044 	movi	r3,1
    1318:	80e1883a 	add	r16,r16,r3
    131c:	00800084 	movi	r2,2
    1320:	80bff61e 	bne	r16,r2,12fc <clearLCDChar+0x3c>
}

static void clearLCDChar() {
  char_lcd_move_cursor(0,0);
  int i;
  for (i = 0; i < LCD_CHAR_DISPLAY_SIZE_X; i++) {
    1324:	88e3883a 	add	r17,r17,r3
    1328:	00800404 	movi	r2,16
    132c:	88bfed26 	beq	r17,r2,12e4 <clearLCDChar+0x24>
      char_lcd_write(" ");
      char_lcd_move_cursor(i, j);
    }
  }
  char_lcd_cursor_off();
}
    1330:	0021883a 	mov	r16,zero
    1334:	003ff106 	br	12fc <clearLCDChar+0x3c>

00001338 <mfcc>:
  audio_ready = true;
}


// MFCC Finder
static void mfcc(double* frames, double* output) {
    1338:	deebf004 	addi	sp,sp,-20544
    133c:	dfd40f15 	stw	ra,20540(sp)
    1340:	df140e15 	stw	fp,20536(sp)
    1344:	ddd40d15 	stw	r23,20532(sp)
    1348:	dd940c15 	stw	r22,20528(sp)
    134c:	dd540b15 	stw	r21,20524(sp)
    1350:	dd140a15 	stw	r20,20520(sp)
    1354:	dcd40915 	stw	r19,20516(sp)
    1358:	dc940815 	stw	r18,20512(sp)
    135c:	dc540715 	stw	r17,20508(sp)
    1360:	dc140615 	stw	r16,20504(sp)
    1364:	d9140515 	stw	r4,20500(sp)
    1368:	d953da15 	stw	r5,20328(sp)
    136c:	d813d915 	stw	zero,20324(sp)
    1370:	d813d815 	stw	zero,20320(sp)
    1374:	0001db06 	br	1ae4 <mfcc+0x7ac>
  // Apply triangle filter bank and take log
  for (m = 0; m < numFrames; m++) {
    for (i = 0; i < NUM_BANKS; i++) {
      sum = 0;
      //use LUT to skip zeros
      start = tribankStart[i];
    1378:	d893db17 	ldw	r2,20332(sp)
    137c:	15400017 	ldw	r21,0(r2)
      end = tribankEnd[i];
    1380:	e5800017 	ldw	r22,0(fp)
      for (j = start; j < end; j++) {
    1384:	ad81e20e 	bge	r21,r22,1b10 <mfcc+0x7d8>
    1388:	b8801064 	muli	r2,r23,65
    138c:	1545883a 	add	r2,r2,r21
    1390:	1085883a 	add	r2,r2,r2
    1394:	1085883a 	add	r2,r2,r2
    1398:	00c00074 	movhi	r3,1
    139c:	18d9fb04 	addi	r3,r3,26604
    13a0:	10e7883a 	add	r19,r2,r3
    13a4:	d8d40417 	ldw	r3,20496(sp)
    13a8:	a8c5883a 	add	r2,r21,r3
    13ac:	100490fa 	slli	r2,r2,3
    13b0:	d9140517 	ldw	r4,20500(sp)
    13b4:	20a5883a 	add	r18,r4,r2
    13b8:	0021883a 	mov	r16,zero
    13bc:	0023883a 	mov	r17,zero
    13c0:	0029883a 	mov	r20,zero
        sum += TRIBANK[i][j]*frames[j + m*numFFTPoints];
    13c4:	99000017 	ldw	r4,0(r19)
    13c8:	00031440 	call	3144 <__extendsfdf2>
    13cc:	1009883a 	mov	r4,r2
    13d0:	180b883a 	mov	r5,r3
    13d4:	91800017 	ldw	r6,0(r18)
    13d8:	91c00117 	ldw	r7,4(r18)
    13dc:	000369c0 	call	369c <__muldf3>
    13e0:	8009883a 	mov	r4,r16
    13e4:	880b883a 	mov	r5,r17
    13e8:	100d883a 	mov	r6,r2
    13ec:	180f883a 	mov	r7,r3
    13f0:	00036280 	call	3628 <__adddf3>
    13f4:	1011883a 	mov	r8,r2
    13f8:	1021883a 	mov	r16,r2
    13fc:	1823883a 	mov	r17,r3
    1400:	a5000044 	addi	r20,r20,1
    1404:	9cc00104 	addi	r19,r19,4
    1408:	94800204 	addi	r18,r18,8
    for (i = 0; i < NUM_BANKS; i++) {
      sum = 0;
      //use LUT to skip zeros
      start = tribankStart[i];
      end = tribankEnd[i];
      for (j = start; j < end; j++) {
    140c:	b545c83a 	sub	r2,r22,r21
    1410:	a0bfec1e 	bne	r20,r2,13c4 <mfcc+0x8c>
    1414:	d893d917 	ldw	r2,20324(sp)
    1418:	b8a5883a 	add	r18,r23,r2
        sum += TRIBANK[i][j]*frames[j + m*numFFTPoints];
        //if(m == 0 && (frames[j + m*numFFTPoints] == 0)) printf(" %lf\n", sum);
      }
      FBE[i + m*NUM_BANKS] = (sum <= 0) ? -100000 : log10(sum);
    141c:	000d883a 	mov	r6,zero
    1420:	000f883a 	mov	r7,zero
    1424:	4009883a 	mov	r4,r8
    1428:	180b883a 	mov	r5,r3
    142c:	0003ed80 	call	3ed8 <__ledf2>
    1430:	00800416 	blt	zero,r2,1444 <mfcc+0x10c>
    1434:	0009883a 	mov	r4,zero
    1438:	01703e34 	movhi	r5,49400
    143c:	295a8004 	addi	r5,r5,27136
    1440:	00000506 	br	1458 <mfcc+0x120>
    1444:	8009883a 	mov	r4,r16
    1448:	880b883a 	mov	r5,r17
    144c:	000216c0 	call	216c <log10>
    1450:	1009883a 	mov	r4,r2
    1454:	180b883a 	mov	r5,r3
    1458:	900490fa 	slli	r2,r18,3
    145c:	16c5883a 	add	r2,r2,sp
    1460:	11000015 	stw	r4,0(r2)
    1464:	11400115 	stw	r5,4(r2)
  // Filter bank energies
  double FBE[numFrames*NUM_BANKS];
  double sum;
  // Apply triangle filter bank and take log
  for (m = 0; m < numFrames; m++) {
    for (i = 0; i < NUM_BANKS; i++) {
    1468:	bdc00044 	addi	r23,r23,1
    146c:	00800104 	movi	r2,4
    1470:	d8d3db17 	ldw	r3,20332(sp)
    1474:	1887883a 	add	r3,r3,r2
    1478:	d8d3db15 	stw	r3,20332(sp)
    147c:	e0b9883a 	add	fp,fp,r2
    1480:	00800504 	movi	r2,20
    1484:	b8bfbc1e 	bne	r23,r2,1378 <mfcc+0x40>
    for (i = 0; i < NUM_CC; i++) {
      sum = 0;
      //loop unrolled
      //for (j = 0; j < NUM_BANKS; j++) {
        //sum += DCT_LIFTER[i][j]*FBE[j + m*NUM_BANKS];
        sum += DCT_LIFTER[i][0]*FBE[0 + m*NUM_BANKS];
    1488:	d9140317 	ldw	r4,20492(sp)
    148c:	200490fa 	slli	r2,r4,3
    1490:	16c5883a 	add	r2,r2,sp
    1494:	10c00017 	ldw	r3,0(r2)
    1498:	d8d40115 	stw	r3,20484(sp)
    149c:	11000117 	ldw	r4,4(r2)
    14a0:	d9140215 	stw	r4,20488(sp)
        sum += DCT_LIFTER[i][1]*FBE[1 + m*NUM_BANKS];
    14a4:	10c00204 	addi	r3,r2,8
    14a8:	19000017 	ldw	r4,0(r3)
    14ac:	d913ff15 	stw	r4,20476(sp)
    14b0:	18c00117 	ldw	r3,4(r3)
    14b4:	d8d40015 	stw	r3,20480(sp)
        sum += DCT_LIFTER[i][2]*FBE[2 + m*NUM_BANKS];
    14b8:	10c00404 	addi	r3,r2,16
    14bc:	19000017 	ldw	r4,0(r3)
    14c0:	d913fd15 	stw	r4,20468(sp)
    14c4:	18c00117 	ldw	r3,4(r3)
    14c8:	d8d3fe15 	stw	r3,20472(sp)
        sum += DCT_LIFTER[i][3]*FBE[3 + m*NUM_BANKS];
    14cc:	10c00604 	addi	r3,r2,24
    14d0:	19000017 	ldw	r4,0(r3)
    14d4:	d913fb15 	stw	r4,20460(sp)
    14d8:	18c00117 	ldw	r3,4(r3)
    14dc:	d8d3fc15 	stw	r3,20464(sp)
        sum += DCT_LIFTER[i][4]*FBE[4 + m*NUM_BANKS];
    14e0:	10c00804 	addi	r3,r2,32
    14e4:	19000017 	ldw	r4,0(r3)
    14e8:	d913f915 	stw	r4,20452(sp)
    14ec:	18c00117 	ldw	r3,4(r3)
    14f0:	d8d3fa15 	stw	r3,20456(sp)
        sum += DCT_LIFTER[i][5]*FBE[5 + m*NUM_BANKS];
    14f4:	10c00a04 	addi	r3,r2,40
    14f8:	19000017 	ldw	r4,0(r3)
    14fc:	d913f715 	stw	r4,20444(sp)
    1500:	18c00117 	ldw	r3,4(r3)
    1504:	d8d3f815 	stw	r3,20448(sp)
        sum += DCT_LIFTER[i][6]*FBE[6 + m*NUM_BANKS];
    1508:	10c00c04 	addi	r3,r2,48
    150c:	19000017 	ldw	r4,0(r3)
    1510:	d913f515 	stw	r4,20436(sp)
    1514:	18c00117 	ldw	r3,4(r3)
    1518:	d8d3f615 	stw	r3,20440(sp)
        sum += DCT_LIFTER[i][7]*FBE[7 + m*NUM_BANKS];
    151c:	10c00e04 	addi	r3,r2,56
    1520:	19000017 	ldw	r4,0(r3)
    1524:	d913f315 	stw	r4,20428(sp)
    1528:	18c00117 	ldw	r3,4(r3)
    152c:	d8d3f415 	stw	r3,20432(sp)
        sum += DCT_LIFTER[i][8]*FBE[8 + m*NUM_BANKS];
    1530:	10c01004 	addi	r3,r2,64
    1534:	19000017 	ldw	r4,0(r3)
    1538:	d913f115 	stw	r4,20420(sp)
    153c:	18c00117 	ldw	r3,4(r3)
    1540:	d8d3f215 	stw	r3,20424(sp)
        sum += DCT_LIFTER[i][9]*FBE[9 + m*NUM_BANKS];
    1544:	10c01204 	addi	r3,r2,72
    1548:	19000017 	ldw	r4,0(r3)
    154c:	d913ef15 	stw	r4,20412(sp)
    1550:	18c00117 	ldw	r3,4(r3)
    1554:	d8d3f015 	stw	r3,20416(sp)
        sum += DCT_LIFTER[i][10]*FBE[10 + m*NUM_BANKS];
    1558:	10c01404 	addi	r3,r2,80
    155c:	19000017 	ldw	r4,0(r3)
    1560:	d913ed15 	stw	r4,20404(sp)
    1564:	18c00117 	ldw	r3,4(r3)
    1568:	d8d3ee15 	stw	r3,20408(sp)
        sum += DCT_LIFTER[i][11]*FBE[11 + m*NUM_BANKS];
    156c:	10c01604 	addi	r3,r2,88
    1570:	19000017 	ldw	r4,0(r3)
    1574:	d913eb15 	stw	r4,20396(sp)
    1578:	18c00117 	ldw	r3,4(r3)
    157c:	d8d3ec15 	stw	r3,20400(sp)
        sum += DCT_LIFTER[i][12]*FBE[12 + m*NUM_BANKS];
    1580:	10c01804 	addi	r3,r2,96
    1584:	19000017 	ldw	r4,0(r3)
    1588:	d913e915 	stw	r4,20388(sp)
    158c:	18c00117 	ldw	r3,4(r3)
    1590:	d8d3ea15 	stw	r3,20392(sp)
        sum += DCT_LIFTER[i][13]*FBE[13 + m*NUM_BANKS];
    1594:	10c01a04 	addi	r3,r2,104
    1598:	19000017 	ldw	r4,0(r3)
    159c:	d913e715 	stw	r4,20380(sp)
    15a0:	18c00117 	ldw	r3,4(r3)
    15a4:	d8d3e815 	stw	r3,20384(sp)
        sum += DCT_LIFTER[i][14]*FBE[14 + m*NUM_BANKS];
    15a8:	10c01c04 	addi	r3,r2,112
    15ac:	19000017 	ldw	r4,0(r3)
    15b0:	d913e515 	stw	r4,20372(sp)
    15b4:	18c00117 	ldw	r3,4(r3)
    15b8:	d8d3e615 	stw	r3,20376(sp)
        sum += DCT_LIFTER[i][15]*FBE[15 + m*NUM_BANKS];
    15bc:	10c01e04 	addi	r3,r2,120
    15c0:	19000017 	ldw	r4,0(r3)
    15c4:	d913e315 	stw	r4,20364(sp)
    15c8:	18c00117 	ldw	r3,4(r3)
    15cc:	d8d3e415 	stw	r3,20368(sp)
        sum += DCT_LIFTER[i][16]*FBE[16 + m*NUM_BANKS];
    15d0:	10c02004 	addi	r3,r2,128
    15d4:	19000017 	ldw	r4,0(r3)
    15d8:	d913e115 	stw	r4,20356(sp)
    15dc:	18c00117 	ldw	r3,4(r3)
    15e0:	d8d3e215 	stw	r3,20360(sp)
        sum += DCT_LIFTER[i][17]*FBE[17 + m*NUM_BANKS];
    15e4:	10c02204 	addi	r3,r2,136
    15e8:	19000017 	ldw	r4,0(r3)
    15ec:	d913df15 	stw	r4,20348(sp)
    15f0:	18c00117 	ldw	r3,4(r3)
    15f4:	d8d3e015 	stw	r3,20352(sp)
        sum += DCT_LIFTER[i][18]*FBE[18 + m*NUM_BANKS];
    15f8:	10c02404 	addi	r3,r2,144
    15fc:	19000017 	ldw	r4,0(r3)
    1600:	d913dd15 	stw	r4,20340(sp)
    1604:	18c00117 	ldw	r3,4(r3)
    1608:	d8d3de15 	stw	r3,20344(sp)
        sum += DCT_LIFTER[i][19]*FBE[19 + m*NUM_BANKS];
    160c:	10802604 	addi	r2,r2,152
    1610:	15400017 	ldw	r21,0(r2)
    1614:	15800117 	ldw	r22,4(r2)
    1618:	05000074 	movhi	r20,1
    161c:	a518f704 	addi	r20,r20,25564
    1620:	ddd3da17 	ldw	r23,20328(sp)
    1624:	d813dc15 	stw	zero,20336(sp)
    1628:	a039883a 	mov	fp,r20
    for (i = 0; i < NUM_CC; i++) {
      sum = 0;
      //loop unrolled
      //for (j = 0; j < NUM_BANKS; j++) {
        //sum += DCT_LIFTER[i][j]*FBE[j + m*NUM_BANKS];
        sum += DCT_LIFTER[i][0]*FBE[0 + m*NUM_BANKS];
    162c:	e1000017 	ldw	r4,0(fp)
    1630:	00031440 	call	3144 <__extendsfdf2>
    1634:	1009883a 	mov	r4,r2
    1638:	180b883a 	mov	r5,r3
    163c:	d9940117 	ldw	r6,20484(sp)
    1640:	d9d40217 	ldw	r7,20488(sp)
    1644:	000369c0 	call	369c <__muldf3>
    1648:	000d883a 	mov	r6,zero
    164c:	000f883a 	mov	r7,zero
    1650:	1009883a 	mov	r4,r2
    1654:	180b883a 	mov	r5,r3
    1658:	00036280 	call	3628 <__adddf3>
    165c:	1021883a 	mov	r16,r2
    1660:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][1]*FBE[1 + m*NUM_BANKS];
    1664:	a1000117 	ldw	r4,4(r20)
    1668:	00031440 	call	3144 <__extendsfdf2>
    166c:	1009883a 	mov	r4,r2
    1670:	180b883a 	mov	r5,r3
    1674:	d993ff17 	ldw	r6,20476(sp)
    1678:	d9d40017 	ldw	r7,20480(sp)
    167c:	000369c0 	call	369c <__muldf3>
    1680:	8009883a 	mov	r4,r16
    1684:	880b883a 	mov	r5,r17
    1688:	100d883a 	mov	r6,r2
    168c:	180f883a 	mov	r7,r3
    1690:	00036280 	call	3628 <__adddf3>
    1694:	1021883a 	mov	r16,r2
    1698:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][2]*FBE[2 + m*NUM_BANKS];
    169c:	a1000217 	ldw	r4,8(r20)
    16a0:	00031440 	call	3144 <__extendsfdf2>
    16a4:	1009883a 	mov	r4,r2
    16a8:	180b883a 	mov	r5,r3
    16ac:	d993fd17 	ldw	r6,20468(sp)
    16b0:	d9d3fe17 	ldw	r7,20472(sp)
    16b4:	000369c0 	call	369c <__muldf3>
    16b8:	8009883a 	mov	r4,r16
    16bc:	880b883a 	mov	r5,r17
    16c0:	100d883a 	mov	r6,r2
    16c4:	180f883a 	mov	r7,r3
    16c8:	00036280 	call	3628 <__adddf3>
    16cc:	1021883a 	mov	r16,r2
    16d0:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][3]*FBE[3 + m*NUM_BANKS];
    16d4:	a1000317 	ldw	r4,12(r20)
    16d8:	00031440 	call	3144 <__extendsfdf2>
    16dc:	1009883a 	mov	r4,r2
    16e0:	180b883a 	mov	r5,r3
    16e4:	d993fb17 	ldw	r6,20460(sp)
    16e8:	d9d3fc17 	ldw	r7,20464(sp)
    16ec:	000369c0 	call	369c <__muldf3>
    16f0:	8009883a 	mov	r4,r16
    16f4:	880b883a 	mov	r5,r17
    16f8:	100d883a 	mov	r6,r2
    16fc:	180f883a 	mov	r7,r3
    1700:	00036280 	call	3628 <__adddf3>
    1704:	1021883a 	mov	r16,r2
    1708:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][4]*FBE[4 + m*NUM_BANKS];
    170c:	a1000417 	ldw	r4,16(r20)
    1710:	00031440 	call	3144 <__extendsfdf2>
    1714:	1009883a 	mov	r4,r2
    1718:	180b883a 	mov	r5,r3
    171c:	d993f917 	ldw	r6,20452(sp)
    1720:	d9d3fa17 	ldw	r7,20456(sp)
    1724:	000369c0 	call	369c <__muldf3>
    1728:	8009883a 	mov	r4,r16
    172c:	880b883a 	mov	r5,r17
    1730:	100d883a 	mov	r6,r2
    1734:	180f883a 	mov	r7,r3
    1738:	00036280 	call	3628 <__adddf3>
    173c:	1021883a 	mov	r16,r2
    1740:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][5]*FBE[5 + m*NUM_BANKS];
    1744:	a1000517 	ldw	r4,20(r20)
    1748:	00031440 	call	3144 <__extendsfdf2>
    174c:	1009883a 	mov	r4,r2
    1750:	180b883a 	mov	r5,r3
    1754:	d993f717 	ldw	r6,20444(sp)
    1758:	d9d3f817 	ldw	r7,20448(sp)
    175c:	000369c0 	call	369c <__muldf3>
    1760:	8009883a 	mov	r4,r16
    1764:	880b883a 	mov	r5,r17
    1768:	100d883a 	mov	r6,r2
    176c:	180f883a 	mov	r7,r3
    1770:	00036280 	call	3628 <__adddf3>
    1774:	1021883a 	mov	r16,r2
    1778:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][6]*FBE[6 + m*NUM_BANKS];
    177c:	a1000617 	ldw	r4,24(r20)
    1780:	00031440 	call	3144 <__extendsfdf2>
    1784:	1009883a 	mov	r4,r2
    1788:	180b883a 	mov	r5,r3
    178c:	d993f517 	ldw	r6,20436(sp)
    1790:	d9d3f617 	ldw	r7,20440(sp)
    1794:	000369c0 	call	369c <__muldf3>
    1798:	8009883a 	mov	r4,r16
    179c:	880b883a 	mov	r5,r17
    17a0:	100d883a 	mov	r6,r2
    17a4:	180f883a 	mov	r7,r3
    17a8:	00036280 	call	3628 <__adddf3>
    17ac:	1021883a 	mov	r16,r2
    17b0:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][7]*FBE[7 + m*NUM_BANKS];
    17b4:	a1000717 	ldw	r4,28(r20)
    17b8:	00031440 	call	3144 <__extendsfdf2>
    17bc:	1009883a 	mov	r4,r2
    17c0:	180b883a 	mov	r5,r3
    17c4:	d993f317 	ldw	r6,20428(sp)
    17c8:	d9d3f417 	ldw	r7,20432(sp)
    17cc:	000369c0 	call	369c <__muldf3>
    17d0:	8009883a 	mov	r4,r16
    17d4:	880b883a 	mov	r5,r17
    17d8:	100d883a 	mov	r6,r2
    17dc:	180f883a 	mov	r7,r3
    17e0:	00036280 	call	3628 <__adddf3>
    17e4:	1021883a 	mov	r16,r2
    17e8:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][8]*FBE[8 + m*NUM_BANKS];
    17ec:	a1000817 	ldw	r4,32(r20)
    17f0:	00031440 	call	3144 <__extendsfdf2>
    17f4:	1009883a 	mov	r4,r2
    17f8:	180b883a 	mov	r5,r3
    17fc:	d993f117 	ldw	r6,20420(sp)
    1800:	d9d3f217 	ldw	r7,20424(sp)
    1804:	000369c0 	call	369c <__muldf3>
    1808:	8009883a 	mov	r4,r16
    180c:	880b883a 	mov	r5,r17
    1810:	100d883a 	mov	r6,r2
    1814:	180f883a 	mov	r7,r3
    1818:	00036280 	call	3628 <__adddf3>
    181c:	1021883a 	mov	r16,r2
    1820:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][9]*FBE[9 + m*NUM_BANKS];
    1824:	a1000917 	ldw	r4,36(r20)
    1828:	00031440 	call	3144 <__extendsfdf2>
    182c:	1009883a 	mov	r4,r2
    1830:	180b883a 	mov	r5,r3
    1834:	d993ef17 	ldw	r6,20412(sp)
    1838:	d9d3f017 	ldw	r7,20416(sp)
    183c:	000369c0 	call	369c <__muldf3>
    1840:	8009883a 	mov	r4,r16
    1844:	880b883a 	mov	r5,r17
    1848:	100d883a 	mov	r6,r2
    184c:	180f883a 	mov	r7,r3
    1850:	00036280 	call	3628 <__adddf3>
    1854:	1021883a 	mov	r16,r2
    1858:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][10]*FBE[10 + m*NUM_BANKS];
    185c:	a1000a17 	ldw	r4,40(r20)
    1860:	00031440 	call	3144 <__extendsfdf2>
    1864:	1009883a 	mov	r4,r2
    1868:	180b883a 	mov	r5,r3
    186c:	d993ed17 	ldw	r6,20404(sp)
    1870:	d9d3ee17 	ldw	r7,20408(sp)
    1874:	000369c0 	call	369c <__muldf3>
    1878:	8009883a 	mov	r4,r16
    187c:	880b883a 	mov	r5,r17
    1880:	100d883a 	mov	r6,r2
    1884:	180f883a 	mov	r7,r3
    1888:	00036280 	call	3628 <__adddf3>
    188c:	1021883a 	mov	r16,r2
    1890:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][11]*FBE[11 + m*NUM_BANKS];
    1894:	a1000b17 	ldw	r4,44(r20)
    1898:	00031440 	call	3144 <__extendsfdf2>
    189c:	1009883a 	mov	r4,r2
    18a0:	180b883a 	mov	r5,r3
    18a4:	d993eb17 	ldw	r6,20396(sp)
    18a8:	d9d3ec17 	ldw	r7,20400(sp)
    18ac:	000369c0 	call	369c <__muldf3>
    18b0:	8009883a 	mov	r4,r16
    18b4:	880b883a 	mov	r5,r17
    18b8:	100d883a 	mov	r6,r2
    18bc:	180f883a 	mov	r7,r3
    18c0:	00036280 	call	3628 <__adddf3>
    18c4:	1021883a 	mov	r16,r2
    18c8:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][12]*FBE[12 + m*NUM_BANKS];
    18cc:	a1000c17 	ldw	r4,48(r20)
    18d0:	00031440 	call	3144 <__extendsfdf2>
    18d4:	1009883a 	mov	r4,r2
    18d8:	180b883a 	mov	r5,r3
    18dc:	d993e917 	ldw	r6,20388(sp)
    18e0:	d9d3ea17 	ldw	r7,20392(sp)
    18e4:	000369c0 	call	369c <__muldf3>
    18e8:	8009883a 	mov	r4,r16
    18ec:	880b883a 	mov	r5,r17
    18f0:	100d883a 	mov	r6,r2
    18f4:	180f883a 	mov	r7,r3
    18f8:	00036280 	call	3628 <__adddf3>
    18fc:	1021883a 	mov	r16,r2
    1900:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][13]*FBE[13 + m*NUM_BANKS];
    1904:	a1000d17 	ldw	r4,52(r20)
    1908:	00031440 	call	3144 <__extendsfdf2>
    190c:	1009883a 	mov	r4,r2
    1910:	180b883a 	mov	r5,r3
    1914:	d993e717 	ldw	r6,20380(sp)
    1918:	d9d3e817 	ldw	r7,20384(sp)
    191c:	000369c0 	call	369c <__muldf3>
    1920:	8009883a 	mov	r4,r16
    1924:	880b883a 	mov	r5,r17
    1928:	100d883a 	mov	r6,r2
    192c:	180f883a 	mov	r7,r3
    1930:	00036280 	call	3628 <__adddf3>
    1934:	1021883a 	mov	r16,r2
    1938:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][14]*FBE[14 + m*NUM_BANKS];
    193c:	a1000e17 	ldw	r4,56(r20)
    1940:	00031440 	call	3144 <__extendsfdf2>
    1944:	1009883a 	mov	r4,r2
    1948:	180b883a 	mov	r5,r3
    194c:	d993e517 	ldw	r6,20372(sp)
    1950:	d9d3e617 	ldw	r7,20376(sp)
    1954:	000369c0 	call	369c <__muldf3>
    1958:	8009883a 	mov	r4,r16
    195c:	880b883a 	mov	r5,r17
    1960:	100d883a 	mov	r6,r2
    1964:	180f883a 	mov	r7,r3
    1968:	00036280 	call	3628 <__adddf3>
    196c:	1021883a 	mov	r16,r2
    1970:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][15]*FBE[15 + m*NUM_BANKS];
    1974:	a1000f17 	ldw	r4,60(r20)
    1978:	00031440 	call	3144 <__extendsfdf2>
    197c:	1009883a 	mov	r4,r2
    1980:	180b883a 	mov	r5,r3
    1984:	d993e317 	ldw	r6,20364(sp)
    1988:	d9d3e417 	ldw	r7,20368(sp)
    198c:	000369c0 	call	369c <__muldf3>
    1990:	8009883a 	mov	r4,r16
    1994:	880b883a 	mov	r5,r17
    1998:	100d883a 	mov	r6,r2
    199c:	180f883a 	mov	r7,r3
    19a0:	00036280 	call	3628 <__adddf3>
    19a4:	1021883a 	mov	r16,r2
    19a8:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][16]*FBE[16 + m*NUM_BANKS];
    19ac:	a1001017 	ldw	r4,64(r20)
    19b0:	00031440 	call	3144 <__extendsfdf2>
    19b4:	1009883a 	mov	r4,r2
    19b8:	180b883a 	mov	r5,r3
    19bc:	d993e117 	ldw	r6,20356(sp)
    19c0:	d9d3e217 	ldw	r7,20360(sp)
    19c4:	000369c0 	call	369c <__muldf3>
    19c8:	8009883a 	mov	r4,r16
    19cc:	880b883a 	mov	r5,r17
    19d0:	100d883a 	mov	r6,r2
    19d4:	180f883a 	mov	r7,r3
    19d8:	00036280 	call	3628 <__adddf3>
    19dc:	1021883a 	mov	r16,r2
    19e0:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][17]*FBE[17 + m*NUM_BANKS];
    19e4:	a1001117 	ldw	r4,68(r20)
    19e8:	00031440 	call	3144 <__extendsfdf2>
    19ec:	1009883a 	mov	r4,r2
    19f0:	180b883a 	mov	r5,r3
    19f4:	d993df17 	ldw	r6,20348(sp)
    19f8:	d9d3e017 	ldw	r7,20352(sp)
    19fc:	000369c0 	call	369c <__muldf3>
    1a00:	8009883a 	mov	r4,r16
    1a04:	880b883a 	mov	r5,r17
    1a08:	100d883a 	mov	r6,r2
    1a0c:	180f883a 	mov	r7,r3
    1a10:	00036280 	call	3628 <__adddf3>
    1a14:	1021883a 	mov	r16,r2
    1a18:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][18]*FBE[18 + m*NUM_BANKS];
    1a1c:	a1001217 	ldw	r4,72(r20)
    1a20:	00031440 	call	3144 <__extendsfdf2>
    1a24:	1009883a 	mov	r4,r2
    1a28:	180b883a 	mov	r5,r3
    1a2c:	d993dd17 	ldw	r6,20340(sp)
    1a30:	d9d3de17 	ldw	r7,20344(sp)
    1a34:	000369c0 	call	369c <__muldf3>
    1a38:	8009883a 	mov	r4,r16
    1a3c:	880b883a 	mov	r5,r17
    1a40:	100d883a 	mov	r6,r2
    1a44:	180f883a 	mov	r7,r3
    1a48:	00036280 	call	3628 <__adddf3>
    1a4c:	1021883a 	mov	r16,r2
    1a50:	1823883a 	mov	r17,r3
        sum += DCT_LIFTER[i][19]*FBE[19 + m*NUM_BANKS];
      //}
      output[i + m*NUM_CC] = sum;
    1a54:	a1001317 	ldw	r4,76(r20)
    1a58:	00031440 	call	3144 <__extendsfdf2>
    1a5c:	1009883a 	mov	r4,r2
    1a60:	180b883a 	mov	r5,r3
    1a64:	a80d883a 	mov	r6,r21
    1a68:	b00f883a 	mov	r7,r22
    1a6c:	000369c0 	call	369c <__muldf3>
    1a70:	8009883a 	mov	r4,r16
    1a74:	880b883a 	mov	r5,r17
    1a78:	100d883a 	mov	r6,r2
    1a7c:	180f883a 	mov	r7,r3
    1a80:	00036280 	call	3628 <__adddf3>
    1a84:	b8800015 	stw	r2,0(r23)
    1a88:	b8c00115 	stw	r3,4(r23)
        //if(m == 0 && (frames[j + m*numFFTPoints] == 0)) printf(" %lf\n", sum);
      }
      FBE[i + m*NUM_BANKS] = (sum <= 0) ? -100000 : log10(sum);
    }
    // DCT and lifter
    for (i = 0; i < NUM_CC; i++) {
    1a8c:	d893dc17 	ldw	r2,20336(sp)
    1a90:	10800044 	addi	r2,r2,1
    1a94:	d893dc15 	stw	r2,20336(sp)
    1a98:	00801404 	movi	r2,80
    1a9c:	e0b9883a 	add	fp,fp,r2
    1aa0:	a0a9883a 	add	r20,r20,r2
    1aa4:	bdc00204 	addi	r23,r23,8
    1aa8:	00800344 	movi	r2,13
    1aac:	d8d3dc17 	ldw	r3,20336(sp)
    1ab0:	18bede1e 	bne	r3,r2,162c <mfcc+0x2f4>
    1ab4:	d913da17 	ldw	r4,20328(sp)
    1ab8:	21001a04 	addi	r4,r4,104
    1abc:	d913da15 	stw	r4,20328(sp)
    1ac0:	d893d917 	ldw	r2,20324(sp)
    1ac4:	10800504 	addi	r2,r2,20
    1ac8:	d893d915 	stw	r2,20324(sp)
    1acc:	d8d3d817 	ldw	r3,20320(sp)
    1ad0:	18c01044 	addi	r3,r3,65
    1ad4:	d8d3d815 	stw	r3,20320(sp)
  int i, j, m, start, end;
  // Filter bank energies
  double FBE[numFrames*NUM_BANKS];
  double sum;
  // Apply triangle filter bank and take log
  for (m = 0; m < numFrames; m++) {
    1ad8:	00827b04 	movi	r2,2540
    1adc:	d913d917 	ldw	r4,20324(sp)
    1ae0:	20801126 	beq	r4,r2,1b28 <mfcc+0x7f0>
        sum += DCT_LIFTER[i][19]*FBE[19 + m*NUM_BANKS];
      //}
      output[i + m*NUM_CC] = sum;
    }
  }
    1ae4:	d893d817 	ldw	r2,20320(sp)
    1ae8:	d8940415 	stw	r2,20496(sp)
    1aec:	d8d3d917 	ldw	r3,20324(sp)
    1af0:	d8d40315 	stw	r3,20492(sp)
    1af4:	002f883a 	mov	r23,zero
    1af8:	01000074 	movhi	r4,1
    1afc:	211f0f04 	addi	r4,r4,31804
    1b00:	d913db15 	stw	r4,20332(sp)
    1b04:	07000074 	movhi	fp,1
    1b08:	e71f2304 	addi	fp,fp,31884
    1b0c:	003e1a06 	br	1378 <mfcc+0x40>
    1b10:	d893d917 	ldw	r2,20324(sp)
    1b14:	b8a5883a 	add	r18,r23,r2
    1b18:	0009883a 	mov	r4,zero
    1b1c:	01703e34 	movhi	r5,49400
    1b20:	295a8004 	addi	r5,r5,27136
    1b24:	003e4c06 	br	1458 <mfcc+0x120>
    1b28:	dfd40f17 	ldw	ra,20540(sp)
    1b2c:	df140e17 	ldw	fp,20536(sp)
    1b30:	ddd40d17 	ldw	r23,20532(sp)
    1b34:	dd940c17 	ldw	r22,20528(sp)
    1b38:	dd540b17 	ldw	r21,20524(sp)
    1b3c:	dd140a17 	ldw	r20,20520(sp)
    1b40:	dcd40917 	ldw	r19,20516(sp)
    1b44:	dc940817 	ldw	r18,20512(sp)
    1b48:	dc540717 	ldw	r17,20508(sp)
    1b4c:	dc140617 	ldw	r16,20504(sp)
    1b50:	ded41004 	addi	sp,sp,20544
    1b54:	f800283a 	ret

00001b58 <main>:
  for (i=0; i < NUM_CC*numFrames; i++) {
    printf("%lf", sampleMFCC[i]);
  }
}

int main(void) {
    1b58:	defff204 	addi	sp,sp,-56
    1b5c:	dfc00d15 	stw	ra,52(sp)
    1b60:	df000c15 	stw	fp,48(sp)
    1b64:	ddc00b15 	stw	r23,44(sp)
    1b68:	dd800a15 	stw	r22,40(sp)
    1b6c:	dd400915 	stw	r21,36(sp)
    1b70:	dd000815 	stw	r20,32(sp)
    1b74:	dcc00715 	stw	r19,28(sp)
    1b78:	dc800615 	stw	r18,24(sp)
    1b7c:	dc400515 	stw	r17,20(sp)
    1b80:	dc000415 	stw	r16,16(sp)
  return 0;
}

/* Set up audio and pushbutton interrupts. */
static void configure_interrupts () {
  audio_init (audio_isr);
    1b84:	01000034 	movhi	r4,0
    1b88:	21006d04 	addi	r4,r4,436
    1b8c:	00006440 	call	644 <audio_init>
  pushbuttons_enable_interrupts (pushbuttons_isr);
    1b90:	01000034 	movhi	r4,0
    1b94:	21084704 	addi	r4,r4,8476
    1b98:	0000b940 	call	b94 <pushbuttons_enable_interrupts>
  pushbuttons_set_interrupt_mask (BUTTON2|BUTTON1);
    1b9c:	01000184 	movi	r4,6
    1ba0:	0000b600 	call	b60 <pushbuttons_set_interrupt_mask>
  char_lcd_cursor_off();
}

/* Allocate the FFT configuration stryct and prepare sample array. */
static int configure_fft () {
  fft_cfg = kiss_fft_alloc (FFT_LEN, 0, NULL, 0);
    1ba4:	01002004 	movi	r4,128
    1ba8:	000b883a 	mov	r5,zero
    1bac:	000d883a 	mov	r6,zero
    1bb0:	000f883a 	mov	r7,zero
    1bb4:	00005040 	call	504 <kiss_fft_alloc>
    1bb8:	d087fb15 	stw	r2,8172(gp)
  if (! fft_cfg) {
    1bbc:	10011c1e 	bne	r2,zero,2030 <main+0x4d8>
    1bc0:	00011e06 	br	203c <main+0x4e4>
 * --------------------
 * Prepare all interrupts and interfaces. Returns 0 on success, nonzero otherwise.
 */

static void training() {
    char_lcd_move_cursor(0,0);
    1bc4:	0009883a 	mov	r4,zero
    1bc8:	000b883a 	mov	r5,zero
    1bcc:	000067c0 	call	67c <char_lcd_move_cursor>
    char_lcd_write("Push BTN1");
    1bd0:	01000074 	movhi	r4,1
    1bd4:	213ddd04 	addi	r4,r4,-2188
    1bd8:	00006a80 	call	6a8 <char_lcd_write>
    char_lcd_move_cursor(0,1);
    1bdc:	0009883a 	mov	r4,zero
    1be0:	01400044 	movi	r5,1
    1be4:	000067c0 	call	67c <char_lcd_move_cursor>
    char_lcd_write("And say Yes");
    1be8:	01000074 	movhi	r4,1
    1bec:	213de004 	addi	r4,r4,-2176
    1bf0:	00006a80 	call	6a8 <char_lcd_write>
    while(!audio_ready);
    1bf4:	d087fa03 	ldbu	r2,8168(gp)
    1bf8:	10803fcc 	andi	r2,r2,255
    1bfc:	103ffd26 	beq	r2,zero,1bf4 <main+0x9c>
    clearLCDChar();
    1c00:	00012c00 	call	12c0 <clearLCDChar>
    char_lcd_move_cursor(0,0);
    1c04:	0009883a 	mov	r4,zero
    1c08:	000b883a 	mov	r5,zero
    1c0c:	000067c0 	call	67c <char_lcd_move_cursor>
    char_lcd_write("Processing");
    1c10:	01000074 	movhi	r4,1
    1c14:	213de304 	addi	r4,r4,-2164
    1c18:	00006a80 	call	6a8 <char_lcd_write>
    fft(yesBuffer);
    1c1c:	010000b4 	movhi	r4,2
    1c20:	210fd704 	addi	r4,r4,16220
    1c24:	00010a40 	call	10a4 <fft>
    audio_ready = false;
    1c28:	d007fa05 	stb	zero,8168(gp)
    working = false;
    1c2c:	008000b4 	movhi	r2,2
    1c30:	108ec904 	addi	r2,r2,15140
    1c34:	10000005 	stb	zero,0(r2)

    clearLCDChar();
    1c38:	00012c00 	call	12c0 <clearLCDChar>
    char_lcd_move_cursor(0,0);
    1c3c:	0009883a 	mov	r4,zero
    1c40:	000b883a 	mov	r5,zero
    1c44:	000067c0 	call	67c <char_lcd_move_cursor>
    char_lcd_write("Push BTN1");
    1c48:	01000074 	movhi	r4,1
    1c4c:	213ddd04 	addi	r4,r4,-2188
    1c50:	00006a80 	call	6a8 <char_lcd_write>
    char_lcd_move_cursor(0,1);
    1c54:	0009883a 	mov	r4,zero
    1c58:	01400044 	movi	r5,1
    1c5c:	000067c0 	call	67c <char_lcd_move_cursor>
    char_lcd_write("And say No");
    1c60:	01000074 	movhi	r4,1
    1c64:	213de604 	addi	r4,r4,-2152
    1c68:	00006a80 	call	6a8 <char_lcd_write>
    while(!audio_ready);
    1c6c:	d087fa03 	ldbu	r2,8168(gp)
    1c70:	10803fcc 	andi	r2,r2,255
    1c74:	103ffd26 	beq	r2,zero,1c6c <main+0x114>
    clearLCDChar();
    1c78:	00012c00 	call	12c0 <clearLCDChar>
    char_lcd_move_cursor(0,0);
    1c7c:	0009883a 	mov	r4,zero
    1c80:	000b883a 	mov	r5,zero
    1c84:	000067c0 	call	67c <char_lcd_move_cursor>
    char_lcd_write("Processing");
    1c88:	01000074 	movhi	r4,1
    1c8c:	213de304 	addi	r4,r4,-2164
    1c90:	00006a80 	call	6a8 <char_lcd_write>
    fft(noBuffer);
    1c94:	01000134 	movhi	r4,4
    1c98:	210fd704 	addi	r4,r4,16220
    1c9c:	00010a40 	call	10a4 <fft>
    audio_ready = false;
    1ca0:	d007fa05 	stb	zero,8168(gp)
    working = false;
    1ca4:	008000b4 	movhi	r2,2
    1ca8:	108ec904 	addi	r2,r2,15140
    1cac:	10000005 	stb	zero,0(r2)
 * -------------
 * Request audio, then perform an FFT and draw it. Repeat.
 */
void run (void) {
  while (true) {
    clearLCDChar();
    1cb0:	00012c00 	call	12c0 <clearLCDChar>
    char_lcd_move_cursor(0,0);
    1cb4:	0009883a 	mov	r4,zero
    1cb8:	000b883a 	mov	r5,zero
    1cbc:	000067c0 	call	67c <char_lcd_move_cursor>
    char_lcd_write("Push BTN1");
    1cc0:	01000074 	movhi	r4,1
    1cc4:	213ddd04 	addi	r4,r4,-2188
    1cc8:	00006a80 	call	6a8 <char_lcd_write>
    char_lcd_move_cursor(0,1);
    1ccc:	0009883a 	mov	r4,zero
    1cd0:	01400044 	movi	r5,1
    1cd4:	000067c0 	call	67c <char_lcd_move_cursor>
    char_lcd_write("To Operate");
    1cd8:	01000074 	movhi	r4,1
    1cdc:	213de904 	addi	r4,r4,-2140
    1ce0:	00006a80 	call	6a8 <char_lcd_write>
    //samples_for_fft_requested = true; // Request audio
    while (!audio_ready); // Wait for audio
    1ce4:	d087fa03 	ldbu	r2,8168(gp)
    1ce8:	10803fcc 	andi	r2,r2,255
    1cec:	103ffd26 	beq	r2,zero,1ce4 <main+0x18c>
    green_leds_set (0xFF);
    1cf0:	04003fc4 	movi	r16,255
    1cf4:	8009883a 	mov	r4,r16
    1cf8:	00007000 	call	700 <green_leds_set>
    clearLCDChar();
    1cfc:	00012c00 	call	12c0 <clearLCDChar>
    char_lcd_move_cursor(0,0);
    1d00:	0009883a 	mov	r4,zero
    1d04:	000b883a 	mov	r5,zero
    1d08:	000067c0 	call	67c <char_lcd_move_cursor>
    char_lcd_write("Processing");
    1d0c:	01000074 	movhi	r4,1
    1d10:	213de304 	addi	r4,r4,-2164
    1d14:	00006a80 	call	6a8 <char_lcd_write>
    if (bruteForce) fft (sampleBuffer);
    1d18:	d0a01803 	ldbu	r2,-32672(gp)
    1d1c:	10000b26 	beq	r2,zero,1d4c <main+0x1f4>
    1d20:	010001b4 	movhi	r4,6
    1d24:	210fd704 	addi	r4,r4,16220
    1d28:	00010a40 	call	10a4 <fft>
    else {
      fft_mag_window(windowedSampleBuffer);
      mfcc(windowedSampleBuffer, sampleMFCC);
    }
    green_leds_clear (0xFF);
    1d2c:	8009883a 	mov	r4,r16
    1d30:	00007200 	call	720 <green_leds_clear>
    1d34:	0039883a 	mov	fp,zero
    1d38:	002d883a 	mov	r22,zero
    1d3c:	002f883a 	mov	r23,zero
    1d40:	0029883a 	mov	r20,zero
    1d44:	002b883a 	mov	r21,zero
    1d48:	00001306 	br	1d98 <main+0x240>
    clearLCDChar();
    char_lcd_move_cursor(0,0);
    char_lcd_write("Processing");
    if (bruteForce) fft (sampleBuffer);
    else {
      fft_mag_window(windowedSampleBuffer);
    1d4c:	04000234 	movhi	r16,8
    1d50:	840fd704 	addi	r16,r16,16220
    1d54:	8009883a 	mov	r4,r16
    1d58:	0000e500 	call	e50 <fft_mag_window>
      mfcc(windowedSampleBuffer, sampleMFCC);
    1d5c:	04400274 	movhi	r17,9
    1d60:	8c505504 	addi	r17,r17,16724
    1d64:	8009883a 	mov	r4,r16
    1d68:	880b883a 	mov	r5,r17
    1d6c:	00013380 	call	1338 <mfcc>
    }
    green_leds_clear (0xFF);
    1d70:	01003fc4 	movi	r4,255
    1d74:	00007200 	call	720 <green_leds_clear>
    1d78:	002d883a 	mov	r22,zero
    1d7c:	002f883a 	mov	r23,zero
    1d80:	0029883a 	mov	r20,zero
    1d84:	002b883a 	mov	r21,zero
    1d88:	07000074 	movhi	fp,1
    1d8c:	e73f2b04 	addi	fp,fp,-852
    1d90:	dc400115 	stw	r17,4(sp)
    1d94:	00006606 	br	1f30 <main+0x3d8>
    {
      dot_yes = 0;
      dot_no = 0;
      for (i = 0; i < NUM_SAMPLES*2; i++)
       {
        offset_index = (i + j) % (2*NUM_SAMPLES);
    1d98:	00a00034 	movhi	r2,32768
    1d9c:	108fffc4 	addi	r2,r2,16383
    1da0:	e0a0703a 	and	r16,fp,r2
    1da4:	8000040e 	bge	r16,zero,1db8 <main+0x260>
    1da8:	843fffc4 	addi	r16,r16,-1
    1dac:	00b00004 	movi	r2,-16384
    1db0:	80a0b03a 	or	r16,r16,r2
    1db4:	84000044 	addi	r16,r16,1
        dot_yes += yesBuffer[i]*sampleBuffer[offset_index];
    1db8:	e02290fa 	slli	r17,fp,3
    1dbc:	008000b4 	movhi	r2,2
    1dc0:	108fd704 	addi	r2,r2,16220
    1dc4:	8885883a 	add	r2,r17,r2
    1dc8:	11400017 	ldw	r5,0(r2)
    1dcc:	11800117 	ldw	r6,4(r2)
    1dd0:	802090fa 	slli	r16,r16,3
    1dd4:	008001b4 	movhi	r2,6
    1dd8:	108fd704 	addi	r2,r2,16220
    1ddc:	80a1883a 	add	r16,r16,r2
    1de0:	80800017 	ldw	r2,0(r16)
    1de4:	80c00117 	ldw	r3,4(r16)
    1de8:	2809883a 	mov	r4,r5
    1dec:	300b883a 	mov	r5,r6
    1df0:	100d883a 	mov	r6,r2
    1df4:	180f883a 	mov	r7,r3
    1df8:	000369c0 	call	369c <__muldf3>
    1dfc:	b009883a 	mov	r4,r22
    1e00:	b80b883a 	mov	r5,r23
    1e04:	100d883a 	mov	r6,r2
    1e08:	180f883a 	mov	r7,r3
    1e0c:	00036280 	call	3628 <__adddf3>
    1e10:	1025883a 	mov	r18,r2
    1e14:	1827883a 	mov	r19,r3
    1e18:	102d883a 	mov	r22,r2
    1e1c:	182f883a 	mov	r23,r3
        dot_no += noBuffer[i]*sampleBuffer[offset_index];
    1e20:	00800134 	movhi	r2,4
    1e24:	108fd704 	addi	r2,r2,16220
    1e28:	88a3883a 	add	r17,r17,r2
    1e2c:	89400017 	ldw	r5,0(r17)
    1e30:	89800117 	ldw	r6,4(r17)
    1e34:	80800017 	ldw	r2,0(r16)
    1e38:	80c00117 	ldw	r3,4(r16)
    1e3c:	2809883a 	mov	r4,r5
    1e40:	300b883a 	mov	r5,r6
    1e44:	100d883a 	mov	r6,r2
    1e48:	180f883a 	mov	r7,r3
    1e4c:	000369c0 	call	369c <__muldf3>
    1e50:	a009883a 	mov	r4,r20
    1e54:	a80b883a 	mov	r5,r21
    1e58:	100d883a 	mov	r6,r2
    1e5c:	180f883a 	mov	r7,r3
    1e60:	00036280 	call	3628 <__adddf3>
    1e64:	100d883a 	mov	r6,r2
    1e68:	1029883a 	mov	r20,r2
    1e6c:	182b883a 	mov	r21,r3
    int nFFTs = NUM_SAMPLES / FFT_LEN;
    for (j = 0; j < 2*nFFTs; j+= 2*FFT_LEN)
    {
      dot_yes = 0;
      dot_no = 0;
      for (i = 0; i < NUM_SAMPLES*2; i++)
    1e70:	e7000044 	addi	fp,fp,1
    1e74:	00900004 	movi	r2,16384
    1e78:	e0bfc71e 	bne	fp,r2,1d98 <main+0x240>
    1e7c:	9009883a 	mov	r4,r18
    1e80:	980b883a 	mov	r5,r19
    1e84:	d9800215 	stw	r6,8(sp)
    1e88:	d8c00315 	stw	r3,12(sp)
       {
        offset_index = (i + j) % (2*NUM_SAMPLES);
        dot_yes += yesBuffer[i]*sampleBuffer[offset_index];
        dot_no += noBuffer[i]*sampleBuffer[offset_index];
       }
      if (dot_yes > dot_yes_max) dot_yes_max = dot_yes;
    1e8c:	043ff034 	movhi	r16,65472
    1e90:	04707834 	movhi	r17,49632
    1e94:	8c7fffc4 	addi	r17,r17,-1
    1e98:	800d883a 	mov	r6,r16
    1e9c:	880f883a 	mov	r7,r17
    1ea0:	0003d400 	call	3d40 <__gtdf2>
    1ea4:	00800216 	blt	zero,r2,1eb0 <main+0x358>
    1ea8:	802d883a 	mov	r22,r16
    1eac:	882f883a 	mov	r23,r17
      if (dot_no > dot_no_max) dot_no_max = dot_no;
    1eb0:	043ff034 	movhi	r16,65472
    1eb4:	04707834 	movhi	r17,49632
    1eb8:	8c7fffc4 	addi	r17,r17,-1
    1ebc:	d9000217 	ldw	r4,8(sp)
    1ec0:	d9400317 	ldw	r5,12(sp)
    1ec4:	800d883a 	mov	r6,r16
    1ec8:	880f883a 	mov	r7,r17
    1ecc:	0003d400 	call	3d40 <__gtdf2>
    1ed0:	00800216 	blt	zero,r2,1edc <main+0x384>
    1ed4:	8029883a 	mov	r20,r16
    1ed8:	882b883a 	mov	r21,r17
    }
    printf("%lf, %lf\n", dot_yes_max, dot_no_max);
    1edc:	dd400015 	stw	r21,0(sp)
    1ee0:	a00f883a 	mov	r7,r20
    1ee4:	01000074 	movhi	r4,1
    1ee8:	213dec04 	addi	r4,r4,-2128
    1eec:	b00b883a 	mov	r5,r22
    1ef0:	b80d883a 	mov	r6,r23
    1ef4:	0004efc0 	call	4efc <printf>
    if (dot_yes_max >= dot_no_max) printf("Yes\n");
    1ef8:	b009883a 	mov	r4,r22
    1efc:	b80b883a 	mov	r5,r23
    1f00:	a00d883a 	mov	r6,r20
    1f04:	a80f883a 	mov	r7,r21
    1f08:	0003dc80 	call	3dc8 <__gedf2>
    1f0c:	10000416 	blt	r2,zero,1f20 <main+0x3c8>
    1f10:	01000074 	movhi	r4,1
    1f14:	213de204 	addi	r4,r4,-2168
    1f18:	00050140 	call	5014 <puts>
    1f1c:	00003f06 	br	201c <main+0x4c4>
    else printf("No\n");
    1f20:	01000074 	movhi	r4,1
    1f24:	213de804 	addi	r4,r4,-2144
    1f28:	00050140 	call	5014 <puts>
    1f2c:	00003b06 	br	201c <main+0x4c4>
  else {
    double prob[NUM_ROWS] = {0.0, 0.0};
    int j;
    //unrolled loop
    for (j = 0; j < NUM_CC*numFrames; j++) {
      prob[0] += mat[0][j] * sampleMFCC[j];
    1f30:	d8c00117 	ldw	r3,4(sp)
    1f34:	1c000017 	ldw	r16,0(r3)
    1f38:	1c400117 	ldw	r17,4(r3)
    1f3c:	8009883a 	mov	r4,r16
    1f40:	880b883a 	mov	r5,r17
    1f44:	e1800017 	ldw	r6,0(fp)
    1f48:	e1c00117 	ldw	r7,4(fp)
    1f4c:	000369c0 	call	369c <__muldf3>
    1f50:	a009883a 	mov	r4,r20
    1f54:	a80b883a 	mov	r5,r21
    1f58:	100d883a 	mov	r6,r2
    1f5c:	180f883a 	mov	r7,r3
    1f60:	00036280 	call	3628 <__adddf3>
    1f64:	1025883a 	mov	r18,r2
    1f68:	1827883a 	mov	r19,r3
    1f6c:	1029883a 	mov	r20,r2
    1f70:	182b883a 	mov	r21,r3
      prob[1] += mat[1][j] * sampleMFCC[j];
    1f74:	8009883a 	mov	r4,r16
    1f78:	880b883a 	mov	r5,r17
    1f7c:	e18ce617 	ldw	r6,13208(fp)
    1f80:	e1cce717 	ldw	r7,13212(fp)
    1f84:	000369c0 	call	369c <__muldf3>
    1f88:	b009883a 	mov	r4,r22
    1f8c:	b80b883a 	mov	r5,r23
    1f90:	100d883a 	mov	r6,r2
    1f94:	180f883a 	mov	r7,r3
    1f98:	00036280 	call	3628 <__adddf3>
    1f9c:	1021883a 	mov	r16,r2
    1fa0:	1823883a 	mov	r17,r3
    1fa4:	102d883a 	mov	r22,r2
    1fa8:	182f883a 	mov	r23,r3
    1fac:	00800204 	movi	r2,8
    1fb0:	e0b9883a 	add	fp,fp,r2
    1fb4:	d8c00117 	ldw	r3,4(sp)
    1fb8:	1887883a 	add	r3,r3,r2
    1fbc:	d8c00115 	stw	r3,4(sp)
  }
  else {
    double prob[NUM_ROWS] = {0.0, 0.0};
    int j;
    //unrolled loop
    for (j = 0; j < NUM_CC*numFrames; j++) {
    1fc0:	00800074 	movhi	r2,1
    1fc4:	108c1104 	addi	r2,r2,12356
    1fc8:	e0bfd91e 	bne	fp,r2,1f30 <main+0x3d8>
      prob[0] += mat[0][j] * sampleMFCC[j];
      prob[1] += mat[1][j] * sampleMFCC[j];
    }
    printf("%lf, %lf\n", prob[0], prob[1]);
    1fcc:	dc400015 	stw	r17,0(sp)
    1fd0:	800f883a 	mov	r7,r16
    1fd4:	01000074 	movhi	r4,1
    1fd8:	213dec04 	addi	r4,r4,-2128
    1fdc:	900b883a 	mov	r5,r18
    1fe0:	980d883a 	mov	r6,r19
    1fe4:	0004efc0 	call	4efc <printf>
    if (prob[0] >= prob[1]) printf("Yes\n");
    1fe8:	9009883a 	mov	r4,r18
    1fec:	980b883a 	mov	r5,r19
    1ff0:	800d883a 	mov	r6,r16
    1ff4:	880f883a 	mov	r7,r17
    1ff8:	0003dc80 	call	3dc8 <__gedf2>
    1ffc:	10000416 	blt	r2,zero,2010 <main+0x4b8>
    2000:	01000074 	movhi	r4,1
    2004:	213de204 	addi	r4,r4,-2168
    2008:	00050140 	call	5014 <puts>
    200c:	00000306 	br	201c <main+0x4c4>
    else printf("No\n");
    2010:	01000074 	movhi	r4,1
    2014:	213de804 	addi	r4,r4,-2144
    2018:	00050140 	call	5014 <puts>
    // int i;
    // for (i = 0; i < NUM_CC*numFrames; i++) {
    //   printMFCC(sampleMFCC[i]);
    // }
    //end
    audio_ready = false;
    201c:	d007fa05 	stb	zero,8168(gp)
    working = false;
    2020:	008000b4 	movhi	r2,2
    2024:	108ec904 	addi	r2,r2,15140
    2028:	10000005 	stb	zero,0(r2)
    202c:	003f2006 	br	1cb0 <main+0x158>
  configure_interrupts ();

  if (configure_fft() != 0) {
    return 1;
  }
  if(bruteForce) {
    2030:	d0a01803 	ldbu	r2,-32672(gp)
    2034:	103f1e26 	beq	r2,zero,1cb0 <main+0x158>
    2038:	003ee206 	br	1bc4 <main+0x6c>

/* Allocate the FFT configuration stryct and prepare sample array. */
static int configure_fft () {
  fft_cfg = kiss_fft_alloc (FFT_LEN, 0, NULL, 0);
  if (! fft_cfg) {
    printf ("Error: Cannot allocate memory for FFT control structure.\n");
    203c:	01000074 	movhi	r4,1
    2040:	213dce04 	addi	r4,r4,-2248
    2044:	00050140 	call	5014 <puts>
  //testMFCC();
  // /* Repeatedly checks state and makes updates. */
  run ();

  return 0;
}
    2048:	00800044 	movi	r2,1
    204c:	dfc00d17 	ldw	ra,52(sp)
    2050:	df000c17 	ldw	fp,48(sp)
    2054:	ddc00b17 	ldw	r23,44(sp)
    2058:	dd800a17 	ldw	r22,40(sp)
    205c:	dd400917 	ldw	r21,36(sp)
    2060:	dd000817 	ldw	r20,32(sp)
    2064:	dcc00717 	ldw	r19,28(sp)
    2068:	dc800617 	ldw	r18,24(sp)
    206c:	dc400517 	ldw	r17,20(sp)
    2070:	dc000417 	ldw	r16,16(sp)
    2074:	dec00e04 	addi	sp,sp,56
    2078:	f800283a 	ret

0000207c <testMFCC>:
 * Function: main
 * --------------
 * main simply calls initialize() then run().
 */

void testMFCC() {
    207c:	defffd04 	addi	sp,sp,-12
    2080:	dfc00215 	stw	ra,8(sp)
    2084:	dc400115 	stw	r17,4(sp)
    2088:	dc000015 	stw	r16,0(sp)
    208c:	0007883a 	mov	r3,zero
    2090:	0009883a 	mov	r4,zero
    2094:	02000274 	movhi	r8,9
    2098:	421d4504 	addi	r8,r8,29972
    209c:	01c00044 	movi	r7,1
    20a0:	0180fa04 	movi	r6,1000
    20a4:	01480004 	movi	r5,8192
  int i;
  for(i = 0; i < NUM_SAMPLES; i++) {
    samples_for_fft[i].r = 1000*i;
    20a8:	180490fa 	slli	r2,r3,3
    20ac:	1205883a 	add	r2,r2,r8
    20b0:	11000015 	stw	r4,0(r2)
 * main simply calls initialize() then run().
 */

void testMFCC() {
  int i;
  for(i = 0; i < NUM_SAMPLES; i++) {
    20b4:	19c7883a 	add	r3,r3,r7
    20b8:	2189883a 	add	r4,r4,r6
    20bc:	197ffa1e 	bne	r3,r5,20a8 <testMFCC+0x2c>
    samples_for_fft[i].r = 1000*i;
  }
  fft_mag_window(windowedSampleBuffer);
    20c0:	04000234 	movhi	r16,8
    20c4:	840fd704 	addi	r16,r16,16220
    20c8:	8009883a 	mov	r4,r16
    20cc:	0000e500 	call	e50 <fft_mag_window>
  mfcc(windowedSampleBuffer, sampleMFCC);
    20d0:	04400274 	movhi	r17,9
    20d4:	8c505504 	addi	r17,r17,16724
    20d8:	8009883a 	mov	r4,r16
    20dc:	880b883a 	mov	r5,r17
    20e0:	00013380 	call	1338 <mfcc>
    20e4:	04000274 	movhi	r16,9
    20e8:	841d3b04 	addi	r16,r16,29932
  for (i=0; i < NUM_CC*numFrames; i++) {
    printf("%lf", sampleMFCC[i]);
    20ec:	01000074 	movhi	r4,1
    20f0:	213def04 	addi	r4,r4,-2116
    20f4:	89400017 	ldw	r5,0(r17)
    20f8:	89800117 	ldw	r6,4(r17)
    20fc:	0004efc0 	call	4efc <printf>
    2100:	8c400204 	addi	r17,r17,8
  for(i = 0; i < NUM_SAMPLES; i++) {
    samples_for_fft[i].r = 1000*i;
  }
  fft_mag_window(windowedSampleBuffer);
  mfcc(windowedSampleBuffer, sampleMFCC);
  for (i=0; i < NUM_CC*numFrames; i++) {
    2104:	8c3ff91e 	bne	r17,r16,20ec <testMFCC+0x70>
    printf("%lf", sampleMFCC[i]);
  }
}
    2108:	dfc00217 	ldw	ra,8(sp)
    210c:	dc400117 	ldw	r17,4(sp)
    2110:	dc000017 	ldw	r16,0(sp)
    2114:	dec00304 	addi	sp,sp,12
    2118:	f800283a 	ret

0000211c <pushbuttons_isr>:
 */
 extern volatile bool samples_for_fft_requested;
 extern volatile bool working;
 
void pushbuttons_isr (void *context, unsigned int id)
{
    211c:	deffff04 	addi	sp,sp,-4
    2120:	dfc00015 	stw	ra,0(sp)
  uint32_t edges = pushbuttons_get_edge_capture ();
    2124:	0000b780 	call	b78 <pushbuttons_get_edge_capture>
  if (edges & BUTTON1 && !working)
    2128:	1080008c 	andi	r2,r2,2
    212c:	10000a26 	beq	r2,zero,2158 <pushbuttons_isr+0x3c>
    2130:	010000b4 	movhi	r4,2
    2134:	210ec904 	addi	r4,r4,15140
    2138:	20800003 	ldbu	r2,0(r4)
    213c:	10803fcc 	andi	r2,r2,255
    2140:	1000051e 	bne	r2,zero,2158 <pushbuttons_isr+0x3c>
    {
      samples_for_fft_requested = true;
    2144:	00c00044 	movi	r3,1
    2148:	008000b4 	movhi	r2,2
    214c:	108ec704 	addi	r2,r2,15132
    2150:	10c00005 	stb	r3,0(r2)
      working = true;
    2154:	20c00005 	stb	r3,0(r4)
    }
  pushbuttons_clear_edge_capture ();
    2158:	0000b840 	call	b84 <pushbuttons_clear_edge_capture>
}
    215c:	dfc00017 	ldw	ra,0(sp)
    2160:	dec00104 	addi	sp,sp,4
    2164:	f800283a 	ret

00002168 <switches_isr>:
 *
 */
void switches_isr(void *context, unsigned int id)
{

}
    2168:	f800283a 	ret

0000216c <log10>:
    216c:	defff104 	addi	sp,sp,-60
    2170:	dd000d15 	stw	r20,52(sp)
    2174:	050000b4 	movhi	r20,2
    2178:	a526e404 	addi	r20,r20,-25712
    217c:	dcc00c15 	stw	r19,48(sp)
    2180:	dc800b15 	stw	r18,44(sp)
    2184:	dc400a15 	stw	r17,40(sp)
    2188:	dc000915 	stw	r16,36(sp)
    218c:	2025883a 	mov	r18,r4
    2190:	dfc00e15 	stw	ra,56(sp)
    2194:	2827883a 	mov	r19,r5
    2198:	00024240 	call	2424 <__ieee754_log10>
    219c:	a1000017 	ldw	r4,0(r20)
    21a0:	1021883a 	mov	r16,r2
    21a4:	00bfffc4 	movi	r2,-1
    21a8:	1823883a 	mov	r17,r3
    21ac:	20800a26 	beq	r4,r2,21d8 <log10+0x6c>
    21b0:	9009883a 	mov	r4,r18
    21b4:	980b883a 	mov	r5,r19
    21b8:	00029040 	call	2904 <__isnand>
    21bc:	1000061e 	bne	r2,zero,21d8 <log10+0x6c>
    21c0:	000d883a 	mov	r6,zero
    21c4:	000f883a 	mov	r7,zero
    21c8:	9009883a 	mov	r4,r18
    21cc:	980b883a 	mov	r5,r19
    21d0:	0003ed80 	call	3ed8 <__ledf2>
    21d4:	00800a0e 	bge	zero,r2,2200 <log10+0x94>
    21d8:	8005883a 	mov	r2,r16
    21dc:	8807883a 	mov	r3,r17
    21e0:	dfc00e17 	ldw	ra,56(sp)
    21e4:	dd000d17 	ldw	r20,52(sp)
    21e8:	dcc00c17 	ldw	r19,48(sp)
    21ec:	dc800b17 	ldw	r18,44(sp)
    21f0:	dc400a17 	ldw	r17,40(sp)
    21f4:	dc000917 	ldw	r16,36(sp)
    21f8:	dec00f04 	addi	sp,sp,60
    21fc:	f800283a 	ret
    2200:	a4000017 	ldw	r16,0(r20)
    2204:	00800074 	movhi	r2,1
    2208:	10bdf004 	addi	r2,r2,-2112
    220c:	d8800115 	stw	r2,4(sp)
    2210:	d8000815 	stw	zero,32(sp)
    2214:	dc800215 	stw	r18,8(sp)
    2218:	dcc00315 	stw	r19,12(sp)
    221c:	dc800415 	stw	r18,16(sp)
    2220:	dcc00515 	stw	r19,20(sp)
    2224:	8000231e 	bne	r16,zero,22b4 <log10+0x148>
    2228:	00b80034 	movhi	r2,57344
    222c:	00f1fc34 	movhi	r3,51184
    2230:	18ffffc4 	addi	r3,r3,-1
    2234:	d8800615 	stw	r2,24(sp)
    2238:	d8c00715 	stw	r3,28(sp)
    223c:	000d883a 	mov	r6,zero
    2240:	000f883a 	mov	r7,zero
    2244:	980b883a 	mov	r5,r19
    2248:	9009883a 	mov	r4,r18
    224c:	0003cb80 	call	3cb8 <__eqdf2>
    2250:	10000b1e 	bne	r2,zero,2280 <log10+0x114>
    2254:	00800084 	movi	r2,2
    2258:	d8800015 	stw	r2,0(sp)
    225c:	80801d26 	beq	r16,r2,22d4 <log10+0x168>
    2260:	d809883a 	mov	r4,sp
    2264:	00029340 	call	2934 <matherr>
    2268:	10001a26 	beq	r2,zero,22d4 <log10+0x168>
    226c:	d8800817 	ldw	r2,32(sp)
    2270:	10001c1e 	bne	r2,zero,22e4 <log10+0x178>
    2274:	dc000617 	ldw	r16,24(sp)
    2278:	dc400717 	ldw	r17,28(sp)
    227c:	003fd606 	br	21d8 <log10+0x6c>
    2280:	00800044 	movi	r2,1
    2284:	00c00084 	movi	r3,2
    2288:	d8800015 	stw	r2,0(sp)
    228c:	80c00d26 	beq	r16,r3,22c4 <log10+0x158>
    2290:	d809883a 	mov	r4,sp
    2294:	00029340 	call	2934 <matherr>
    2298:	10000a26 	beq	r2,zero,22c4 <log10+0x158>
    229c:	01000074 	movhi	r4,1
    22a0:	213ddc04 	addi	r4,r4,-2192
    22a4:	000293c0 	call	293c <nan>
    22a8:	d8c00715 	stw	r3,28(sp)
    22ac:	d8800615 	stw	r2,24(sp)
    22b0:	003fee06 	br	226c <log10+0x100>
    22b4:	00bffc34 	movhi	r2,65520
    22b8:	d8800715 	stw	r2,28(sp)
    22bc:	d8000615 	stw	zero,24(sp)
    22c0:	003fde06 	br	223c <log10+0xd0>
    22c4:	00047840 	call	4784 <__errno>
    22c8:	00c00844 	movi	r3,33
    22cc:	10c00015 	stw	r3,0(r2)
    22d0:	003ff206 	br	229c <log10+0x130>
    22d4:	00047840 	call	4784 <__errno>
    22d8:	00c00884 	movi	r3,34
    22dc:	10c00015 	stw	r3,0(r2)
    22e0:	003fe206 	br	226c <log10+0x100>
    22e4:	00047840 	call	4784 <__errno>
    22e8:	d8c00817 	ldw	r3,32(sp)
    22ec:	10c00015 	stw	r3,0(r2)
    22f0:	003fe006 	br	2274 <log10+0x108>

000022f4 <sqrt>:
    22f4:	defff104 	addi	sp,sp,-60
    22f8:	dd000d15 	stw	r20,52(sp)
    22fc:	050000b4 	movhi	r20,2
    2300:	a526e404 	addi	r20,r20,-25712
    2304:	dcc00c15 	stw	r19,48(sp)
    2308:	dc800b15 	stw	r18,44(sp)
    230c:	dc400a15 	stw	r17,40(sp)
    2310:	dc000915 	stw	r16,36(sp)
    2314:	2025883a 	mov	r18,r4
    2318:	dfc00e15 	stw	ra,56(sp)
    231c:	2827883a 	mov	r19,r5
    2320:	000263c0 	call	263c <__ieee754_sqrt>
    2324:	a1000017 	ldw	r4,0(r20)
    2328:	1021883a 	mov	r16,r2
    232c:	00bfffc4 	movi	r2,-1
    2330:	1823883a 	mov	r17,r3
    2334:	20800a26 	beq	r4,r2,2360 <sqrt+0x6c>
    2338:	9009883a 	mov	r4,r18
    233c:	980b883a 	mov	r5,r19
    2340:	00029040 	call	2904 <__isnand>
    2344:	1000061e 	bne	r2,zero,2360 <sqrt+0x6c>
    2348:	000d883a 	mov	r6,zero
    234c:	000f883a 	mov	r7,zero
    2350:	9009883a 	mov	r4,r18
    2354:	980b883a 	mov	r5,r19
    2358:	0003e500 	call	3e50 <__ltdf2>
    235c:	10000a16 	blt	r2,zero,2388 <sqrt+0x94>
    2360:	8005883a 	mov	r2,r16
    2364:	8807883a 	mov	r3,r17
    2368:	dfc00e17 	ldw	ra,56(sp)
    236c:	dd000d17 	ldw	r20,52(sp)
    2370:	dcc00c17 	ldw	r19,48(sp)
    2374:	dc800b17 	ldw	r18,44(sp)
    2378:	dc400a17 	ldw	r17,40(sp)
    237c:	dc000917 	ldw	r16,36(sp)
    2380:	dec00f04 	addi	sp,sp,60
    2384:	f800283a 	ret
    2388:	a4000017 	ldw	r16,0(r20)
    238c:	00800044 	movi	r2,1
    2390:	00c00074 	movhi	r3,1
    2394:	18fdf204 	addi	r3,r3,-2104
    2398:	d8800015 	stw	r2,0(sp)
    239c:	d8c00115 	stw	r3,4(sp)
    23a0:	dcc00315 	stw	r19,12(sp)
    23a4:	d8000815 	stw	zero,32(sp)
    23a8:	dc800415 	stw	r18,16(sp)
    23ac:	dcc00515 	stw	r19,20(sp)
    23b0:	dc800215 	stw	r18,8(sp)
    23b4:	80000a1e 	bne	r16,zero,23e0 <sqrt+0xec>
    23b8:	d8000615 	stw	zero,24(sp)
    23bc:	d8000715 	stw	zero,28(sp)
    23c0:	d809883a 	mov	r4,sp
    23c4:	00029340 	call	2934 <matherr>
    23c8:	10000e26 	beq	r2,zero,2404 <sqrt+0x110>
    23cc:	d8800817 	ldw	r2,32(sp)
    23d0:	1000101e 	bne	r2,zero,2414 <sqrt+0x120>
    23d4:	dc000617 	ldw	r16,24(sp)
    23d8:	dc400717 	ldw	r17,28(sp)
    23dc:	003fe006 	br	2360 <sqrt+0x6c>
    23e0:	0009883a 	mov	r4,zero
    23e4:	000d883a 	mov	r6,zero
    23e8:	000b883a 	mov	r5,zero
    23ec:	000f883a 	mov	r7,zero
    23f0:	0003a600 	call	3a60 <__divdf3>
    23f4:	d8800615 	stw	r2,24(sp)
    23f8:	00800084 	movi	r2,2
    23fc:	d8c00715 	stw	r3,28(sp)
    2400:	80bfef1e 	bne	r16,r2,23c0 <sqrt+0xcc>
    2404:	00047840 	call	4784 <__errno>
    2408:	00c00844 	movi	r3,33
    240c:	10c00015 	stw	r3,0(r2)
    2410:	003fee06 	br	23cc <sqrt+0xd8>
    2414:	00047840 	call	4784 <__errno>
    2418:	d8c00817 	ldw	r3,32(sp)
    241c:	10c00015 	stw	r3,0(r2)
    2420:	003fec06 	br	23d4 <sqrt+0xe0>

00002424 <__ieee754_log10>:
    2424:	defff904 	addi	sp,sp,-28
    2428:	dc400115 	stw	r17,4(sp)
    242c:	2023883a 	mov	r17,r4
    2430:	01000434 	movhi	r4,16
    2434:	213fffc4 	addi	r4,r4,-1
    2438:	dd000415 	stw	r20,16(sp)
    243c:	dc800215 	stw	r18,8(sp)
    2440:	dfc00615 	stw	ra,24(sp)
    2444:	dd400515 	stw	r21,20(sp)
    2448:	dcc00315 	stw	r19,12(sp)
    244c:	dc000015 	stw	r16,0(sp)
    2450:	2825883a 	mov	r18,r5
    2454:	2829883a 	mov	r20,r5
    2458:	2140160e 	bge	r4,r5,24b4 <__ieee754_log10+0x90>
    245c:	009ffc34 	movhi	r2,32752
    2460:	10bfffc4 	addi	r2,r2,-1
    2464:	000b883a 	mov	r5,zero
    2468:	15002e0e 	bge	r2,r20,2524 <__ieee754_log10+0x100>
    246c:	900f883a 	mov	r7,r18
    2470:	8809883a 	mov	r4,r17
    2474:	900b883a 	mov	r5,r18
    2478:	880d883a 	mov	r6,r17
    247c:	00036280 	call	3628 <__adddf3>
    2480:	100d883a 	mov	r6,r2
    2484:	180f883a 	mov	r7,r3
    2488:	3005883a 	mov	r2,r6
    248c:	3807883a 	mov	r3,r7
    2490:	dfc00617 	ldw	ra,24(sp)
    2494:	dd400517 	ldw	r21,20(sp)
    2498:	dd000417 	ldw	r20,16(sp)
    249c:	dcc00317 	ldw	r19,12(sp)
    24a0:	dc800217 	ldw	r18,8(sp)
    24a4:	dc400117 	ldw	r17,4(sp)
    24a8:	dc000017 	ldw	r16,0(sp)
    24ac:	dec00704 	addi	sp,sp,28
    24b0:	f800283a 	ret
    24b4:	00a00034 	movhi	r2,32768
    24b8:	10bfffc4 	addi	r2,r2,-1
    24bc:	2884703a 	and	r2,r5,r2
    24c0:	8884b03a 	or	r2,r17,r2
    24c4:	1000091e 	bne	r2,zero,24ec <__ieee754_log10+0xc8>
    24c8:	00f0d434 	movhi	r3,50000
    24cc:	000d883a 	mov	r6,zero
    24d0:	000f883a 	mov	r7,zero
    24d4:	180b883a 	mov	r5,r3
    24d8:	1009883a 	mov	r4,r2
    24dc:	0003a600 	call	3a60 <__divdf3>
    24e0:	100d883a 	mov	r6,r2
    24e4:	180f883a 	mov	r7,r3
    24e8:	003fe706 	br	2488 <__ieee754_log10+0x64>
    24ec:	28004a16 	blt	r5,zero,2618 <__ieee754_log10+0x1f4>
    24f0:	0005883a 	mov	r2,zero
    24f4:	00d0d434 	movhi	r3,17232
    24f8:	8809883a 	mov	r4,r17
    24fc:	180f883a 	mov	r7,r3
    2500:	100d883a 	mov	r6,r2
    2504:	000369c0 	call	369c <__muldf3>
    2508:	1023883a 	mov	r17,r2
    250c:	1829883a 	mov	r20,r3
    2510:	009ffc34 	movhi	r2,32752
    2514:	10bfffc4 	addi	r2,r2,-1
    2518:	1825883a 	mov	r18,r3
    251c:	017ff284 	movi	r5,-54
    2520:	153fd216 	blt	r2,r20,246c <__ieee754_log10+0x48>
    2524:	a009d53a 	srai	r4,r20,20
    2528:	2909883a 	add	r4,r5,r4
    252c:	213f0044 	addi	r4,r4,-1023
    2530:	2020d7fa 	srli	r16,r4,31
    2534:	2409883a 	add	r4,r4,r16
    2538:	0003f600 	call	3f60 <__floatsidf>
    253c:	0180ffc4 	movi	r6,1023
    2540:	340dc83a 	sub	r6,r6,r16
    2544:	300c953a 	slli	r6,r6,20
    2548:	02000434 	movhi	r8,16
    254c:	423fffc4 	addi	r8,r8,-1
    2550:	a210703a 	and	r8,r20,r8
    2554:	4190b03a 	or	r8,r8,r6
    2558:	8809883a 	mov	r4,r17
    255c:	400b883a 	mov	r5,r8
    2560:	1025883a 	mov	r18,r2
    2564:	1827883a 	mov	r19,r3
    2568:	000294c0 	call	294c <__ieee754_log>
    256c:	02047c74 	movhi	r8,4593
    2570:	420acd84 	addi	r8,r8,11062
    2574:	024f56b4 	movhi	r9,15706
    2578:	4a7fbcc4 	addi	r9,r9,-269
    257c:	480f883a 	mov	r7,r9
    2580:	400d883a 	mov	r6,r8
    2584:	9009883a 	mov	r4,r18
    2588:	980b883a 	mov	r5,r19
    258c:	1021883a 	mov	r16,r2
    2590:	1823883a 	mov	r17,r3
    2594:	000369c0 	call	369c <__muldf3>
    2598:	020549f4 	movhi	r8,5415
    259c:	42394384 	addi	r8,r8,-6898
    25a0:	024ff734 	movhi	r9,16348
    25a4:	4a72dec4 	addi	r9,r9,-13445
    25a8:	480f883a 	mov	r7,r9
    25ac:	400d883a 	mov	r6,r8
    25b0:	880b883a 	mov	r5,r17
    25b4:	8009883a 	mov	r4,r16
    25b8:	1823883a 	mov	r17,r3
    25bc:	1021883a 	mov	r16,r2
    25c0:	000369c0 	call	369c <__muldf3>
    25c4:	180f883a 	mov	r7,r3
    25c8:	880b883a 	mov	r5,r17
    25cc:	8009883a 	mov	r4,r16
    25d0:	100d883a 	mov	r6,r2
    25d4:	00036280 	call	3628 <__adddf3>
    25d8:	021427f4 	movhi	r8,20639
    25dc:	42180004 	addi	r8,r8,24576
    25e0:	024ff4f4 	movhi	r9,16339
    25e4:	4a5104c4 	addi	r9,r9,17427
    25e8:	9009883a 	mov	r4,r18
    25ec:	980b883a 	mov	r5,r19
    25f0:	480f883a 	mov	r7,r9
    25f4:	400d883a 	mov	r6,r8
    25f8:	1021883a 	mov	r16,r2
    25fc:	1823883a 	mov	r17,r3
    2600:	000369c0 	call	369c <__muldf3>
    2604:	180f883a 	mov	r7,r3
    2608:	880b883a 	mov	r5,r17
    260c:	8009883a 	mov	r4,r16
    2610:	100d883a 	mov	r6,r2
    2614:	003f9906 	br	247c <__ieee754_log10+0x58>
    2618:	280f883a 	mov	r7,r5
    261c:	8809883a 	mov	r4,r17
    2620:	880d883a 	mov	r6,r17
    2624:	00035a80 	call	35a8 <__subdf3>
    2628:	180b883a 	mov	r5,r3
    262c:	000d883a 	mov	r6,zero
    2630:	000f883a 	mov	r7,zero
    2634:	1009883a 	mov	r4,r2
    2638:	003fa806 	br	24dc <__ieee754_log10+0xb8>

0000263c <__ieee754_sqrt>:
    263c:	defffd04 	addi	sp,sp,-12
    2640:	dc000015 	stw	r16,0(sp)
    2644:	009ffc34 	movhi	r2,32752
    2648:	2021883a 	mov	r16,r4
    264c:	291ffc2c 	andhi	r4,r5,32752
    2650:	dc400115 	stw	r17,4(sp)
    2654:	dfc00215 	stw	ra,8(sp)
    2658:	2823883a 	mov	r17,r5
    265c:	280f883a 	mov	r7,r5
    2660:	2807883a 	mov	r3,r5
    2664:	8011883a 	mov	r8,r16
    2668:	20807d26 	beq	r4,r2,2860 <__ieee754_sqrt+0x224>
    266c:	01408d0e 	bge	zero,r5,28a4 <__ieee754_sqrt+0x268>
    2670:	380dd53a 	srai	r6,r7,20
    2674:	3000131e 	bne	r6,zero,26c4 <__ieee754_sqrt+0x88>
    2678:	1800041e 	bne	r3,zero,268c <__ieee754_sqrt+0x50>
    267c:	400ed2fa 	srli	r7,r8,11
    2680:	31bffac4 	addi	r6,r6,-21
    2684:	4010957a 	slli	r8,r8,21
    2688:	383ffc26 	beq	r7,zero,267c <__ieee754_sqrt+0x40>
    268c:	3880042c 	andhi	r2,r7,16
    2690:	1000991e 	bne	r2,zero,28f8 <__ieee754_sqrt+0x2bc>
    2694:	0009883a 	mov	r4,zero
    2698:	39cf883a 	add	r7,r7,r7
    269c:	3880042c 	andhi	r2,r7,16
    26a0:	21000044 	addi	r4,r4,1
    26a4:	103ffc26 	beq	r2,zero,2698 <__ieee754_sqrt+0x5c>
    26a8:	00800804 	movi	r2,32
    26ac:	1105c83a 	sub	r2,r2,r4
    26b0:	4086d83a 	srl	r3,r8,r2
    26b4:	4110983a 	sll	r8,r8,r4
    26b8:	3105c83a 	sub	r2,r6,r4
    26bc:	38ceb03a 	or	r7,r7,r3
    26c0:	11800044 	addi	r6,r2,1
    26c4:	31bf0044 	addi	r6,r6,-1023
    26c8:	30c0004c 	andi	r3,r6,1
    26cc:	00800434 	movhi	r2,16
    26d0:	10bfffc4 	addi	r2,r2,-1
    26d4:	3884703a 	and	r2,r7,r2
    26d8:	1807003a 	cmpeq	r3,r3,zero
    26dc:	11000434 	orhi	r4,r2,16
    26e0:	18005426 	beq	r3,zero,2834 <__ieee754_sqrt+0x1f8>
    26e4:	4004d7fa 	srli	r2,r8,31
    26e8:	4207883a 	add	r3,r8,r8
    26ec:	02800834 	movhi	r10,32
    26f0:	1105883a 	add	r2,r2,r4
    26f4:	2089883a 	add	r4,r4,r2
    26f8:	0011883a 	mov	r8,zero
    26fc:	000b883a 	mov	r5,zero
    2700:	0013883a 	mov	r9,zero
    2704:	02c00584 	movi	r11,22
    2708:	520f883a 	add	r7,r10,r8
    270c:	1804d7fa 	srli	r2,r3,31
    2710:	4a400044 	addi	r9,r9,1
    2714:	18c7883a 	add	r3,r3,r3
    2718:	21c00316 	blt	r4,r7,2728 <__ieee754_sqrt+0xec>
    271c:	21c9c83a 	sub	r4,r4,r7
    2720:	2a8b883a 	add	r5,r5,r10
    2724:	51d1883a 	add	r8,r10,r7
    2728:	1105883a 	add	r2,r2,r4
    272c:	5014d07a 	srli	r10,r10,1
    2730:	2089883a 	add	r4,r4,r2
    2734:	4afff41e 	bne	r9,r11,2708 <__ieee754_sqrt+0xcc>
    2738:	02600034 	movhi	r9,32768
    273c:	0017883a 	mov	r11,zero
    2740:	0019883a 	mov	r12,zero
    2744:	0015883a 	mov	r10,zero
    2748:	4821883a 	mov	r16,r9
    274c:	03c00804 	movi	r15,32
    2750:	00000806 	br	2774 <__ieee754_sqrt+0x138>
    2754:	22003426 	beq	r4,r8,2828 <__ieee754_sqrt+0x1ec>
    2758:	1804d7fa 	srli	r2,r3,31
    275c:	52800044 	addi	r10,r10,1
    2760:	18c7883a 	add	r3,r3,r3
    2764:	1105883a 	add	r2,r2,r4
    2768:	2089883a 	add	r4,r4,r2
    276c:	4812d07a 	srli	r9,r9,1
    2770:	53c01326 	beq	r10,r15,27c0 <__ieee754_sqrt+0x184>
    2774:	4acf883a 	add	r7,r9,r11
    2778:	413ff60e 	bge	r8,r4,2754 <__ieee754_sqrt+0x118>
    277c:	38a0002c 	andhi	r2,r7,32768
    2780:	3a57883a 	add	r11,r7,r9
    2784:	14002426 	beq	r2,r16,2818 <__ieee754_sqrt+0x1dc>
    2788:	4005883a 	mov	r2,r8
    278c:	2209c83a 	sub	r4,r4,r8
    2790:	19c0012e 	bgeu	r3,r7,2798 <__ieee754_sqrt+0x15c>
    2794:	213fffc4 	addi	r4,r4,-1
    2798:	19c7c83a 	sub	r3,r3,r7
    279c:	1011883a 	mov	r8,r2
    27a0:	1804d7fa 	srli	r2,r3,31
    27a4:	52800044 	addi	r10,r10,1
    27a8:	6259883a 	add	r12,r12,r9
    27ac:	1105883a 	add	r2,r2,r4
    27b0:	18c7883a 	add	r3,r3,r3
    27b4:	2089883a 	add	r4,r4,r2
    27b8:	4812d07a 	srli	r9,r9,1
    27bc:	53ffed1e 	bne	r10,r15,2774 <__ieee754_sqrt+0x138>
    27c0:	20c4b03a 	or	r2,r4,r3
    27c4:	1000201e 	bne	r2,zero,2848 <__ieee754_sqrt+0x20c>
    27c8:	600ed07a 	srli	r7,r12,1
    27cc:	2880004c 	andi	r2,r5,1
    27d0:	1005003a 	cmpeq	r2,r2,zero
    27d4:	1000011e 	bne	r2,zero,27dc <__ieee754_sqrt+0x1a0>
    27d8:	39e00034 	orhi	r7,r7,32768
    27dc:	300dd07a 	srai	r6,r6,1
    27e0:	280bd07a 	srai	r5,r5,1
    27e4:	010ff834 	movhi	r4,16352
    27e8:	300c953a 	slli	r6,r6,20
    27ec:	290b883a 	add	r5,r5,r4
    27f0:	3821883a 	mov	r16,r7
    27f4:	299d883a 	add	r14,r5,r6
    27f8:	7023883a 	mov	r17,r14
    27fc:	8005883a 	mov	r2,r16
    2800:	8807883a 	mov	r3,r17
    2804:	dfc00217 	ldw	ra,8(sp)
    2808:	dc400117 	ldw	r17,4(sp)
    280c:	dc000017 	ldw	r16,0(sp)
    2810:	dec00304 	addi	sp,sp,12
    2814:	f800283a 	ret
    2818:	5884703a 	and	r2,r11,r2
    281c:	103fda1e 	bne	r2,zero,2788 <__ieee754_sqrt+0x14c>
    2820:	40800044 	addi	r2,r8,1
    2824:	003fd906 	br	278c <__ieee754_sqrt+0x150>
    2828:	19ffd42e 	bgeu	r3,r7,277c <__ieee754_sqrt+0x140>
    282c:	2011883a 	mov	r8,r4
    2830:	003fc906 	br	2758 <__ieee754_sqrt+0x11c>
    2834:	4004d7fa 	srli	r2,r8,31
    2838:	4211883a 	add	r8,r8,r8
    283c:	1105883a 	add	r2,r2,r4
    2840:	2089883a 	add	r4,r4,r2
    2844:	003fa706 	br	26e4 <__ieee754_sqrt+0xa8>
    2848:	00bfffc4 	movi	r2,-1
    284c:	60802726 	beq	r12,r2,28ec <__ieee754_sqrt+0x2b0>
    2850:	6080004c 	andi	r2,r12,1
    2854:	6085883a 	add	r2,r12,r2
    2858:	100ed07a 	srli	r7,r2,1
    285c:	003fdb06 	br	27cc <__ieee754_sqrt+0x190>
    2860:	8009883a 	mov	r4,r16
    2864:	800d883a 	mov	r6,r16
    2868:	000369c0 	call	369c <__muldf3>
    286c:	180f883a 	mov	r7,r3
    2870:	880b883a 	mov	r5,r17
    2874:	8009883a 	mov	r4,r16
    2878:	100d883a 	mov	r6,r2
    287c:	00036280 	call	3628 <__adddf3>
    2880:	1021883a 	mov	r16,r2
    2884:	1823883a 	mov	r17,r3
    2888:	8005883a 	mov	r2,r16
    288c:	8807883a 	mov	r3,r17
    2890:	dfc00217 	ldw	ra,8(sp)
    2894:	dc400117 	ldw	r17,4(sp)
    2898:	dc000017 	ldw	r16,0(sp)
    289c:	dec00304 	addi	sp,sp,12
    28a0:	f800283a 	ret
    28a4:	00a00034 	movhi	r2,32768
    28a8:	10bfffc4 	addi	r2,r2,-1
    28ac:	2884703a 	and	r2,r5,r2
    28b0:	8084b03a 	or	r2,r16,r2
    28b4:	103fd126 	beq	r2,zero,27fc <__ieee754_sqrt+0x1c0>
    28b8:	283f6d26 	beq	r5,zero,2670 <__ieee754_sqrt+0x34>
    28bc:	280f883a 	mov	r7,r5
    28c0:	8009883a 	mov	r4,r16
    28c4:	800d883a 	mov	r6,r16
    28c8:	00035a80 	call	35a8 <__subdf3>
    28cc:	1009883a 	mov	r4,r2
    28d0:	180b883a 	mov	r5,r3
    28d4:	100d883a 	mov	r6,r2
    28d8:	180f883a 	mov	r7,r3
    28dc:	0003a600 	call	3a60 <__divdf3>
    28e0:	1021883a 	mov	r16,r2
    28e4:	1823883a 	mov	r17,r3
    28e8:	003fc406 	br	27fc <__ieee754_sqrt+0x1c0>
    28ec:	29400044 	addi	r5,r5,1
    28f0:	000f883a 	mov	r7,zero
    28f4:	003fb506 	br	27cc <__ieee754_sqrt+0x190>
    28f8:	0009883a 	mov	r4,zero
    28fc:	00800804 	movi	r2,32
    2900:	003f6b06 	br	26b0 <__ieee754_sqrt+0x74>

00002904 <__isnand>:
    2904:	200d883a 	mov	r6,r4
    2908:	0109c83a 	sub	r4,zero,r4
    290c:	2188b03a 	or	r4,r4,r6
    2910:	2008d7fa 	srli	r4,r4,31
    2914:	00a00034 	movhi	r2,32768
    2918:	10bfffc4 	addi	r2,r2,-1
    291c:	1144703a 	and	r2,r2,r5
    2920:	2088b03a 	or	r4,r4,r2
    2924:	009ffc34 	movhi	r2,32752
    2928:	1105c83a 	sub	r2,r2,r4
    292c:	1004d7fa 	srli	r2,r2,31
    2930:	f800283a 	ret

00002934 <matherr>:
    2934:	0005883a 	mov	r2,zero
    2938:	f800283a 	ret

0000293c <nan>:
    293c:	015ffe34 	movhi	r5,32760
    2940:	0005883a 	mov	r2,zero
    2944:	2807883a 	mov	r3,r5
    2948:	f800283a 	ret

0000294c <__ieee754_log>:
    294c:	deffe604 	addi	sp,sp,-104
    2950:	2015883a 	mov	r10,r4
    2954:	01000434 	movhi	r4,16
    2958:	213fffc4 	addi	r4,r4,-1
    295c:	dfc01915 	stw	ra,100(sp)
    2960:	df001815 	stw	fp,96(sp)
    2964:	ddc01715 	stw	r23,92(sp)
    2968:	dd801615 	stw	r22,88(sp)
    296c:	dd401515 	stw	r21,84(sp)
    2970:	dd001415 	stw	r20,80(sp)
    2974:	dcc01315 	stw	r19,76(sp)
    2978:	dc801215 	stw	r18,72(sp)
    297c:	dc401115 	stw	r17,68(sp)
    2980:	dc001015 	stw	r16,64(sp)
    2984:	2817883a 	mov	r11,r5
    2988:	2813883a 	mov	r9,r5
    298c:	2140190e 	bge	r4,r5,29f4 <__ieee754_log+0xa8>
    2990:	000d883a 	mov	r6,zero
    2994:	009ffc34 	movhi	r2,32752
    2998:	10bfffc4 	addi	r2,r2,-1
    299c:	1240230e 	bge	r2,r9,2a2c <__ieee754_log+0xe0>
    29a0:	580f883a 	mov	r7,r11
    29a4:	5009883a 	mov	r4,r10
    29a8:	580b883a 	mov	r5,r11
    29ac:	500d883a 	mov	r6,r10
    29b0:	00036280 	call	3628 <__adddf3>
    29b4:	100d883a 	mov	r6,r2
    29b8:	180f883a 	mov	r7,r3
    29bc:	3005883a 	mov	r2,r6
    29c0:	3807883a 	mov	r3,r7
    29c4:	dfc01917 	ldw	ra,100(sp)
    29c8:	df001817 	ldw	fp,96(sp)
    29cc:	ddc01717 	ldw	r23,92(sp)
    29d0:	dd801617 	ldw	r22,88(sp)
    29d4:	dd401517 	ldw	r21,84(sp)
    29d8:	dd001417 	ldw	r20,80(sp)
    29dc:	dcc01317 	ldw	r19,76(sp)
    29e0:	dc801217 	ldw	r18,72(sp)
    29e4:	dc401117 	ldw	r17,68(sp)
    29e8:	dc001017 	ldw	r16,64(sp)
    29ec:	dec01a04 	addi	sp,sp,104
    29f0:	f800283a 	ret
    29f4:	00a00034 	movhi	r2,32768
    29f8:	10bfffc4 	addi	r2,r2,-1
    29fc:	2884703a 	and	r2,r5,r2
    2a00:	5084b03a 	or	r2,r10,r2
    2a04:	1000e31e 	bne	r2,zero,2d94 <__ieee754_log+0x448>
    2a08:	00f0d434 	movhi	r3,50000
    2a0c:	000d883a 	mov	r6,zero
    2a10:	000f883a 	mov	r7,zero
    2a14:	180b883a 	mov	r5,r3
    2a18:	1009883a 	mov	r4,r2
    2a1c:	0003a600 	call	3a60 <__divdf3>
    2a20:	100d883a 	mov	r6,r2
    2a24:	180f883a 	mov	r7,r3
    2a28:	003fe406 	br	29bc <__ieee754_log+0x70>
    2a2c:	04000434 	movhi	r16,16
    2a30:	843fffc4 	addi	r16,r16,-1
    2a34:	4c38703a 	and	fp,r9,r16
    2a38:	02000274 	movhi	r8,9
    2a3c:	4217d904 	addi	r8,r8,24420
    2a40:	e211883a 	add	r8,fp,r8
    2a44:	4813d53a 	srai	r9,r9,20
    2a48:	4200042c 	andhi	r8,r8,16
    2a4c:	41cffc3c 	xorhi	r7,r8,16368
    2a50:	4011d53a 	srai	r8,r8,20
    2a54:	3253883a 	add	r9,r6,r9
    2a58:	e1ceb03a 	or	r7,fp,r7
    2a5c:	0005883a 	mov	r2,zero
    2a60:	00cffc34 	movhi	r3,16368
    2a64:	4a7f0044 	addi	r9,r9,-1023
    2a68:	5009883a 	mov	r4,r10
    2a6c:	380b883a 	mov	r5,r7
    2a70:	4a13883a 	add	r9,r9,r8
    2a74:	180f883a 	mov	r7,r3
    2a78:	100d883a 	mov	r6,r2
    2a7c:	da400015 	stw	r9,0(sp)
    2a80:	00035a80 	call	35a8 <__subdf3>
    2a84:	d8c00b15 	stw	r3,44(sp)
    2a88:	d9000b17 	ldw	r4,44(sp)
    2a8c:	e0c00084 	addi	r3,fp,2
    2a90:	d8800a15 	stw	r2,40(sp)
    2a94:	d8800815 	stw	r2,32(sp)
    2a98:	1c06703a 	and	r3,r3,r16
    2a9c:	00800084 	movi	r2,2
    2aa0:	d9000915 	stw	r4,36(sp)
    2aa4:	10c0c70e 	bge	r2,r3,2dc4 <__ieee754_log+0x478>
    2aa8:	d9000817 	ldw	r4,32(sp)
    2aac:	d9400b17 	ldw	r5,44(sp)
    2ab0:	0005883a 	mov	r2,zero
    2ab4:	00d00034 	movhi	r3,16384
    2ab8:	180f883a 	mov	r7,r3
    2abc:	100d883a 	mov	r6,r2
    2ac0:	00036280 	call	3628 <__adddf3>
    2ac4:	d9400b17 	ldw	r5,44(sp)
    2ac8:	d9000817 	ldw	r4,32(sp)
    2acc:	180f883a 	mov	r7,r3
    2ad0:	100d883a 	mov	r6,r2
    2ad4:	0003a600 	call	3a60 <__divdf3>
    2ad8:	d9000017 	ldw	r4,0(sp)
    2adc:	d8800c15 	stw	r2,48(sp)
    2ae0:	d8c00d15 	stw	r3,52(sp)
    2ae4:	d8800615 	stw	r2,24(sp)
    2ae8:	0003f600 	call	3f60 <__floatsidf>
    2aec:	d9000d17 	ldw	r4,52(sp)
    2af0:	d9400d17 	ldw	r5,52(sp)
    2af4:	d8800e15 	stw	r2,56(sp)
    2af8:	d9000715 	stw	r4,28(sp)
    2afc:	d9000617 	ldw	r4,24(sp)
    2b00:	280f883a 	mov	r7,r5
    2b04:	d8c00f15 	stw	r3,60(sp)
    2b08:	200d883a 	mov	r6,r4
    2b0c:	000369c0 	call	369c <__muldf3>
    2b10:	1009883a 	mov	r4,r2
    2b14:	100d883a 	mov	r6,r2
    2b18:	d8800415 	stw	r2,16(sp)
    2b1c:	00bffeb4 	movhi	r2,65530
    2b20:	10bae184 	addi	r2,r2,-5242
    2b24:	180b883a 	mov	r5,r3
    2b28:	180f883a 	mov	r7,r3
    2b2c:	e085883a 	add	r2,fp,r2
    2b30:	182b883a 	mov	r21,r3
    2b34:	d8c00515 	stw	r3,20(sp)
    2b38:	d8800115 	stw	r2,4(sp)
    2b3c:	000369c0 	call	369c <__muldf3>
    2b40:	1021883a 	mov	r16,r2
    2b44:	1823883a 	mov	r17,r3
    2b48:	00b41e74 	movhi	r2,53369
    2b4c:	10b1a7c4 	addi	r2,r2,-14689
    2b50:	00cff134 	movhi	r3,16324
    2b54:	18e68244 	addi	r3,r3,-26103
    2b58:	8009883a 	mov	r4,r16
    2b5c:	880b883a 	mov	r5,r17
    2b60:	180f883a 	mov	r7,r3
    2b64:	100d883a 	mov	r6,r2
    2b68:	000369c0 	call	369c <__muldf3>
    2b6c:	020763b4 	movhi	r8,7566
    2b70:	421e2bc4 	addi	r8,r8,30895
    2b74:	024ff334 	movhi	r9,16332
    2b78:	4a5c7144 	addi	r9,r9,29125
    2b7c:	480f883a 	mov	r7,r9
    2b80:	400d883a 	mov	r6,r8
    2b84:	180b883a 	mov	r5,r3
    2b88:	1009883a 	mov	r4,r2
    2b8c:	00036280 	call	3628 <__adddf3>
    2b90:	180f883a 	mov	r7,r3
    2b94:	8009883a 	mov	r4,r16
    2b98:	880b883a 	mov	r5,r17
    2b9c:	100d883a 	mov	r6,r2
    2ba0:	000369c0 	call	369c <__muldf3>
    2ba4:	02266634 	movhi	r8,39320
    2ba8:	423e8104 	addi	r8,r8,-1532
    2bac:	024ff6b4 	movhi	r9,16346
    2bb0:	4a666644 	addi	r9,r9,-26215
    2bb4:	480f883a 	mov	r7,r9
    2bb8:	400d883a 	mov	r6,r8
    2bbc:	180b883a 	mov	r5,r3
    2bc0:	1009883a 	mov	r4,r2
    2bc4:	00036280 	call	3628 <__adddf3>
    2bc8:	180f883a 	mov	r7,r3
    2bcc:	8009883a 	mov	r4,r16
    2bd0:	880b883a 	mov	r5,r17
    2bd4:	100d883a 	mov	r6,r2
    2bd8:	000369c0 	call	369c <__muldf3>
    2bdc:	0237cfb4 	movhi	r8,57150
    2be0:	42149104 	addi	r8,r8,21060
    2be4:	024ff0f4 	movhi	r9,16323
    2be8:	4a7c4484 	addi	r9,r9,-3822
    2bec:	480f883a 	mov	r7,r9
    2bf0:	8009883a 	mov	r4,r16
    2bf4:	880b883a 	mov	r5,r17
    2bf8:	400d883a 	mov	r6,r8
    2bfc:	102d883a 	mov	r22,r2
    2c00:	182f883a 	mov	r23,r3
    2c04:	000369c0 	call	369c <__muldf3>
    2c08:	0225b2f4 	movhi	r8,38603
    2c0c:	4200f784 	addi	r8,r8,990
    2c10:	024ff1f4 	movhi	r9,16327
    2c14:	4a519904 	addi	r9,r9,18020
    2c18:	480f883a 	mov	r7,r9
    2c1c:	400d883a 	mov	r6,r8
    2c20:	180b883a 	mov	r5,r3
    2c24:	1009883a 	mov	r4,r2
    2c28:	00036280 	call	3628 <__adddf3>
    2c2c:	180f883a 	mov	r7,r3
    2c30:	8009883a 	mov	r4,r16
    2c34:	880b883a 	mov	r5,r17
    2c38:	100d883a 	mov	r6,r2
    2c3c:	000369c0 	call	369c <__muldf3>
    2c40:	022508f4 	movhi	r8,37923
    2c44:	4224d644 	addi	r8,r8,-27815
    2c48:	024ff4b4 	movhi	r9,16338
    2c4c:	4a524904 	addi	r9,r9,18724
    2c50:	480f883a 	mov	r7,r9
    2c54:	400d883a 	mov	r6,r8
    2c58:	180b883a 	mov	r5,r3
    2c5c:	1009883a 	mov	r4,r2
    2c60:	00036280 	call	3628 <__adddf3>
    2c64:	180f883a 	mov	r7,r3
    2c68:	8009883a 	mov	r4,r16
    2c6c:	880b883a 	mov	r5,r17
    2c70:	100d883a 	mov	r6,r2
    2c74:	000369c0 	call	369c <__muldf3>
    2c78:	02155574 	movhi	r8,21845
    2c7c:	421564c4 	addi	r8,r8,21907
    2c80:	024ff974 	movhi	r9,16357
    2c84:	4a555544 	addi	r9,r9,21845
    2c88:	480f883a 	mov	r7,r9
    2c8c:	400d883a 	mov	r6,r8
    2c90:	180b883a 	mov	r5,r3
    2c94:	1009883a 	mov	r4,r2
    2c98:	00036280 	call	3628 <__adddf3>
    2c9c:	d9000417 	ldw	r4,16(sp)
    2ca0:	a80b883a 	mov	r5,r21
    2ca4:	180f883a 	mov	r7,r3
    2ca8:	100d883a 	mov	r6,r2
    2cac:	000369c0 	call	369c <__muldf3>
    2cb0:	180f883a 	mov	r7,r3
    2cb4:	b009883a 	mov	r4,r22
    2cb8:	b80b883a 	mov	r5,r23
    2cbc:	100d883a 	mov	r6,r2
    2cc0:	00036280 	call	3628 <__adddf3>
    2cc4:	d9000117 	ldw	r4,4(sp)
    2cc8:	1021883a 	mov	r16,r2
    2ccc:	008001f4 	movhi	r2,7
    2cd0:	10ae1444 	addi	r2,r2,-18351
    2cd4:	1705c83a 	sub	r2,r2,fp
    2cd8:	1823883a 	mov	r17,r3
    2cdc:	2086b03a 	or	r3,r4,r2
    2ce0:	d8800e17 	ldw	r2,56(sp)
    2ce4:	d9000f17 	ldw	r4,60(sp)
    2ce8:	d8800215 	stw	r2,8(sp)
    2cec:	d9000315 	stw	r4,12(sp)
    2cf0:	00c0df0e 	bge	zero,r3,3070 <__ieee754_log+0x724>
    2cf4:	d9000817 	ldw	r4,32(sp)
    2cf8:	d9400b17 	ldw	r5,44(sp)
    2cfc:	0005883a 	mov	r2,zero
    2d00:	00cff834 	movhi	r3,16352
    2d04:	180f883a 	mov	r7,r3
    2d08:	100d883a 	mov	r6,r2
    2d0c:	000369c0 	call	369c <__muldf3>
    2d10:	d9000817 	ldw	r4,32(sp)
    2d14:	d9400b17 	ldw	r5,44(sp)
    2d18:	180f883a 	mov	r7,r3
    2d1c:	100d883a 	mov	r6,r2
    2d20:	000369c0 	call	369c <__muldf3>
    2d24:	1029883a 	mov	r20,r2
    2d28:	d8800017 	ldw	r2,0(sp)
    2d2c:	182b883a 	mov	r21,r3
    2d30:	1000971e 	bne	r2,zero,2f90 <__ieee754_log+0x644>
    2d34:	8009883a 	mov	r4,r16
    2d38:	880b883a 	mov	r5,r17
    2d3c:	a00d883a 	mov	r6,r20
    2d40:	180f883a 	mov	r7,r3
    2d44:	00036280 	call	3628 <__adddf3>
    2d48:	d9000617 	ldw	r4,24(sp)
    2d4c:	d9400d17 	ldw	r5,52(sp)
    2d50:	180f883a 	mov	r7,r3
    2d54:	100d883a 	mov	r6,r2
    2d58:	000369c0 	call	369c <__muldf3>
    2d5c:	180f883a 	mov	r7,r3
    2d60:	a009883a 	mov	r4,r20
    2d64:	a80b883a 	mov	r5,r21
    2d68:	100d883a 	mov	r6,r2
    2d6c:	00035a80 	call	35a8 <__subdf3>
    2d70:	d9000817 	ldw	r4,32(sp)
    2d74:	d9400b17 	ldw	r5,44(sp)
    2d78:	1011883a 	mov	r8,r2
    2d7c:	180f883a 	mov	r7,r3
    2d80:	400d883a 	mov	r6,r8
    2d84:	00035a80 	call	35a8 <__subdf3>
    2d88:	100d883a 	mov	r6,r2
    2d8c:	180f883a 	mov	r7,r3
    2d90:	003f0a06 	br	29bc <__ieee754_log+0x70>
    2d94:	28002f16 	blt	r5,zero,2e54 <__ieee754_log+0x508>
    2d98:	0005883a 	mov	r2,zero
    2d9c:	00d0d434 	movhi	r3,17232
    2da0:	5009883a 	mov	r4,r10
    2da4:	100d883a 	mov	r6,r2
    2da8:	180f883a 	mov	r7,r3
    2dac:	000369c0 	call	369c <__muldf3>
    2db0:	1015883a 	mov	r10,r2
    2db4:	1813883a 	mov	r9,r3
    2db8:	1817883a 	mov	r11,r3
    2dbc:	01bff284 	movi	r6,-54
    2dc0:	003ef406 	br	2994 <__ieee754_log+0x48>
    2dc4:	d9000817 	ldw	r4,32(sp)
    2dc8:	d9400b17 	ldw	r5,44(sp)
    2dcc:	000d883a 	mov	r6,zero
    2dd0:	000f883a 	mov	r7,zero
    2dd4:	0003cb80 	call	3cb8 <__eqdf2>
    2dd8:	1000271e 	bne	r2,zero,2e78 <__ieee754_log+0x52c>
    2ddc:	d8800017 	ldw	r2,0(sp)
    2de0:	1000b026 	beq	r2,zero,30a4 <__ieee754_log+0x758>
    2de4:	d9000017 	ldw	r4,0(sp)
    2de8:	0003f600 	call	3f60 <__floatsidf>
    2dec:	1021883a 	mov	r16,r2
    2df0:	1823883a 	mov	r17,r3
    2df4:	00bfb834 	movhi	r2,65248
    2df8:	00cff9b4 	movhi	r3,16358
    2dfc:	18cb9084 	addi	r3,r3,11842
    2e00:	8009883a 	mov	r4,r16
    2e04:	880b883a 	mov	r5,r17
    2e08:	180f883a 	mov	r7,r3
    2e0c:	100d883a 	mov	r6,r2
    2e10:	000369c0 	call	369c <__muldf3>
    2e14:	020d5e74 	movhi	r8,13689
    2e18:	420f1d84 	addi	r8,r8,15478
    2e1c:	024f7ab4 	movhi	r9,15850
    2e20:	4a4e7bc4 	addi	r9,r9,14831
    2e24:	8009883a 	mov	r4,r16
    2e28:	880b883a 	mov	r5,r17
    2e2c:	480f883a 	mov	r7,r9
    2e30:	400d883a 	mov	r6,r8
    2e34:	1021883a 	mov	r16,r2
    2e38:	1823883a 	mov	r17,r3
    2e3c:	000369c0 	call	369c <__muldf3>
    2e40:	180f883a 	mov	r7,r3
    2e44:	880b883a 	mov	r5,r17
    2e48:	8009883a 	mov	r4,r16
    2e4c:	100d883a 	mov	r6,r2
    2e50:	003ed706 	br	29b0 <__ieee754_log+0x64>
    2e54:	280f883a 	mov	r7,r5
    2e58:	5009883a 	mov	r4,r10
    2e5c:	500d883a 	mov	r6,r10
    2e60:	00035a80 	call	35a8 <__subdf3>
    2e64:	180b883a 	mov	r5,r3
    2e68:	000d883a 	mov	r6,zero
    2e6c:	000f883a 	mov	r7,zero
    2e70:	1009883a 	mov	r4,r2
    2e74:	003ee906 	br	2a1c <__ieee754_log+0xd0>
    2e78:	d9000817 	ldw	r4,32(sp)
    2e7c:	d9400b17 	ldw	r5,44(sp)
    2e80:	200d883a 	mov	r6,r4
    2e84:	280f883a 	mov	r7,r5
    2e88:	000369c0 	call	369c <__muldf3>
    2e8c:	d9000817 	ldw	r4,32(sp)
    2e90:	d9400b17 	ldw	r5,44(sp)
    2e94:	02155574 	movhi	r8,21845
    2e98:	42155544 	addi	r8,r8,21845
    2e9c:	026ff574 	movhi	r9,49109
    2ea0:	4a555544 	addi	r9,r9,21845
    2ea4:	480f883a 	mov	r7,r9
    2ea8:	400d883a 	mov	r6,r8
    2eac:	1021883a 	mov	r16,r2
    2eb0:	1823883a 	mov	r17,r3
    2eb4:	000369c0 	call	369c <__muldf3>
    2eb8:	0011883a 	mov	r8,zero
    2ebc:	024ff834 	movhi	r9,16352
    2ec0:	480f883a 	mov	r7,r9
    2ec4:	400d883a 	mov	r6,r8
    2ec8:	180b883a 	mov	r5,r3
    2ecc:	1009883a 	mov	r4,r2
    2ed0:	00036280 	call	3628 <__adddf3>
    2ed4:	180f883a 	mov	r7,r3
    2ed8:	8009883a 	mov	r4,r16
    2edc:	880b883a 	mov	r5,r17
    2ee0:	100d883a 	mov	r6,r2
    2ee4:	000369c0 	call	369c <__muldf3>
    2ee8:	d9000017 	ldw	r4,0(sp)
    2eec:	1029883a 	mov	r20,r2
    2ef0:	182b883a 	mov	r21,r3
    2ef4:	20005926 	beq	r4,zero,305c <__ieee754_log+0x710>
    2ef8:	d9000017 	ldw	r4,0(sp)
    2efc:	0003f600 	call	3f60 <__floatsidf>
    2f00:	1021883a 	mov	r16,r2
    2f04:	1823883a 	mov	r17,r3
    2f08:	00bfb834 	movhi	r2,65248
    2f0c:	00cff9b4 	movhi	r3,16358
    2f10:	18cb9084 	addi	r3,r3,11842
    2f14:	8009883a 	mov	r4,r16
    2f18:	880b883a 	mov	r5,r17
    2f1c:	180f883a 	mov	r7,r3
    2f20:	100d883a 	mov	r6,r2
    2f24:	000369c0 	call	369c <__muldf3>
    2f28:	020d5e74 	movhi	r8,13689
    2f2c:	420f1d84 	addi	r8,r8,15478
    2f30:	026f7ab4 	movhi	r9,48618
    2f34:	4a4e7bc4 	addi	r9,r9,14831
    2f38:	400d883a 	mov	r6,r8
    2f3c:	480f883a 	mov	r7,r9
    2f40:	8009883a 	mov	r4,r16
    2f44:	880b883a 	mov	r5,r17
    2f48:	1021883a 	mov	r16,r2
    2f4c:	1823883a 	mov	r17,r3
    2f50:	000369c0 	call	369c <__muldf3>
    2f54:	180f883a 	mov	r7,r3
    2f58:	a009883a 	mov	r4,r20
    2f5c:	a80b883a 	mov	r5,r21
    2f60:	100d883a 	mov	r6,r2
    2f64:	00036280 	call	3628 <__adddf3>
    2f68:	d9c00b17 	ldw	r7,44(sp)
    2f6c:	d9800817 	ldw	r6,32(sp)
    2f70:	180b883a 	mov	r5,r3
    2f74:	1009883a 	mov	r4,r2
    2f78:	00035a80 	call	35a8 <__subdf3>
    2f7c:	1011883a 	mov	r8,r2
    2f80:	880b883a 	mov	r5,r17
    2f84:	180f883a 	mov	r7,r3
    2f88:	8009883a 	mov	r4,r16
    2f8c:	003f7c06 	br	2d80 <__ieee754_log+0x434>
    2f90:	d9000217 	ldw	r4,8(sp)
    2f94:	d9400f17 	ldw	r5,60(sp)
    2f98:	00bfb834 	movhi	r2,65248
    2f9c:	00cff9b4 	movhi	r3,16358
    2fa0:	18cb9084 	addi	r3,r3,11842
    2fa4:	180f883a 	mov	r7,r3
    2fa8:	100d883a 	mov	r6,r2
    2fac:	000369c0 	call	369c <__muldf3>
    2fb0:	8009883a 	mov	r4,r16
    2fb4:	880b883a 	mov	r5,r17
    2fb8:	a00d883a 	mov	r6,r20
    2fbc:	a80f883a 	mov	r7,r21
    2fc0:	1025883a 	mov	r18,r2
    2fc4:	1827883a 	mov	r19,r3
    2fc8:	00036280 	call	3628 <__adddf3>
    2fcc:	d9000617 	ldw	r4,24(sp)
    2fd0:	d9400d17 	ldw	r5,52(sp)
    2fd4:	180f883a 	mov	r7,r3
    2fd8:	100d883a 	mov	r6,r2
    2fdc:	000369c0 	call	369c <__muldf3>
    2fe0:	d9000217 	ldw	r4,8(sp)
    2fe4:	d9400f17 	ldw	r5,60(sp)
    2fe8:	020d5e74 	movhi	r8,13689
    2fec:	420f1d84 	addi	r8,r8,15478
    2ff0:	024f7ab4 	movhi	r9,15850
    2ff4:	4a4e7bc4 	addi	r9,r9,14831
    2ff8:	480f883a 	mov	r7,r9
    2ffc:	400d883a 	mov	r6,r8
    3000:	1021883a 	mov	r16,r2
    3004:	1823883a 	mov	r17,r3
    3008:	000369c0 	call	369c <__muldf3>
    300c:	180f883a 	mov	r7,r3
    3010:	880b883a 	mov	r5,r17
    3014:	8009883a 	mov	r4,r16
    3018:	100d883a 	mov	r6,r2
    301c:	00036280 	call	3628 <__adddf3>
    3020:	180f883a 	mov	r7,r3
    3024:	a009883a 	mov	r4,r20
    3028:	a80b883a 	mov	r5,r21
    302c:	100d883a 	mov	r6,r2
    3030:	00035a80 	call	35a8 <__subdf3>
    3034:	d9c00b17 	ldw	r7,44(sp)
    3038:	d9800817 	ldw	r6,32(sp)
    303c:	180b883a 	mov	r5,r3
    3040:	1009883a 	mov	r4,r2
    3044:	00035a80 	call	35a8 <__subdf3>
    3048:	1011883a 	mov	r8,r2
    304c:	980b883a 	mov	r5,r19
    3050:	180f883a 	mov	r7,r3
    3054:	9009883a 	mov	r4,r18
    3058:	003f4906 	br	2d80 <__ieee754_log+0x434>
    305c:	d9000817 	ldw	r4,32(sp)
    3060:	d9400b17 	ldw	r5,44(sp)
    3064:	100d883a 	mov	r6,r2
    3068:	180f883a 	mov	r7,r3
    306c:	003f4506 	br	2d84 <__ieee754_log+0x438>
    3070:	d9000017 	ldw	r4,0(sp)
    3074:	20000e1e 	bne	r4,zero,30b0 <__ieee754_log+0x764>
    3078:	d9000817 	ldw	r4,32(sp)
    307c:	d9400b17 	ldw	r5,44(sp)
    3080:	800d883a 	mov	r6,r16
    3084:	880f883a 	mov	r7,r17
    3088:	00035a80 	call	35a8 <__subdf3>
    308c:	d9000617 	ldw	r4,24(sp)
    3090:	d9400d17 	ldw	r5,52(sp)
    3094:	180f883a 	mov	r7,r3
    3098:	100d883a 	mov	r6,r2
    309c:	000369c0 	call	369c <__muldf3>
    30a0:	003f3306 	br	2d70 <__ieee754_log+0x424>
    30a4:	000d883a 	mov	r6,zero
    30a8:	000f883a 	mov	r7,zero
    30ac:	003e4306 	br	29bc <__ieee754_log+0x70>
    30b0:	d9000217 	ldw	r4,8(sp)
    30b4:	d9400f17 	ldw	r5,60(sp)
    30b8:	00bfb834 	movhi	r2,65248
    30bc:	00cff9b4 	movhi	r3,16358
    30c0:	18cb9084 	addi	r3,r3,11842
    30c4:	180f883a 	mov	r7,r3
    30c8:	100d883a 	mov	r6,r2
    30cc:	000369c0 	call	369c <__muldf3>
    30d0:	d9000817 	ldw	r4,32(sp)
    30d4:	d9400b17 	ldw	r5,44(sp)
    30d8:	800d883a 	mov	r6,r16
    30dc:	880f883a 	mov	r7,r17
    30e0:	1025883a 	mov	r18,r2
    30e4:	1827883a 	mov	r19,r3
    30e8:	00035a80 	call	35a8 <__subdf3>
    30ec:	d9000617 	ldw	r4,24(sp)
    30f0:	d9400d17 	ldw	r5,52(sp)
    30f4:	180f883a 	mov	r7,r3
    30f8:	100d883a 	mov	r6,r2
    30fc:	000369c0 	call	369c <__muldf3>
    3100:	d9000217 	ldw	r4,8(sp)
    3104:	d9400f17 	ldw	r5,60(sp)
    3108:	020d5e74 	movhi	r8,13689
    310c:	420f1d84 	addi	r8,r8,15478
    3110:	026f7ab4 	movhi	r9,48618
    3114:	4a4e7bc4 	addi	r9,r9,14831
    3118:	480f883a 	mov	r7,r9
    311c:	400d883a 	mov	r6,r8
    3120:	1021883a 	mov	r16,r2
    3124:	1823883a 	mov	r17,r3
    3128:	000369c0 	call	369c <__muldf3>
    312c:	180f883a 	mov	r7,r3
    3130:	880b883a 	mov	r5,r17
    3134:	8009883a 	mov	r4,r16
    3138:	100d883a 	mov	r6,r2
    313c:	00036280 	call	3628 <__adddf3>
    3140:	003fbc06 	br	3034 <__ieee754_log+0x6e8>

00003144 <__extendsfdf2>:
    3144:	defff904 	addi	sp,sp,-28
    3148:	d9000115 	stw	r4,4(sp)
    314c:	d9400204 	addi	r5,sp,8
    3150:	d9000104 	addi	r4,sp,4
    3154:	dfc00615 	stw	ra,24(sp)
    3158:	00041a80 	call	41a8 <__unpack_f>
    315c:	d9c00517 	ldw	r7,20(sp)
    3160:	0011883a 	mov	r8,zero
    3164:	400697ba 	slli	r3,r8,30
    3168:	3812d0ba 	srli	r9,r7,2
    316c:	380497ba 	slli	r2,r7,30
    3170:	d9000217 	ldw	r4,8(sp)
    3174:	d9400317 	ldw	r5,12(sp)
    3178:	d9800417 	ldw	r6,16(sp)
    317c:	48c6b03a 	or	r3,r9,r3
    3180:	100f883a 	mov	r7,r2
    3184:	d8c00015 	stw	r3,0(sp)
    3188:	00040580 	call	4058 <__make_dp>
    318c:	dfc00617 	ldw	ra,24(sp)
    3190:	dec00704 	addi	sp,sp,28
    3194:	f800283a 	ret

00003198 <_fpadd_parts>:
    3198:	defff804 	addi	sp,sp,-32
    319c:	dcc00315 	stw	r19,12(sp)
    31a0:	2027883a 	mov	r19,r4
    31a4:	21000017 	ldw	r4,0(r4)
    31a8:	00c00044 	movi	r3,1
    31ac:	dd400515 	stw	r21,20(sp)
    31b0:	dd000415 	stw	r20,16(sp)
    31b4:	ddc00715 	stw	r23,28(sp)
    31b8:	dd800615 	stw	r22,24(sp)
    31bc:	dc800215 	stw	r18,8(sp)
    31c0:	dc400115 	stw	r17,4(sp)
    31c4:	dc000015 	stw	r16,0(sp)
    31c8:	282b883a 	mov	r21,r5
    31cc:	3029883a 	mov	r20,r6
    31d0:	1900632e 	bgeu	r3,r4,3360 <_fpadd_parts+0x1c8>
    31d4:	28800017 	ldw	r2,0(r5)
    31d8:	1880812e 	bgeu	r3,r2,33e0 <_fpadd_parts+0x248>
    31dc:	00c00104 	movi	r3,4
    31e0:	20c0dc26 	beq	r4,r3,3554 <_fpadd_parts+0x3bc>
    31e4:	10c07e26 	beq	r2,r3,33e0 <_fpadd_parts+0x248>
    31e8:	00c00084 	movi	r3,2
    31ec:	10c06726 	beq	r2,r3,338c <_fpadd_parts+0x1f4>
    31f0:	20c07b26 	beq	r4,r3,33e0 <_fpadd_parts+0x248>
    31f4:	9dc00217 	ldw	r23,8(r19)
    31f8:	28c00217 	ldw	r3,8(r5)
    31fc:	9c400317 	ldw	r17,12(r19)
    3200:	2bc00317 	ldw	r15,12(r5)
    3204:	b8cdc83a 	sub	r6,r23,r3
    3208:	9c800417 	ldw	r18,16(r19)
    320c:	2c000417 	ldw	r16,16(r5)
    3210:	3009883a 	mov	r4,r6
    3214:	30009716 	blt	r6,zero,3474 <_fpadd_parts+0x2dc>
    3218:	00800fc4 	movi	r2,63
    321c:	11806b16 	blt	r2,r6,33cc <_fpadd_parts+0x234>
    3220:	0100a40e 	bge	zero,r4,34b4 <_fpadd_parts+0x31c>
    3224:	35bff804 	addi	r22,r6,-32
    3228:	b000bc16 	blt	r22,zero,351c <_fpadd_parts+0x384>
    322c:	8596d83a 	srl	r11,r16,r22
    3230:	0019883a 	mov	r12,zero
    3234:	0013883a 	mov	r9,zero
    3238:	01000044 	movi	r4,1
    323c:	0015883a 	mov	r10,zero
    3240:	b000be16 	blt	r22,zero,353c <_fpadd_parts+0x3a4>
    3244:	2590983a 	sll	r8,r4,r22
    3248:	000f883a 	mov	r7,zero
    324c:	00bfffc4 	movi	r2,-1
    3250:	3889883a 	add	r4,r7,r2
    3254:	408b883a 	add	r5,r8,r2
    3258:	21cd803a 	cmpltu	r6,r4,r7
    325c:	314b883a 	add	r5,r6,r5
    3260:	7904703a 	and	r2,r15,r4
    3264:	8146703a 	and	r3,r16,r5
    3268:	10c4b03a 	or	r2,r2,r3
    326c:	10000226 	beq	r2,zero,3278 <_fpadd_parts+0xe0>
    3270:	02400044 	movi	r9,1
    3274:	0015883a 	mov	r10,zero
    3278:	5a5eb03a 	or	r15,r11,r9
    327c:	62a0b03a 	or	r16,r12,r10
    3280:	99400117 	ldw	r5,4(r19)
    3284:	a8800117 	ldw	r2,4(r21)
    3288:	28806e26 	beq	r5,r2,3444 <_fpadd_parts+0x2ac>
    328c:	28006626 	beq	r5,zero,3428 <_fpadd_parts+0x290>
    3290:	7c45c83a 	sub	r2,r15,r17
    3294:	7889803a 	cmpltu	r4,r15,r2
    3298:	8487c83a 	sub	r3,r16,r18
    329c:	1909c83a 	sub	r4,r3,r4
    32a0:	100d883a 	mov	r6,r2
    32a4:	200f883a 	mov	r7,r4
    32a8:	38007716 	blt	r7,zero,3488 <_fpadd_parts+0x2f0>
    32ac:	a5c00215 	stw	r23,8(r20)
    32b0:	a1c00415 	stw	r7,16(r20)
    32b4:	a0000115 	stw	zero,4(r20)
    32b8:	a1800315 	stw	r6,12(r20)
    32bc:	a2000317 	ldw	r8,12(r20)
    32c0:	a2400417 	ldw	r9,16(r20)
    32c4:	00bfffc4 	movi	r2,-1
    32c8:	408b883a 	add	r5,r8,r2
    32cc:	2a09803a 	cmpltu	r4,r5,r8
    32d0:	488d883a 	add	r6,r9,r2
    32d4:	01c40034 	movhi	r7,4096
    32d8:	39ffffc4 	addi	r7,r7,-1
    32dc:	218d883a 	add	r6,r4,r6
    32e0:	39801736 	bltu	r7,r6,3340 <_fpadd_parts+0x1a8>
    32e4:	31c06526 	beq	r6,r7,347c <_fpadd_parts+0x2e4>
    32e8:	a3000217 	ldw	r12,8(r20)
    32ec:	4209883a 	add	r4,r8,r8
    32f0:	00bfffc4 	movi	r2,-1
    32f4:	220f803a 	cmpltu	r7,r4,r8
    32f8:	4a4b883a 	add	r5,r9,r9
    32fc:	394f883a 	add	r7,r7,r5
    3300:	2095883a 	add	r10,r4,r2
    3304:	3897883a 	add	r11,r7,r2
    3308:	510d803a 	cmpltu	r6,r10,r4
    330c:	6099883a 	add	r12,r12,r2
    3310:	32d7883a 	add	r11,r6,r11
    3314:	00840034 	movhi	r2,4096
    3318:	10bfffc4 	addi	r2,r2,-1
    331c:	2011883a 	mov	r8,r4
    3320:	3813883a 	mov	r9,r7
    3324:	a1000315 	stw	r4,12(r20)
    3328:	a1c00415 	stw	r7,16(r20)
    332c:	a3000215 	stw	r12,8(r20)
    3330:	12c00336 	bltu	r2,r11,3340 <_fpadd_parts+0x1a8>
    3334:	58bfed1e 	bne	r11,r2,32ec <_fpadd_parts+0x154>
    3338:	00bfff84 	movi	r2,-2
    333c:	12bfeb2e 	bgeu	r2,r10,32ec <_fpadd_parts+0x154>
    3340:	a2800417 	ldw	r10,16(r20)
    3344:	008000c4 	movi	r2,3
    3348:	00c80034 	movhi	r3,8192
    334c:	18ffffc4 	addi	r3,r3,-1
    3350:	a2400317 	ldw	r9,12(r20)
    3354:	a0800015 	stw	r2,0(r20)
    3358:	1a802336 	bltu	r3,r10,33e8 <_fpadd_parts+0x250>
    335c:	a027883a 	mov	r19,r20
    3360:	9805883a 	mov	r2,r19
    3364:	ddc00717 	ldw	r23,28(sp)
    3368:	dd800617 	ldw	r22,24(sp)
    336c:	dd400517 	ldw	r21,20(sp)
    3370:	dd000417 	ldw	r20,16(sp)
    3374:	dcc00317 	ldw	r19,12(sp)
    3378:	dc800217 	ldw	r18,8(sp)
    337c:	dc400117 	ldw	r17,4(sp)
    3380:	dc000017 	ldw	r16,0(sp)
    3384:	dec00804 	addi	sp,sp,32
    3388:	f800283a 	ret
    338c:	20fff41e 	bne	r4,r3,3360 <_fpadd_parts+0x1c8>
    3390:	31000015 	stw	r4,0(r6)
    3394:	98800117 	ldw	r2,4(r19)
    3398:	30800115 	stw	r2,4(r6)
    339c:	98c00217 	ldw	r3,8(r19)
    33a0:	30c00215 	stw	r3,8(r6)
    33a4:	98800317 	ldw	r2,12(r19)
    33a8:	30800315 	stw	r2,12(r6)
    33ac:	98c00417 	ldw	r3,16(r19)
    33b0:	30c00415 	stw	r3,16(r6)
    33b4:	98800117 	ldw	r2,4(r19)
    33b8:	28c00117 	ldw	r3,4(r5)
    33bc:	3027883a 	mov	r19,r6
    33c0:	10c4703a 	and	r2,r2,r3
    33c4:	30800115 	stw	r2,4(r6)
    33c8:	003fe506 	br	3360 <_fpadd_parts+0x1c8>
    33cc:	1dc02616 	blt	r3,r23,3468 <_fpadd_parts+0x2d0>
    33d0:	0023883a 	mov	r17,zero
    33d4:	182f883a 	mov	r23,r3
    33d8:	0025883a 	mov	r18,zero
    33dc:	003fa806 	br	3280 <_fpadd_parts+0xe8>
    33e0:	a827883a 	mov	r19,r21
    33e4:	003fde06 	br	3360 <_fpadd_parts+0x1c8>
    33e8:	01800044 	movi	r6,1
    33ec:	500497fa 	slli	r2,r10,31
    33f0:	4808d07a 	srli	r4,r9,1
    33f4:	518ad83a 	srl	r5,r10,r6
    33f8:	a2000217 	ldw	r8,8(r20)
    33fc:	1108b03a 	or	r4,r2,r4
    3400:	0007883a 	mov	r3,zero
    3404:	4984703a 	and	r2,r9,r6
    3408:	208cb03a 	or	r6,r4,r2
    340c:	28ceb03a 	or	r7,r5,r3
    3410:	42000044 	addi	r8,r8,1
    3414:	a027883a 	mov	r19,r20
    3418:	a1c00415 	stw	r7,16(r20)
    341c:	a2000215 	stw	r8,8(r20)
    3420:	a1800315 	stw	r6,12(r20)
    3424:	003fce06 	br	3360 <_fpadd_parts+0x1c8>
    3428:	8bc5c83a 	sub	r2,r17,r15
    342c:	8889803a 	cmpltu	r4,r17,r2
    3430:	9407c83a 	sub	r3,r18,r16
    3434:	1909c83a 	sub	r4,r3,r4
    3438:	100d883a 	mov	r6,r2
    343c:	200f883a 	mov	r7,r4
    3440:	003f9906 	br	32a8 <_fpadd_parts+0x110>
    3444:	7c45883a 	add	r2,r15,r17
    3448:	13c9803a 	cmpltu	r4,r2,r15
    344c:	8487883a 	add	r3,r16,r18
    3450:	20c9883a 	add	r4,r4,r3
    3454:	a1400115 	stw	r5,4(r20)
    3458:	a5c00215 	stw	r23,8(r20)
    345c:	a0800315 	stw	r2,12(r20)
    3460:	a1000415 	stw	r4,16(r20)
    3464:	003fb606 	br	3340 <_fpadd_parts+0x1a8>
    3468:	001f883a 	mov	r15,zero
    346c:	0021883a 	mov	r16,zero
    3470:	003f8306 	br	3280 <_fpadd_parts+0xe8>
    3474:	018dc83a 	sub	r6,zero,r6
    3478:	003f6706 	br	3218 <_fpadd_parts+0x80>
    347c:	00bfff84 	movi	r2,-2
    3480:	117faf36 	bltu	r2,r5,3340 <_fpadd_parts+0x1a8>
    3484:	003f9806 	br	32e8 <_fpadd_parts+0x150>
    3488:	0005883a 	mov	r2,zero
    348c:	1189c83a 	sub	r4,r2,r6
    3490:	1105803a 	cmpltu	r2,r2,r4
    3494:	01cbc83a 	sub	r5,zero,r7
    3498:	2885c83a 	sub	r2,r5,r2
    349c:	01800044 	movi	r6,1
    34a0:	a1800115 	stw	r6,4(r20)
    34a4:	a5c00215 	stw	r23,8(r20)
    34a8:	a1000315 	stw	r4,12(r20)
    34ac:	a0800415 	stw	r2,16(r20)
    34b0:	003f8206 	br	32bc <_fpadd_parts+0x124>
    34b4:	203f7226 	beq	r4,zero,3280 <_fpadd_parts+0xe8>
    34b8:	35bff804 	addi	r22,r6,-32
    34bc:	b9af883a 	add	r23,r23,r6
    34c0:	b0003116 	blt	r22,zero,3588 <_fpadd_parts+0x3f0>
    34c4:	959ad83a 	srl	r13,r18,r22
    34c8:	001d883a 	mov	r14,zero
    34cc:	000f883a 	mov	r7,zero
    34d0:	01000044 	movi	r4,1
    34d4:	0011883a 	mov	r8,zero
    34d8:	b0002516 	blt	r22,zero,3570 <_fpadd_parts+0x3d8>
    34dc:	2594983a 	sll	r10,r4,r22
    34e0:	0013883a 	mov	r9,zero
    34e4:	00bfffc4 	movi	r2,-1
    34e8:	4889883a 	add	r4,r9,r2
    34ec:	508b883a 	add	r5,r10,r2
    34f0:	224d803a 	cmpltu	r6,r4,r9
    34f4:	314b883a 	add	r5,r6,r5
    34f8:	8904703a 	and	r2,r17,r4
    34fc:	9146703a 	and	r3,r18,r5
    3500:	10c4b03a 	or	r2,r2,r3
    3504:	10000226 	beq	r2,zero,3510 <_fpadd_parts+0x378>
    3508:	01c00044 	movi	r7,1
    350c:	0011883a 	mov	r8,zero
    3510:	69e2b03a 	or	r17,r13,r7
    3514:	7224b03a 	or	r18,r14,r8
    3518:	003f5906 	br	3280 <_fpadd_parts+0xe8>
    351c:	8407883a 	add	r3,r16,r16
    3520:	008007c4 	movi	r2,31
    3524:	1185c83a 	sub	r2,r2,r6
    3528:	1886983a 	sll	r3,r3,r2
    352c:	7996d83a 	srl	r11,r15,r6
    3530:	8198d83a 	srl	r12,r16,r6
    3534:	1ad6b03a 	or	r11,r3,r11
    3538:	003f3e06 	br	3234 <_fpadd_parts+0x9c>
    353c:	2006d07a 	srli	r3,r4,1
    3540:	008007c4 	movi	r2,31
    3544:	1185c83a 	sub	r2,r2,r6
    3548:	1890d83a 	srl	r8,r3,r2
    354c:	218e983a 	sll	r7,r4,r6
    3550:	003f3e06 	br	324c <_fpadd_parts+0xb4>
    3554:	113f821e 	bne	r2,r4,3360 <_fpadd_parts+0x1c8>
    3558:	28c00117 	ldw	r3,4(r5)
    355c:	98800117 	ldw	r2,4(r19)
    3560:	10ff7f26 	beq	r2,r3,3360 <_fpadd_parts+0x1c8>
    3564:	04c00074 	movhi	r19,1
    3568:	9cfdf404 	addi	r19,r19,-2096
    356c:	003f7c06 	br	3360 <_fpadd_parts+0x1c8>
    3570:	2006d07a 	srli	r3,r4,1
    3574:	008007c4 	movi	r2,31
    3578:	1185c83a 	sub	r2,r2,r6
    357c:	1894d83a 	srl	r10,r3,r2
    3580:	2192983a 	sll	r9,r4,r6
    3584:	003fd706 	br	34e4 <_fpadd_parts+0x34c>
    3588:	9487883a 	add	r3,r18,r18
    358c:	008007c4 	movi	r2,31
    3590:	1185c83a 	sub	r2,r2,r6
    3594:	1886983a 	sll	r3,r3,r2
    3598:	899ad83a 	srl	r13,r17,r6
    359c:	919cd83a 	srl	r14,r18,r6
    35a0:	1b5ab03a 	or	r13,r3,r13
    35a4:	003fc906 	br	34cc <_fpadd_parts+0x334>

000035a8 <__subdf3>:
    35a8:	deffea04 	addi	sp,sp,-88
    35ac:	dcc01415 	stw	r19,80(sp)
    35b0:	dcc00404 	addi	r19,sp,16
    35b4:	2011883a 	mov	r8,r4
    35b8:	2813883a 	mov	r9,r5
    35bc:	dc401315 	stw	r17,76(sp)
    35c0:	d809883a 	mov	r4,sp
    35c4:	980b883a 	mov	r5,r19
    35c8:	dc400904 	addi	r17,sp,36
    35cc:	dfc01515 	stw	ra,84(sp)
    35d0:	da400115 	stw	r9,4(sp)
    35d4:	d9c00315 	stw	r7,12(sp)
    35d8:	da000015 	stw	r8,0(sp)
    35dc:	d9800215 	stw	r6,8(sp)
    35e0:	00045840 	call	4584 <__unpack_d>
    35e4:	d9000204 	addi	r4,sp,8
    35e8:	880b883a 	mov	r5,r17
    35ec:	00045840 	call	4584 <__unpack_d>
    35f0:	d8800a17 	ldw	r2,40(sp)
    35f4:	880b883a 	mov	r5,r17
    35f8:	9809883a 	mov	r4,r19
    35fc:	d9800e04 	addi	r6,sp,56
    3600:	1080005c 	xori	r2,r2,1
    3604:	d8800a15 	stw	r2,40(sp)
    3608:	00031980 	call	3198 <_fpadd_parts>
    360c:	1009883a 	mov	r4,r2
    3610:	00042700 	call	4270 <__pack_d>
    3614:	dfc01517 	ldw	ra,84(sp)
    3618:	dcc01417 	ldw	r19,80(sp)
    361c:	dc401317 	ldw	r17,76(sp)
    3620:	dec01604 	addi	sp,sp,88
    3624:	f800283a 	ret

00003628 <__adddf3>:
    3628:	deffea04 	addi	sp,sp,-88
    362c:	dcc01415 	stw	r19,80(sp)
    3630:	dcc00404 	addi	r19,sp,16
    3634:	2011883a 	mov	r8,r4
    3638:	2813883a 	mov	r9,r5
    363c:	dc401315 	stw	r17,76(sp)
    3640:	d809883a 	mov	r4,sp
    3644:	980b883a 	mov	r5,r19
    3648:	dc400904 	addi	r17,sp,36
    364c:	dfc01515 	stw	ra,84(sp)
    3650:	da400115 	stw	r9,4(sp)
    3654:	d9c00315 	stw	r7,12(sp)
    3658:	da000015 	stw	r8,0(sp)
    365c:	d9800215 	stw	r6,8(sp)
    3660:	00045840 	call	4584 <__unpack_d>
    3664:	d9000204 	addi	r4,sp,8
    3668:	880b883a 	mov	r5,r17
    366c:	00045840 	call	4584 <__unpack_d>
    3670:	d9800e04 	addi	r6,sp,56
    3674:	9809883a 	mov	r4,r19
    3678:	880b883a 	mov	r5,r17
    367c:	00031980 	call	3198 <_fpadd_parts>
    3680:	1009883a 	mov	r4,r2
    3684:	00042700 	call	4270 <__pack_d>
    3688:	dfc01517 	ldw	ra,84(sp)
    368c:	dcc01417 	ldw	r19,80(sp)
    3690:	dc401317 	ldw	r17,76(sp)
    3694:	dec01604 	addi	sp,sp,88
    3698:	f800283a 	ret

0000369c <__muldf3>:
    369c:	deffe004 	addi	sp,sp,-128
    36a0:	dc401815 	stw	r17,96(sp)
    36a4:	dc400404 	addi	r17,sp,16
    36a8:	2011883a 	mov	r8,r4
    36ac:	2813883a 	mov	r9,r5
    36b0:	dc001715 	stw	r16,92(sp)
    36b4:	d809883a 	mov	r4,sp
    36b8:	880b883a 	mov	r5,r17
    36bc:	dc000904 	addi	r16,sp,36
    36c0:	dfc01f15 	stw	ra,124(sp)
    36c4:	da400115 	stw	r9,4(sp)
    36c8:	d9c00315 	stw	r7,12(sp)
    36cc:	da000015 	stw	r8,0(sp)
    36d0:	d9800215 	stw	r6,8(sp)
    36d4:	ddc01e15 	stw	r23,120(sp)
    36d8:	dd801d15 	stw	r22,116(sp)
    36dc:	dd401c15 	stw	r21,112(sp)
    36e0:	dd001b15 	stw	r20,108(sp)
    36e4:	dcc01a15 	stw	r19,104(sp)
    36e8:	dc801915 	stw	r18,100(sp)
    36ec:	00045840 	call	4584 <__unpack_d>
    36f0:	d9000204 	addi	r4,sp,8
    36f4:	800b883a 	mov	r5,r16
    36f8:	00045840 	call	4584 <__unpack_d>
    36fc:	d9000417 	ldw	r4,16(sp)
    3700:	00800044 	movi	r2,1
    3704:	1100102e 	bgeu	r2,r4,3748 <__muldf3+0xac>
    3708:	d8c00917 	ldw	r3,36(sp)
    370c:	10c0062e 	bgeu	r2,r3,3728 <__muldf3+0x8c>
    3710:	00800104 	movi	r2,4
    3714:	20800a26 	beq	r4,r2,3740 <__muldf3+0xa4>
    3718:	1880cc26 	beq	r3,r2,3a4c <__muldf3+0x3b0>
    371c:	00800084 	movi	r2,2
    3720:	20800926 	beq	r4,r2,3748 <__muldf3+0xac>
    3724:	1880191e 	bne	r3,r2,378c <__muldf3+0xf0>
    3728:	d8c00a17 	ldw	r3,40(sp)
    372c:	d8800517 	ldw	r2,20(sp)
    3730:	8009883a 	mov	r4,r16
    3734:	10c4c03a 	cmpne	r2,r2,r3
    3738:	d8800a15 	stw	r2,40(sp)
    373c:	00000706 	br	375c <__muldf3+0xc0>
    3740:	00800084 	movi	r2,2
    3744:	1880c326 	beq	r3,r2,3a54 <__muldf3+0x3b8>
    3748:	d8800517 	ldw	r2,20(sp)
    374c:	d8c00a17 	ldw	r3,40(sp)
    3750:	8809883a 	mov	r4,r17
    3754:	10c4c03a 	cmpne	r2,r2,r3
    3758:	d8800515 	stw	r2,20(sp)
    375c:	00042700 	call	4270 <__pack_d>
    3760:	dfc01f17 	ldw	ra,124(sp)
    3764:	ddc01e17 	ldw	r23,120(sp)
    3768:	dd801d17 	ldw	r22,116(sp)
    376c:	dd401c17 	ldw	r21,112(sp)
    3770:	dd001b17 	ldw	r20,108(sp)
    3774:	dcc01a17 	ldw	r19,104(sp)
    3778:	dc801917 	ldw	r18,100(sp)
    377c:	dc401817 	ldw	r17,96(sp)
    3780:	dc001717 	ldw	r16,92(sp)
    3784:	dec02004 	addi	sp,sp,128
    3788:	f800283a 	ret
    378c:	dd800717 	ldw	r22,28(sp)
    3790:	dc800c17 	ldw	r18,48(sp)
    3794:	002b883a 	mov	r21,zero
    3798:	0023883a 	mov	r17,zero
    379c:	a80b883a 	mov	r5,r21
    37a0:	b00d883a 	mov	r6,r22
    37a4:	880f883a 	mov	r7,r17
    37a8:	ddc00817 	ldw	r23,32(sp)
    37ac:	dcc00d17 	ldw	r19,52(sp)
    37b0:	9009883a 	mov	r4,r18
    37b4:	00040900 	call	4090 <__muldi3>
    37b8:	001b883a 	mov	r13,zero
    37bc:	680f883a 	mov	r7,r13
    37c0:	b009883a 	mov	r4,r22
    37c4:	000b883a 	mov	r5,zero
    37c8:	980d883a 	mov	r6,r19
    37cc:	b82d883a 	mov	r22,r23
    37d0:	002f883a 	mov	r23,zero
    37d4:	db401615 	stw	r13,88(sp)
    37d8:	d8801315 	stw	r2,76(sp)
    37dc:	d8c01415 	stw	r3,80(sp)
    37e0:	dcc01515 	stw	r19,84(sp)
    37e4:	00040900 	call	4090 <__muldi3>
    37e8:	b00d883a 	mov	r6,r22
    37ec:	000b883a 	mov	r5,zero
    37f0:	9009883a 	mov	r4,r18
    37f4:	b80f883a 	mov	r7,r23
    37f8:	1021883a 	mov	r16,r2
    37fc:	1823883a 	mov	r17,r3
    3800:	00040900 	call	4090 <__muldi3>
    3804:	8085883a 	add	r2,r16,r2
    3808:	140d803a 	cmpltu	r6,r2,r16
    380c:	88c7883a 	add	r3,r17,r3
    3810:	30cd883a 	add	r6,r6,r3
    3814:	1029883a 	mov	r20,r2
    3818:	302b883a 	mov	r21,r6
    381c:	da801317 	ldw	r10,76(sp)
    3820:	dac01417 	ldw	r11,80(sp)
    3824:	db001517 	ldw	r12,84(sp)
    3828:	db401617 	ldw	r13,88(sp)
    382c:	3440612e 	bgeu	r6,r17,39b4 <__muldf3+0x318>
    3830:	0009883a 	mov	r4,zero
    3834:	5105883a 	add	r2,r10,r4
    3838:	128d803a 	cmpltu	r6,r2,r10
    383c:	5d07883a 	add	r3,r11,r20
    3840:	30cd883a 	add	r6,r6,r3
    3844:	0021883a 	mov	r16,zero
    3848:	04400044 	movi	r17,1
    384c:	1025883a 	mov	r18,r2
    3850:	3027883a 	mov	r19,r6
    3854:	32c06236 	bltu	r6,r11,39e0 <__muldf3+0x344>
    3858:	59807a26 	beq	r11,r6,3a44 <__muldf3+0x3a8>
    385c:	680b883a 	mov	r5,r13
    3860:	b80f883a 	mov	r7,r23
    3864:	6009883a 	mov	r4,r12
    3868:	b00d883a 	mov	r6,r22
    386c:	00040900 	call	4090 <__muldi3>
    3870:	1009883a 	mov	r4,r2
    3874:	000f883a 	mov	r7,zero
    3878:	1545883a 	add	r2,r2,r21
    387c:	1111803a 	cmpltu	r8,r2,r4
    3880:	19c7883a 	add	r3,r3,r7
    3884:	40c7883a 	add	r3,r8,r3
    3888:	88cb883a 	add	r5,r17,r3
    388c:	d8c00617 	ldw	r3,24(sp)
    3890:	8089883a 	add	r4,r16,r2
    3894:	d8800b17 	ldw	r2,44(sp)
    3898:	18c00104 	addi	r3,r3,4
    389c:	240d803a 	cmpltu	r6,r4,r16
    38a0:	10c7883a 	add	r3,r2,r3
    38a4:	2013883a 	mov	r9,r4
    38a8:	d8800a17 	ldw	r2,40(sp)
    38ac:	d9000517 	ldw	r4,20(sp)
    38b0:	314d883a 	add	r6,r6,r5
    38b4:	3015883a 	mov	r10,r6
    38b8:	2088c03a 	cmpne	r4,r4,r2
    38bc:	00880034 	movhi	r2,8192
    38c0:	10bfffc4 	addi	r2,r2,-1
    38c4:	d9000f15 	stw	r4,60(sp)
    38c8:	d8c01015 	stw	r3,64(sp)
    38cc:	1180162e 	bgeu	r2,r6,3928 <__muldf3+0x28c>
    38d0:	1811883a 	mov	r8,r3
    38d4:	101f883a 	mov	r15,r2
    38d8:	980497fa 	slli	r2,r19,31
    38dc:	9016d07a 	srli	r11,r18,1
    38e0:	500697fa 	slli	r3,r10,31
    38e4:	480cd07a 	srli	r6,r9,1
    38e8:	500ed07a 	srli	r7,r10,1
    38ec:	12d6b03a 	or	r11,r2,r11
    38f0:	00800044 	movi	r2,1
    38f4:	198cb03a 	or	r6,r3,r6
    38f8:	4888703a 	and	r4,r9,r2
    38fc:	9818d07a 	srli	r12,r19,1
    3900:	001b883a 	mov	r13,zero
    3904:	03a00034 	movhi	r14,32768
    3908:	3013883a 	mov	r9,r6
    390c:	3815883a 	mov	r10,r7
    3910:	4091883a 	add	r8,r8,r2
    3914:	20000226 	beq	r4,zero,3920 <__muldf3+0x284>
    3918:	5b64b03a 	or	r18,r11,r13
    391c:	63a6b03a 	or	r19,r12,r14
    3920:	7abfed36 	bltu	r15,r10,38d8 <__muldf3+0x23c>
    3924:	da001015 	stw	r8,64(sp)
    3928:	00840034 	movhi	r2,4096
    392c:	10bfffc4 	addi	r2,r2,-1
    3930:	12801436 	bltu	r2,r10,3984 <__muldf3+0x2e8>
    3934:	da001017 	ldw	r8,64(sp)
    3938:	101f883a 	mov	r15,r2
    393c:	4a45883a 	add	r2,r9,r9
    3940:	124d803a 	cmpltu	r6,r2,r9
    3944:	5287883a 	add	r3,r10,r10
    3948:	9497883a 	add	r11,r18,r18
    394c:	5c8f803a 	cmpltu	r7,r11,r18
    3950:	9cd9883a 	add	r12,r19,r19
    3954:	01000044 	movi	r4,1
    3958:	30cd883a 	add	r6,r6,r3
    395c:	3b0f883a 	add	r7,r7,r12
    3960:	423fffc4 	addi	r8,r8,-1
    3964:	1013883a 	mov	r9,r2
    3968:	3015883a 	mov	r10,r6
    396c:	111ab03a 	or	r13,r2,r4
    3970:	98003016 	blt	r19,zero,3a34 <__muldf3+0x398>
    3974:	5825883a 	mov	r18,r11
    3978:	3827883a 	mov	r19,r7
    397c:	7abfef2e 	bgeu	r15,r10,393c <__muldf3+0x2a0>
    3980:	da001015 	stw	r8,64(sp)
    3984:	00803fc4 	movi	r2,255
    3988:	488e703a 	and	r7,r9,r2
    398c:	00802004 	movi	r2,128
    3990:	0007883a 	mov	r3,zero
    3994:	0011883a 	mov	r8,zero
    3998:	38801826 	beq	r7,r2,39fc <__muldf3+0x360>
    399c:	008000c4 	movi	r2,3
    39a0:	d9000e04 	addi	r4,sp,56
    39a4:	da801215 	stw	r10,72(sp)
    39a8:	d8800e15 	stw	r2,56(sp)
    39ac:	da401115 	stw	r9,68(sp)
    39b0:	003f6a06 	br	375c <__muldf3+0xc0>
    39b4:	89802126 	beq	r17,r6,3a3c <__muldf3+0x3a0>
    39b8:	0009883a 	mov	r4,zero
    39bc:	5105883a 	add	r2,r10,r4
    39c0:	128d803a 	cmpltu	r6,r2,r10
    39c4:	5d07883a 	add	r3,r11,r20
    39c8:	30cd883a 	add	r6,r6,r3
    39cc:	0021883a 	mov	r16,zero
    39d0:	0023883a 	mov	r17,zero
    39d4:	1025883a 	mov	r18,r2
    39d8:	3027883a 	mov	r19,r6
    39dc:	32ff9e2e 	bgeu	r6,r11,3858 <__muldf3+0x1bc>
    39e0:	00800044 	movi	r2,1
    39e4:	8089883a 	add	r4,r16,r2
    39e8:	240d803a 	cmpltu	r6,r4,r16
    39ec:	344d883a 	add	r6,r6,r17
    39f0:	2021883a 	mov	r16,r4
    39f4:	3023883a 	mov	r17,r6
    39f8:	003f9806 	br	385c <__muldf3+0x1c0>
    39fc:	403fe71e 	bne	r8,zero,399c <__muldf3+0x300>
    3a00:	01004004 	movi	r4,256
    3a04:	4904703a 	and	r2,r9,r4
    3a08:	10c4b03a 	or	r2,r2,r3
    3a0c:	103fe31e 	bne	r2,zero,399c <__muldf3+0x300>
    3a10:	94c4b03a 	or	r2,r18,r19
    3a14:	103fe126 	beq	r2,zero,399c <__muldf3+0x300>
    3a18:	49c5883a 	add	r2,r9,r7
    3a1c:	1251803a 	cmpltu	r8,r2,r9
    3a20:	4291883a 	add	r8,r8,r10
    3a24:	013fc004 	movi	r4,-256
    3a28:	1112703a 	and	r9,r2,r4
    3a2c:	4015883a 	mov	r10,r8
    3a30:	003fda06 	br	399c <__muldf3+0x300>
    3a34:	6813883a 	mov	r9,r13
    3a38:	003fce06 	br	3974 <__muldf3+0x2d8>
    3a3c:	143f7c36 	bltu	r2,r16,3830 <__muldf3+0x194>
    3a40:	003fdd06 	br	39b8 <__muldf3+0x31c>
    3a44:	12bf852e 	bgeu	r2,r10,385c <__muldf3+0x1c0>
    3a48:	003fe506 	br	39e0 <__muldf3+0x344>
    3a4c:	00800084 	movi	r2,2
    3a50:	20bf351e 	bne	r4,r2,3728 <__muldf3+0x8c>
    3a54:	01000074 	movhi	r4,1
    3a58:	213df404 	addi	r4,r4,-2096
    3a5c:	003f3f06 	br	375c <__muldf3+0xc0>

00003a60 <__divdf3>:
    3a60:	deffed04 	addi	sp,sp,-76
    3a64:	dcc01115 	stw	r19,68(sp)
    3a68:	dcc00404 	addi	r19,sp,16
    3a6c:	2011883a 	mov	r8,r4
    3a70:	2813883a 	mov	r9,r5
    3a74:	dc000e15 	stw	r16,56(sp)
    3a78:	d809883a 	mov	r4,sp
    3a7c:	980b883a 	mov	r5,r19
    3a80:	dc000904 	addi	r16,sp,36
    3a84:	dfc01215 	stw	ra,72(sp)
    3a88:	da400115 	stw	r9,4(sp)
    3a8c:	d9c00315 	stw	r7,12(sp)
    3a90:	da000015 	stw	r8,0(sp)
    3a94:	d9800215 	stw	r6,8(sp)
    3a98:	dc801015 	stw	r18,64(sp)
    3a9c:	dc400f15 	stw	r17,60(sp)
    3aa0:	00045840 	call	4584 <__unpack_d>
    3aa4:	d9000204 	addi	r4,sp,8
    3aa8:	800b883a 	mov	r5,r16
    3aac:	00045840 	call	4584 <__unpack_d>
    3ab0:	d9000417 	ldw	r4,16(sp)
    3ab4:	00800044 	movi	r2,1
    3ab8:	11000b2e 	bgeu	r2,r4,3ae8 <__divdf3+0x88>
    3abc:	d9400917 	ldw	r5,36(sp)
    3ac0:	1140762e 	bgeu	r2,r5,3c9c <__divdf3+0x23c>
    3ac4:	d8800517 	ldw	r2,20(sp)
    3ac8:	d8c00a17 	ldw	r3,40(sp)
    3acc:	01800104 	movi	r6,4
    3ad0:	10c4f03a 	xor	r2,r2,r3
    3ad4:	d8800515 	stw	r2,20(sp)
    3ad8:	21800226 	beq	r4,r6,3ae4 <__divdf3+0x84>
    3adc:	00800084 	movi	r2,2
    3ae0:	2080141e 	bne	r4,r2,3b34 <__divdf3+0xd4>
    3ae4:	29000926 	beq	r5,r4,3b0c <__divdf3+0xac>
    3ae8:	9809883a 	mov	r4,r19
    3aec:	00042700 	call	4270 <__pack_d>
    3af0:	dfc01217 	ldw	ra,72(sp)
    3af4:	dcc01117 	ldw	r19,68(sp)
    3af8:	dc801017 	ldw	r18,64(sp)
    3afc:	dc400f17 	ldw	r17,60(sp)
    3b00:	dc000e17 	ldw	r16,56(sp)
    3b04:	dec01304 	addi	sp,sp,76
    3b08:	f800283a 	ret
    3b0c:	01000074 	movhi	r4,1
    3b10:	213df404 	addi	r4,r4,-2096
    3b14:	00042700 	call	4270 <__pack_d>
    3b18:	dfc01217 	ldw	ra,72(sp)
    3b1c:	dcc01117 	ldw	r19,68(sp)
    3b20:	dc801017 	ldw	r18,64(sp)
    3b24:	dc400f17 	ldw	r17,60(sp)
    3b28:	dc000e17 	ldw	r16,56(sp)
    3b2c:	dec01304 	addi	sp,sp,76
    3b30:	f800283a 	ret
    3b34:	29805b26 	beq	r5,r6,3ca4 <__divdf3+0x244>
    3b38:	28802d26 	beq	r5,r2,3bf0 <__divdf3+0x190>
    3b3c:	d8c00617 	ldw	r3,24(sp)
    3b40:	d8800b17 	ldw	r2,44(sp)
    3b44:	d9c00817 	ldw	r7,32(sp)
    3b48:	dc400d17 	ldw	r17,52(sp)
    3b4c:	188bc83a 	sub	r5,r3,r2
    3b50:	d9800717 	ldw	r6,28(sp)
    3b54:	dc000c17 	ldw	r16,48(sp)
    3b58:	d9400615 	stw	r5,24(sp)
    3b5c:	3c403836 	bltu	r7,r17,3c40 <__divdf3+0x1e0>
    3b60:	89c03626 	beq	r17,r7,3c3c <__divdf3+0x1dc>
    3b64:	0015883a 	mov	r10,zero
    3b68:	001d883a 	mov	r14,zero
    3b6c:	02c40034 	movhi	r11,4096
    3b70:	001f883a 	mov	r15,zero
    3b74:	003f883a 	mov	ra,zero
    3b78:	04800f44 	movi	r18,61
    3b7c:	00000f06 	br	3bbc <__divdf3+0x15c>
    3b80:	601d883a 	mov	r14,r12
    3b84:	681f883a 	mov	r15,r13
    3b88:	400d883a 	mov	r6,r8
    3b8c:	100f883a 	mov	r7,r2
    3b90:	3191883a 	add	r8,r6,r6
    3b94:	5808d07a 	srli	r4,r11,1
    3b98:	4185803a 	cmpltu	r2,r8,r6
    3b9c:	39d3883a 	add	r9,r7,r7
    3ba0:	28c6b03a 	or	r3,r5,r3
    3ba4:	1245883a 	add	r2,r2,r9
    3ba8:	1815883a 	mov	r10,r3
    3bac:	2017883a 	mov	r11,r4
    3bb0:	400d883a 	mov	r6,r8
    3bb4:	100f883a 	mov	r7,r2
    3bb8:	fc801726 	beq	ra,r18,3c18 <__divdf3+0x1b8>
    3bbc:	580a97fa 	slli	r5,r11,31
    3bc0:	5006d07a 	srli	r3,r10,1
    3bc4:	ffc00044 	addi	ra,ra,1
    3bc8:	3c7ff136 	bltu	r7,r17,3b90 <__divdf3+0x130>
    3bcc:	3411c83a 	sub	r8,r6,r16
    3bd0:	3205803a 	cmpltu	r2,r6,r8
    3bd4:	3c53c83a 	sub	r9,r7,r17
    3bd8:	7298b03a 	or	r12,r14,r10
    3bdc:	7adab03a 	or	r13,r15,r11
    3be0:	4885c83a 	sub	r2,r9,r2
    3be4:	89ffe61e 	bne	r17,r7,3b80 <__divdf3+0x120>
    3be8:	343fe936 	bltu	r6,r16,3b90 <__divdf3+0x130>
    3bec:	003fe406 	br	3b80 <__divdf3+0x120>
    3bf0:	9809883a 	mov	r4,r19
    3bf4:	d9800415 	stw	r6,16(sp)
    3bf8:	00042700 	call	4270 <__pack_d>
    3bfc:	dfc01217 	ldw	ra,72(sp)
    3c00:	dcc01117 	ldw	r19,68(sp)
    3c04:	dc801017 	ldw	r18,64(sp)
    3c08:	dc400f17 	ldw	r17,60(sp)
    3c0c:	dc000e17 	ldw	r16,56(sp)
    3c10:	dec01304 	addi	sp,sp,76
    3c14:	f800283a 	ret
    3c18:	00803fc4 	movi	r2,255
    3c1c:	7090703a 	and	r8,r14,r2
    3c20:	00802004 	movi	r2,128
    3c24:	0007883a 	mov	r3,zero
    3c28:	0013883a 	mov	r9,zero
    3c2c:	40800d26 	beq	r8,r2,3c64 <__divdf3+0x204>
    3c30:	dbc00815 	stw	r15,32(sp)
    3c34:	db800715 	stw	r14,28(sp)
    3c38:	003fab06 	br	3ae8 <__divdf3+0x88>
    3c3c:	343fc92e 	bgeu	r6,r16,3b64 <__divdf3+0x104>
    3c40:	3185883a 	add	r2,r6,r6
    3c44:	1189803a 	cmpltu	r4,r2,r6
    3c48:	39c7883a 	add	r3,r7,r7
    3c4c:	20c9883a 	add	r4,r4,r3
    3c50:	297fffc4 	addi	r5,r5,-1
    3c54:	100d883a 	mov	r6,r2
    3c58:	200f883a 	mov	r7,r4
    3c5c:	d9400615 	stw	r5,24(sp)
    3c60:	003fc006 	br	3b64 <__divdf3+0x104>
    3c64:	483ff21e 	bne	r9,zero,3c30 <__divdf3+0x1d0>
    3c68:	01004004 	movi	r4,256
    3c6c:	7104703a 	and	r2,r14,r4
    3c70:	10c4b03a 	or	r2,r2,r3
    3c74:	103fee1e 	bne	r2,zero,3c30 <__divdf3+0x1d0>
    3c78:	31c4b03a 	or	r2,r6,r7
    3c7c:	103fec26 	beq	r2,zero,3c30 <__divdf3+0x1d0>
    3c80:	7205883a 	add	r2,r14,r8
    3c84:	1391803a 	cmpltu	r8,r2,r14
    3c88:	43d1883a 	add	r8,r8,r15
    3c8c:	013fc004 	movi	r4,-256
    3c90:	111c703a 	and	r14,r2,r4
    3c94:	401f883a 	mov	r15,r8
    3c98:	003fe506 	br	3c30 <__divdf3+0x1d0>
    3c9c:	8009883a 	mov	r4,r16
    3ca0:	003f9206 	br	3aec <__divdf3+0x8c>
    3ca4:	9809883a 	mov	r4,r19
    3ca8:	d8000715 	stw	zero,28(sp)
    3cac:	d8000815 	stw	zero,32(sp)
    3cb0:	d8000615 	stw	zero,24(sp)
    3cb4:	003f8d06 	br	3aec <__divdf3+0x8c>

00003cb8 <__eqdf2>:
    3cb8:	deffef04 	addi	sp,sp,-68
    3cbc:	dc400f15 	stw	r17,60(sp)
    3cc0:	dc400404 	addi	r17,sp,16
    3cc4:	2005883a 	mov	r2,r4
    3cc8:	2807883a 	mov	r3,r5
    3ccc:	dc000e15 	stw	r16,56(sp)
    3cd0:	d809883a 	mov	r4,sp
    3cd4:	880b883a 	mov	r5,r17
    3cd8:	dc000904 	addi	r16,sp,36
    3cdc:	d8c00115 	stw	r3,4(sp)
    3ce0:	d8800015 	stw	r2,0(sp)
    3ce4:	d9800215 	stw	r6,8(sp)
    3ce8:	dfc01015 	stw	ra,64(sp)
    3cec:	d9c00315 	stw	r7,12(sp)
    3cf0:	00045840 	call	4584 <__unpack_d>
    3cf4:	d9000204 	addi	r4,sp,8
    3cf8:	800b883a 	mov	r5,r16
    3cfc:	00045840 	call	4584 <__unpack_d>
    3d00:	d8800417 	ldw	r2,16(sp)
    3d04:	00c00044 	movi	r3,1
    3d08:	180d883a 	mov	r6,r3
    3d0c:	1880062e 	bgeu	r3,r2,3d28 <__eqdf2+0x70>
    3d10:	d8800917 	ldw	r2,36(sp)
    3d14:	8809883a 	mov	r4,r17
    3d18:	800b883a 	mov	r5,r16
    3d1c:	1880022e 	bgeu	r3,r2,3d28 <__eqdf2+0x70>
    3d20:	00046bc0 	call	46bc <__fpcmp_parts_d>
    3d24:	100d883a 	mov	r6,r2
    3d28:	3005883a 	mov	r2,r6
    3d2c:	dfc01017 	ldw	ra,64(sp)
    3d30:	dc400f17 	ldw	r17,60(sp)
    3d34:	dc000e17 	ldw	r16,56(sp)
    3d38:	dec01104 	addi	sp,sp,68
    3d3c:	f800283a 	ret

00003d40 <__gtdf2>:
    3d40:	deffef04 	addi	sp,sp,-68
    3d44:	dc400f15 	stw	r17,60(sp)
    3d48:	dc400404 	addi	r17,sp,16
    3d4c:	2005883a 	mov	r2,r4
    3d50:	2807883a 	mov	r3,r5
    3d54:	dc000e15 	stw	r16,56(sp)
    3d58:	d809883a 	mov	r4,sp
    3d5c:	880b883a 	mov	r5,r17
    3d60:	dc000904 	addi	r16,sp,36
    3d64:	d8c00115 	stw	r3,4(sp)
    3d68:	d8800015 	stw	r2,0(sp)
    3d6c:	d9800215 	stw	r6,8(sp)
    3d70:	dfc01015 	stw	ra,64(sp)
    3d74:	d9c00315 	stw	r7,12(sp)
    3d78:	00045840 	call	4584 <__unpack_d>
    3d7c:	d9000204 	addi	r4,sp,8
    3d80:	800b883a 	mov	r5,r16
    3d84:	00045840 	call	4584 <__unpack_d>
    3d88:	d8800417 	ldw	r2,16(sp)
    3d8c:	00c00044 	movi	r3,1
    3d90:	01bfffc4 	movi	r6,-1
    3d94:	1880062e 	bgeu	r3,r2,3db0 <__gtdf2+0x70>
    3d98:	d8800917 	ldw	r2,36(sp)
    3d9c:	8809883a 	mov	r4,r17
    3da0:	800b883a 	mov	r5,r16
    3da4:	1880022e 	bgeu	r3,r2,3db0 <__gtdf2+0x70>
    3da8:	00046bc0 	call	46bc <__fpcmp_parts_d>
    3dac:	100d883a 	mov	r6,r2
    3db0:	3005883a 	mov	r2,r6
    3db4:	dfc01017 	ldw	ra,64(sp)
    3db8:	dc400f17 	ldw	r17,60(sp)
    3dbc:	dc000e17 	ldw	r16,56(sp)
    3dc0:	dec01104 	addi	sp,sp,68
    3dc4:	f800283a 	ret

00003dc8 <__gedf2>:
    3dc8:	deffef04 	addi	sp,sp,-68
    3dcc:	dc400f15 	stw	r17,60(sp)
    3dd0:	dc400404 	addi	r17,sp,16
    3dd4:	2005883a 	mov	r2,r4
    3dd8:	2807883a 	mov	r3,r5
    3ddc:	dc000e15 	stw	r16,56(sp)
    3de0:	d809883a 	mov	r4,sp
    3de4:	880b883a 	mov	r5,r17
    3de8:	dc000904 	addi	r16,sp,36
    3dec:	d8c00115 	stw	r3,4(sp)
    3df0:	d8800015 	stw	r2,0(sp)
    3df4:	d9800215 	stw	r6,8(sp)
    3df8:	dfc01015 	stw	ra,64(sp)
    3dfc:	d9c00315 	stw	r7,12(sp)
    3e00:	00045840 	call	4584 <__unpack_d>
    3e04:	d9000204 	addi	r4,sp,8
    3e08:	800b883a 	mov	r5,r16
    3e0c:	00045840 	call	4584 <__unpack_d>
    3e10:	d8800417 	ldw	r2,16(sp)
    3e14:	00c00044 	movi	r3,1
    3e18:	01bfffc4 	movi	r6,-1
    3e1c:	1880062e 	bgeu	r3,r2,3e38 <__gedf2+0x70>
    3e20:	d8800917 	ldw	r2,36(sp)
    3e24:	8809883a 	mov	r4,r17
    3e28:	800b883a 	mov	r5,r16
    3e2c:	1880022e 	bgeu	r3,r2,3e38 <__gedf2+0x70>
    3e30:	00046bc0 	call	46bc <__fpcmp_parts_d>
    3e34:	100d883a 	mov	r6,r2
    3e38:	3005883a 	mov	r2,r6
    3e3c:	dfc01017 	ldw	ra,64(sp)
    3e40:	dc400f17 	ldw	r17,60(sp)
    3e44:	dc000e17 	ldw	r16,56(sp)
    3e48:	dec01104 	addi	sp,sp,68
    3e4c:	f800283a 	ret

00003e50 <__ltdf2>:
    3e50:	deffef04 	addi	sp,sp,-68
    3e54:	dc400f15 	stw	r17,60(sp)
    3e58:	dc400404 	addi	r17,sp,16
    3e5c:	2005883a 	mov	r2,r4
    3e60:	2807883a 	mov	r3,r5
    3e64:	dc000e15 	stw	r16,56(sp)
    3e68:	d809883a 	mov	r4,sp
    3e6c:	880b883a 	mov	r5,r17
    3e70:	dc000904 	addi	r16,sp,36
    3e74:	d8c00115 	stw	r3,4(sp)
    3e78:	d8800015 	stw	r2,0(sp)
    3e7c:	d9800215 	stw	r6,8(sp)
    3e80:	dfc01015 	stw	ra,64(sp)
    3e84:	d9c00315 	stw	r7,12(sp)
    3e88:	00045840 	call	4584 <__unpack_d>
    3e8c:	d9000204 	addi	r4,sp,8
    3e90:	800b883a 	mov	r5,r16
    3e94:	00045840 	call	4584 <__unpack_d>
    3e98:	d8800417 	ldw	r2,16(sp)
    3e9c:	00c00044 	movi	r3,1
    3ea0:	180d883a 	mov	r6,r3
    3ea4:	1880062e 	bgeu	r3,r2,3ec0 <__ltdf2+0x70>
    3ea8:	d8800917 	ldw	r2,36(sp)
    3eac:	8809883a 	mov	r4,r17
    3eb0:	800b883a 	mov	r5,r16
    3eb4:	1880022e 	bgeu	r3,r2,3ec0 <__ltdf2+0x70>
    3eb8:	00046bc0 	call	46bc <__fpcmp_parts_d>
    3ebc:	100d883a 	mov	r6,r2
    3ec0:	3005883a 	mov	r2,r6
    3ec4:	dfc01017 	ldw	ra,64(sp)
    3ec8:	dc400f17 	ldw	r17,60(sp)
    3ecc:	dc000e17 	ldw	r16,56(sp)
    3ed0:	dec01104 	addi	sp,sp,68
    3ed4:	f800283a 	ret

00003ed8 <__ledf2>:
    3ed8:	deffef04 	addi	sp,sp,-68
    3edc:	dc400f15 	stw	r17,60(sp)
    3ee0:	dc400404 	addi	r17,sp,16
    3ee4:	2005883a 	mov	r2,r4
    3ee8:	2807883a 	mov	r3,r5
    3eec:	dc000e15 	stw	r16,56(sp)
    3ef0:	d809883a 	mov	r4,sp
    3ef4:	880b883a 	mov	r5,r17
    3ef8:	dc000904 	addi	r16,sp,36
    3efc:	d8c00115 	stw	r3,4(sp)
    3f00:	d8800015 	stw	r2,0(sp)
    3f04:	d9800215 	stw	r6,8(sp)
    3f08:	dfc01015 	stw	ra,64(sp)
    3f0c:	d9c00315 	stw	r7,12(sp)
    3f10:	00045840 	call	4584 <__unpack_d>
    3f14:	d9000204 	addi	r4,sp,8
    3f18:	800b883a 	mov	r5,r16
    3f1c:	00045840 	call	4584 <__unpack_d>
    3f20:	d8800417 	ldw	r2,16(sp)
    3f24:	00c00044 	movi	r3,1
    3f28:	180d883a 	mov	r6,r3
    3f2c:	1880062e 	bgeu	r3,r2,3f48 <__ledf2+0x70>
    3f30:	d8800917 	ldw	r2,36(sp)
    3f34:	8809883a 	mov	r4,r17
    3f38:	800b883a 	mov	r5,r16
    3f3c:	1880022e 	bgeu	r3,r2,3f48 <__ledf2+0x70>
    3f40:	00046bc0 	call	46bc <__fpcmp_parts_d>
    3f44:	100d883a 	mov	r6,r2
    3f48:	3005883a 	mov	r2,r6
    3f4c:	dfc01017 	ldw	ra,64(sp)
    3f50:	dc400f17 	ldw	r17,60(sp)
    3f54:	dc000e17 	ldw	r16,56(sp)
    3f58:	dec01104 	addi	sp,sp,68
    3f5c:	f800283a 	ret

00003f60 <__floatsidf>:
    3f60:	2006d7fa 	srli	r3,r4,31
    3f64:	defff604 	addi	sp,sp,-40
    3f68:	008000c4 	movi	r2,3
    3f6c:	dfc00915 	stw	ra,36(sp)
    3f70:	dcc00815 	stw	r19,32(sp)
    3f74:	dc800715 	stw	r18,28(sp)
    3f78:	dc400615 	stw	r17,24(sp)
    3f7c:	dc000515 	stw	r16,20(sp)
    3f80:	d8800015 	stw	r2,0(sp)
    3f84:	d8c00115 	stw	r3,4(sp)
    3f88:	20000f1e 	bne	r4,zero,3fc8 <__floatsidf+0x68>
    3f8c:	00800084 	movi	r2,2
    3f90:	d8800015 	stw	r2,0(sp)
    3f94:	d809883a 	mov	r4,sp
    3f98:	00042700 	call	4270 <__pack_d>
    3f9c:	1009883a 	mov	r4,r2
    3fa0:	180b883a 	mov	r5,r3
    3fa4:	2005883a 	mov	r2,r4
    3fa8:	2807883a 	mov	r3,r5
    3fac:	dfc00917 	ldw	ra,36(sp)
    3fb0:	dcc00817 	ldw	r19,32(sp)
    3fb4:	dc800717 	ldw	r18,28(sp)
    3fb8:	dc400617 	ldw	r17,24(sp)
    3fbc:	dc000517 	ldw	r16,20(sp)
    3fc0:	dec00a04 	addi	sp,sp,40
    3fc4:	f800283a 	ret
    3fc8:	00800f04 	movi	r2,60
    3fcc:	1807003a 	cmpeq	r3,r3,zero
    3fd0:	d8800215 	stw	r2,8(sp)
    3fd4:	18001126 	beq	r3,zero,401c <__floatsidf+0xbc>
    3fd8:	0027883a 	mov	r19,zero
    3fdc:	2025883a 	mov	r18,r4
    3fe0:	d9000315 	stw	r4,12(sp)
    3fe4:	dcc00415 	stw	r19,16(sp)
    3fe8:	00041280 	call	4128 <__clzsi2>
    3fec:	11000744 	addi	r4,r2,29
    3ff0:	013fe80e 	bge	zero,r4,3f94 <__floatsidf+0x34>
    3ff4:	10bfff44 	addi	r2,r2,-3
    3ff8:	10000c16 	blt	r2,zero,402c <__floatsidf+0xcc>
    3ffc:	90a2983a 	sll	r17,r18,r2
    4000:	0021883a 	mov	r16,zero
    4004:	d8800217 	ldw	r2,8(sp)
    4008:	dc400415 	stw	r17,16(sp)
    400c:	dc000315 	stw	r16,12(sp)
    4010:	1105c83a 	sub	r2,r2,r4
    4014:	d8800215 	stw	r2,8(sp)
    4018:	003fde06 	br	3f94 <__floatsidf+0x34>
    401c:	00a00034 	movhi	r2,32768
    4020:	20800a26 	beq	r4,r2,404c <__floatsidf+0xec>
    4024:	0109c83a 	sub	r4,zero,r4
    4028:	003feb06 	br	3fd8 <__floatsidf+0x78>
    402c:	9006d07a 	srli	r3,r18,1
    4030:	008007c4 	movi	r2,31
    4034:	1105c83a 	sub	r2,r2,r4
    4038:	1886d83a 	srl	r3,r3,r2
    403c:	9922983a 	sll	r17,r19,r4
    4040:	9120983a 	sll	r16,r18,r4
    4044:	1c62b03a 	or	r17,r3,r17
    4048:	003fee06 	br	4004 <__floatsidf+0xa4>
    404c:	0009883a 	mov	r4,zero
    4050:	01707834 	movhi	r5,49632
    4054:	003fd306 	br	3fa4 <__floatsidf+0x44>

00004058 <__make_dp>:
    4058:	defff904 	addi	sp,sp,-28
    405c:	d8c00717 	ldw	r3,28(sp)
    4060:	d9000015 	stw	r4,0(sp)
    4064:	d809883a 	mov	r4,sp
    4068:	dfc00515 	stw	ra,20(sp)
    406c:	d9c00615 	stw	r7,24(sp)
    4070:	d9400115 	stw	r5,4(sp)
    4074:	d9800215 	stw	r6,8(sp)
    4078:	d8c00415 	stw	r3,16(sp)
    407c:	d9c00315 	stw	r7,12(sp)
    4080:	00042700 	call	4270 <__pack_d>
    4084:	dfc00517 	ldw	ra,20(sp)
    4088:	dec00704 	addi	sp,sp,28
    408c:	f800283a 	ret

00004090 <__muldi3>:
    4090:	2011883a 	mov	r8,r4
    4094:	427fffcc 	andi	r9,r8,65535
    4098:	4018d43a 	srli	r12,r8,16
    409c:	32bfffcc 	andi	r10,r6,65535
    40a0:	3016d43a 	srli	r11,r6,16
    40a4:	4a85383a 	mul	r2,r9,r10
    40a8:	6295383a 	mul	r10,r12,r10
    40ac:	4ad3383a 	mul	r9,r9,r11
    40b0:	113fffcc 	andi	r4,r2,65535
    40b4:	1004d43a 	srli	r2,r2,16
    40b8:	4a93883a 	add	r9,r9,r10
    40bc:	3807883a 	mov	r3,r7
    40c0:	1245883a 	add	r2,r2,r9
    40c4:	280f883a 	mov	r7,r5
    40c8:	180b883a 	mov	r5,r3
    40cc:	1006943a 	slli	r3,r2,16
    40d0:	defffd04 	addi	sp,sp,-12
    40d4:	dc800215 	stw	r18,8(sp)
    40d8:	1907883a 	add	r3,r3,r4
    40dc:	dc400115 	stw	r17,4(sp)
    40e0:	dc000015 	stw	r16,0(sp)
    40e4:	4165383a 	mul	r18,r8,r5
    40e8:	31e3383a 	mul	r17,r6,r7
    40ec:	1012d43a 	srli	r9,r2,16
    40f0:	62d9383a 	mul	r12,r12,r11
    40f4:	181f883a 	mov	r15,r3
    40f8:	1280022e 	bgeu	r2,r10,4104 <__muldi3+0x74>
    40fc:	00800074 	movhi	r2,1
    4100:	6099883a 	add	r12,r12,r2
    4104:	624d883a 	add	r6,r12,r9
    4108:	9187883a 	add	r3,r18,r6
    410c:	88c7883a 	add	r3,r17,r3
    4110:	7805883a 	mov	r2,r15
    4114:	dc800217 	ldw	r18,8(sp)
    4118:	dc400117 	ldw	r17,4(sp)
    411c:	dc000017 	ldw	r16,0(sp)
    4120:	dec00304 	addi	sp,sp,12
    4124:	f800283a 	ret

00004128 <__clzsi2>:
    4128:	00bfffd4 	movui	r2,65535
    412c:	11000e36 	bltu	r2,r4,4168 <__clzsi2+0x40>
    4130:	00803fc4 	movi	r2,255
    4134:	01400204 	movi	r5,8
    4138:	0007883a 	mov	r3,zero
    413c:	11001036 	bltu	r2,r4,4180 <__clzsi2+0x58>
    4140:	000b883a 	mov	r5,zero
    4144:	20c6d83a 	srl	r3,r4,r3
    4148:	00800074 	movhi	r2,1
    414c:	10bdf904 	addi	r2,r2,-2076
    4150:	1887883a 	add	r3,r3,r2
    4154:	18800003 	ldbu	r2,0(r3)
    4158:	00c00804 	movi	r3,32
    415c:	2885883a 	add	r2,r5,r2
    4160:	1885c83a 	sub	r2,r3,r2
    4164:	f800283a 	ret
    4168:	01400404 	movi	r5,16
    416c:	00804034 	movhi	r2,256
    4170:	10bfffc4 	addi	r2,r2,-1
    4174:	2807883a 	mov	r3,r5
    4178:	113ff22e 	bgeu	r2,r4,4144 <__clzsi2+0x1c>
    417c:	01400604 	movi	r5,24
    4180:	2807883a 	mov	r3,r5
    4184:	20c6d83a 	srl	r3,r4,r3
    4188:	00800074 	movhi	r2,1
    418c:	10bdf904 	addi	r2,r2,-2076
    4190:	1887883a 	add	r3,r3,r2
    4194:	18800003 	ldbu	r2,0(r3)
    4198:	00c00804 	movi	r3,32
    419c:	2885883a 	add	r2,r5,r2
    41a0:	1885c83a 	sub	r2,r3,r2
    41a4:	f800283a 	ret

000041a8 <__unpack_f>:
    41a8:	21800017 	ldw	r6,0(r4)
    41ac:	00c02034 	movhi	r3,128
    41b0:	18ffffc4 	addi	r3,r3,-1
    41b4:	3004d5fa 	srli	r2,r6,23
    41b8:	3008d7fa 	srli	r4,r6,31
    41bc:	30ce703a 	and	r7,r6,r3
    41c0:	10c03fcc 	andi	r3,r2,255
    41c4:	29000115 	stw	r4,4(r5)
    41c8:	1800131e 	bne	r3,zero,4218 <__unpack_f+0x70>
    41cc:	38000f26 	beq	r7,zero,420c <__unpack_f+0x64>
    41d0:	380691fa 	slli	r3,r7,7
    41d4:	01bfe084 	movi	r6,-126
    41d8:	008000c4 	movi	r2,3
    41dc:	01100034 	movhi	r4,16384
    41e0:	213fffc4 	addi	r4,r4,-1
    41e4:	28800015 	stw	r2,0(r5)
    41e8:	29800215 	stw	r6,8(r5)
    41ec:	20c00536 	bltu	r4,r3,4204 <__unpack_f+0x5c>
    41f0:	3005883a 	mov	r2,r6
    41f4:	18c7883a 	add	r3,r3,r3
    41f8:	10bfffc4 	addi	r2,r2,-1
    41fc:	20fffd2e 	bgeu	r4,r3,41f4 <__unpack_f+0x4c>
    4200:	28800215 	stw	r2,8(r5)
    4204:	28c00315 	stw	r3,12(r5)
    4208:	f800283a 	ret
    420c:	00800084 	movi	r2,2
    4210:	28800015 	stw	r2,0(r5)
    4214:	f800283a 	ret
    4218:	00803fc4 	movi	r2,255
    421c:	18800826 	beq	r3,r2,4240 <__unpack_f+0x98>
    4220:	380491fa 	slli	r2,r7,7
    4224:	18ffe044 	addi	r3,r3,-127
    4228:	28c00215 	stw	r3,8(r5)
    422c:	10900034 	orhi	r2,r2,16384
    4230:	28800315 	stw	r2,12(r5)
    4234:	008000c4 	movi	r2,3
    4238:	28800015 	stw	r2,0(r5)
    423c:	f800283a 	ret
    4240:	3800031e 	bne	r7,zero,4250 <__unpack_f+0xa8>
    4244:	00800104 	movi	r2,4
    4248:	28800015 	stw	r2,0(r5)
    424c:	f800283a 	ret
    4250:	3080042c 	andhi	r2,r6,16
    4254:	10000426 	beq	r2,zero,4268 <__unpack_f+0xc0>
    4258:	00800044 	movi	r2,1
    425c:	28800015 	stw	r2,0(r5)
    4260:	29c00315 	stw	r7,12(r5)
    4264:	f800283a 	ret
    4268:	28000015 	stw	zero,0(r5)
    426c:	003ffc06 	br	4260 <__unpack_f+0xb8>

00004270 <__pack_d>:
    4270:	20c00017 	ldw	r3,0(r4)
    4274:	defffd04 	addi	sp,sp,-12
    4278:	dc000015 	stw	r16,0(sp)
    427c:	dc800215 	stw	r18,8(sp)
    4280:	dc400115 	stw	r17,4(sp)
    4284:	00800044 	movi	r2,1
    4288:	22000317 	ldw	r8,12(r4)
    428c:	001f883a 	mov	r15,zero
    4290:	22400417 	ldw	r9,16(r4)
    4294:	24000117 	ldw	r16,4(r4)
    4298:	10c0552e 	bgeu	r2,r3,43f0 <__pack_d+0x180>
    429c:	00800104 	movi	r2,4
    42a0:	18804f26 	beq	r3,r2,43e0 <__pack_d+0x170>
    42a4:	00800084 	movi	r2,2
    42a8:	18800226 	beq	r3,r2,42b4 <__pack_d+0x44>
    42ac:	4244b03a 	or	r2,r8,r9
    42b0:	10001a1e 	bne	r2,zero,431c <__pack_d+0xac>
    42b4:	000d883a 	mov	r6,zero
    42b8:	000f883a 	mov	r7,zero
    42bc:	0011883a 	mov	r8,zero
    42c0:	00800434 	movhi	r2,16
    42c4:	10bfffc4 	addi	r2,r2,-1
    42c8:	301d883a 	mov	r14,r6
    42cc:	3884703a 	and	r2,r7,r2
    42d0:	400a953a 	slli	r5,r8,20
    42d4:	79bffc2c 	andhi	r6,r15,65520
    42d8:	308cb03a 	or	r6,r6,r2
    42dc:	00e00434 	movhi	r3,32784
    42e0:	18ffffc4 	addi	r3,r3,-1
    42e4:	800497fa 	slli	r2,r16,31
    42e8:	30c6703a 	and	r3,r6,r3
    42ec:	1946b03a 	or	r3,r3,r5
    42f0:	01600034 	movhi	r5,32768
    42f4:	297fffc4 	addi	r5,r5,-1
    42f8:	194a703a 	and	r5,r3,r5
    42fc:	288ab03a 	or	r5,r5,r2
    4300:	2807883a 	mov	r3,r5
    4304:	7005883a 	mov	r2,r14
    4308:	dc800217 	ldw	r18,8(sp)
    430c:	dc400117 	ldw	r17,4(sp)
    4310:	dc000017 	ldw	r16,0(sp)
    4314:	dec00304 	addi	sp,sp,12
    4318:	f800283a 	ret
    431c:	21000217 	ldw	r4,8(r4)
    4320:	00bf0084 	movi	r2,-1022
    4324:	20803f16 	blt	r4,r2,4424 <__pack_d+0x1b4>
    4328:	0080ffc4 	movi	r2,1023
    432c:	11002c16 	blt	r2,r4,43e0 <__pack_d+0x170>
    4330:	00803fc4 	movi	r2,255
    4334:	408c703a 	and	r6,r8,r2
    4338:	00802004 	movi	r2,128
    433c:	0007883a 	mov	r3,zero
    4340:	000f883a 	mov	r7,zero
    4344:	2280ffc4 	addi	r10,r4,1023
    4348:	30801e26 	beq	r6,r2,43c4 <__pack_d+0x154>
    434c:	00801fc4 	movi	r2,127
    4350:	4089883a 	add	r4,r8,r2
    4354:	220d803a 	cmpltu	r6,r4,r8
    4358:	324d883a 	add	r6,r6,r9
    435c:	2011883a 	mov	r8,r4
    4360:	3013883a 	mov	r9,r6
    4364:	00880034 	movhi	r2,8192
    4368:	10bfffc4 	addi	r2,r2,-1
    436c:	12400d36 	bltu	r2,r9,43a4 <__pack_d+0x134>
    4370:	4804963a 	slli	r2,r9,24
    4374:	400cd23a 	srli	r6,r8,8
    4378:	480ed23a 	srli	r7,r9,8
    437c:	013fffc4 	movi	r4,-1
    4380:	118cb03a 	or	r6,r2,r6
    4384:	01400434 	movhi	r5,16
    4388:	297fffc4 	addi	r5,r5,-1
    438c:	3104703a 	and	r2,r6,r4
    4390:	3946703a 	and	r3,r7,r5
    4394:	5201ffcc 	andi	r8,r10,2047
    4398:	100d883a 	mov	r6,r2
    439c:	180f883a 	mov	r7,r3
    43a0:	003fc706 	br	42c0 <__pack_d+0x50>
    43a4:	480897fa 	slli	r4,r9,31
    43a8:	4004d07a 	srli	r2,r8,1
    43ac:	4806d07a 	srli	r3,r9,1
    43b0:	52800044 	addi	r10,r10,1
    43b4:	2084b03a 	or	r2,r4,r2
    43b8:	1011883a 	mov	r8,r2
    43bc:	1813883a 	mov	r9,r3
    43c0:	003feb06 	br	4370 <__pack_d+0x100>
    43c4:	383fe11e 	bne	r7,zero,434c <__pack_d+0xdc>
    43c8:	01004004 	movi	r4,256
    43cc:	4104703a 	and	r2,r8,r4
    43d0:	10c4b03a 	or	r2,r2,r3
    43d4:	103fe326 	beq	r2,zero,4364 <__pack_d+0xf4>
    43d8:	3005883a 	mov	r2,r6
    43dc:	003fdc06 	br	4350 <__pack_d+0xe0>
    43e0:	000d883a 	mov	r6,zero
    43e4:	000f883a 	mov	r7,zero
    43e8:	0201ffc4 	movi	r8,2047
    43ec:	003fb406 	br	42c0 <__pack_d+0x50>
    43f0:	0005883a 	mov	r2,zero
    43f4:	00c00234 	movhi	r3,8
    43f8:	408cb03a 	or	r6,r8,r2
    43fc:	48ceb03a 	or	r7,r9,r3
    4400:	013fffc4 	movi	r4,-1
    4404:	01400434 	movhi	r5,16
    4408:	297fffc4 	addi	r5,r5,-1
    440c:	3104703a 	and	r2,r6,r4
    4410:	3946703a 	and	r3,r7,r5
    4414:	100d883a 	mov	r6,r2
    4418:	180f883a 	mov	r7,r3
    441c:	0201ffc4 	movi	r8,2047
    4420:	003fa706 	br	42c0 <__pack_d+0x50>
    4424:	1109c83a 	sub	r4,r2,r4
    4428:	00800e04 	movi	r2,56
    442c:	11004316 	blt	r2,r4,453c <__pack_d+0x2cc>
    4430:	21fff804 	addi	r7,r4,-32
    4434:	38004516 	blt	r7,zero,454c <__pack_d+0x2dc>
    4438:	49d8d83a 	srl	r12,r9,r7
    443c:	001b883a 	mov	r13,zero
    4440:	0023883a 	mov	r17,zero
    4444:	01400044 	movi	r5,1
    4448:	0025883a 	mov	r18,zero
    444c:	38004716 	blt	r7,zero,456c <__pack_d+0x2fc>
    4450:	29d6983a 	sll	r11,r5,r7
    4454:	0015883a 	mov	r10,zero
    4458:	00bfffc4 	movi	r2,-1
    445c:	5089883a 	add	r4,r10,r2
    4460:	588b883a 	add	r5,r11,r2
    4464:	228d803a 	cmpltu	r6,r4,r10
    4468:	314b883a 	add	r5,r6,r5
    446c:	4104703a 	and	r2,r8,r4
    4470:	4946703a 	and	r3,r9,r5
    4474:	10c4b03a 	or	r2,r2,r3
    4478:	10000226 	beq	r2,zero,4484 <__pack_d+0x214>
    447c:	04400044 	movi	r17,1
    4480:	0025883a 	mov	r18,zero
    4484:	00803fc4 	movi	r2,255
    4488:	644eb03a 	or	r7,r12,r17
    448c:	3892703a 	and	r9,r7,r2
    4490:	00802004 	movi	r2,128
    4494:	6c90b03a 	or	r8,r13,r18
    4498:	0015883a 	mov	r10,zero
    449c:	48801626 	beq	r9,r2,44f8 <__pack_d+0x288>
    44a0:	01001fc4 	movi	r4,127
    44a4:	3905883a 	add	r2,r7,r4
    44a8:	11cd803a 	cmpltu	r6,r2,r7
    44ac:	320d883a 	add	r6,r6,r8
    44b0:	100f883a 	mov	r7,r2
    44b4:	00840034 	movhi	r2,4096
    44b8:	10bfffc4 	addi	r2,r2,-1
    44bc:	3011883a 	mov	r8,r6
    44c0:	0007883a 	mov	r3,zero
    44c4:	11801b36 	bltu	r2,r6,4534 <__pack_d+0x2c4>
    44c8:	4004963a 	slli	r2,r8,24
    44cc:	3808d23a 	srli	r4,r7,8
    44d0:	400ad23a 	srli	r5,r8,8
    44d4:	1813883a 	mov	r9,r3
    44d8:	1108b03a 	or	r4,r2,r4
    44dc:	00bfffc4 	movi	r2,-1
    44e0:	00c00434 	movhi	r3,16
    44e4:	18ffffc4 	addi	r3,r3,-1
    44e8:	208c703a 	and	r6,r4,r2
    44ec:	28ce703a 	and	r7,r5,r3
    44f0:	4a01ffcc 	andi	r8,r9,2047
    44f4:	003f7206 	br	42c0 <__pack_d+0x50>
    44f8:	503fe91e 	bne	r10,zero,44a0 <__pack_d+0x230>
    44fc:	01004004 	movi	r4,256
    4500:	3904703a 	and	r2,r7,r4
    4504:	0007883a 	mov	r3,zero
    4508:	10c4b03a 	or	r2,r2,r3
    450c:	10000626 	beq	r2,zero,4528 <__pack_d+0x2b8>
    4510:	3a45883a 	add	r2,r7,r9
    4514:	11cd803a 	cmpltu	r6,r2,r7
    4518:	320d883a 	add	r6,r6,r8
    451c:	100f883a 	mov	r7,r2
    4520:	3011883a 	mov	r8,r6
    4524:	0007883a 	mov	r3,zero
    4528:	00840034 	movhi	r2,4096
    452c:	10bfffc4 	addi	r2,r2,-1
    4530:	123fe52e 	bgeu	r2,r8,44c8 <__pack_d+0x258>
    4534:	00c00044 	movi	r3,1
    4538:	003fe306 	br	44c8 <__pack_d+0x258>
    453c:	0009883a 	mov	r4,zero
    4540:	0013883a 	mov	r9,zero
    4544:	000b883a 	mov	r5,zero
    4548:	003fe406 	br	44dc <__pack_d+0x26c>
    454c:	4a47883a 	add	r3,r9,r9
    4550:	008007c4 	movi	r2,31
    4554:	1105c83a 	sub	r2,r2,r4
    4558:	1886983a 	sll	r3,r3,r2
    455c:	4118d83a 	srl	r12,r8,r4
    4560:	491ad83a 	srl	r13,r9,r4
    4564:	1b18b03a 	or	r12,r3,r12
    4568:	003fb506 	br	4440 <__pack_d+0x1d0>
    456c:	2806d07a 	srli	r3,r5,1
    4570:	008007c4 	movi	r2,31
    4574:	1105c83a 	sub	r2,r2,r4
    4578:	1896d83a 	srl	r11,r3,r2
    457c:	2914983a 	sll	r10,r5,r4
    4580:	003fb506 	br	4458 <__pack_d+0x1e8>

00004584 <__unpack_d>:
    4584:	20c00117 	ldw	r3,4(r4)
    4588:	22400017 	ldw	r9,0(r4)
    458c:	00800434 	movhi	r2,16
    4590:	10bfffc4 	addi	r2,r2,-1
    4594:	1808d53a 	srli	r4,r3,20
    4598:	180cd7fa 	srli	r6,r3,31
    459c:	1894703a 	and	r10,r3,r2
    45a0:	2201ffcc 	andi	r8,r4,2047
    45a4:	281b883a 	mov	r13,r5
    45a8:	4817883a 	mov	r11,r9
    45ac:	29800115 	stw	r6,4(r5)
    45b0:	5019883a 	mov	r12,r10
    45b4:	40001e1e 	bne	r8,zero,4630 <__unpack_d+0xac>
    45b8:	4a84b03a 	or	r2,r9,r10
    45bc:	10001926 	beq	r2,zero,4624 <__unpack_d+0xa0>
    45c0:	4804d63a 	srli	r2,r9,24
    45c4:	500c923a 	slli	r6,r10,8
    45c8:	013f0084 	movi	r4,-1022
    45cc:	00c40034 	movhi	r3,4096
    45d0:	18ffffc4 	addi	r3,r3,-1
    45d4:	118cb03a 	or	r6,r2,r6
    45d8:	008000c4 	movi	r2,3
    45dc:	480a923a 	slli	r5,r9,8
    45e0:	68800015 	stw	r2,0(r13)
    45e4:	69000215 	stw	r4,8(r13)
    45e8:	19800b36 	bltu	r3,r6,4618 <__unpack_d+0x94>
    45ec:	200f883a 	mov	r7,r4
    45f0:	1811883a 	mov	r8,r3
    45f4:	2945883a 	add	r2,r5,r5
    45f8:	1149803a 	cmpltu	r4,r2,r5
    45fc:	3187883a 	add	r3,r6,r6
    4600:	20c9883a 	add	r4,r4,r3
    4604:	100b883a 	mov	r5,r2
    4608:	200d883a 	mov	r6,r4
    460c:	39ffffc4 	addi	r7,r7,-1
    4610:	413ff82e 	bgeu	r8,r4,45f4 <__unpack_d+0x70>
    4614:	69c00215 	stw	r7,8(r13)
    4618:	69800415 	stw	r6,16(r13)
    461c:	69400315 	stw	r5,12(r13)
    4620:	f800283a 	ret
    4624:	00800084 	movi	r2,2
    4628:	28800015 	stw	r2,0(r5)
    462c:	f800283a 	ret
    4630:	0081ffc4 	movi	r2,2047
    4634:	40800f26 	beq	r8,r2,4674 <__unpack_d+0xf0>
    4638:	480cd63a 	srli	r6,r9,24
    463c:	5006923a 	slli	r3,r10,8
    4640:	4804923a 	slli	r2,r9,8
    4644:	0009883a 	mov	r4,zero
    4648:	30c6b03a 	or	r3,r6,r3
    464c:	01440034 	movhi	r5,4096
    4650:	110cb03a 	or	r6,r2,r4
    4654:	423f0044 	addi	r8,r8,-1023
    4658:	194eb03a 	or	r7,r3,r5
    465c:	008000c4 	movi	r2,3
    4660:	69c00415 	stw	r7,16(r13)
    4664:	6a000215 	stw	r8,8(r13)
    4668:	68800015 	stw	r2,0(r13)
    466c:	69800315 	stw	r6,12(r13)
    4670:	f800283a 	ret
    4674:	4a84b03a 	or	r2,r9,r10
    4678:	1000031e 	bne	r2,zero,4688 <__unpack_d+0x104>
    467c:	00800104 	movi	r2,4
    4680:	28800015 	stw	r2,0(r5)
    4684:	f800283a 	ret
    4688:	0009883a 	mov	r4,zero
    468c:	01400234 	movhi	r5,8
    4690:	4904703a 	and	r2,r9,r4
    4694:	5146703a 	and	r3,r10,r5
    4698:	10c4b03a 	or	r2,r2,r3
    469c:	10000526 	beq	r2,zero,46b4 <__unpack_d+0x130>
    46a0:	00800044 	movi	r2,1
    46a4:	68800015 	stw	r2,0(r13)
    46a8:	6b000415 	stw	r12,16(r13)
    46ac:	6ac00315 	stw	r11,12(r13)
    46b0:	f800283a 	ret
    46b4:	68000015 	stw	zero,0(r13)
    46b8:	003ffb06 	br	46a8 <__unpack_d+0x124>

000046bc <__fpcmp_parts_d>:
    46bc:	21800017 	ldw	r6,0(r4)
    46c0:	00c00044 	movi	r3,1
    46c4:	19800a2e 	bgeu	r3,r6,46f0 <__fpcmp_parts_d+0x34>
    46c8:	28800017 	ldw	r2,0(r5)
    46cc:	1880082e 	bgeu	r3,r2,46f0 <__fpcmp_parts_d+0x34>
    46d0:	00c00104 	movi	r3,4
    46d4:	30c02626 	beq	r6,r3,4770 <__fpcmp_parts_d+0xb4>
    46d8:	10c02226 	beq	r2,r3,4764 <__fpcmp_parts_d+0xa8>
    46dc:	00c00084 	movi	r3,2
    46e0:	30c00526 	beq	r6,r3,46f8 <__fpcmp_parts_d+0x3c>
    46e4:	10c0071e 	bne	r2,r3,4704 <__fpcmp_parts_d+0x48>
    46e8:	20800117 	ldw	r2,4(r4)
    46ec:	1000091e 	bne	r2,zero,4714 <__fpcmp_parts_d+0x58>
    46f0:	00800044 	movi	r2,1
    46f4:	f800283a 	ret
    46f8:	10c01a1e 	bne	r2,r3,4764 <__fpcmp_parts_d+0xa8>
    46fc:	0005883a 	mov	r2,zero
    4700:	f800283a 	ret
    4704:	22000117 	ldw	r8,4(r4)
    4708:	28800117 	ldw	r2,4(r5)
    470c:	40800326 	beq	r8,r2,471c <__fpcmp_parts_d+0x60>
    4710:	403ff726 	beq	r8,zero,46f0 <__fpcmp_parts_d+0x34>
    4714:	00bfffc4 	movi	r2,-1
    4718:	f800283a 	ret
    471c:	20c00217 	ldw	r3,8(r4)
    4720:	28800217 	ldw	r2,8(r5)
    4724:	10fffa16 	blt	r2,r3,4710 <__fpcmp_parts_d+0x54>
    4728:	18800916 	blt	r3,r2,4750 <__fpcmp_parts_d+0x94>
    472c:	21c00417 	ldw	r7,16(r4)
    4730:	28c00417 	ldw	r3,16(r5)
    4734:	21800317 	ldw	r6,12(r4)
    4738:	28800317 	ldw	r2,12(r5)
    473c:	19fff436 	bltu	r3,r7,4710 <__fpcmp_parts_d+0x54>
    4740:	38c00526 	beq	r7,r3,4758 <__fpcmp_parts_d+0x9c>
    4744:	38c00236 	bltu	r7,r3,4750 <__fpcmp_parts_d+0x94>
    4748:	19ffec1e 	bne	r3,r7,46fc <__fpcmp_parts_d+0x40>
    474c:	30bfeb2e 	bgeu	r6,r2,46fc <__fpcmp_parts_d+0x40>
    4750:	403fe71e 	bne	r8,zero,46f0 <__fpcmp_parts_d+0x34>
    4754:	003fef06 	br	4714 <__fpcmp_parts_d+0x58>
    4758:	11bffa2e 	bgeu	r2,r6,4744 <__fpcmp_parts_d+0x88>
    475c:	403fe426 	beq	r8,zero,46f0 <__fpcmp_parts_d+0x34>
    4760:	003fec06 	br	4714 <__fpcmp_parts_d+0x58>
    4764:	28800117 	ldw	r2,4(r5)
    4768:	103fe11e 	bne	r2,zero,46f0 <__fpcmp_parts_d+0x34>
    476c:	003fe906 	br	4714 <__fpcmp_parts_d+0x58>
    4770:	11bfdd1e 	bne	r2,r6,46e8 <__fpcmp_parts_d+0x2c>
    4774:	28c00117 	ldw	r3,4(r5)
    4778:	20800117 	ldw	r2,4(r4)
    477c:	1885c83a 	sub	r2,r3,r2
    4780:	f800283a 	ret

00004784 <__errno>:
    4784:	00c000b4 	movhi	r3,2
    4788:	18e6e504 	addi	r3,r3,-25708
    478c:	18800017 	ldw	r2,0(r3)
    4790:	f800283a 	ret

00004794 <free>:
    4794:	008000b4 	movhi	r2,2
    4798:	10a6e504 	addi	r2,r2,-25708
    479c:	200b883a 	mov	r5,r4
    47a0:	11000017 	ldw	r4,0(r2)
    47a4:	00090c81 	jmpi	90c8 <_free_r>

000047a8 <malloc>:
    47a8:	008000b4 	movhi	r2,2
    47ac:	10a6e504 	addi	r2,r2,-25708
    47b0:	200b883a 	mov	r5,r4
    47b4:	11000017 	ldw	r4,0(r2)
    47b8:	00047bc1 	jmpi	47bc <_malloc_r>

000047bc <_malloc_r>:
    47bc:	defff604 	addi	sp,sp,-40
    47c0:	28c002c4 	addi	r3,r5,11
    47c4:	00800584 	movi	r2,22
    47c8:	dc800215 	stw	r18,8(sp)
    47cc:	dfc00915 	stw	ra,36(sp)
    47d0:	df000815 	stw	fp,32(sp)
    47d4:	ddc00715 	stw	r23,28(sp)
    47d8:	dd800615 	stw	r22,24(sp)
    47dc:	dd400515 	stw	r21,20(sp)
    47e0:	dd000415 	stw	r20,16(sp)
    47e4:	dcc00315 	stw	r19,12(sp)
    47e8:	dc400115 	stw	r17,4(sp)
    47ec:	dc000015 	stw	r16,0(sp)
    47f0:	2025883a 	mov	r18,r4
    47f4:	10c01236 	bltu	r2,r3,4840 <_malloc_r+0x84>
    47f8:	04400404 	movi	r17,16
    47fc:	8940142e 	bgeu	r17,r5,4850 <_malloc_r+0x94>
    4800:	00800304 	movi	r2,12
    4804:	0007883a 	mov	r3,zero
    4808:	90800015 	stw	r2,0(r18)
    480c:	1805883a 	mov	r2,r3
    4810:	dfc00917 	ldw	ra,36(sp)
    4814:	df000817 	ldw	fp,32(sp)
    4818:	ddc00717 	ldw	r23,28(sp)
    481c:	dd800617 	ldw	r22,24(sp)
    4820:	dd400517 	ldw	r21,20(sp)
    4824:	dd000417 	ldw	r20,16(sp)
    4828:	dcc00317 	ldw	r19,12(sp)
    482c:	dc800217 	ldw	r18,8(sp)
    4830:	dc400117 	ldw	r17,4(sp)
    4834:	dc000017 	ldw	r16,0(sp)
    4838:	dec00a04 	addi	sp,sp,40
    483c:	f800283a 	ret
    4840:	00bffe04 	movi	r2,-8
    4844:	18a2703a 	and	r17,r3,r2
    4848:	883fed16 	blt	r17,zero,4800 <_malloc_r+0x44>
    484c:	897fec36 	bltu	r17,r5,4800 <_malloc_r+0x44>
    4850:	9009883a 	mov	r4,r18
    4854:	000d0300 	call	d030 <__malloc_lock>
    4858:	00807dc4 	movi	r2,503
    485c:	14402b2e 	bgeu	r2,r17,490c <_malloc_r+0x150>
    4860:	8806d27a 	srli	r3,r17,9
    4864:	18003f1e 	bne	r3,zero,4964 <_malloc_r+0x1a8>
    4868:	880cd0fa 	srli	r6,r17,3
    486c:	300490fa 	slli	r2,r6,3
    4870:	02c000b4 	movhi	r11,2
    4874:	5ae03704 	addi	r11,r11,-32548
    4878:	12cb883a 	add	r5,r2,r11
    487c:	2c000317 	ldw	r16,12(r5)
    4880:	580f883a 	mov	r7,r11
    4884:	2c00041e 	bne	r5,r16,4898 <_malloc_r+0xdc>
    4888:	00000a06 	br	48b4 <_malloc_r+0xf8>
    488c:	1800860e 	bge	r3,zero,4aa8 <_malloc_r+0x2ec>
    4890:	84000317 	ldw	r16,12(r16)
    4894:	2c000726 	beq	r5,r16,48b4 <_malloc_r+0xf8>
    4898:	80800117 	ldw	r2,4(r16)
    489c:	00ffff04 	movi	r3,-4
    48a0:	10c8703a 	and	r4,r2,r3
    48a4:	2447c83a 	sub	r3,r4,r17
    48a8:	008003c4 	movi	r2,15
    48ac:	10fff70e 	bge	r2,r3,488c <_malloc_r+0xd0>
    48b0:	31bfffc4 	addi	r6,r6,-1
    48b4:	32400044 	addi	r9,r6,1
    48b8:	028000b4 	movhi	r10,2
    48bc:	52a03904 	addi	r10,r10,-32540
    48c0:	54000217 	ldw	r16,8(r10)
    48c4:	8280a026 	beq	r16,r10,4b48 <_malloc_r+0x38c>
    48c8:	80800117 	ldw	r2,4(r16)
    48cc:	00ffff04 	movi	r3,-4
    48d0:	10ca703a 	and	r5,r2,r3
    48d4:	2c4dc83a 	sub	r6,r5,r17
    48d8:	008003c4 	movi	r2,15
    48dc:	11808316 	blt	r2,r6,4aec <_malloc_r+0x330>
    48e0:	52800315 	stw	r10,12(r10)
    48e4:	52800215 	stw	r10,8(r10)
    48e8:	30002916 	blt	r6,zero,4990 <_malloc_r+0x1d4>
    48ec:	8147883a 	add	r3,r16,r5
    48f0:	18800117 	ldw	r2,4(r3)
    48f4:	9009883a 	mov	r4,r18
    48f8:	10800054 	ori	r2,r2,1
    48fc:	18800115 	stw	r2,4(r3)
    4900:	000d0340 	call	d034 <__malloc_unlock>
    4904:	80c00204 	addi	r3,r16,8
    4908:	003fc006 	br	480c <_malloc_r+0x50>
    490c:	02c000b4 	movhi	r11,2
    4910:	5ae03704 	addi	r11,r11,-32548
    4914:	8ac5883a 	add	r2,r17,r11
    4918:	14000317 	ldw	r16,12(r2)
    491c:	580f883a 	mov	r7,r11
    4920:	8806d0fa 	srli	r3,r17,3
    4924:	14006c26 	beq	r2,r16,4ad8 <_malloc_r+0x31c>
    4928:	80c00117 	ldw	r3,4(r16)
    492c:	00bfff04 	movi	r2,-4
    4930:	81800317 	ldw	r6,12(r16)
    4934:	1886703a 	and	r3,r3,r2
    4938:	80c7883a 	add	r3,r16,r3
    493c:	18800117 	ldw	r2,4(r3)
    4940:	81400217 	ldw	r5,8(r16)
    4944:	9009883a 	mov	r4,r18
    4948:	10800054 	ori	r2,r2,1
    494c:	18800115 	stw	r2,4(r3)
    4950:	31400215 	stw	r5,8(r6)
    4954:	29800315 	stw	r6,12(r5)
    4958:	000d0340 	call	d034 <__malloc_unlock>
    495c:	80c00204 	addi	r3,r16,8
    4960:	003faa06 	br	480c <_malloc_r+0x50>
    4964:	00800104 	movi	r2,4
    4968:	10c0052e 	bgeu	r2,r3,4980 <_malloc_r+0x1c4>
    496c:	00800504 	movi	r2,20
    4970:	10c07836 	bltu	r2,r3,4b54 <_malloc_r+0x398>
    4974:	198016c4 	addi	r6,r3,91
    4978:	300490fa 	slli	r2,r6,3
    497c:	003fbc06 	br	4870 <_malloc_r+0xb4>
    4980:	8804d1ba 	srli	r2,r17,6
    4984:	11800e04 	addi	r6,r2,56
    4988:	300490fa 	slli	r2,r6,3
    498c:	003fb806 	br	4870 <_malloc_r+0xb4>
    4990:	00807fc4 	movi	r2,511
    4994:	1140bb36 	bltu	r2,r5,4c84 <_malloc_r+0x4c8>
    4998:	2806d0fa 	srli	r3,r5,3
    499c:	573ffe04 	addi	fp,r10,-8
    49a0:	00800044 	movi	r2,1
    49a4:	180890fa 	slli	r4,r3,3
    49a8:	1807d0ba 	srai	r3,r3,2
    49ac:	e1c00117 	ldw	r7,4(fp)
    49b0:	5909883a 	add	r4,r11,r4
    49b4:	21400217 	ldw	r5,8(r4)
    49b8:	10c4983a 	sll	r2,r2,r3
    49bc:	81000315 	stw	r4,12(r16)
    49c0:	81400215 	stw	r5,8(r16)
    49c4:	388eb03a 	or	r7,r7,r2
    49c8:	2c000315 	stw	r16,12(r5)
    49cc:	24000215 	stw	r16,8(r4)
    49d0:	e1c00115 	stw	r7,4(fp)
    49d4:	4807883a 	mov	r3,r9
    49d8:	4800cd16 	blt	r9,zero,4d10 <_malloc_r+0x554>
    49dc:	1807d0ba 	srai	r3,r3,2
    49e0:	00800044 	movi	r2,1
    49e4:	10c8983a 	sll	r4,r2,r3
    49e8:	39004436 	bltu	r7,r4,4afc <_malloc_r+0x340>
    49ec:	21c4703a 	and	r2,r4,r7
    49f0:	10000a1e 	bne	r2,zero,4a1c <_malloc_r+0x260>
    49f4:	2109883a 	add	r4,r4,r4
    49f8:	00bfff04 	movi	r2,-4
    49fc:	4884703a 	and	r2,r9,r2
    4a00:	3906703a 	and	r3,r7,r4
    4a04:	12400104 	addi	r9,r2,4
    4a08:	1800041e 	bne	r3,zero,4a1c <_malloc_r+0x260>
    4a0c:	2109883a 	add	r4,r4,r4
    4a10:	3904703a 	and	r2,r7,r4
    4a14:	4a400104 	addi	r9,r9,4
    4a18:	103ffc26 	beq	r2,zero,4a0c <_malloc_r+0x250>
    4a1c:	480490fa 	slli	r2,r9,3
    4a20:	4819883a 	mov	r12,r9
    4a24:	023fff04 	movi	r8,-4
    4a28:	589b883a 	add	r13,r11,r2
    4a2c:	6807883a 	mov	r3,r13
    4a30:	014003c4 	movi	r5,15
    4a34:	1c000317 	ldw	r16,12(r3)
    4a38:	1c00041e 	bne	r3,r16,4a4c <_malloc_r+0x290>
    4a3c:	0000a706 	br	4cdc <_malloc_r+0x520>
    4a40:	3000ab0e 	bge	r6,zero,4cf0 <_malloc_r+0x534>
    4a44:	84000317 	ldw	r16,12(r16)
    4a48:	1c00a426 	beq	r3,r16,4cdc <_malloc_r+0x520>
    4a4c:	80800117 	ldw	r2,4(r16)
    4a50:	1204703a 	and	r2,r2,r8
    4a54:	144dc83a 	sub	r6,r2,r17
    4a58:	29bff90e 	bge	r5,r6,4a40 <_malloc_r+0x284>
    4a5c:	81000317 	ldw	r4,12(r16)
    4a60:	80c00217 	ldw	r3,8(r16)
    4a64:	89400054 	ori	r5,r17,1
    4a68:	8445883a 	add	r2,r16,r17
    4a6c:	20c00215 	stw	r3,8(r4)
    4a70:	19000315 	stw	r4,12(r3)
    4a74:	81400115 	stw	r5,4(r16)
    4a78:	1187883a 	add	r3,r2,r6
    4a7c:	31000054 	ori	r4,r6,1
    4a80:	50800315 	stw	r2,12(r10)
    4a84:	50800215 	stw	r2,8(r10)
    4a88:	19800015 	stw	r6,0(r3)
    4a8c:	11000115 	stw	r4,4(r2)
    4a90:	12800215 	stw	r10,8(r2)
    4a94:	12800315 	stw	r10,12(r2)
    4a98:	9009883a 	mov	r4,r18
    4a9c:	000d0340 	call	d034 <__malloc_unlock>
    4aa0:	80c00204 	addi	r3,r16,8
    4aa4:	003f5906 	br	480c <_malloc_r+0x50>
    4aa8:	8109883a 	add	r4,r16,r4
    4aac:	20800117 	ldw	r2,4(r4)
    4ab0:	80c00217 	ldw	r3,8(r16)
    4ab4:	81400317 	ldw	r5,12(r16)
    4ab8:	10800054 	ori	r2,r2,1
    4abc:	20800115 	stw	r2,4(r4)
    4ac0:	28c00215 	stw	r3,8(r5)
    4ac4:	19400315 	stw	r5,12(r3)
    4ac8:	9009883a 	mov	r4,r18
    4acc:	000d0340 	call	d034 <__malloc_unlock>
    4ad0:	80c00204 	addi	r3,r16,8
    4ad4:	003f4d06 	br	480c <_malloc_r+0x50>
    4ad8:	80800204 	addi	r2,r16,8
    4adc:	14000317 	ldw	r16,12(r2)
    4ae0:	143f911e 	bne	r2,r16,4928 <_malloc_r+0x16c>
    4ae4:	1a400084 	addi	r9,r3,2
    4ae8:	003f7306 	br	48b8 <_malloc_r+0xfc>
    4aec:	88c00054 	ori	r3,r17,1
    4af0:	8445883a 	add	r2,r16,r17
    4af4:	80c00115 	stw	r3,4(r16)
    4af8:	003fdf06 	br	4a78 <_malloc_r+0x2bc>
    4afc:	e4000217 	ldw	r16,8(fp)
    4b00:	00bfff04 	movi	r2,-4
    4b04:	80c00117 	ldw	r3,4(r16)
    4b08:	802d883a 	mov	r22,r16
    4b0c:	18aa703a 	and	r21,r3,r2
    4b10:	ac401636 	bltu	r21,r17,4b6c <_malloc_r+0x3b0>
    4b14:	ac49c83a 	sub	r4,r21,r17
    4b18:	008003c4 	movi	r2,15
    4b1c:	1100130e 	bge	r2,r4,4b6c <_malloc_r+0x3b0>
    4b20:	88800054 	ori	r2,r17,1
    4b24:	8447883a 	add	r3,r16,r17
    4b28:	80800115 	stw	r2,4(r16)
    4b2c:	20800054 	ori	r2,r4,1
    4b30:	18800115 	stw	r2,4(r3)
    4b34:	e0c00215 	stw	r3,8(fp)
    4b38:	9009883a 	mov	r4,r18
    4b3c:	000d0340 	call	d034 <__malloc_unlock>
    4b40:	80c00204 	addi	r3,r16,8
    4b44:	003f3106 	br	480c <_malloc_r+0x50>
    4b48:	39c00117 	ldw	r7,4(r7)
    4b4c:	573ffe04 	addi	fp,r10,-8
    4b50:	003fa006 	br	49d4 <_malloc_r+0x218>
    4b54:	00801504 	movi	r2,84
    4b58:	10c06736 	bltu	r2,r3,4cf8 <_malloc_r+0x53c>
    4b5c:	8804d33a 	srli	r2,r17,12
    4b60:	11801b84 	addi	r6,r2,110
    4b64:	300490fa 	slli	r2,r6,3
    4b68:	003f4106 	br	4870 <_malloc_r+0xb4>
    4b6c:	d087ff17 	ldw	r2,8188(gp)
    4b70:	d0e01d17 	ldw	r3,-32652(gp)
    4b74:	053fffc4 	movi	r20,-1
    4b78:	10800404 	addi	r2,r2,16
    4b7c:	88a7883a 	add	r19,r17,r2
    4b80:	1d000326 	beq	r3,r20,4b90 <_malloc_r+0x3d4>
    4b84:	98c3ffc4 	addi	r3,r19,4095
    4b88:	00bc0004 	movi	r2,-4096
    4b8c:	18a6703a 	and	r19,r3,r2
    4b90:	9009883a 	mov	r4,r18
    4b94:	980b883a 	mov	r5,r19
    4b98:	00050280 	call	5028 <_sbrk_r>
    4b9c:	1009883a 	mov	r4,r2
    4ba0:	15000426 	beq	r2,r20,4bb4 <_malloc_r+0x3f8>
    4ba4:	854b883a 	add	r5,r16,r21
    4ba8:	1029883a 	mov	r20,r2
    4bac:	11405a2e 	bgeu	r2,r5,4d18 <_malloc_r+0x55c>
    4bb0:	87000c26 	beq	r16,fp,4be4 <_malloc_r+0x428>
    4bb4:	e4000217 	ldw	r16,8(fp)
    4bb8:	80c00117 	ldw	r3,4(r16)
    4bbc:	00bfff04 	movi	r2,-4
    4bc0:	1884703a 	and	r2,r3,r2
    4bc4:	14400336 	bltu	r2,r17,4bd4 <_malloc_r+0x418>
    4bc8:	1449c83a 	sub	r4,r2,r17
    4bcc:	008003c4 	movi	r2,15
    4bd0:	113fd316 	blt	r2,r4,4b20 <_malloc_r+0x364>
    4bd4:	9009883a 	mov	r4,r18
    4bd8:	000d0340 	call	d034 <__malloc_unlock>
    4bdc:	0007883a 	mov	r3,zero
    4be0:	003f0a06 	br	480c <_malloc_r+0x50>
    4be4:	05c00274 	movhi	r23,9
    4be8:	bddd3b04 	addi	r23,r23,29932
    4bec:	b8800017 	ldw	r2,0(r23)
    4bf0:	988d883a 	add	r6,r19,r2
    4bf4:	b9800015 	stw	r6,0(r23)
    4bf8:	d0e01d17 	ldw	r3,-32652(gp)
    4bfc:	00bfffc4 	movi	r2,-1
    4c00:	18808e26 	beq	r3,r2,4e3c <_malloc_r+0x680>
    4c04:	2145c83a 	sub	r2,r4,r5
    4c08:	3085883a 	add	r2,r6,r2
    4c0c:	b8800015 	stw	r2,0(r23)
    4c10:	20c001cc 	andi	r3,r4,7
    4c14:	18005f1e 	bne	r3,zero,4d94 <_malloc_r+0x5d8>
    4c18:	000b883a 	mov	r5,zero
    4c1c:	a4c5883a 	add	r2,r20,r19
    4c20:	1083ffcc 	andi	r2,r2,4095
    4c24:	00c40004 	movi	r3,4096
    4c28:	1887c83a 	sub	r3,r3,r2
    4c2c:	28e7883a 	add	r19,r5,r3
    4c30:	9009883a 	mov	r4,r18
    4c34:	980b883a 	mov	r5,r19
    4c38:	00050280 	call	5028 <_sbrk_r>
    4c3c:	1007883a 	mov	r3,r2
    4c40:	00bfffc4 	movi	r2,-1
    4c44:	18807a26 	beq	r3,r2,4e30 <_malloc_r+0x674>
    4c48:	1d05c83a 	sub	r2,r3,r20
    4c4c:	9885883a 	add	r2,r19,r2
    4c50:	10c00054 	ori	r3,r2,1
    4c54:	b8800017 	ldw	r2,0(r23)
    4c58:	a021883a 	mov	r16,r20
    4c5c:	a0c00115 	stw	r3,4(r20)
    4c60:	9885883a 	add	r2,r19,r2
    4c64:	b8800015 	stw	r2,0(r23)
    4c68:	e5000215 	stw	r20,8(fp)
    4c6c:	b7003626 	beq	r22,fp,4d48 <_malloc_r+0x58c>
    4c70:	018003c4 	movi	r6,15
    4c74:	35404b36 	bltu	r6,r21,4da4 <_malloc_r+0x5e8>
    4c78:	00800044 	movi	r2,1
    4c7c:	a0800115 	stw	r2,4(r20)
    4c80:	003fcd06 	br	4bb8 <_malloc_r+0x3fc>
    4c84:	2808d27a 	srli	r4,r5,9
    4c88:	2000371e 	bne	r4,zero,4d68 <_malloc_r+0x5ac>
    4c8c:	2808d0fa 	srli	r4,r5,3
    4c90:	200690fa 	slli	r3,r4,3
    4c94:	1ad1883a 	add	r8,r3,r11
    4c98:	41800217 	ldw	r6,8(r8)
    4c9c:	41805b26 	beq	r8,r6,4e0c <_malloc_r+0x650>
    4ca0:	30800117 	ldw	r2,4(r6)
    4ca4:	00ffff04 	movi	r3,-4
    4ca8:	10c4703a 	and	r2,r2,r3
    4cac:	2880022e 	bgeu	r5,r2,4cb8 <_malloc_r+0x4fc>
    4cb0:	31800217 	ldw	r6,8(r6)
    4cb4:	41bffa1e 	bne	r8,r6,4ca0 <_malloc_r+0x4e4>
    4cb8:	32000317 	ldw	r8,12(r6)
    4cbc:	39c00117 	ldw	r7,4(r7)
    4cc0:	82000315 	stw	r8,12(r16)
    4cc4:	81800215 	stw	r6,8(r16)
    4cc8:	070000b4 	movhi	fp,2
    4ccc:	e7203704 	addi	fp,fp,-32548
    4cd0:	34000315 	stw	r16,12(r6)
    4cd4:	44000215 	stw	r16,8(r8)
    4cd8:	003f3e06 	br	49d4 <_malloc_r+0x218>
    4cdc:	63000044 	addi	r12,r12,1
    4ce0:	608000cc 	andi	r2,r12,3
    4ce4:	10005d26 	beq	r2,zero,4e5c <_malloc_r+0x6a0>
    4ce8:	18c00204 	addi	r3,r3,8
    4cec:	003f5106 	br	4a34 <_malloc_r+0x278>
    4cf0:	8089883a 	add	r4,r16,r2
    4cf4:	003f6d06 	br	4aac <_malloc_r+0x2f0>
    4cf8:	00805504 	movi	r2,340
    4cfc:	10c02036 	bltu	r2,r3,4d80 <_malloc_r+0x5c4>
    4d00:	8804d3fa 	srli	r2,r17,15
    4d04:	11801dc4 	addi	r6,r2,119
    4d08:	300490fa 	slli	r2,r6,3
    4d0c:	003ed806 	br	4870 <_malloc_r+0xb4>
    4d10:	48c000c4 	addi	r3,r9,3
    4d14:	003f3106 	br	49dc <_malloc_r+0x220>
    4d18:	05c00274 	movhi	r23,9
    4d1c:	bddd3b04 	addi	r23,r23,29932
    4d20:	b8800017 	ldw	r2,0(r23)
    4d24:	988d883a 	add	r6,r19,r2
    4d28:	b9800015 	stw	r6,0(r23)
    4d2c:	293fb21e 	bne	r5,r4,4bf8 <_malloc_r+0x43c>
    4d30:	2083ffcc 	andi	r2,r4,4095
    4d34:	103fb01e 	bne	r2,zero,4bf8 <_malloc_r+0x43c>
    4d38:	e4000217 	ldw	r16,8(fp)
    4d3c:	9d45883a 	add	r2,r19,r21
    4d40:	10800054 	ori	r2,r2,1
    4d44:	80800115 	stw	r2,4(r16)
    4d48:	b8c00017 	ldw	r3,0(r23)
    4d4c:	d0880017 	ldw	r2,8192(gp)
    4d50:	10c0012e 	bgeu	r2,r3,4d58 <_malloc_r+0x59c>
    4d54:	d0c80015 	stw	r3,8192(gp)
    4d58:	d0880117 	ldw	r2,8196(gp)
    4d5c:	10ff962e 	bgeu	r2,r3,4bb8 <_malloc_r+0x3fc>
    4d60:	d0c80115 	stw	r3,8196(gp)
    4d64:	003f9406 	br	4bb8 <_malloc_r+0x3fc>
    4d68:	00800104 	movi	r2,4
    4d6c:	11001e36 	bltu	r2,r4,4de8 <_malloc_r+0x62c>
    4d70:	2804d1ba 	srli	r2,r5,6
    4d74:	11000e04 	addi	r4,r2,56
    4d78:	200690fa 	slli	r3,r4,3
    4d7c:	003fc506 	br	4c94 <_malloc_r+0x4d8>
    4d80:	00815504 	movi	r2,1364
    4d84:	10c01d2e 	bgeu	r2,r3,4dfc <_malloc_r+0x640>
    4d88:	01801f84 	movi	r6,126
    4d8c:	0080fc04 	movi	r2,1008
    4d90:	003eb706 	br	4870 <_malloc_r+0xb4>
    4d94:	00800204 	movi	r2,8
    4d98:	10cbc83a 	sub	r5,r2,r3
    4d9c:	2169883a 	add	r20,r4,r5
    4da0:	003f9e06 	br	4c1c <_malloc_r+0x460>
    4da4:	00bffe04 	movi	r2,-8
    4da8:	a93ffd04 	addi	r4,r21,-12
    4dac:	2088703a 	and	r4,r4,r2
    4db0:	b10b883a 	add	r5,r22,r4
    4db4:	00c00144 	movi	r3,5
    4db8:	28c00215 	stw	r3,8(r5)
    4dbc:	28c00115 	stw	r3,4(r5)
    4dc0:	b0800117 	ldw	r2,4(r22)
    4dc4:	1080004c 	andi	r2,r2,1
    4dc8:	2084b03a 	or	r2,r4,r2
    4dcc:	b0800115 	stw	r2,4(r22)
    4dd0:	313fdd2e 	bgeu	r6,r4,4d48 <_malloc_r+0x58c>
    4dd4:	b1400204 	addi	r5,r22,8
    4dd8:	9009883a 	mov	r4,r18
    4ddc:	00090c80 	call	90c8 <_free_r>
    4de0:	e4000217 	ldw	r16,8(fp)
    4de4:	003fd806 	br	4d48 <_malloc_r+0x58c>
    4de8:	00800504 	movi	r2,20
    4dec:	11001536 	bltu	r2,r4,4e44 <_malloc_r+0x688>
    4df0:	210016c4 	addi	r4,r4,91
    4df4:	200690fa 	slli	r3,r4,3
    4df8:	003fa606 	br	4c94 <_malloc_r+0x4d8>
    4dfc:	8804d4ba 	srli	r2,r17,18
    4e00:	11801f04 	addi	r6,r2,124
    4e04:	300490fa 	slli	r2,r6,3
    4e08:	003e9906 	br	4870 <_malloc_r+0xb4>
    4e0c:	2009d0ba 	srai	r4,r4,2
    4e10:	014000b4 	movhi	r5,2
    4e14:	29603704 	addi	r5,r5,-32548
    4e18:	00c00044 	movi	r3,1
    4e1c:	28800117 	ldw	r2,4(r5)
    4e20:	1906983a 	sll	r3,r3,r4
    4e24:	10c4b03a 	or	r2,r2,r3
    4e28:	28800115 	stw	r2,4(r5)
    4e2c:	003fa306 	br	4cbc <_malloc_r+0x500>
    4e30:	0027883a 	mov	r19,zero
    4e34:	00c00044 	movi	r3,1
    4e38:	003f8606 	br	4c54 <_malloc_r+0x498>
    4e3c:	d1201d15 	stw	r4,-32652(gp)
    4e40:	003f7306 	br	4c10 <_malloc_r+0x454>
    4e44:	00801504 	movi	r2,84
    4e48:	11001936 	bltu	r2,r4,4eb0 <_malloc_r+0x6f4>
    4e4c:	2804d33a 	srli	r2,r5,12
    4e50:	11001b84 	addi	r4,r2,110
    4e54:	200690fa 	slli	r3,r4,3
    4e58:	003f8e06 	br	4c94 <_malloc_r+0x4d8>
    4e5c:	480b883a 	mov	r5,r9
    4e60:	6807883a 	mov	r3,r13
    4e64:	288000cc 	andi	r2,r5,3
    4e68:	18fffe04 	addi	r3,r3,-8
    4e6c:	297fffc4 	addi	r5,r5,-1
    4e70:	10001526 	beq	r2,zero,4ec8 <_malloc_r+0x70c>
    4e74:	18800217 	ldw	r2,8(r3)
    4e78:	10fffa26 	beq	r2,r3,4e64 <_malloc_r+0x6a8>
    4e7c:	2109883a 	add	r4,r4,r4
    4e80:	393f1e36 	bltu	r7,r4,4afc <_malloc_r+0x340>
    4e84:	203f1d26 	beq	r4,zero,4afc <_malloc_r+0x340>
    4e88:	21c4703a 	and	r2,r4,r7
    4e8c:	10000226 	beq	r2,zero,4e98 <_malloc_r+0x6dc>
    4e90:	6013883a 	mov	r9,r12
    4e94:	003ee106 	br	4a1c <_malloc_r+0x260>
    4e98:	2109883a 	add	r4,r4,r4
    4e9c:	3904703a 	and	r2,r7,r4
    4ea0:	63000104 	addi	r12,r12,4
    4ea4:	103ffc26 	beq	r2,zero,4e98 <_malloc_r+0x6dc>
    4ea8:	6013883a 	mov	r9,r12
    4eac:	003edb06 	br	4a1c <_malloc_r+0x260>
    4eb0:	00805504 	movi	r2,340
    4eb4:	11000836 	bltu	r2,r4,4ed8 <_malloc_r+0x71c>
    4eb8:	2804d3fa 	srli	r2,r5,15
    4ebc:	11001dc4 	addi	r4,r2,119
    4ec0:	200690fa 	slli	r3,r4,3
    4ec4:	003f7306 	br	4c94 <_malloc_r+0x4d8>
    4ec8:	0104303a 	nor	r2,zero,r4
    4ecc:	388e703a 	and	r7,r7,r2
    4ed0:	e1c00115 	stw	r7,4(fp)
    4ed4:	003fe906 	br	4e7c <_malloc_r+0x6c0>
    4ed8:	00815504 	movi	r2,1364
    4edc:	1100032e 	bgeu	r2,r4,4eec <_malloc_r+0x730>
    4ee0:	01001f84 	movi	r4,126
    4ee4:	00c0fc04 	movi	r3,1008
    4ee8:	003f6a06 	br	4c94 <_malloc_r+0x4d8>
    4eec:	2804d4ba 	srli	r2,r5,18
    4ef0:	11001f04 	addi	r4,r2,124
    4ef4:	200690fa 	slli	r3,r4,3
    4ef8:	003f6606 	br	4c94 <_malloc_r+0x4d8>

00004efc <printf>:
    4efc:	defffb04 	addi	sp,sp,-20
    4f00:	dfc00115 	stw	ra,4(sp)
    4f04:	d9400215 	stw	r5,8(sp)
    4f08:	d9800315 	stw	r6,12(sp)
    4f0c:	d9c00415 	stw	r7,16(sp)
    4f10:	008000b4 	movhi	r2,2
    4f14:	10a6e504 	addi	r2,r2,-25708
    4f18:	10c00017 	ldw	r3,0(r2)
    4f1c:	200b883a 	mov	r5,r4
    4f20:	d8800204 	addi	r2,sp,8
    4f24:	19000217 	ldw	r4,8(r3)
    4f28:	100d883a 	mov	r6,r2
    4f2c:	d8800015 	stw	r2,0(sp)
    4f30:	00071800 	call	7180 <__vfprintf_internal>
    4f34:	dfc00117 	ldw	ra,4(sp)
    4f38:	dec00504 	addi	sp,sp,20
    4f3c:	f800283a 	ret

00004f40 <_printf_r>:
    4f40:	defffc04 	addi	sp,sp,-16
    4f44:	dfc00115 	stw	ra,4(sp)
    4f48:	d9800215 	stw	r6,8(sp)
    4f4c:	d9c00315 	stw	r7,12(sp)
    4f50:	280d883a 	mov	r6,r5
    4f54:	21400217 	ldw	r5,8(r4)
    4f58:	d8c00204 	addi	r3,sp,8
    4f5c:	180f883a 	mov	r7,r3
    4f60:	d8c00015 	stw	r3,0(sp)
    4f64:	00052d40 	call	52d4 <___vfprintf_internal_r>
    4f68:	dfc00117 	ldw	ra,4(sp)
    4f6c:	dec00404 	addi	sp,sp,16
    4f70:	f800283a 	ret

00004f74 <_puts_r>:
    4f74:	defff604 	addi	sp,sp,-40
    4f78:	dc400715 	stw	r17,28(sp)
    4f7c:	2023883a 	mov	r17,r4
    4f80:	2809883a 	mov	r4,r5
    4f84:	dfc00915 	stw	ra,36(sp)
    4f88:	dcc00815 	stw	r19,32(sp)
    4f8c:	2827883a 	mov	r19,r5
    4f90:	00052080 	call	5208 <strlen>
    4f94:	89400217 	ldw	r5,8(r17)
    4f98:	00c00074 	movhi	r3,1
    4f9c:	18fdee04 	addi	r3,r3,-2120
    4fa0:	01c00044 	movi	r7,1
    4fa4:	12000044 	addi	r8,r2,1
    4fa8:	d8c00515 	stw	r3,20(sp)
    4fac:	d9c00615 	stw	r7,24(sp)
    4fb0:	d8c00304 	addi	r3,sp,12
    4fb4:	01c00084 	movi	r7,2
    4fb8:	8809883a 	mov	r4,r17
    4fbc:	d80d883a 	mov	r6,sp
    4fc0:	d8c00015 	stw	r3,0(sp)
    4fc4:	dcc00315 	stw	r19,12(sp)
    4fc8:	da000215 	stw	r8,8(sp)
    4fcc:	d9c00115 	stw	r7,4(sp)
    4fd0:	d8800415 	stw	r2,16(sp)
    4fd4:	00093dc0 	call	93dc <__sfvwrite_r>
    4fd8:	00ffffc4 	movi	r3,-1
    4fdc:	10000626 	beq	r2,zero,4ff8 <_puts_r+0x84>
    4fe0:	1805883a 	mov	r2,r3
    4fe4:	dfc00917 	ldw	ra,36(sp)
    4fe8:	dcc00817 	ldw	r19,32(sp)
    4fec:	dc400717 	ldw	r17,28(sp)
    4ff0:	dec00a04 	addi	sp,sp,40
    4ff4:	f800283a 	ret
    4ff8:	00c00284 	movi	r3,10
    4ffc:	1805883a 	mov	r2,r3
    5000:	dfc00917 	ldw	ra,36(sp)
    5004:	dcc00817 	ldw	r19,32(sp)
    5008:	dc400717 	ldw	r17,28(sp)
    500c:	dec00a04 	addi	sp,sp,40
    5010:	f800283a 	ret

00005014 <puts>:
    5014:	008000b4 	movhi	r2,2
    5018:	10a6e504 	addi	r2,r2,-25708
    501c:	200b883a 	mov	r5,r4
    5020:	11000017 	ldw	r4,0(r2)
    5024:	0004f741 	jmpi	4f74 <_puts_r>

00005028 <_sbrk_r>:
    5028:	defffd04 	addi	sp,sp,-12
    502c:	dc000015 	stw	r16,0(sp)
    5030:	040000b4 	movhi	r16,2
    5034:	840ecd04 	addi	r16,r16,15156
    5038:	dc400115 	stw	r17,4(sp)
    503c:	80000015 	stw	zero,0(r16)
    5040:	2023883a 	mov	r17,r4
    5044:	2809883a 	mov	r4,r5
    5048:	dfc00215 	stw	ra,8(sp)
    504c:	000d1540 	call	d154 <sbrk>
    5050:	1007883a 	mov	r3,r2
    5054:	00bfffc4 	movi	r2,-1
    5058:	18800626 	beq	r3,r2,5074 <_sbrk_r+0x4c>
    505c:	1805883a 	mov	r2,r3
    5060:	dfc00217 	ldw	ra,8(sp)
    5064:	dc400117 	ldw	r17,4(sp)
    5068:	dc000017 	ldw	r16,0(sp)
    506c:	dec00304 	addi	sp,sp,12
    5070:	f800283a 	ret
    5074:	80800017 	ldw	r2,0(r16)
    5078:	103ff826 	beq	r2,zero,505c <_sbrk_r+0x34>
    507c:	88800015 	stw	r2,0(r17)
    5080:	1805883a 	mov	r2,r3
    5084:	dfc00217 	ldw	ra,8(sp)
    5088:	dc400117 	ldw	r17,4(sp)
    508c:	dc000017 	ldw	r16,0(sp)
    5090:	dec00304 	addi	sp,sp,12
    5094:	f800283a 	ret

00005098 <snprintf>:
    5098:	deffe404 	addi	sp,sp,-112
    509c:	dc001815 	stw	r16,96(sp)
    50a0:	2011883a 	mov	r8,r4
    50a4:	2821883a 	mov	r16,r5
    50a8:	dfc01a15 	stw	ra,104(sp)
    50ac:	dc401915 	stw	r17,100(sp)
    50b0:	d9c01b15 	stw	r7,108(sp)
    50b4:	010000b4 	movhi	r4,2
    50b8:	2126e504 	addi	r4,r4,-25708
    50bc:	00ffffc4 	movi	r3,-1
    50c0:	24400017 	ldw	r17,0(r4)
    50c4:	28002016 	blt	r5,zero,5148 <snprintf+0xb0>
    50c8:	0007883a 	mov	r3,zero
    50cc:	28000126 	beq	r5,zero,50d4 <snprintf+0x3c>
    50d0:	28ffffc4 	addi	r3,r5,-1
    50d4:	d8801b04 	addi	r2,sp,108
    50d8:	21000017 	ldw	r4,0(r4)
    50dc:	d8800015 	stw	r2,0(sp)
    50e0:	100f883a 	mov	r7,r2
    50e4:	00808204 	movi	r2,520
    50e8:	d880040d 	sth	r2,16(sp)
    50ec:	d9400104 	addi	r5,sp,4
    50f0:	00bfffc4 	movi	r2,-1
    50f4:	d8c00615 	stw	r3,24(sp)
    50f8:	d8c00315 	stw	r3,12(sp)
    50fc:	da000515 	stw	r8,20(sp)
    5100:	d880048d 	sth	r2,18(sp)
    5104:	da000115 	stw	r8,4(sp)
    5108:	00052d40 	call	52d4 <___vfprintf_internal_r>
    510c:	1007883a 	mov	r3,r2
    5110:	00bfffc4 	movi	r2,-1
    5114:	18800916 	blt	r3,r2,513c <snprintf+0xa4>
    5118:	80000226 	beq	r16,zero,5124 <snprintf+0x8c>
    511c:	d8800117 	ldw	r2,4(sp)
    5120:	10000005 	stb	zero,0(r2)
    5124:	1805883a 	mov	r2,r3
    5128:	dfc01a17 	ldw	ra,104(sp)
    512c:	dc401917 	ldw	r17,100(sp)
    5130:	dc001817 	ldw	r16,96(sp)
    5134:	dec01c04 	addi	sp,sp,112
    5138:	f800283a 	ret
    513c:	008022c4 	movi	r2,139
    5140:	88800015 	stw	r2,0(r17)
    5144:	003ff406 	br	5118 <snprintf+0x80>
    5148:	008022c4 	movi	r2,139
    514c:	88800015 	stw	r2,0(r17)
    5150:	003ff406 	br	5124 <snprintf+0x8c>

00005154 <_snprintf_r>:
    5154:	deffe504 	addi	sp,sp,-108
    5158:	dc401915 	stw	r17,100(sp)
    515c:	dc001815 	stw	r16,96(sp)
    5160:	dfc01a15 	stw	ra,104(sp)
    5164:	3021883a 	mov	r16,r6
    5168:	00ffffc4 	movi	r3,-1
    516c:	2023883a 	mov	r17,r4
    5170:	2811883a 	mov	r8,r5
    5174:	30002116 	blt	r6,zero,51fc <_snprintf_r+0xa8>
    5178:	0007883a 	mov	r3,zero
    517c:	30000126 	beq	r6,zero,5184 <_snprintf_r+0x30>
    5180:	30ffffc4 	addi	r3,r6,-1
    5184:	d8801b04 	addi	r2,sp,108
    5188:	d8800015 	stw	r2,0(sp)
    518c:	380d883a 	mov	r6,r7
    5190:	100f883a 	mov	r7,r2
    5194:	00808204 	movi	r2,520
    5198:	d880040d 	sth	r2,16(sp)
    519c:	8809883a 	mov	r4,r17
    51a0:	00bfffc4 	movi	r2,-1
    51a4:	d9400104 	addi	r5,sp,4
    51a8:	d8c00615 	stw	r3,24(sp)
    51ac:	d8c00315 	stw	r3,12(sp)
    51b0:	da000515 	stw	r8,20(sp)
    51b4:	d880048d 	sth	r2,18(sp)
    51b8:	da000115 	stw	r8,4(sp)
    51bc:	00052d40 	call	52d4 <___vfprintf_internal_r>
    51c0:	1007883a 	mov	r3,r2
    51c4:	00bfffc4 	movi	r2,-1
    51c8:	18800916 	blt	r3,r2,51f0 <_snprintf_r+0x9c>
    51cc:	80000226 	beq	r16,zero,51d8 <_snprintf_r+0x84>
    51d0:	d8800117 	ldw	r2,4(sp)
    51d4:	10000005 	stb	zero,0(r2)
    51d8:	1805883a 	mov	r2,r3
    51dc:	dfc01a17 	ldw	ra,104(sp)
    51e0:	dc401917 	ldw	r17,100(sp)
    51e4:	dc001817 	ldw	r16,96(sp)
    51e8:	dec01b04 	addi	sp,sp,108
    51ec:	f800283a 	ret
    51f0:	008022c4 	movi	r2,139
    51f4:	88800015 	stw	r2,0(r17)
    51f8:	003ff406 	br	51cc <_snprintf_r+0x78>
    51fc:	008022c4 	movi	r2,139
    5200:	20800015 	stw	r2,0(r4)
    5204:	003ff406 	br	51d8 <_snprintf_r+0x84>

00005208 <strlen>:
    5208:	208000cc 	andi	r2,r4,3
    520c:	2011883a 	mov	r8,r4
    5210:	1000161e 	bne	r2,zero,526c <strlen+0x64>
    5214:	20c00017 	ldw	r3,0(r4)
    5218:	017fbff4 	movhi	r5,65279
    521c:	297fbfc4 	addi	r5,r5,-257
    5220:	01e02074 	movhi	r7,32897
    5224:	39e02004 	addi	r7,r7,-32640
    5228:	1945883a 	add	r2,r3,r5
    522c:	11c4703a 	and	r2,r2,r7
    5230:	00c6303a 	nor	r3,zero,r3
    5234:	1886703a 	and	r3,r3,r2
    5238:	18000c1e 	bne	r3,zero,526c <strlen+0x64>
    523c:	280d883a 	mov	r6,r5
    5240:	380b883a 	mov	r5,r7
    5244:	21000104 	addi	r4,r4,4
    5248:	20800017 	ldw	r2,0(r4)
    524c:	1187883a 	add	r3,r2,r6
    5250:	1946703a 	and	r3,r3,r5
    5254:	0084303a 	nor	r2,zero,r2
    5258:	10c4703a 	and	r2,r2,r3
    525c:	103ff926 	beq	r2,zero,5244 <strlen+0x3c>
    5260:	20800007 	ldb	r2,0(r4)
    5264:	10000326 	beq	r2,zero,5274 <strlen+0x6c>
    5268:	21000044 	addi	r4,r4,1
    526c:	20800007 	ldb	r2,0(r4)
    5270:	103ffd1e 	bne	r2,zero,5268 <strlen+0x60>
    5274:	2205c83a 	sub	r2,r4,r8
    5278:	f800283a 	ret

0000527c <__sprint_r>:
    527c:	30800217 	ldw	r2,8(r6)
    5280:	defffe04 	addi	sp,sp,-8
    5284:	dc000015 	stw	r16,0(sp)
    5288:	dfc00115 	stw	ra,4(sp)
    528c:	3021883a 	mov	r16,r6
    5290:	0007883a 	mov	r3,zero
    5294:	1000061e 	bne	r2,zero,52b0 <__sprint_r+0x34>
    5298:	1805883a 	mov	r2,r3
    529c:	30000115 	stw	zero,4(r6)
    52a0:	dfc00117 	ldw	ra,4(sp)
    52a4:	dc000017 	ldw	r16,0(sp)
    52a8:	dec00204 	addi	sp,sp,8
    52ac:	f800283a 	ret
    52b0:	00093dc0 	call	93dc <__sfvwrite_r>
    52b4:	1007883a 	mov	r3,r2
    52b8:	1805883a 	mov	r2,r3
    52bc:	80000115 	stw	zero,4(r16)
    52c0:	80000215 	stw	zero,8(r16)
    52c4:	dfc00117 	ldw	ra,4(sp)
    52c8:	dc000017 	ldw	r16,0(sp)
    52cc:	dec00204 	addi	sp,sp,8
    52d0:	f800283a 	ret

000052d4 <___vfprintf_internal_r>:
    52d4:	defea404 	addi	sp,sp,-1392
    52d8:	dd815815 	stw	r22,1376(sp)
    52dc:	dc015215 	stw	r16,1352(sp)
    52e0:	d9c15115 	stw	r7,1348(sp)
    52e4:	dfc15b15 	stw	ra,1388(sp)
    52e8:	df015a15 	stw	fp,1384(sp)
    52ec:	ddc15915 	stw	r23,1380(sp)
    52f0:	dd415715 	stw	r21,1372(sp)
    52f4:	dd015615 	stw	r20,1368(sp)
    52f8:	dcc15515 	stw	r19,1364(sp)
    52fc:	dc815415 	stw	r18,1360(sp)
    5300:	dc415315 	stw	r17,1356(sp)
    5304:	282d883a 	mov	r22,r5
    5308:	3021883a 	mov	r16,r6
    530c:	d9014f15 	stw	r4,1340(sp)
    5310:	0009a000 	call	9a00 <_localeconv_r>
    5314:	10800017 	ldw	r2,0(r2)
    5318:	d9c15117 	ldw	r7,1348(sp)
    531c:	d8814915 	stw	r2,1316(sp)
    5320:	d8814f17 	ldw	r2,1340(sp)
    5324:	10000226 	beq	r2,zero,5330 <___vfprintf_internal_r+0x5c>
    5328:	10800e17 	ldw	r2,56(r2)
    532c:	10020d26 	beq	r2,zero,5b64 <___vfprintf_internal_r+0x890>
    5330:	b080030b 	ldhu	r2,12(r22)
    5334:	1080020c 	andi	r2,r2,8
    5338:	10020e26 	beq	r2,zero,5b74 <___vfprintf_internal_r+0x8a0>
    533c:	b0800417 	ldw	r2,16(r22)
    5340:	10020c26 	beq	r2,zero,5b74 <___vfprintf_internal_r+0x8a0>
    5344:	b200030b 	ldhu	r8,12(r22)
    5348:	00800284 	movi	r2,10
    534c:	40c0068c 	andi	r3,r8,26
    5350:	18802f1e 	bne	r3,r2,5410 <___vfprintf_internal_r+0x13c>
    5354:	b080038f 	ldh	r2,14(r22)
    5358:	10002d16 	blt	r2,zero,5410 <___vfprintf_internal_r+0x13c>
    535c:	b240038b 	ldhu	r9,14(r22)
    5360:	b2800717 	ldw	r10,28(r22)
    5364:	b2c00917 	ldw	r11,36(r22)
    5368:	d9014f17 	ldw	r4,1340(sp)
    536c:	dc402904 	addi	r17,sp,164
    5370:	d8804004 	addi	r2,sp,256
    5374:	00c10004 	movi	r3,1024
    5378:	423fff4c 	andi	r8,r8,65533
    537c:	800d883a 	mov	r6,r16
    5380:	880b883a 	mov	r5,r17
    5384:	da002c0d 	sth	r8,176(sp)
    5388:	da402c8d 	sth	r9,178(sp)
    538c:	da803015 	stw	r10,192(sp)
    5390:	dac03215 	stw	r11,200(sp)
    5394:	d8802d15 	stw	r2,180(sp)
    5398:	d8c02e15 	stw	r3,184(sp)
    539c:	d8802915 	stw	r2,164(sp)
    53a0:	d8c02b15 	stw	r3,172(sp)
    53a4:	d8002f15 	stw	zero,188(sp)
    53a8:	00052d40 	call	52d4 <___vfprintf_internal_r>
    53ac:	d8814b15 	stw	r2,1324(sp)
    53b0:	10000416 	blt	r2,zero,53c4 <___vfprintf_internal_r+0xf0>
    53b4:	d9014f17 	ldw	r4,1340(sp)
    53b8:	880b883a 	mov	r5,r17
    53bc:	0008aac0 	call	8aac <_fflush_r>
    53c0:	1002321e 	bne	r2,zero,5c8c <___vfprintf_internal_r+0x9b8>
    53c4:	d8802c0b 	ldhu	r2,176(sp)
    53c8:	1080100c 	andi	r2,r2,64
    53cc:	10000326 	beq	r2,zero,53dc <___vfprintf_internal_r+0x108>
    53d0:	b080030b 	ldhu	r2,12(r22)
    53d4:	10801014 	ori	r2,r2,64
    53d8:	b080030d 	sth	r2,12(r22)
    53dc:	d8814b17 	ldw	r2,1324(sp)
    53e0:	dfc15b17 	ldw	ra,1388(sp)
    53e4:	df015a17 	ldw	fp,1384(sp)
    53e8:	ddc15917 	ldw	r23,1380(sp)
    53ec:	dd815817 	ldw	r22,1376(sp)
    53f0:	dd415717 	ldw	r21,1372(sp)
    53f4:	dd015617 	ldw	r20,1368(sp)
    53f8:	dcc15517 	ldw	r19,1364(sp)
    53fc:	dc815417 	ldw	r18,1360(sp)
    5400:	dc415317 	ldw	r17,1356(sp)
    5404:	dc015217 	ldw	r16,1352(sp)
    5408:	dec15c04 	addi	sp,sp,1392
    540c:	f800283a 	ret
    5410:	0005883a 	mov	r2,zero
    5414:	0007883a 	mov	r3,zero
    5418:	dd401904 	addi	r21,sp,100
    541c:	d8814215 	stw	r2,1288(sp)
    5420:	802f883a 	mov	r23,r16
    5424:	d8c14315 	stw	r3,1292(sp)
    5428:	d8014b15 	stw	zero,1324(sp)
    542c:	d8014815 	stw	zero,1312(sp)
    5430:	d8014415 	stw	zero,1296(sp)
    5434:	d8014715 	stw	zero,1308(sp)
    5438:	dd400c15 	stw	r21,48(sp)
    543c:	d8000e15 	stw	zero,56(sp)
    5440:	d8000d15 	stw	zero,52(sp)
    5444:	b8800007 	ldb	r2,0(r23)
    5448:	10001926 	beq	r2,zero,54b0 <___vfprintf_internal_r+0x1dc>
    544c:	00c00944 	movi	r3,37
    5450:	10c01726 	beq	r2,r3,54b0 <___vfprintf_internal_r+0x1dc>
    5454:	b821883a 	mov	r16,r23
    5458:	00000106 	br	5460 <___vfprintf_internal_r+0x18c>
    545c:	10c00326 	beq	r2,r3,546c <___vfprintf_internal_r+0x198>
    5460:	84000044 	addi	r16,r16,1
    5464:	80800007 	ldb	r2,0(r16)
    5468:	103ffc1e 	bne	r2,zero,545c <___vfprintf_internal_r+0x188>
    546c:	85e7c83a 	sub	r19,r16,r23
    5470:	98000e26 	beq	r19,zero,54ac <___vfprintf_internal_r+0x1d8>
    5474:	dc800e17 	ldw	r18,56(sp)
    5478:	dc400d17 	ldw	r17,52(sp)
    547c:	008001c4 	movi	r2,7
    5480:	94e5883a 	add	r18,r18,r19
    5484:	8c400044 	addi	r17,r17,1
    5488:	adc00015 	stw	r23,0(r21)
    548c:	dc800e15 	stw	r18,56(sp)
    5490:	acc00115 	stw	r19,4(r21)
    5494:	dc400d15 	stw	r17,52(sp)
    5498:	14428b16 	blt	r2,r17,5ec8 <___vfprintf_internal_r+0xbf4>
    549c:	ad400204 	addi	r21,r21,8
    54a0:	d9014b17 	ldw	r4,1324(sp)
    54a4:	24c9883a 	add	r4,r4,r19
    54a8:	d9014b15 	stw	r4,1324(sp)
    54ac:	802f883a 	mov	r23,r16
    54b0:	b8800007 	ldb	r2,0(r23)
    54b4:	10013c26 	beq	r2,zero,59a8 <___vfprintf_internal_r+0x6d4>
    54b8:	bdc00044 	addi	r23,r23,1
    54bc:	d8000405 	stb	zero,16(sp)
    54c0:	b8c00007 	ldb	r3,0(r23)
    54c4:	04ffffc4 	movi	r19,-1
    54c8:	d8014c15 	stw	zero,1328(sp)
    54cc:	d8014a15 	stw	zero,1320(sp)
    54d0:	d8c14d15 	stw	r3,1332(sp)
    54d4:	bdc00044 	addi	r23,r23,1
    54d8:	d9414d17 	ldw	r5,1332(sp)
    54dc:	00801604 	movi	r2,88
    54e0:	28fff804 	addi	r3,r5,-32
    54e4:	10c06036 	bltu	r2,r3,5668 <___vfprintf_internal_r+0x394>
    54e8:	18c5883a 	add	r2,r3,r3
    54ec:	1085883a 	add	r2,r2,r2
    54f0:	00c00034 	movhi	r3,0
    54f4:	18d54104 	addi	r3,r3,21764
    54f8:	10c5883a 	add	r2,r2,r3
    54fc:	11000017 	ldw	r4,0(r2)
    5500:	2000683a 	jmp	r4
    5504:	00006478 	rdprs	zero,zero,401
    5508:	00005668 	cmpgeui	zero,zero,345
    550c:	00005668 	cmpgeui	zero,zero,345
    5510:	00006464 	muli	zero,zero,401
    5514:	00005668 	cmpgeui	zero,zero,345
    5518:	00005668 	cmpgeui	zero,zero,345
    551c:	00005668 	cmpgeui	zero,zero,345
    5520:	00005668 	cmpgeui	zero,zero,345
    5524:	00005668 	cmpgeui	zero,zero,345
    5528:	00005668 	cmpgeui	zero,zero,345
    552c:	00006244 	movi	zero,393
    5530:	00006454 	movui	zero,401
    5534:	00005668 	cmpgeui	zero,zero,345
    5538:	0000625c 	xori	zero,zero,393
    553c:	000064f0 	cmpltui	zero,zero,403
    5540:	00005668 	cmpgeui	zero,zero,345
    5544:	000064dc 	xori	zero,zero,403
    5548:	000064a4 	muli	zero,zero,402
    554c:	000064a4 	muli	zero,zero,402
    5550:	000064a4 	muli	zero,zero,402
    5554:	000064a4 	muli	zero,zero,402
    5558:	000064a4 	muli	zero,zero,402
    555c:	000064a4 	muli	zero,zero,402
    5560:	000064a4 	muli	zero,zero,402
    5564:	000064a4 	muli	zero,zero,402
    5568:	000064a4 	muli	zero,zero,402
    556c:	00005668 	cmpgeui	zero,zero,345
    5570:	00005668 	cmpgeui	zero,zero,345
    5574:	00005668 	cmpgeui	zero,zero,345
    5578:	00005668 	cmpgeui	zero,zero,345
    557c:	00005668 	cmpgeui	zero,zero,345
    5580:	00005668 	cmpgeui	zero,zero,345
    5584:	00005668 	cmpgeui	zero,zero,345
    5588:	00005668 	cmpgeui	zero,zero,345
    558c:	00005668 	cmpgeui	zero,zero,345
    5590:	00005668 	cmpgeui	zero,zero,345
    5594:	00005cc0 	call	5cc <audio_read+0x68>
    5598:	0000632c 	andhi	zero,zero,396
    559c:	00005668 	cmpgeui	zero,zero,345
    55a0:	0000632c 	andhi	zero,zero,396
    55a4:	00005668 	cmpgeui	zero,zero,345
    55a8:	00005668 	cmpgeui	zero,zero,345
    55ac:	00005668 	cmpgeui	zero,zero,345
    55b0:	00005668 	cmpgeui	zero,zero,345
    55b4:	00006490 	cmplti	zero,zero,402
    55b8:	00005668 	cmpgeui	zero,zero,345
    55bc:	00005668 	cmpgeui	zero,zero,345
    55c0:	00005d74 	movhi	zero,373
    55c4:	00005668 	cmpgeui	zero,zero,345
    55c8:	00005668 	cmpgeui	zero,zero,345
    55cc:	00005668 	cmpgeui	zero,zero,345
    55d0:	00005668 	cmpgeui	zero,zero,345
    55d4:	00005668 	cmpgeui	zero,zero,345
    55d8:	00005dc0 	call	5dc <audio_write+0x8>
    55dc:	00005668 	cmpgeui	zero,zero,345
    55e0:	00005668 	cmpgeui	zero,zero,345
    55e4:	000063e0 	cmpeqi	zero,zero,399
    55e8:	00005668 	cmpgeui	zero,zero,345
    55ec:	00005668 	cmpgeui	zero,zero,345
    55f0:	00005668 	cmpgeui	zero,zero,345
    55f4:	00005668 	cmpgeui	zero,zero,345
    55f8:	00005668 	cmpgeui	zero,zero,345
    55fc:	00005668 	cmpgeui	zero,zero,345
    5600:	00005668 	cmpgeui	zero,zero,345
    5604:	00005668 	cmpgeui	zero,zero,345
    5608:	00005668 	cmpgeui	zero,zero,345
    560c:	00005668 	cmpgeui	zero,zero,345
    5610:	000063b4 	movhi	zero,398
    5614:	00005ccc 	andi	zero,zero,371
    5618:	0000632c 	andhi	zero,zero,396
    561c:	0000632c 	andhi	zero,zero,396
    5620:	0000632c 	andhi	zero,zero,396
    5624:	00006318 	cmpnei	zero,zero,396
    5628:	00005ccc 	andi	zero,zero,371
    562c:	00005668 	cmpgeui	zero,zero,345
    5630:	00005668 	cmpgeui	zero,zero,345
    5634:	000062a0 	cmpeqi	zero,zero,394
    5638:	00005668 	cmpgeui	zero,zero,345
    563c:	00006270 	cmpltui	zero,zero,393
    5640:	00005d80 	call	5d8 <audio_write+0x4>
    5644:	000062d0 	cmplti	zero,zero,395
    5648:	000062bc 	xorhi	zero,zero,394
    564c:	00005668 	cmpgeui	zero,zero,345
    5650:	0000654c 	andi	zero,zero,405
    5654:	00005668 	cmpgeui	zero,zero,345
    5658:	00005dcc 	andi	zero,zero,375
    565c:	00005668 	cmpgeui	zero,zero,345
    5660:	00005668 	cmpgeui	zero,zero,345
    5664:	00006444 	movi	zero,401
    5668:	d9014d17 	ldw	r4,1332(sp)
    566c:	2000ce26 	beq	r4,zero,59a8 <___vfprintf_internal_r+0x6d4>
    5670:	01400044 	movi	r5,1
    5674:	d9800f04 	addi	r6,sp,60
    5678:	d9c14015 	stw	r7,1280(sp)
    567c:	d9414515 	stw	r5,1300(sp)
    5680:	d9814115 	stw	r6,1284(sp)
    5684:	280f883a 	mov	r7,r5
    5688:	d9000f05 	stb	r4,60(sp)
    568c:	d8000405 	stb	zero,16(sp)
    5690:	d8014615 	stw	zero,1304(sp)
    5694:	d8c14c17 	ldw	r3,1328(sp)
    5698:	1880008c 	andi	r2,r3,2
    569c:	1005003a 	cmpeq	r2,r2,zero
    56a0:	d8815015 	stw	r2,1344(sp)
    56a4:	1000031e 	bne	r2,zero,56b4 <___vfprintf_internal_r+0x3e0>
    56a8:	d9014517 	ldw	r4,1300(sp)
    56ac:	21000084 	addi	r4,r4,2
    56b0:	d9014515 	stw	r4,1300(sp)
    56b4:	d9414c17 	ldw	r5,1328(sp)
    56b8:	2940210c 	andi	r5,r5,132
    56bc:	d9414e15 	stw	r5,1336(sp)
    56c0:	28002d1e 	bne	r5,zero,5778 <___vfprintf_internal_r+0x4a4>
    56c4:	d9814a17 	ldw	r6,1320(sp)
    56c8:	d8814517 	ldw	r2,1300(sp)
    56cc:	30a1c83a 	sub	r16,r6,r2
    56d0:	0400290e 	bge	zero,r16,5778 <___vfprintf_internal_r+0x4a4>
    56d4:	00800404 	movi	r2,16
    56d8:	1404580e 	bge	r2,r16,683c <___vfprintf_internal_r+0x1568>
    56dc:	dc800e17 	ldw	r18,56(sp)
    56e0:	dc400d17 	ldw	r17,52(sp)
    56e4:	1027883a 	mov	r19,r2
    56e8:	07000074 	movhi	fp,1
    56ec:	e73e5484 	addi	fp,fp,-1710
    56f0:	050001c4 	movi	r20,7
    56f4:	00000306 	br	5704 <___vfprintf_internal_r+0x430>
    56f8:	843ffc04 	addi	r16,r16,-16
    56fc:	ad400204 	addi	r21,r21,8
    5700:	9c00130e 	bge	r19,r16,5750 <___vfprintf_internal_r+0x47c>
    5704:	94800404 	addi	r18,r18,16
    5708:	8c400044 	addi	r17,r17,1
    570c:	af000015 	stw	fp,0(r21)
    5710:	acc00115 	stw	r19,4(r21)
    5714:	dc800e15 	stw	r18,56(sp)
    5718:	dc400d15 	stw	r17,52(sp)
    571c:	a47ff60e 	bge	r20,r17,56f8 <___vfprintf_internal_r+0x424>
    5720:	d9014f17 	ldw	r4,1340(sp)
    5724:	b00b883a 	mov	r5,r22
    5728:	d9800c04 	addi	r6,sp,48
    572c:	d9c15115 	stw	r7,1348(sp)
    5730:	000527c0 	call	527c <__sprint_r>
    5734:	d9c15117 	ldw	r7,1348(sp)
    5738:	10009e1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    573c:	843ffc04 	addi	r16,r16,-16
    5740:	dc800e17 	ldw	r18,56(sp)
    5744:	dc400d17 	ldw	r17,52(sp)
    5748:	dd401904 	addi	r21,sp,100
    574c:	9c3fed16 	blt	r19,r16,5704 <___vfprintf_internal_r+0x430>
    5750:	9425883a 	add	r18,r18,r16
    5754:	8c400044 	addi	r17,r17,1
    5758:	008001c4 	movi	r2,7
    575c:	af000015 	stw	fp,0(r21)
    5760:	ac000115 	stw	r16,4(r21)
    5764:	dc800e15 	stw	r18,56(sp)
    5768:	dc400d15 	stw	r17,52(sp)
    576c:	1441f516 	blt	r2,r17,5f44 <___vfprintf_internal_r+0xc70>
    5770:	ad400204 	addi	r21,r21,8
    5774:	00000206 	br	5780 <___vfprintf_internal_r+0x4ac>
    5778:	dc800e17 	ldw	r18,56(sp)
    577c:	dc400d17 	ldw	r17,52(sp)
    5780:	d8800407 	ldb	r2,16(sp)
    5784:	10000b26 	beq	r2,zero,57b4 <___vfprintf_internal_r+0x4e0>
    5788:	00800044 	movi	r2,1
    578c:	94800044 	addi	r18,r18,1
    5790:	8c400044 	addi	r17,r17,1
    5794:	a8800115 	stw	r2,4(r21)
    5798:	d8c00404 	addi	r3,sp,16
    579c:	008001c4 	movi	r2,7
    57a0:	a8c00015 	stw	r3,0(r21)
    57a4:	dc800e15 	stw	r18,56(sp)
    57a8:	dc400d15 	stw	r17,52(sp)
    57ac:	1441da16 	blt	r2,r17,5f18 <___vfprintf_internal_r+0xc44>
    57b0:	ad400204 	addi	r21,r21,8
    57b4:	d9015017 	ldw	r4,1344(sp)
    57b8:	20000b1e 	bne	r4,zero,57e8 <___vfprintf_internal_r+0x514>
    57bc:	d8800444 	addi	r2,sp,17
    57c0:	94800084 	addi	r18,r18,2
    57c4:	8c400044 	addi	r17,r17,1
    57c8:	a8800015 	stw	r2,0(r21)
    57cc:	00c00084 	movi	r3,2
    57d0:	008001c4 	movi	r2,7
    57d4:	a8c00115 	stw	r3,4(r21)
    57d8:	dc800e15 	stw	r18,56(sp)
    57dc:	dc400d15 	stw	r17,52(sp)
    57e0:	1441c216 	blt	r2,r17,5eec <___vfprintf_internal_r+0xc18>
    57e4:	ad400204 	addi	r21,r21,8
    57e8:	d9414e17 	ldw	r5,1336(sp)
    57ec:	00802004 	movi	r2,128
    57f0:	2880b126 	beq	r5,r2,5ab8 <___vfprintf_internal_r+0x7e4>
    57f4:	d8c14617 	ldw	r3,1304(sp)
    57f8:	19e1c83a 	sub	r16,r3,r7
    57fc:	0400260e 	bge	zero,r16,5898 <___vfprintf_internal_r+0x5c4>
    5800:	00800404 	movi	r2,16
    5804:	1403c90e 	bge	r2,r16,672c <___vfprintf_internal_r+0x1458>
    5808:	1027883a 	mov	r19,r2
    580c:	07000074 	movhi	fp,1
    5810:	e73e5084 	addi	fp,fp,-1726
    5814:	050001c4 	movi	r20,7
    5818:	00000306 	br	5828 <___vfprintf_internal_r+0x554>
    581c:	843ffc04 	addi	r16,r16,-16
    5820:	ad400204 	addi	r21,r21,8
    5824:	9c00130e 	bge	r19,r16,5874 <___vfprintf_internal_r+0x5a0>
    5828:	94800404 	addi	r18,r18,16
    582c:	8c400044 	addi	r17,r17,1
    5830:	af000015 	stw	fp,0(r21)
    5834:	acc00115 	stw	r19,4(r21)
    5838:	dc800e15 	stw	r18,56(sp)
    583c:	dc400d15 	stw	r17,52(sp)
    5840:	a47ff60e 	bge	r20,r17,581c <___vfprintf_internal_r+0x548>
    5844:	d9014f17 	ldw	r4,1340(sp)
    5848:	b00b883a 	mov	r5,r22
    584c:	d9800c04 	addi	r6,sp,48
    5850:	d9c15115 	stw	r7,1348(sp)
    5854:	000527c0 	call	527c <__sprint_r>
    5858:	d9c15117 	ldw	r7,1348(sp)
    585c:	1000551e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    5860:	843ffc04 	addi	r16,r16,-16
    5864:	dc800e17 	ldw	r18,56(sp)
    5868:	dc400d17 	ldw	r17,52(sp)
    586c:	dd401904 	addi	r21,sp,100
    5870:	9c3fed16 	blt	r19,r16,5828 <___vfprintf_internal_r+0x554>
    5874:	9425883a 	add	r18,r18,r16
    5878:	8c400044 	addi	r17,r17,1
    587c:	008001c4 	movi	r2,7
    5880:	af000015 	stw	fp,0(r21)
    5884:	ac000115 	stw	r16,4(r21)
    5888:	dc800e15 	stw	r18,56(sp)
    588c:	dc400d15 	stw	r17,52(sp)
    5890:	14418216 	blt	r2,r17,5e9c <___vfprintf_internal_r+0xbc8>
    5894:	ad400204 	addi	r21,r21,8
    5898:	d9014c17 	ldw	r4,1328(sp)
    589c:	2080400c 	andi	r2,r4,256
    58a0:	10004a1e 	bne	r2,zero,59cc <___vfprintf_internal_r+0x6f8>
    58a4:	d9414117 	ldw	r5,1284(sp)
    58a8:	91e5883a 	add	r18,r18,r7
    58ac:	8c400044 	addi	r17,r17,1
    58b0:	008001c4 	movi	r2,7
    58b4:	a9400015 	stw	r5,0(r21)
    58b8:	a9c00115 	stw	r7,4(r21)
    58bc:	dc800e15 	stw	r18,56(sp)
    58c0:	dc400d15 	stw	r17,52(sp)
    58c4:	14416716 	blt	r2,r17,5e64 <___vfprintf_internal_r+0xb90>
    58c8:	a8c00204 	addi	r3,r21,8
    58cc:	d9814c17 	ldw	r6,1328(sp)
    58d0:	3080010c 	andi	r2,r6,4
    58d4:	10002826 	beq	r2,zero,5978 <___vfprintf_internal_r+0x6a4>
    58d8:	d8814a17 	ldw	r2,1320(sp)
    58dc:	d9014517 	ldw	r4,1300(sp)
    58e0:	1121c83a 	sub	r16,r2,r4
    58e4:	0400240e 	bge	zero,r16,5978 <___vfprintf_internal_r+0x6a4>
    58e8:	00800404 	movi	r2,16
    58ec:	14044f0e 	bge	r2,r16,6a2c <___vfprintf_internal_r+0x1758>
    58f0:	dc400d17 	ldw	r17,52(sp)
    58f4:	1027883a 	mov	r19,r2
    58f8:	07000074 	movhi	fp,1
    58fc:	e73e5484 	addi	fp,fp,-1710
    5900:	050001c4 	movi	r20,7
    5904:	00000306 	br	5914 <___vfprintf_internal_r+0x640>
    5908:	843ffc04 	addi	r16,r16,-16
    590c:	18c00204 	addi	r3,r3,8
    5910:	9c00110e 	bge	r19,r16,5958 <___vfprintf_internal_r+0x684>
    5914:	94800404 	addi	r18,r18,16
    5918:	8c400044 	addi	r17,r17,1
    591c:	1f000015 	stw	fp,0(r3)
    5920:	1cc00115 	stw	r19,4(r3)
    5924:	dc800e15 	stw	r18,56(sp)
    5928:	dc400d15 	stw	r17,52(sp)
    592c:	a47ff60e 	bge	r20,r17,5908 <___vfprintf_internal_r+0x634>
    5930:	d9014f17 	ldw	r4,1340(sp)
    5934:	b00b883a 	mov	r5,r22
    5938:	d9800c04 	addi	r6,sp,48
    593c:	000527c0 	call	527c <__sprint_r>
    5940:	10001c1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    5944:	843ffc04 	addi	r16,r16,-16
    5948:	dc800e17 	ldw	r18,56(sp)
    594c:	dc400d17 	ldw	r17,52(sp)
    5950:	d8c01904 	addi	r3,sp,100
    5954:	9c3fef16 	blt	r19,r16,5914 <___vfprintf_internal_r+0x640>
    5958:	9425883a 	add	r18,r18,r16
    595c:	8c400044 	addi	r17,r17,1
    5960:	008001c4 	movi	r2,7
    5964:	1f000015 	stw	fp,0(r3)
    5968:	1c000115 	stw	r16,4(r3)
    596c:	dc800e15 	stw	r18,56(sp)
    5970:	dc400d15 	stw	r17,52(sp)
    5974:	1440cb16 	blt	r2,r17,5ca4 <___vfprintf_internal_r+0x9d0>
    5978:	d8814a17 	ldw	r2,1320(sp)
    597c:	d9414517 	ldw	r5,1300(sp)
    5980:	1140010e 	bge	r2,r5,5988 <___vfprintf_internal_r+0x6b4>
    5984:	2805883a 	mov	r2,r5
    5988:	d9814b17 	ldw	r6,1324(sp)
    598c:	308d883a 	add	r6,r6,r2
    5990:	d9814b15 	stw	r6,1324(sp)
    5994:	90013b1e 	bne	r18,zero,5e84 <___vfprintf_internal_r+0xbb0>
    5998:	d9c14017 	ldw	r7,1280(sp)
    599c:	dd401904 	addi	r21,sp,100
    59a0:	d8000d15 	stw	zero,52(sp)
    59a4:	003ea706 	br	5444 <___vfprintf_internal_r+0x170>
    59a8:	d8800e17 	ldw	r2,56(sp)
    59ac:	10053f1e 	bne	r2,zero,6eac <___vfprintf_internal_r+0x1bd8>
    59b0:	d8000d15 	stw	zero,52(sp)
    59b4:	b080030b 	ldhu	r2,12(r22)
    59b8:	1080100c 	andi	r2,r2,64
    59bc:	103e8726 	beq	r2,zero,53dc <___vfprintf_internal_r+0x108>
    59c0:	00bfffc4 	movi	r2,-1
    59c4:	d8814b15 	stw	r2,1324(sp)
    59c8:	003e8406 	br	53dc <___vfprintf_internal_r+0x108>
    59cc:	d9814d17 	ldw	r6,1332(sp)
    59d0:	00801944 	movi	r2,101
    59d4:	11806e16 	blt	r2,r6,5b90 <___vfprintf_internal_r+0x8bc>
    59d8:	d9414717 	ldw	r5,1308(sp)
    59dc:	00c00044 	movi	r3,1
    59e0:	1943430e 	bge	r3,r5,66f0 <___vfprintf_internal_r+0x141c>
    59e4:	d8814117 	ldw	r2,1284(sp)
    59e8:	94800044 	addi	r18,r18,1
    59ec:	8c400044 	addi	r17,r17,1
    59f0:	a8800015 	stw	r2,0(r21)
    59f4:	008001c4 	movi	r2,7
    59f8:	a8c00115 	stw	r3,4(r21)
    59fc:	dc800e15 	stw	r18,56(sp)
    5a00:	dc400d15 	stw	r17,52(sp)
    5a04:	1441ca16 	blt	r2,r17,6130 <___vfprintf_internal_r+0xe5c>
    5a08:	a8c00204 	addi	r3,r21,8
    5a0c:	d9014917 	ldw	r4,1316(sp)
    5a10:	00800044 	movi	r2,1
    5a14:	94800044 	addi	r18,r18,1
    5a18:	8c400044 	addi	r17,r17,1
    5a1c:	18800115 	stw	r2,4(r3)
    5a20:	008001c4 	movi	r2,7
    5a24:	19000015 	stw	r4,0(r3)
    5a28:	dc800e15 	stw	r18,56(sp)
    5a2c:	dc400d15 	stw	r17,52(sp)
    5a30:	1441b616 	blt	r2,r17,610c <___vfprintf_internal_r+0xe38>
    5a34:	1cc00204 	addi	r19,r3,8
    5a38:	d9014217 	ldw	r4,1288(sp)
    5a3c:	d9414317 	ldw	r5,1292(sp)
    5a40:	000d883a 	mov	r6,zero
    5a44:	000f883a 	mov	r7,zero
    5a48:	000c79c0 	call	c79c <__nedf2>
    5a4c:	10017426 	beq	r2,zero,6020 <___vfprintf_internal_r+0xd4c>
    5a50:	d9414717 	ldw	r5,1308(sp)
    5a54:	d9814117 	ldw	r6,1284(sp)
    5a58:	8c400044 	addi	r17,r17,1
    5a5c:	2c85883a 	add	r2,r5,r18
    5a60:	14bfffc4 	addi	r18,r2,-1
    5a64:	28bfffc4 	addi	r2,r5,-1
    5a68:	30c00044 	addi	r3,r6,1
    5a6c:	98800115 	stw	r2,4(r19)
    5a70:	008001c4 	movi	r2,7
    5a74:	98c00015 	stw	r3,0(r19)
    5a78:	dc800e15 	stw	r18,56(sp)
    5a7c:	dc400d15 	stw	r17,52(sp)
    5a80:	14418e16 	blt	r2,r17,60bc <___vfprintf_internal_r+0xde8>
    5a84:	9cc00204 	addi	r19,r19,8
    5a88:	d9414817 	ldw	r5,1312(sp)
    5a8c:	d8800804 	addi	r2,sp,32
    5a90:	8c400044 	addi	r17,r17,1
    5a94:	9165883a 	add	r18,r18,r5
    5a98:	98800015 	stw	r2,0(r19)
    5a9c:	008001c4 	movi	r2,7
    5aa0:	99400115 	stw	r5,4(r19)
    5aa4:	dc800e15 	stw	r18,56(sp)
    5aa8:	dc400d15 	stw	r17,52(sp)
    5aac:	1440ed16 	blt	r2,r17,5e64 <___vfprintf_internal_r+0xb90>
    5ab0:	98c00204 	addi	r3,r19,8
    5ab4:	003f8506 	br	58cc <___vfprintf_internal_r+0x5f8>
    5ab8:	d9814a17 	ldw	r6,1320(sp)
    5abc:	d8814517 	ldw	r2,1300(sp)
    5ac0:	30a1c83a 	sub	r16,r6,r2
    5ac4:	043f4b0e 	bge	zero,r16,57f4 <___vfprintf_internal_r+0x520>
    5ac8:	00800404 	movi	r2,16
    5acc:	1404340e 	bge	r2,r16,6ba0 <___vfprintf_internal_r+0x18cc>
    5ad0:	1027883a 	mov	r19,r2
    5ad4:	07000074 	movhi	fp,1
    5ad8:	e73e5084 	addi	fp,fp,-1726
    5adc:	050001c4 	movi	r20,7
    5ae0:	00000306 	br	5af0 <___vfprintf_internal_r+0x81c>
    5ae4:	843ffc04 	addi	r16,r16,-16
    5ae8:	ad400204 	addi	r21,r21,8
    5aec:	9c00130e 	bge	r19,r16,5b3c <___vfprintf_internal_r+0x868>
    5af0:	94800404 	addi	r18,r18,16
    5af4:	8c400044 	addi	r17,r17,1
    5af8:	af000015 	stw	fp,0(r21)
    5afc:	acc00115 	stw	r19,4(r21)
    5b00:	dc800e15 	stw	r18,56(sp)
    5b04:	dc400d15 	stw	r17,52(sp)
    5b08:	a47ff60e 	bge	r20,r17,5ae4 <___vfprintf_internal_r+0x810>
    5b0c:	d9014f17 	ldw	r4,1340(sp)
    5b10:	b00b883a 	mov	r5,r22
    5b14:	d9800c04 	addi	r6,sp,48
    5b18:	d9c15115 	stw	r7,1348(sp)
    5b1c:	000527c0 	call	527c <__sprint_r>
    5b20:	d9c15117 	ldw	r7,1348(sp)
    5b24:	103fa31e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    5b28:	843ffc04 	addi	r16,r16,-16
    5b2c:	dc800e17 	ldw	r18,56(sp)
    5b30:	dc400d17 	ldw	r17,52(sp)
    5b34:	dd401904 	addi	r21,sp,100
    5b38:	9c3fed16 	blt	r19,r16,5af0 <___vfprintf_internal_r+0x81c>
    5b3c:	9425883a 	add	r18,r18,r16
    5b40:	8c400044 	addi	r17,r17,1
    5b44:	008001c4 	movi	r2,7
    5b48:	af000015 	stw	fp,0(r21)
    5b4c:	ac000115 	stw	r16,4(r21)
    5b50:	dc800e15 	stw	r18,56(sp)
    5b54:	dc400d15 	stw	r17,52(sp)
    5b58:	14416116 	blt	r2,r17,60e0 <___vfprintf_internal_r+0xe0c>
    5b5c:	ad400204 	addi	r21,r21,8
    5b60:	003f2406 	br	57f4 <___vfprintf_internal_r+0x520>
    5b64:	d9014f17 	ldw	r4,1340(sp)
    5b68:	0008d440 	call	8d44 <__sinit>
    5b6c:	d9c15117 	ldw	r7,1348(sp)
    5b70:	003def06 	br	5330 <___vfprintf_internal_r+0x5c>
    5b74:	d9014f17 	ldw	r4,1340(sp)
    5b78:	b00b883a 	mov	r5,r22
    5b7c:	d9c15115 	stw	r7,1348(sp)
    5b80:	00071a40 	call	71a4 <__swsetup_r>
    5b84:	d9c15117 	ldw	r7,1348(sp)
    5b88:	103dee26 	beq	r2,zero,5344 <___vfprintf_internal_r+0x70>
    5b8c:	003f8c06 	br	59c0 <___vfprintf_internal_r+0x6ec>
    5b90:	d9014217 	ldw	r4,1288(sp)
    5b94:	d9414317 	ldw	r5,1292(sp)
    5b98:	000d883a 	mov	r6,zero
    5b9c:	000f883a 	mov	r7,zero
    5ba0:	0003cb80 	call	3cb8 <__eqdf2>
    5ba4:	1000f21e 	bne	r2,zero,5f70 <___vfprintf_internal_r+0xc9c>
    5ba8:	00800074 	movhi	r2,1
    5bac:	10bdf104 	addi	r2,r2,-2108
    5bb0:	94800044 	addi	r18,r18,1
    5bb4:	8c400044 	addi	r17,r17,1
    5bb8:	a8800015 	stw	r2,0(r21)
    5bbc:	00c00044 	movi	r3,1
    5bc0:	008001c4 	movi	r2,7
    5bc4:	a8c00115 	stw	r3,4(r21)
    5bc8:	dc800e15 	stw	r18,56(sp)
    5bcc:	dc400d15 	stw	r17,52(sp)
    5bd0:	1442fa16 	blt	r2,r17,67bc <___vfprintf_internal_r+0x14e8>
    5bd4:	a8c00204 	addi	r3,r21,8
    5bd8:	d8800517 	ldw	r2,20(sp)
    5bdc:	d9014717 	ldw	r4,1308(sp)
    5be0:	11015c0e 	bge	r2,r4,6154 <___vfprintf_internal_r+0xe80>
    5be4:	dc400d17 	ldw	r17,52(sp)
    5be8:	d9814917 	ldw	r6,1316(sp)
    5bec:	00800044 	movi	r2,1
    5bf0:	94800044 	addi	r18,r18,1
    5bf4:	8c400044 	addi	r17,r17,1
    5bf8:	18800115 	stw	r2,4(r3)
    5bfc:	008001c4 	movi	r2,7
    5c00:	19800015 	stw	r6,0(r3)
    5c04:	dc800e15 	stw	r18,56(sp)
    5c08:	dc400d15 	stw	r17,52(sp)
    5c0c:	14431016 	blt	r2,r17,6850 <___vfprintf_internal_r+0x157c>
    5c10:	18c00204 	addi	r3,r3,8
    5c14:	d8814717 	ldw	r2,1308(sp)
    5c18:	143fffc4 	addi	r16,r2,-1
    5c1c:	043f2b0e 	bge	zero,r16,58cc <___vfprintf_internal_r+0x5f8>
    5c20:	00800404 	movi	r2,16
    5c24:	1402a20e 	bge	r2,r16,66b0 <___vfprintf_internal_r+0x13dc>
    5c28:	dc400d17 	ldw	r17,52(sp)
    5c2c:	1027883a 	mov	r19,r2
    5c30:	07000074 	movhi	fp,1
    5c34:	e73e5084 	addi	fp,fp,-1726
    5c38:	050001c4 	movi	r20,7
    5c3c:	00000306 	br	5c4c <___vfprintf_internal_r+0x978>
    5c40:	18c00204 	addi	r3,r3,8
    5c44:	843ffc04 	addi	r16,r16,-16
    5c48:	9c029c0e 	bge	r19,r16,66bc <___vfprintf_internal_r+0x13e8>
    5c4c:	94800404 	addi	r18,r18,16
    5c50:	8c400044 	addi	r17,r17,1
    5c54:	1f000015 	stw	fp,0(r3)
    5c58:	1cc00115 	stw	r19,4(r3)
    5c5c:	dc800e15 	stw	r18,56(sp)
    5c60:	dc400d15 	stw	r17,52(sp)
    5c64:	a47ff60e 	bge	r20,r17,5c40 <___vfprintf_internal_r+0x96c>
    5c68:	d9014f17 	ldw	r4,1340(sp)
    5c6c:	b00b883a 	mov	r5,r22
    5c70:	d9800c04 	addi	r6,sp,48
    5c74:	000527c0 	call	527c <__sprint_r>
    5c78:	103f4e1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    5c7c:	dc800e17 	ldw	r18,56(sp)
    5c80:	dc400d17 	ldw	r17,52(sp)
    5c84:	d8c01904 	addi	r3,sp,100
    5c88:	003fee06 	br	5c44 <___vfprintf_internal_r+0x970>
    5c8c:	d8802c0b 	ldhu	r2,176(sp)
    5c90:	00ffffc4 	movi	r3,-1
    5c94:	d8c14b15 	stw	r3,1324(sp)
    5c98:	1080100c 	andi	r2,r2,64
    5c9c:	103dcc1e 	bne	r2,zero,53d0 <___vfprintf_internal_r+0xfc>
    5ca0:	003dce06 	br	53dc <___vfprintf_internal_r+0x108>
    5ca4:	d9014f17 	ldw	r4,1340(sp)
    5ca8:	b00b883a 	mov	r5,r22
    5cac:	d9800c04 	addi	r6,sp,48
    5cb0:	000527c0 	call	527c <__sprint_r>
    5cb4:	103f3f1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    5cb8:	dc800e17 	ldw	r18,56(sp)
    5cbc:	003f2e06 	br	5978 <___vfprintf_internal_r+0x6a4>
    5cc0:	d9414c17 	ldw	r5,1328(sp)
    5cc4:	29400414 	ori	r5,r5,16
    5cc8:	d9414c15 	stw	r5,1328(sp)
    5ccc:	d9814c17 	ldw	r6,1328(sp)
    5cd0:	3080080c 	andi	r2,r6,32
    5cd4:	10014f1e 	bne	r2,zero,6214 <___vfprintf_internal_r+0xf40>
    5cd8:	d8c14c17 	ldw	r3,1328(sp)
    5cdc:	1880040c 	andi	r2,r3,16
    5ce0:	1002ea1e 	bne	r2,zero,688c <___vfprintf_internal_r+0x15b8>
    5ce4:	d9014c17 	ldw	r4,1328(sp)
    5ce8:	2080100c 	andi	r2,r4,64
    5cec:	1002e726 	beq	r2,zero,688c <___vfprintf_internal_r+0x15b8>
    5cf0:	3880000f 	ldh	r2,0(r7)
    5cf4:	39c00104 	addi	r7,r7,4
    5cf8:	d9c14015 	stw	r7,1280(sp)
    5cfc:	1023d7fa 	srai	r17,r2,31
    5d00:	1021883a 	mov	r16,r2
    5d04:	88037216 	blt	r17,zero,6ad0 <___vfprintf_internal_r+0x17fc>
    5d08:	01000044 	movi	r4,1
    5d0c:	98000416 	blt	r19,zero,5d20 <___vfprintf_internal_r+0xa4c>
    5d10:	d8c14c17 	ldw	r3,1328(sp)
    5d14:	00bfdfc4 	movi	r2,-129
    5d18:	1886703a 	and	r3,r3,r2
    5d1c:	d8c14c15 	stw	r3,1328(sp)
    5d20:	8444b03a 	or	r2,r16,r17
    5d24:	1002261e 	bne	r2,zero,65c0 <___vfprintf_internal_r+0x12ec>
    5d28:	9802251e 	bne	r19,zero,65c0 <___vfprintf_internal_r+0x12ec>
    5d2c:	20803fcc 	andi	r2,r4,255
    5d30:	10029b26 	beq	r2,zero,67a0 <___vfprintf_internal_r+0x14cc>
    5d34:	d8c01904 	addi	r3,sp,100
    5d38:	dd000f04 	addi	r20,sp,60
    5d3c:	d8c14115 	stw	r3,1284(sp)
    5d40:	d8c14117 	ldw	r3,1284(sp)
    5d44:	dcc14515 	stw	r19,1300(sp)
    5d48:	a0c5c83a 	sub	r2,r20,r3
    5d4c:	11c00a04 	addi	r7,r2,40
    5d50:	99c0010e 	bge	r19,r7,5d58 <___vfprintf_internal_r+0xa84>
    5d54:	d9c14515 	stw	r7,1300(sp)
    5d58:	dcc14615 	stw	r19,1304(sp)
    5d5c:	d8800407 	ldb	r2,16(sp)
    5d60:	103e4c26 	beq	r2,zero,5694 <___vfprintf_internal_r+0x3c0>
    5d64:	d8814517 	ldw	r2,1300(sp)
    5d68:	10800044 	addi	r2,r2,1
    5d6c:	d8814515 	stw	r2,1300(sp)
    5d70:	003e4806 	br	5694 <___vfprintf_internal_r+0x3c0>
    5d74:	d9814c17 	ldw	r6,1328(sp)
    5d78:	31800414 	ori	r6,r6,16
    5d7c:	d9814c15 	stw	r6,1328(sp)
    5d80:	d8c14c17 	ldw	r3,1328(sp)
    5d84:	1880080c 	andi	r2,r3,32
    5d88:	1001271e 	bne	r2,zero,6228 <___vfprintf_internal_r+0xf54>
    5d8c:	d9414c17 	ldw	r5,1328(sp)
    5d90:	2880040c 	andi	r2,r5,16
    5d94:	1002b61e 	bne	r2,zero,6870 <___vfprintf_internal_r+0x159c>
    5d98:	d9814c17 	ldw	r6,1328(sp)
    5d9c:	3080100c 	andi	r2,r6,64
    5da0:	1002b326 	beq	r2,zero,6870 <___vfprintf_internal_r+0x159c>
    5da4:	3c00000b 	ldhu	r16,0(r7)
    5da8:	0009883a 	mov	r4,zero
    5dac:	39c00104 	addi	r7,r7,4
    5db0:	0023883a 	mov	r17,zero
    5db4:	d9c14015 	stw	r7,1280(sp)
    5db8:	d8000405 	stb	zero,16(sp)
    5dbc:	003fd306 	br	5d0c <___vfprintf_internal_r+0xa38>
    5dc0:	d9014c17 	ldw	r4,1328(sp)
    5dc4:	21000414 	ori	r4,r4,16
    5dc8:	d9014c15 	stw	r4,1328(sp)
    5dcc:	d9414c17 	ldw	r5,1328(sp)
    5dd0:	2880080c 	andi	r2,r5,32
    5dd4:	1001081e 	bne	r2,zero,61f8 <___vfprintf_internal_r+0xf24>
    5dd8:	d8c14c17 	ldw	r3,1328(sp)
    5ddc:	1880040c 	andi	r2,r3,16
    5de0:	1002b01e 	bne	r2,zero,68a4 <___vfprintf_internal_r+0x15d0>
    5de4:	d9014c17 	ldw	r4,1328(sp)
    5de8:	2080100c 	andi	r2,r4,64
    5dec:	1002ad26 	beq	r2,zero,68a4 <___vfprintf_internal_r+0x15d0>
    5df0:	3c00000b 	ldhu	r16,0(r7)
    5df4:	01000044 	movi	r4,1
    5df8:	39c00104 	addi	r7,r7,4
    5dfc:	0023883a 	mov	r17,zero
    5e00:	d9c14015 	stw	r7,1280(sp)
    5e04:	d8000405 	stb	zero,16(sp)
    5e08:	003fc006 	br	5d0c <___vfprintf_internal_r+0xa38>
    5e0c:	d9014f17 	ldw	r4,1340(sp)
    5e10:	b00b883a 	mov	r5,r22
    5e14:	d9800c04 	addi	r6,sp,48
    5e18:	000527c0 	call	527c <__sprint_r>
    5e1c:	103ee51e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    5e20:	dc800e17 	ldw	r18,56(sp)
    5e24:	d8c01904 	addi	r3,sp,100
    5e28:	d9814c17 	ldw	r6,1328(sp)
    5e2c:	3080004c 	andi	r2,r6,1
    5e30:	1005003a 	cmpeq	r2,r2,zero
    5e34:	103ea51e 	bne	r2,zero,58cc <___vfprintf_internal_r+0x5f8>
    5e38:	00800044 	movi	r2,1
    5e3c:	dc400d17 	ldw	r17,52(sp)
    5e40:	18800115 	stw	r2,4(r3)
    5e44:	d8814917 	ldw	r2,1316(sp)
    5e48:	94800044 	addi	r18,r18,1
    5e4c:	8c400044 	addi	r17,r17,1
    5e50:	18800015 	stw	r2,0(r3)
    5e54:	008001c4 	movi	r2,7
    5e58:	dc800e15 	stw	r18,56(sp)
    5e5c:	dc400d15 	stw	r17,52(sp)
    5e60:	14421e0e 	bge	r2,r17,66dc <___vfprintf_internal_r+0x1408>
    5e64:	d9014f17 	ldw	r4,1340(sp)
    5e68:	b00b883a 	mov	r5,r22
    5e6c:	d9800c04 	addi	r6,sp,48
    5e70:	000527c0 	call	527c <__sprint_r>
    5e74:	103ecf1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    5e78:	dc800e17 	ldw	r18,56(sp)
    5e7c:	d8c01904 	addi	r3,sp,100
    5e80:	003e9206 	br	58cc <___vfprintf_internal_r+0x5f8>
    5e84:	d9014f17 	ldw	r4,1340(sp)
    5e88:	b00b883a 	mov	r5,r22
    5e8c:	d9800c04 	addi	r6,sp,48
    5e90:	000527c0 	call	527c <__sprint_r>
    5e94:	103ec026 	beq	r2,zero,5998 <___vfprintf_internal_r+0x6c4>
    5e98:	003ec606 	br	59b4 <___vfprintf_internal_r+0x6e0>
    5e9c:	d9014f17 	ldw	r4,1340(sp)
    5ea0:	b00b883a 	mov	r5,r22
    5ea4:	d9800c04 	addi	r6,sp,48
    5ea8:	d9c15115 	stw	r7,1348(sp)
    5eac:	000527c0 	call	527c <__sprint_r>
    5eb0:	d9c15117 	ldw	r7,1348(sp)
    5eb4:	103ebf1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    5eb8:	dc800e17 	ldw	r18,56(sp)
    5ebc:	dc400d17 	ldw	r17,52(sp)
    5ec0:	dd401904 	addi	r21,sp,100
    5ec4:	003e7406 	br	5898 <___vfprintf_internal_r+0x5c4>
    5ec8:	d9014f17 	ldw	r4,1340(sp)
    5ecc:	b00b883a 	mov	r5,r22
    5ed0:	d9800c04 	addi	r6,sp,48
    5ed4:	d9c15115 	stw	r7,1348(sp)
    5ed8:	000527c0 	call	527c <__sprint_r>
    5edc:	d9c15117 	ldw	r7,1348(sp)
    5ee0:	103eb41e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    5ee4:	dd401904 	addi	r21,sp,100
    5ee8:	003d6d06 	br	54a0 <___vfprintf_internal_r+0x1cc>
    5eec:	d9014f17 	ldw	r4,1340(sp)
    5ef0:	b00b883a 	mov	r5,r22
    5ef4:	d9800c04 	addi	r6,sp,48
    5ef8:	d9c15115 	stw	r7,1348(sp)
    5efc:	000527c0 	call	527c <__sprint_r>
    5f00:	d9c15117 	ldw	r7,1348(sp)
    5f04:	103eab1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    5f08:	dc800e17 	ldw	r18,56(sp)
    5f0c:	dc400d17 	ldw	r17,52(sp)
    5f10:	dd401904 	addi	r21,sp,100
    5f14:	003e3406 	br	57e8 <___vfprintf_internal_r+0x514>
    5f18:	d9014f17 	ldw	r4,1340(sp)
    5f1c:	b00b883a 	mov	r5,r22
    5f20:	d9800c04 	addi	r6,sp,48
    5f24:	d9c15115 	stw	r7,1348(sp)
    5f28:	000527c0 	call	527c <__sprint_r>
    5f2c:	d9c15117 	ldw	r7,1348(sp)
    5f30:	103ea01e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    5f34:	dc800e17 	ldw	r18,56(sp)
    5f38:	dc400d17 	ldw	r17,52(sp)
    5f3c:	dd401904 	addi	r21,sp,100
    5f40:	003e1c06 	br	57b4 <___vfprintf_internal_r+0x4e0>
    5f44:	d9014f17 	ldw	r4,1340(sp)
    5f48:	b00b883a 	mov	r5,r22
    5f4c:	d9800c04 	addi	r6,sp,48
    5f50:	d9c15115 	stw	r7,1348(sp)
    5f54:	000527c0 	call	527c <__sprint_r>
    5f58:	d9c15117 	ldw	r7,1348(sp)
    5f5c:	103e951e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    5f60:	dc800e17 	ldw	r18,56(sp)
    5f64:	dc400d17 	ldw	r17,52(sp)
    5f68:	dd401904 	addi	r21,sp,100
    5f6c:	003e0406 	br	5780 <___vfprintf_internal_r+0x4ac>
    5f70:	d9000517 	ldw	r4,20(sp)
    5f74:	0102520e 	bge	zero,r4,68c0 <___vfprintf_internal_r+0x15ec>
    5f78:	d9814717 	ldw	r6,1308(sp)
    5f7c:	21807a16 	blt	r4,r6,6168 <___vfprintf_internal_r+0xe94>
    5f80:	d8814117 	ldw	r2,1284(sp)
    5f84:	91a5883a 	add	r18,r18,r6
    5f88:	8c400044 	addi	r17,r17,1
    5f8c:	a8800015 	stw	r2,0(r21)
    5f90:	008001c4 	movi	r2,7
    5f94:	a9800115 	stw	r6,4(r21)
    5f98:	dc800e15 	stw	r18,56(sp)
    5f9c:	dc400d15 	stw	r17,52(sp)
    5fa0:	1442f616 	blt	r2,r17,6b7c <___vfprintf_internal_r+0x18a8>
    5fa4:	a8c00204 	addi	r3,r21,8
    5fa8:	d9414717 	ldw	r5,1308(sp)
    5fac:	2161c83a 	sub	r16,r4,r5
    5fb0:	043f9d0e 	bge	zero,r16,5e28 <___vfprintf_internal_r+0xb54>
    5fb4:	00800404 	movi	r2,16
    5fb8:	1402130e 	bge	r2,r16,6808 <___vfprintf_internal_r+0x1534>
    5fbc:	dc400d17 	ldw	r17,52(sp)
    5fc0:	1027883a 	mov	r19,r2
    5fc4:	07000074 	movhi	fp,1
    5fc8:	e73e5084 	addi	fp,fp,-1726
    5fcc:	050001c4 	movi	r20,7
    5fd0:	00000306 	br	5fe0 <___vfprintf_internal_r+0xd0c>
    5fd4:	18c00204 	addi	r3,r3,8
    5fd8:	843ffc04 	addi	r16,r16,-16
    5fdc:	9c020d0e 	bge	r19,r16,6814 <___vfprintf_internal_r+0x1540>
    5fe0:	94800404 	addi	r18,r18,16
    5fe4:	8c400044 	addi	r17,r17,1
    5fe8:	1f000015 	stw	fp,0(r3)
    5fec:	1cc00115 	stw	r19,4(r3)
    5ff0:	dc800e15 	stw	r18,56(sp)
    5ff4:	dc400d15 	stw	r17,52(sp)
    5ff8:	a47ff60e 	bge	r20,r17,5fd4 <___vfprintf_internal_r+0xd00>
    5ffc:	d9014f17 	ldw	r4,1340(sp)
    6000:	b00b883a 	mov	r5,r22
    6004:	d9800c04 	addi	r6,sp,48
    6008:	000527c0 	call	527c <__sprint_r>
    600c:	103e691e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    6010:	dc800e17 	ldw	r18,56(sp)
    6014:	dc400d17 	ldw	r17,52(sp)
    6018:	d8c01904 	addi	r3,sp,100
    601c:	003fee06 	br	5fd8 <___vfprintf_internal_r+0xd04>
    6020:	d8814717 	ldw	r2,1308(sp)
    6024:	143fffc4 	addi	r16,r2,-1
    6028:	043e970e 	bge	zero,r16,5a88 <___vfprintf_internal_r+0x7b4>
    602c:	00800404 	movi	r2,16
    6030:	1400180e 	bge	r2,r16,6094 <___vfprintf_internal_r+0xdc0>
    6034:	1029883a 	mov	r20,r2
    6038:	07000074 	movhi	fp,1
    603c:	e73e5084 	addi	fp,fp,-1726
    6040:	054001c4 	movi	r21,7
    6044:	00000306 	br	6054 <___vfprintf_internal_r+0xd80>
    6048:	9cc00204 	addi	r19,r19,8
    604c:	843ffc04 	addi	r16,r16,-16
    6050:	a400120e 	bge	r20,r16,609c <___vfprintf_internal_r+0xdc8>
    6054:	94800404 	addi	r18,r18,16
    6058:	8c400044 	addi	r17,r17,1
    605c:	9f000015 	stw	fp,0(r19)
    6060:	9d000115 	stw	r20,4(r19)
    6064:	dc800e15 	stw	r18,56(sp)
    6068:	dc400d15 	stw	r17,52(sp)
    606c:	ac7ff60e 	bge	r21,r17,6048 <___vfprintf_internal_r+0xd74>
    6070:	d9014f17 	ldw	r4,1340(sp)
    6074:	b00b883a 	mov	r5,r22
    6078:	d9800c04 	addi	r6,sp,48
    607c:	000527c0 	call	527c <__sprint_r>
    6080:	103e4c1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    6084:	dc800e17 	ldw	r18,56(sp)
    6088:	dc400d17 	ldw	r17,52(sp)
    608c:	dcc01904 	addi	r19,sp,100
    6090:	003fee06 	br	604c <___vfprintf_internal_r+0xd78>
    6094:	07000074 	movhi	fp,1
    6098:	e73e5084 	addi	fp,fp,-1726
    609c:	9425883a 	add	r18,r18,r16
    60a0:	8c400044 	addi	r17,r17,1
    60a4:	008001c4 	movi	r2,7
    60a8:	9f000015 	stw	fp,0(r19)
    60ac:	9c000115 	stw	r16,4(r19)
    60b0:	dc800e15 	stw	r18,56(sp)
    60b4:	dc400d15 	stw	r17,52(sp)
    60b8:	147e720e 	bge	r2,r17,5a84 <___vfprintf_internal_r+0x7b0>
    60bc:	d9014f17 	ldw	r4,1340(sp)
    60c0:	b00b883a 	mov	r5,r22
    60c4:	d9800c04 	addi	r6,sp,48
    60c8:	000527c0 	call	527c <__sprint_r>
    60cc:	103e391e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    60d0:	dc800e17 	ldw	r18,56(sp)
    60d4:	dc400d17 	ldw	r17,52(sp)
    60d8:	dcc01904 	addi	r19,sp,100
    60dc:	003e6a06 	br	5a88 <___vfprintf_internal_r+0x7b4>
    60e0:	d9014f17 	ldw	r4,1340(sp)
    60e4:	b00b883a 	mov	r5,r22
    60e8:	d9800c04 	addi	r6,sp,48
    60ec:	d9c15115 	stw	r7,1348(sp)
    60f0:	000527c0 	call	527c <__sprint_r>
    60f4:	d9c15117 	ldw	r7,1348(sp)
    60f8:	103e2e1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    60fc:	dc800e17 	ldw	r18,56(sp)
    6100:	dc400d17 	ldw	r17,52(sp)
    6104:	dd401904 	addi	r21,sp,100
    6108:	003dba06 	br	57f4 <___vfprintf_internal_r+0x520>
    610c:	d9014f17 	ldw	r4,1340(sp)
    6110:	b00b883a 	mov	r5,r22
    6114:	d9800c04 	addi	r6,sp,48
    6118:	000527c0 	call	527c <__sprint_r>
    611c:	103e251e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    6120:	dc800e17 	ldw	r18,56(sp)
    6124:	dc400d17 	ldw	r17,52(sp)
    6128:	dcc01904 	addi	r19,sp,100
    612c:	003e4206 	br	5a38 <___vfprintf_internal_r+0x764>
    6130:	d9014f17 	ldw	r4,1340(sp)
    6134:	b00b883a 	mov	r5,r22
    6138:	d9800c04 	addi	r6,sp,48
    613c:	000527c0 	call	527c <__sprint_r>
    6140:	103e1c1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    6144:	dc800e17 	ldw	r18,56(sp)
    6148:	dc400d17 	ldw	r17,52(sp)
    614c:	d8c01904 	addi	r3,sp,100
    6150:	003e2e06 	br	5a0c <___vfprintf_internal_r+0x738>
    6154:	d9414c17 	ldw	r5,1328(sp)
    6158:	2880004c 	andi	r2,r5,1
    615c:	1005003a 	cmpeq	r2,r2,zero
    6160:	103dda1e 	bne	r2,zero,58cc <___vfprintf_internal_r+0x5f8>
    6164:	003e9f06 	br	5be4 <___vfprintf_internal_r+0x910>
    6168:	d8c14117 	ldw	r3,1284(sp)
    616c:	9125883a 	add	r18,r18,r4
    6170:	8c400044 	addi	r17,r17,1
    6174:	008001c4 	movi	r2,7
    6178:	a8c00015 	stw	r3,0(r21)
    617c:	a9000115 	stw	r4,4(r21)
    6180:	dc800e15 	stw	r18,56(sp)
    6184:	dc400d15 	stw	r17,52(sp)
    6188:	14426616 	blt	r2,r17,6b24 <___vfprintf_internal_r+0x1850>
    618c:	a8c00204 	addi	r3,r21,8
    6190:	d9414917 	ldw	r5,1316(sp)
    6194:	00800044 	movi	r2,1
    6198:	94800044 	addi	r18,r18,1
    619c:	8c400044 	addi	r17,r17,1
    61a0:	18800115 	stw	r2,4(r3)
    61a4:	008001c4 	movi	r2,7
    61a8:	19400015 	stw	r5,0(r3)
    61ac:	dc800e15 	stw	r18,56(sp)
    61b0:	dc400d15 	stw	r17,52(sp)
    61b4:	2021883a 	mov	r16,r4
    61b8:	14425016 	blt	r2,r17,6afc <___vfprintf_internal_r+0x1828>
    61bc:	19400204 	addi	r5,r3,8
    61c0:	d9814717 	ldw	r6,1308(sp)
    61c4:	8c400044 	addi	r17,r17,1
    61c8:	dc400d15 	stw	r17,52(sp)
    61cc:	3107c83a 	sub	r3,r6,r4
    61d0:	d9014117 	ldw	r4,1284(sp)
    61d4:	90e5883a 	add	r18,r18,r3
    61d8:	28c00115 	stw	r3,4(r5)
    61dc:	8105883a 	add	r2,r16,r4
    61e0:	28800015 	stw	r2,0(r5)
    61e4:	008001c4 	movi	r2,7
    61e8:	dc800e15 	stw	r18,56(sp)
    61ec:	147f1d16 	blt	r2,r17,5e64 <___vfprintf_internal_r+0xb90>
    61f0:	28c00204 	addi	r3,r5,8
    61f4:	003db506 	br	58cc <___vfprintf_internal_r+0x5f8>
    61f8:	3c000017 	ldw	r16,0(r7)
    61fc:	3c400117 	ldw	r17,4(r7)
    6200:	39800204 	addi	r6,r7,8
    6204:	01000044 	movi	r4,1
    6208:	d9814015 	stw	r6,1280(sp)
    620c:	d8000405 	stb	zero,16(sp)
    6210:	003ebe06 	br	5d0c <___vfprintf_internal_r+0xa38>
    6214:	3c000017 	ldw	r16,0(r7)
    6218:	3c400117 	ldw	r17,4(r7)
    621c:	38800204 	addi	r2,r7,8
    6220:	d8814015 	stw	r2,1280(sp)
    6224:	003eb706 	br	5d04 <___vfprintf_internal_r+0xa30>
    6228:	3c000017 	ldw	r16,0(r7)
    622c:	3c400117 	ldw	r17,4(r7)
    6230:	39000204 	addi	r4,r7,8
    6234:	d9014015 	stw	r4,1280(sp)
    6238:	0009883a 	mov	r4,zero
    623c:	d8000405 	stb	zero,16(sp)
    6240:	003eb206 	br	5d0c <___vfprintf_internal_r+0xa38>
    6244:	38c00017 	ldw	r3,0(r7)
    6248:	39c00104 	addi	r7,r7,4
    624c:	d8c14a15 	stw	r3,1320(sp)
    6250:	1800d10e 	bge	r3,zero,6598 <___vfprintf_internal_r+0x12c4>
    6254:	00c7c83a 	sub	r3,zero,r3
    6258:	d8c14a15 	stw	r3,1320(sp)
    625c:	d9014c17 	ldw	r4,1328(sp)
    6260:	b8c00007 	ldb	r3,0(r23)
    6264:	21000114 	ori	r4,r4,4
    6268:	d9014c15 	stw	r4,1328(sp)
    626c:	003c9806 	br	54d0 <___vfprintf_internal_r+0x1fc>
    6270:	d9814c17 	ldw	r6,1328(sp)
    6274:	3080080c 	andi	r2,r6,32
    6278:	1001f026 	beq	r2,zero,6a3c <___vfprintf_internal_r+0x1768>
    627c:	d9014b17 	ldw	r4,1324(sp)
    6280:	38800017 	ldw	r2,0(r7)
    6284:	39c00104 	addi	r7,r7,4
    6288:	d9c14015 	stw	r7,1280(sp)
    628c:	2007d7fa 	srai	r3,r4,31
    6290:	d9c14017 	ldw	r7,1280(sp)
    6294:	11000015 	stw	r4,0(r2)
    6298:	10c00115 	stw	r3,4(r2)
    629c:	003c6906 	br	5444 <___vfprintf_internal_r+0x170>
    62a0:	b8c00007 	ldb	r3,0(r23)
    62a4:	00801b04 	movi	r2,108
    62a8:	18824f26 	beq	r3,r2,6be8 <___vfprintf_internal_r+0x1914>
    62ac:	d9414c17 	ldw	r5,1328(sp)
    62b0:	29400414 	ori	r5,r5,16
    62b4:	d9414c15 	stw	r5,1328(sp)
    62b8:	003c8506 	br	54d0 <___vfprintf_internal_r+0x1fc>
    62bc:	d9814c17 	ldw	r6,1328(sp)
    62c0:	b8c00007 	ldb	r3,0(r23)
    62c4:	31800814 	ori	r6,r6,32
    62c8:	d9814c15 	stw	r6,1328(sp)
    62cc:	003c8006 	br	54d0 <___vfprintf_internal_r+0x1fc>
    62d0:	d8814c17 	ldw	r2,1328(sp)
    62d4:	3c000017 	ldw	r16,0(r7)
    62d8:	00c01e04 	movi	r3,120
    62dc:	10800094 	ori	r2,r2,2
    62e0:	d8814c15 	stw	r2,1328(sp)
    62e4:	39c00104 	addi	r7,r7,4
    62e8:	01400074 	movhi	r5,1
    62ec:	297e3a04 	addi	r5,r5,-1816
    62f0:	00800c04 	movi	r2,48
    62f4:	0023883a 	mov	r17,zero
    62f8:	01000084 	movi	r4,2
    62fc:	d9c14015 	stw	r7,1280(sp)
    6300:	d8c14d15 	stw	r3,1332(sp)
    6304:	d9414415 	stw	r5,1296(sp)
    6308:	d8800445 	stb	r2,17(sp)
    630c:	d8c00485 	stb	r3,18(sp)
    6310:	d8000405 	stb	zero,16(sp)
    6314:	003e7d06 	br	5d0c <___vfprintf_internal_r+0xa38>
    6318:	d8814c17 	ldw	r2,1328(sp)
    631c:	b8c00007 	ldb	r3,0(r23)
    6320:	10801014 	ori	r2,r2,64
    6324:	d8814c15 	stw	r2,1328(sp)
    6328:	003c6906 	br	54d0 <___vfprintf_internal_r+0x1fc>
    632c:	d9414c17 	ldw	r5,1328(sp)
    6330:	2880020c 	andi	r2,r5,8
    6334:	1001df26 	beq	r2,zero,6ab4 <___vfprintf_internal_r+0x17e0>
    6338:	39800017 	ldw	r6,0(r7)
    633c:	38800204 	addi	r2,r7,8
    6340:	d8814015 	stw	r2,1280(sp)
    6344:	d9814215 	stw	r6,1288(sp)
    6348:	39c00117 	ldw	r7,4(r7)
    634c:	d9c14315 	stw	r7,1292(sp)
    6350:	d9014217 	ldw	r4,1288(sp)
    6354:	d9414317 	ldw	r5,1292(sp)
    6358:	000b5340 	call	b534 <__isinfd>
    635c:	10021726 	beq	r2,zero,6bbc <___vfprintf_internal_r+0x18e8>
    6360:	d9014217 	ldw	r4,1288(sp)
    6364:	d9414317 	ldw	r5,1292(sp)
    6368:	000d883a 	mov	r6,zero
    636c:	000f883a 	mov	r7,zero
    6370:	0003e500 	call	3e50 <__ltdf2>
    6374:	1002ca16 	blt	r2,zero,6ea0 <___vfprintf_internal_r+0x1bcc>
    6378:	d9414d17 	ldw	r5,1332(sp)
    637c:	008011c4 	movi	r2,71
    6380:	11420a16 	blt	r2,r5,6bac <___vfprintf_internal_r+0x18d8>
    6384:	01800074 	movhi	r6,1
    6388:	31be3f04 	addi	r6,r6,-1796
    638c:	d9814115 	stw	r6,1284(sp)
    6390:	d9014c17 	ldw	r4,1328(sp)
    6394:	00c000c4 	movi	r3,3
    6398:	00bfdfc4 	movi	r2,-129
    639c:	2088703a 	and	r4,r4,r2
    63a0:	180f883a 	mov	r7,r3
    63a4:	d8c14515 	stw	r3,1300(sp)
    63a8:	d9014c15 	stw	r4,1328(sp)
    63ac:	d8014615 	stw	zero,1304(sp)
    63b0:	003e6a06 	br	5d5c <___vfprintf_internal_r+0xa88>
    63b4:	38800017 	ldw	r2,0(r7)
    63b8:	00c00044 	movi	r3,1
    63bc:	39c00104 	addi	r7,r7,4
    63c0:	d9c14015 	stw	r7,1280(sp)
    63c4:	d9000f04 	addi	r4,sp,60
    63c8:	180f883a 	mov	r7,r3
    63cc:	d8c14515 	stw	r3,1300(sp)
    63d0:	d9014115 	stw	r4,1284(sp)
    63d4:	d8800f05 	stb	r2,60(sp)
    63d8:	d8000405 	stb	zero,16(sp)
    63dc:	003cac06 	br	5690 <___vfprintf_internal_r+0x3bc>
    63e0:	01400074 	movhi	r5,1
    63e4:	297e4504 	addi	r5,r5,-1772
    63e8:	d9414415 	stw	r5,1296(sp)
    63ec:	d9814c17 	ldw	r6,1328(sp)
    63f0:	3080080c 	andi	r2,r6,32
    63f4:	1000f926 	beq	r2,zero,67dc <___vfprintf_internal_r+0x1508>
    63f8:	3c000017 	ldw	r16,0(r7)
    63fc:	3c400117 	ldw	r17,4(r7)
    6400:	38800204 	addi	r2,r7,8
    6404:	d8814015 	stw	r2,1280(sp)
    6408:	d9414c17 	ldw	r5,1328(sp)
    640c:	2880004c 	andi	r2,r5,1
    6410:	1005003a 	cmpeq	r2,r2,zero
    6414:	1000b31e 	bne	r2,zero,66e4 <___vfprintf_internal_r+0x1410>
    6418:	8444b03a 	or	r2,r16,r17
    641c:	1000b126 	beq	r2,zero,66e4 <___vfprintf_internal_r+0x1410>
    6420:	d9814d17 	ldw	r6,1332(sp)
    6424:	29400094 	ori	r5,r5,2
    6428:	00800c04 	movi	r2,48
    642c:	01000084 	movi	r4,2
    6430:	d9414c15 	stw	r5,1328(sp)
    6434:	d8800445 	stb	r2,17(sp)
    6438:	d9800485 	stb	r6,18(sp)
    643c:	d8000405 	stb	zero,16(sp)
    6440:	003e3206 	br	5d0c <___vfprintf_internal_r+0xa38>
    6444:	01800074 	movhi	r6,1
    6448:	31be3a04 	addi	r6,r6,-1816
    644c:	d9814415 	stw	r6,1296(sp)
    6450:	003fe606 	br	63ec <___vfprintf_internal_r+0x1118>
    6454:	00800ac4 	movi	r2,43
    6458:	d8800405 	stb	r2,16(sp)
    645c:	b8c00007 	ldb	r3,0(r23)
    6460:	003c1b06 	br	54d0 <___vfprintf_internal_r+0x1fc>
    6464:	d8814c17 	ldw	r2,1328(sp)
    6468:	b8c00007 	ldb	r3,0(r23)
    646c:	10800054 	ori	r2,r2,1
    6470:	d8814c15 	stw	r2,1328(sp)
    6474:	003c1606 	br	54d0 <___vfprintf_internal_r+0x1fc>
    6478:	d8800407 	ldb	r2,16(sp)
    647c:	1000461e 	bne	r2,zero,6598 <___vfprintf_internal_r+0x12c4>
    6480:	00800804 	movi	r2,32
    6484:	d8800405 	stb	r2,16(sp)
    6488:	b8c00007 	ldb	r3,0(r23)
    648c:	003c1006 	br	54d0 <___vfprintf_internal_r+0x1fc>
    6490:	d9814c17 	ldw	r6,1328(sp)
    6494:	b8c00007 	ldb	r3,0(r23)
    6498:	31800214 	ori	r6,r6,8
    649c:	d9814c15 	stw	r6,1328(sp)
    64a0:	003c0b06 	br	54d0 <___vfprintf_internal_r+0x1fc>
    64a4:	0007883a 	mov	r3,zero
    64a8:	01000244 	movi	r4,9
    64ac:	188002a4 	muli	r2,r3,10
    64b0:	b8c00007 	ldb	r3,0(r23)
    64b4:	d9814d17 	ldw	r6,1332(sp)
    64b8:	bdc00044 	addi	r23,r23,1
    64bc:	d8c14d15 	stw	r3,1332(sp)
    64c0:	d9414d17 	ldw	r5,1332(sp)
    64c4:	3085883a 	add	r2,r6,r2
    64c8:	10fff404 	addi	r3,r2,-48
    64cc:	28bff404 	addi	r2,r5,-48
    64d0:	20bff62e 	bgeu	r4,r2,64ac <___vfprintf_internal_r+0x11d8>
    64d4:	d8c14a15 	stw	r3,1320(sp)
    64d8:	003bff06 	br	54d8 <___vfprintf_internal_r+0x204>
    64dc:	d9414c17 	ldw	r5,1328(sp)
    64e0:	b8c00007 	ldb	r3,0(r23)
    64e4:	29402014 	ori	r5,r5,128
    64e8:	d9414c15 	stw	r5,1328(sp)
    64ec:	003bf806 	br	54d0 <___vfprintf_internal_r+0x1fc>
    64f0:	b8c00007 	ldb	r3,0(r23)
    64f4:	00800a84 	movi	r2,42
    64f8:	bdc00044 	addi	r23,r23,1
    64fc:	18831526 	beq	r3,r2,7154 <___vfprintf_internal_r+0x1e80>
    6500:	d8c14d15 	stw	r3,1332(sp)
    6504:	18bff404 	addi	r2,r3,-48
    6508:	00c00244 	movi	r3,9
    650c:	18827836 	bltu	r3,r2,6ef0 <___vfprintf_internal_r+0x1c1c>
    6510:	000d883a 	mov	r6,zero
    6514:	308002a4 	muli	r2,r6,10
    6518:	b9800007 	ldb	r6,0(r23)
    651c:	d9414d17 	ldw	r5,1332(sp)
    6520:	bdc00044 	addi	r23,r23,1
    6524:	d9814d15 	stw	r6,1332(sp)
    6528:	d9014d17 	ldw	r4,1332(sp)
    652c:	1145883a 	add	r2,r2,r5
    6530:	11bff404 	addi	r6,r2,-48
    6534:	20bff404 	addi	r2,r4,-48
    6538:	18bff62e 	bgeu	r3,r2,6514 <___vfprintf_internal_r+0x1240>
    653c:	3027883a 	mov	r19,r6
    6540:	303be50e 	bge	r6,zero,54d8 <___vfprintf_internal_r+0x204>
    6544:	04ffffc4 	movi	r19,-1
    6548:	003be306 	br	54d8 <___vfprintf_internal_r+0x204>
    654c:	d8000405 	stb	zero,16(sp)
    6550:	39800017 	ldw	r6,0(r7)
    6554:	39c00104 	addi	r7,r7,4
    6558:	d9c14015 	stw	r7,1280(sp)
    655c:	d9814115 	stw	r6,1284(sp)
    6560:	3001c926 	beq	r6,zero,6c88 <___vfprintf_internal_r+0x19b4>
    6564:	98000e16 	blt	r19,zero,65a0 <___vfprintf_internal_r+0x12cc>
    6568:	d9014117 	ldw	r4,1284(sp)
    656c:	000b883a 	mov	r5,zero
    6570:	980d883a 	mov	r6,r19
    6574:	0009c500 	call	9c50 <memchr>
    6578:	10025926 	beq	r2,zero,6ee0 <___vfprintf_internal_r+0x1c0c>
    657c:	d8c14117 	ldw	r3,1284(sp)
    6580:	10cfc83a 	sub	r7,r2,r3
    6584:	99c19e16 	blt	r19,r7,6c00 <___vfprintf_internal_r+0x192c>
    6588:	d9c14515 	stw	r7,1300(sp)
    658c:	38000916 	blt	r7,zero,65b4 <___vfprintf_internal_r+0x12e0>
    6590:	d8014615 	stw	zero,1304(sp)
    6594:	003df106 	br	5d5c <___vfprintf_internal_r+0xa88>
    6598:	b8c00007 	ldb	r3,0(r23)
    659c:	003bcc06 	br	54d0 <___vfprintf_internal_r+0x1fc>
    65a0:	d9014117 	ldw	r4,1284(sp)
    65a4:	00052080 	call	5208 <strlen>
    65a8:	d8814515 	stw	r2,1300(sp)
    65ac:	100f883a 	mov	r7,r2
    65b0:	103ff70e 	bge	r2,zero,6590 <___vfprintf_internal_r+0x12bc>
    65b4:	d8014515 	stw	zero,1300(sp)
    65b8:	d8014615 	stw	zero,1304(sp)
    65bc:	003de706 	br	5d5c <___vfprintf_internal_r+0xa88>
    65c0:	20c03fcc 	andi	r3,r4,255
    65c4:	00800044 	movi	r2,1
    65c8:	18802d26 	beq	r3,r2,6680 <___vfprintf_internal_r+0x13ac>
    65cc:	18800e36 	bltu	r3,r2,6608 <___vfprintf_internal_r+0x1334>
    65d0:	00800084 	movi	r2,2
    65d4:	1880fa26 	beq	r3,r2,69c0 <___vfprintf_internal_r+0x16ec>
    65d8:	01000074 	movhi	r4,1
    65dc:	213e4a04 	addi	r4,r4,-1752
    65e0:	00052080 	call	5208 <strlen>
    65e4:	100f883a 	mov	r7,r2
    65e8:	dcc14515 	stw	r19,1300(sp)
    65ec:	9880010e 	bge	r19,r2,65f4 <___vfprintf_internal_r+0x1320>
    65f0:	d8814515 	stw	r2,1300(sp)
    65f4:	00800074 	movhi	r2,1
    65f8:	10be4a04 	addi	r2,r2,-1752
    65fc:	dcc14615 	stw	r19,1304(sp)
    6600:	d8814115 	stw	r2,1284(sp)
    6604:	003dd506 	br	5d5c <___vfprintf_internal_r+0xa88>
    6608:	d9401904 	addi	r5,sp,100
    660c:	dd000f04 	addi	r20,sp,60
    6610:	d9414115 	stw	r5,1284(sp)
    6614:	880a977a 	slli	r5,r17,29
    6618:	d9814117 	ldw	r6,1284(sp)
    661c:	8004d0fa 	srli	r2,r16,3
    6620:	8806d0fa 	srli	r3,r17,3
    6624:	810001cc 	andi	r4,r16,7
    6628:	2884b03a 	or	r2,r5,r2
    662c:	31bfffc4 	addi	r6,r6,-1
    6630:	21000c04 	addi	r4,r4,48
    6634:	d9814115 	stw	r6,1284(sp)
    6638:	10cab03a 	or	r5,r2,r3
    663c:	31000005 	stb	r4,0(r6)
    6640:	1021883a 	mov	r16,r2
    6644:	1823883a 	mov	r17,r3
    6648:	283ff21e 	bne	r5,zero,6614 <___vfprintf_internal_r+0x1340>
    664c:	d8c14c17 	ldw	r3,1328(sp)
    6650:	1880004c 	andi	r2,r3,1
    6654:	1005003a 	cmpeq	r2,r2,zero
    6658:	103db91e 	bne	r2,zero,5d40 <___vfprintf_internal_r+0xa6c>
    665c:	20803fcc 	andi	r2,r4,255
    6660:	1080201c 	xori	r2,r2,128
    6664:	10bfe004 	addi	r2,r2,-128
    6668:	00c00c04 	movi	r3,48
    666c:	10fdb426 	beq	r2,r3,5d40 <___vfprintf_internal_r+0xa6c>
    6670:	31bfffc4 	addi	r6,r6,-1
    6674:	d9814115 	stw	r6,1284(sp)
    6678:	30c00005 	stb	r3,0(r6)
    667c:	003db006 	br	5d40 <___vfprintf_internal_r+0xa6c>
    6680:	88800068 	cmpgeui	r2,r17,1
    6684:	10002c1e 	bne	r2,zero,6738 <___vfprintf_internal_r+0x1464>
    6688:	8800021e 	bne	r17,zero,6694 <___vfprintf_internal_r+0x13c0>
    668c:	00800244 	movi	r2,9
    6690:	14002936 	bltu	r2,r16,6738 <___vfprintf_internal_r+0x1464>
    6694:	d90018c4 	addi	r4,sp,99
    6698:	dd000f04 	addi	r20,sp,60
    669c:	d9014115 	stw	r4,1284(sp)
    66a0:	d9014117 	ldw	r4,1284(sp)
    66a4:	80800c04 	addi	r2,r16,48
    66a8:	20800005 	stb	r2,0(r4)
    66ac:	003da406 	br	5d40 <___vfprintf_internal_r+0xa6c>
    66b0:	dc400d17 	ldw	r17,52(sp)
    66b4:	07000074 	movhi	fp,1
    66b8:	e73e5084 	addi	fp,fp,-1726
    66bc:	9425883a 	add	r18,r18,r16
    66c0:	8c400044 	addi	r17,r17,1
    66c4:	008001c4 	movi	r2,7
    66c8:	1f000015 	stw	fp,0(r3)
    66cc:	1c000115 	stw	r16,4(r3)
    66d0:	dc800e15 	stw	r18,56(sp)
    66d4:	dc400d15 	stw	r17,52(sp)
    66d8:	147de216 	blt	r2,r17,5e64 <___vfprintf_internal_r+0xb90>
    66dc:	18c00204 	addi	r3,r3,8
    66e0:	003c7a06 	br	58cc <___vfprintf_internal_r+0x5f8>
    66e4:	01000084 	movi	r4,2
    66e8:	d8000405 	stb	zero,16(sp)
    66ec:	003d8706 	br	5d0c <___vfprintf_internal_r+0xa38>
    66f0:	d9814c17 	ldw	r6,1328(sp)
    66f4:	30c4703a 	and	r2,r6,r3
    66f8:	1005003a 	cmpeq	r2,r2,zero
    66fc:	103cb926 	beq	r2,zero,59e4 <___vfprintf_internal_r+0x710>
    6700:	d9014117 	ldw	r4,1284(sp)
    6704:	94800044 	addi	r18,r18,1
    6708:	8c400044 	addi	r17,r17,1
    670c:	008001c4 	movi	r2,7
    6710:	a9000015 	stw	r4,0(r21)
    6714:	a8c00115 	stw	r3,4(r21)
    6718:	dc800e15 	stw	r18,56(sp)
    671c:	dc400d15 	stw	r17,52(sp)
    6720:	147e6616 	blt	r2,r17,60bc <___vfprintf_internal_r+0xde8>
    6724:	acc00204 	addi	r19,r21,8
    6728:	003cd706 	br	5a88 <___vfprintf_internal_r+0x7b4>
    672c:	07000074 	movhi	fp,1
    6730:	e73e5084 	addi	fp,fp,-1726
    6734:	003c4f06 	br	5874 <___vfprintf_internal_r+0x5a0>
    6738:	dd000f04 	addi	r20,sp,60
    673c:	dc801904 	addi	r18,sp,100
    6740:	8009883a 	mov	r4,r16
    6744:	880b883a 	mov	r5,r17
    6748:	01800284 	movi	r6,10
    674c:	000f883a 	mov	r7,zero
    6750:	000c1ec0 	call	c1ec <__umoddi3>
    6754:	12000c04 	addi	r8,r2,48
    6758:	94bfffc4 	addi	r18,r18,-1
    675c:	8009883a 	mov	r4,r16
    6760:	880b883a 	mov	r5,r17
    6764:	01800284 	movi	r6,10
    6768:	000f883a 	mov	r7,zero
    676c:	92000005 	stb	r8,0(r18)
    6770:	000bc100 	call	bc10 <__udivdi3>
    6774:	1009883a 	mov	r4,r2
    6778:	1021883a 	mov	r16,r2
    677c:	18800068 	cmpgeui	r2,r3,1
    6780:	1823883a 	mov	r17,r3
    6784:	103fee1e 	bne	r2,zero,6740 <___vfprintf_internal_r+0x146c>
    6788:	1800021e 	bne	r3,zero,6794 <___vfprintf_internal_r+0x14c0>
    678c:	00800244 	movi	r2,9
    6790:	113feb36 	bltu	r2,r4,6740 <___vfprintf_internal_r+0x146c>
    6794:	94bfffc4 	addi	r18,r18,-1
    6798:	dc814115 	stw	r18,1284(sp)
    679c:	003fc006 	br	66a0 <___vfprintf_internal_r+0x13cc>
    67a0:	d9014c17 	ldw	r4,1328(sp)
    67a4:	2080004c 	andi	r2,r4,1
    67a8:	10009a1e 	bne	r2,zero,6a14 <___vfprintf_internal_r+0x1740>
    67ac:	d9401904 	addi	r5,sp,100
    67b0:	dd000f04 	addi	r20,sp,60
    67b4:	d9414115 	stw	r5,1284(sp)
    67b8:	003d6106 	br	5d40 <___vfprintf_internal_r+0xa6c>
    67bc:	d9014f17 	ldw	r4,1340(sp)
    67c0:	b00b883a 	mov	r5,r22
    67c4:	d9800c04 	addi	r6,sp,48
    67c8:	000527c0 	call	527c <__sprint_r>
    67cc:	103c791e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    67d0:	dc800e17 	ldw	r18,56(sp)
    67d4:	d8c01904 	addi	r3,sp,100
    67d8:	003cff06 	br	5bd8 <___vfprintf_internal_r+0x904>
    67dc:	d8c14c17 	ldw	r3,1328(sp)
    67e0:	1880040c 	andi	r2,r3,16
    67e4:	1000711e 	bne	r2,zero,69ac <___vfprintf_internal_r+0x16d8>
    67e8:	d9014c17 	ldw	r4,1328(sp)
    67ec:	2080100c 	andi	r2,r4,64
    67f0:	10006e26 	beq	r2,zero,69ac <___vfprintf_internal_r+0x16d8>
    67f4:	3c00000b 	ldhu	r16,0(r7)
    67f8:	0023883a 	mov	r17,zero
    67fc:	39c00104 	addi	r7,r7,4
    6800:	d9c14015 	stw	r7,1280(sp)
    6804:	003f0006 	br	6408 <___vfprintf_internal_r+0x1134>
    6808:	dc400d17 	ldw	r17,52(sp)
    680c:	07000074 	movhi	fp,1
    6810:	e73e5084 	addi	fp,fp,-1726
    6814:	9425883a 	add	r18,r18,r16
    6818:	8c400044 	addi	r17,r17,1
    681c:	008001c4 	movi	r2,7
    6820:	1f000015 	stw	fp,0(r3)
    6824:	1c000115 	stw	r16,4(r3)
    6828:	dc800e15 	stw	r18,56(sp)
    682c:	dc400d15 	stw	r17,52(sp)
    6830:	147d7616 	blt	r2,r17,5e0c <___vfprintf_internal_r+0xb38>
    6834:	18c00204 	addi	r3,r3,8
    6838:	003d7b06 	br	5e28 <___vfprintf_internal_r+0xb54>
    683c:	dc800e17 	ldw	r18,56(sp)
    6840:	dc400d17 	ldw	r17,52(sp)
    6844:	07000074 	movhi	fp,1
    6848:	e73e5484 	addi	fp,fp,-1710
    684c:	003bc006 	br	5750 <___vfprintf_internal_r+0x47c>
    6850:	d9014f17 	ldw	r4,1340(sp)
    6854:	b00b883a 	mov	r5,r22
    6858:	d9800c04 	addi	r6,sp,48
    685c:	000527c0 	call	527c <__sprint_r>
    6860:	103c541e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    6864:	dc800e17 	ldw	r18,56(sp)
    6868:	d8c01904 	addi	r3,sp,100
    686c:	003ce906 	br	5c14 <___vfprintf_internal_r+0x940>
    6870:	3c000017 	ldw	r16,0(r7)
    6874:	0009883a 	mov	r4,zero
    6878:	39c00104 	addi	r7,r7,4
    687c:	0023883a 	mov	r17,zero
    6880:	d9c14015 	stw	r7,1280(sp)
    6884:	d8000405 	stb	zero,16(sp)
    6888:	003d2006 	br	5d0c <___vfprintf_internal_r+0xa38>
    688c:	38800017 	ldw	r2,0(r7)
    6890:	39c00104 	addi	r7,r7,4
    6894:	d9c14015 	stw	r7,1280(sp)
    6898:	1023d7fa 	srai	r17,r2,31
    689c:	1021883a 	mov	r16,r2
    68a0:	003d1806 	br	5d04 <___vfprintf_internal_r+0xa30>
    68a4:	3c000017 	ldw	r16,0(r7)
    68a8:	01000044 	movi	r4,1
    68ac:	39c00104 	addi	r7,r7,4
    68b0:	0023883a 	mov	r17,zero
    68b4:	d9c14015 	stw	r7,1280(sp)
    68b8:	d8000405 	stb	zero,16(sp)
    68bc:	003d1306 	br	5d0c <___vfprintf_internal_r+0xa38>
    68c0:	00800074 	movhi	r2,1
    68c4:	10bdf104 	addi	r2,r2,-2108
    68c8:	94800044 	addi	r18,r18,1
    68cc:	8c400044 	addi	r17,r17,1
    68d0:	a8800015 	stw	r2,0(r21)
    68d4:	00c00044 	movi	r3,1
    68d8:	008001c4 	movi	r2,7
    68dc:	a8c00115 	stw	r3,4(r21)
    68e0:	dc800e15 	stw	r18,56(sp)
    68e4:	dc400d15 	stw	r17,52(sp)
    68e8:	1440ca16 	blt	r2,r17,6c14 <___vfprintf_internal_r+0x1940>
    68ec:	a8c00204 	addi	r3,r21,8
    68f0:	2000061e 	bne	r4,zero,690c <___vfprintf_internal_r+0x1638>
    68f4:	d9414717 	ldw	r5,1308(sp)
    68f8:	2800041e 	bne	r5,zero,690c <___vfprintf_internal_r+0x1638>
    68fc:	d9814c17 	ldw	r6,1328(sp)
    6900:	3080004c 	andi	r2,r6,1
    6904:	1005003a 	cmpeq	r2,r2,zero
    6908:	103bf01e 	bne	r2,zero,58cc <___vfprintf_internal_r+0x5f8>
    690c:	00800044 	movi	r2,1
    6910:	dc400d17 	ldw	r17,52(sp)
    6914:	18800115 	stw	r2,4(r3)
    6918:	d8814917 	ldw	r2,1316(sp)
    691c:	94800044 	addi	r18,r18,1
    6920:	8c400044 	addi	r17,r17,1
    6924:	18800015 	stw	r2,0(r3)
    6928:	008001c4 	movi	r2,7
    692c:	dc800e15 	stw	r18,56(sp)
    6930:	dc400d15 	stw	r17,52(sp)
    6934:	1440ca16 	blt	r2,r17,6c60 <___vfprintf_internal_r+0x198c>
    6938:	18c00204 	addi	r3,r3,8
    693c:	0121c83a 	sub	r16,zero,r4
    6940:	0400500e 	bge	zero,r16,6a84 <___vfprintf_internal_r+0x17b0>
    6944:	00800404 	movi	r2,16
    6948:	1400800e 	bge	r2,r16,6b4c <___vfprintf_internal_r+0x1878>
    694c:	1027883a 	mov	r19,r2
    6950:	07000074 	movhi	fp,1
    6954:	e73e5084 	addi	fp,fp,-1726
    6958:	050001c4 	movi	r20,7
    695c:	00000306 	br	696c <___vfprintf_internal_r+0x1698>
    6960:	18c00204 	addi	r3,r3,8
    6964:	843ffc04 	addi	r16,r16,-16
    6968:	9c007a0e 	bge	r19,r16,6b54 <___vfprintf_internal_r+0x1880>
    696c:	94800404 	addi	r18,r18,16
    6970:	8c400044 	addi	r17,r17,1
    6974:	1f000015 	stw	fp,0(r3)
    6978:	1cc00115 	stw	r19,4(r3)
    697c:	dc800e15 	stw	r18,56(sp)
    6980:	dc400d15 	stw	r17,52(sp)
    6984:	a47ff60e 	bge	r20,r17,6960 <___vfprintf_internal_r+0x168c>
    6988:	d9014f17 	ldw	r4,1340(sp)
    698c:	b00b883a 	mov	r5,r22
    6990:	d9800c04 	addi	r6,sp,48
    6994:	000527c0 	call	527c <__sprint_r>
    6998:	103c061e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    699c:	dc800e17 	ldw	r18,56(sp)
    69a0:	dc400d17 	ldw	r17,52(sp)
    69a4:	d8c01904 	addi	r3,sp,100
    69a8:	003fee06 	br	6964 <___vfprintf_internal_r+0x1690>
    69ac:	3c000017 	ldw	r16,0(r7)
    69b0:	0023883a 	mov	r17,zero
    69b4:	39c00104 	addi	r7,r7,4
    69b8:	d9c14015 	stw	r7,1280(sp)
    69bc:	003e9206 	br	6408 <___vfprintf_internal_r+0x1134>
    69c0:	d9401904 	addi	r5,sp,100
    69c4:	dd000f04 	addi	r20,sp,60
    69c8:	d9414115 	stw	r5,1284(sp)
    69cc:	d9814417 	ldw	r6,1296(sp)
    69d0:	880a973a 	slli	r5,r17,28
    69d4:	8004d13a 	srli	r2,r16,4
    69d8:	810003cc 	andi	r4,r16,15
    69dc:	3109883a 	add	r4,r6,r4
    69e0:	2884b03a 	or	r2,r5,r2
    69e4:	21400003 	ldbu	r5,0(r4)
    69e8:	d9014117 	ldw	r4,1284(sp)
    69ec:	8806d13a 	srli	r3,r17,4
    69f0:	1021883a 	mov	r16,r2
    69f4:	213fffc4 	addi	r4,r4,-1
    69f8:	d9014115 	stw	r4,1284(sp)
    69fc:	d9814117 	ldw	r6,1284(sp)
    6a00:	10c8b03a 	or	r4,r2,r3
    6a04:	1823883a 	mov	r17,r3
    6a08:	31400005 	stb	r5,0(r6)
    6a0c:	203fef1e 	bne	r4,zero,69cc <___vfprintf_internal_r+0x16f8>
    6a10:	003ccb06 	br	5d40 <___vfprintf_internal_r+0xa6c>
    6a14:	00800c04 	movi	r2,48
    6a18:	d98018c4 	addi	r6,sp,99
    6a1c:	dd000f04 	addi	r20,sp,60
    6a20:	d88018c5 	stb	r2,99(sp)
    6a24:	d9814115 	stw	r6,1284(sp)
    6a28:	003cc506 	br	5d40 <___vfprintf_internal_r+0xa6c>
    6a2c:	dc400d17 	ldw	r17,52(sp)
    6a30:	07000074 	movhi	fp,1
    6a34:	e73e5484 	addi	fp,fp,-1710
    6a38:	003bc706 	br	5958 <___vfprintf_internal_r+0x684>
    6a3c:	d9414c17 	ldw	r5,1328(sp)
    6a40:	2880040c 	andi	r2,r5,16
    6a44:	10007c26 	beq	r2,zero,6c38 <___vfprintf_internal_r+0x1964>
    6a48:	38800017 	ldw	r2,0(r7)
    6a4c:	39c00104 	addi	r7,r7,4
    6a50:	d9c14015 	stw	r7,1280(sp)
    6a54:	d9814b17 	ldw	r6,1324(sp)
    6a58:	d9c14017 	ldw	r7,1280(sp)
    6a5c:	11800015 	stw	r6,0(r2)
    6a60:	003a7806 	br	5444 <___vfprintf_internal_r+0x170>
    6a64:	d9014f17 	ldw	r4,1340(sp)
    6a68:	b00b883a 	mov	r5,r22
    6a6c:	d9800c04 	addi	r6,sp,48
    6a70:	000527c0 	call	527c <__sprint_r>
    6a74:	103bcf1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    6a78:	dc800e17 	ldw	r18,56(sp)
    6a7c:	dc400d17 	ldw	r17,52(sp)
    6a80:	d8c01904 	addi	r3,sp,100
    6a84:	d9014717 	ldw	r4,1308(sp)
    6a88:	d9414117 	ldw	r5,1284(sp)
    6a8c:	8c400044 	addi	r17,r17,1
    6a90:	9125883a 	add	r18,r18,r4
    6a94:	008001c4 	movi	r2,7
    6a98:	19400015 	stw	r5,0(r3)
    6a9c:	19000115 	stw	r4,4(r3)
    6aa0:	dc800e15 	stw	r18,56(sp)
    6aa4:	dc400d15 	stw	r17,52(sp)
    6aa8:	147cee16 	blt	r2,r17,5e64 <___vfprintf_internal_r+0xb90>
    6aac:	18c00204 	addi	r3,r3,8
    6ab0:	003b8606 	br	58cc <___vfprintf_internal_r+0x5f8>
    6ab4:	38c00017 	ldw	r3,0(r7)
    6ab8:	39000204 	addi	r4,r7,8
    6abc:	d9014015 	stw	r4,1280(sp)
    6ac0:	d8c14215 	stw	r3,1288(sp)
    6ac4:	39c00117 	ldw	r7,4(r7)
    6ac8:	d9c14315 	stw	r7,1292(sp)
    6acc:	003e2006 	br	6350 <___vfprintf_internal_r+0x107c>
    6ad0:	0005883a 	mov	r2,zero
    6ad4:	1409c83a 	sub	r4,r2,r16
    6ad8:	1105803a 	cmpltu	r2,r2,r4
    6adc:	044bc83a 	sub	r5,zero,r17
    6ae0:	2885c83a 	sub	r2,r5,r2
    6ae4:	2021883a 	mov	r16,r4
    6ae8:	1023883a 	mov	r17,r2
    6aec:	01000044 	movi	r4,1
    6af0:	00800b44 	movi	r2,45
    6af4:	d8800405 	stb	r2,16(sp)
    6af8:	003c8406 	br	5d0c <___vfprintf_internal_r+0xa38>
    6afc:	d9014f17 	ldw	r4,1340(sp)
    6b00:	b00b883a 	mov	r5,r22
    6b04:	d9800c04 	addi	r6,sp,48
    6b08:	000527c0 	call	527c <__sprint_r>
    6b0c:	103ba91e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    6b10:	dc800e17 	ldw	r18,56(sp)
    6b14:	dc400d17 	ldw	r17,52(sp)
    6b18:	d9000517 	ldw	r4,20(sp)
    6b1c:	d9401904 	addi	r5,sp,100
    6b20:	003da706 	br	61c0 <___vfprintf_internal_r+0xeec>
    6b24:	d9014f17 	ldw	r4,1340(sp)
    6b28:	b00b883a 	mov	r5,r22
    6b2c:	d9800c04 	addi	r6,sp,48
    6b30:	000527c0 	call	527c <__sprint_r>
    6b34:	103b9f1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    6b38:	dc800e17 	ldw	r18,56(sp)
    6b3c:	dc400d17 	ldw	r17,52(sp)
    6b40:	d9000517 	ldw	r4,20(sp)
    6b44:	d8c01904 	addi	r3,sp,100
    6b48:	003d9106 	br	6190 <___vfprintf_internal_r+0xebc>
    6b4c:	07000074 	movhi	fp,1
    6b50:	e73e5084 	addi	fp,fp,-1726
    6b54:	9425883a 	add	r18,r18,r16
    6b58:	8c400044 	addi	r17,r17,1
    6b5c:	008001c4 	movi	r2,7
    6b60:	1f000015 	stw	fp,0(r3)
    6b64:	1c000115 	stw	r16,4(r3)
    6b68:	dc800e15 	stw	r18,56(sp)
    6b6c:	dc400d15 	stw	r17,52(sp)
    6b70:	147fbc16 	blt	r2,r17,6a64 <___vfprintf_internal_r+0x1790>
    6b74:	18c00204 	addi	r3,r3,8
    6b78:	003fc206 	br	6a84 <___vfprintf_internal_r+0x17b0>
    6b7c:	d9014f17 	ldw	r4,1340(sp)
    6b80:	b00b883a 	mov	r5,r22
    6b84:	d9800c04 	addi	r6,sp,48
    6b88:	000527c0 	call	527c <__sprint_r>
    6b8c:	103b891e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    6b90:	dc800e17 	ldw	r18,56(sp)
    6b94:	d9000517 	ldw	r4,20(sp)
    6b98:	d8c01904 	addi	r3,sp,100
    6b9c:	003d0206 	br	5fa8 <___vfprintf_internal_r+0xcd4>
    6ba0:	07000074 	movhi	fp,1
    6ba4:	e73e5084 	addi	fp,fp,-1726
    6ba8:	003be406 	br	5b3c <___vfprintf_internal_r+0x868>
    6bac:	00800074 	movhi	r2,1
    6bb0:	10be4004 	addi	r2,r2,-1792
    6bb4:	d8814115 	stw	r2,1284(sp)
    6bb8:	003df506 	br	6390 <___vfprintf_internal_r+0x10bc>
    6bbc:	d9014217 	ldw	r4,1288(sp)
    6bc0:	d9414317 	ldw	r5,1292(sp)
    6bc4:	00029040 	call	2904 <__isnand>
    6bc8:	10003926 	beq	r2,zero,6cb0 <___vfprintf_internal_r+0x19dc>
    6bcc:	d9414d17 	ldw	r5,1332(sp)
    6bd0:	008011c4 	movi	r2,71
    6bd4:	1140ce16 	blt	r2,r5,6f10 <___vfprintf_internal_r+0x1c3c>
    6bd8:	01800074 	movhi	r6,1
    6bdc:	31be4104 	addi	r6,r6,-1788
    6be0:	d9814115 	stw	r6,1284(sp)
    6be4:	003dea06 	br	6390 <___vfprintf_internal_r+0x10bc>
    6be8:	d9014c17 	ldw	r4,1328(sp)
    6bec:	bdc00044 	addi	r23,r23,1
    6bf0:	b8c00007 	ldb	r3,0(r23)
    6bf4:	21000814 	ori	r4,r4,32
    6bf8:	d9014c15 	stw	r4,1328(sp)
    6bfc:	003a3406 	br	54d0 <___vfprintf_internal_r+0x1fc>
    6c00:	dcc14515 	stw	r19,1300(sp)
    6c04:	98011016 	blt	r19,zero,7048 <___vfprintf_internal_r+0x1d74>
    6c08:	980f883a 	mov	r7,r19
    6c0c:	d8014615 	stw	zero,1304(sp)
    6c10:	003c5206 	br	5d5c <___vfprintf_internal_r+0xa88>
    6c14:	d9014f17 	ldw	r4,1340(sp)
    6c18:	b00b883a 	mov	r5,r22
    6c1c:	d9800c04 	addi	r6,sp,48
    6c20:	000527c0 	call	527c <__sprint_r>
    6c24:	103b631e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    6c28:	dc800e17 	ldw	r18,56(sp)
    6c2c:	d9000517 	ldw	r4,20(sp)
    6c30:	d8c01904 	addi	r3,sp,100
    6c34:	003f2e06 	br	68f0 <___vfprintf_internal_r+0x161c>
    6c38:	d8c14c17 	ldw	r3,1328(sp)
    6c3c:	1880100c 	andi	r2,r3,64
    6c40:	1000a026 	beq	r2,zero,6ec4 <___vfprintf_internal_r+0x1bf0>
    6c44:	38800017 	ldw	r2,0(r7)
    6c48:	39c00104 	addi	r7,r7,4
    6c4c:	d9c14015 	stw	r7,1280(sp)
    6c50:	d9014b17 	ldw	r4,1324(sp)
    6c54:	d9c14017 	ldw	r7,1280(sp)
    6c58:	1100000d 	sth	r4,0(r2)
    6c5c:	0039f906 	br	5444 <___vfprintf_internal_r+0x170>
    6c60:	d9014f17 	ldw	r4,1340(sp)
    6c64:	b00b883a 	mov	r5,r22
    6c68:	d9800c04 	addi	r6,sp,48
    6c6c:	000527c0 	call	527c <__sprint_r>
    6c70:	103b501e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    6c74:	dc800e17 	ldw	r18,56(sp)
    6c78:	dc400d17 	ldw	r17,52(sp)
    6c7c:	d9000517 	ldw	r4,20(sp)
    6c80:	d8c01904 	addi	r3,sp,100
    6c84:	003f2d06 	br	693c <___vfprintf_internal_r+0x1668>
    6c88:	00800184 	movi	r2,6
    6c8c:	14c09a36 	bltu	r2,r19,6ef8 <___vfprintf_internal_r+0x1c24>
    6c90:	dcc14515 	stw	r19,1300(sp)
    6c94:	9800010e 	bge	r19,zero,6c9c <___vfprintf_internal_r+0x19c8>
    6c98:	d8014515 	stw	zero,1300(sp)
    6c9c:	00800074 	movhi	r2,1
    6ca0:	10be4304 	addi	r2,r2,-1780
    6ca4:	980f883a 	mov	r7,r19
    6ca8:	d8814115 	stw	r2,1284(sp)
    6cac:	003a7806 	br	5690 <___vfprintf_internal_r+0x3bc>
    6cb0:	00bfffc4 	movi	r2,-1
    6cb4:	9880e226 	beq	r19,r2,7040 <___vfprintf_internal_r+0x1d6c>
    6cb8:	d9414d17 	ldw	r5,1332(sp)
    6cbc:	008019c4 	movi	r2,103
    6cc0:	2880dc26 	beq	r5,r2,7034 <___vfprintf_internal_r+0x1d60>
    6cc4:	008011c4 	movi	r2,71
    6cc8:	2880da26 	beq	r5,r2,7034 <___vfprintf_internal_r+0x1d60>
    6ccc:	d9414c17 	ldw	r5,1328(sp)
    6cd0:	d9014317 	ldw	r4,1292(sp)
    6cd4:	d9814217 	ldw	r6,1288(sp)
    6cd8:	29404014 	ori	r5,r5,256
    6cdc:	d9414c15 	stw	r5,1328(sp)
    6ce0:	2000cc16 	blt	r4,zero,7014 <___vfprintf_internal_r+0x1d40>
    6ce4:	3021883a 	mov	r16,r6
    6ce8:	2023883a 	mov	r17,r4
    6cec:	0039883a 	mov	fp,zero
    6cf0:	d9414d17 	ldw	r5,1332(sp)
    6cf4:	00801984 	movi	r2,102
    6cf8:	2880b726 	beq	r5,r2,6fd8 <___vfprintf_internal_r+0x1d04>
    6cfc:	00801184 	movi	r2,70
    6d00:	2880b526 	beq	r5,r2,6fd8 <___vfprintf_internal_r+0x1d04>
    6d04:	00801944 	movi	r2,101
    6d08:	2880c826 	beq	r5,r2,702c <___vfprintf_internal_r+0x1d58>
    6d0c:	00801144 	movi	r2,69
    6d10:	2880c626 	beq	r5,r2,702c <___vfprintf_internal_r+0x1d58>
    6d14:	9829883a 	mov	r20,r19
    6d18:	d9014f17 	ldw	r4,1340(sp)
    6d1c:	d8800504 	addi	r2,sp,20
    6d20:	880d883a 	mov	r6,r17
    6d24:	d8800115 	stw	r2,4(sp)
    6d28:	d8c00604 	addi	r3,sp,24
    6d2c:	d8800704 	addi	r2,sp,28
    6d30:	800b883a 	mov	r5,r16
    6d34:	01c00084 	movi	r7,2
    6d38:	d8c00215 	stw	r3,8(sp)
    6d3c:	d8800315 	stw	r2,12(sp)
    6d40:	dd000015 	stw	r20,0(sp)
    6d44:	00074f80 	call	74f8 <_dtoa_r>
    6d48:	d9814d17 	ldw	r6,1332(sp)
    6d4c:	d8814115 	stw	r2,1284(sp)
    6d50:	008019c4 	movi	r2,103
    6d54:	30809526 	beq	r6,r2,6fac <___vfprintf_internal_r+0x1cd8>
    6d58:	d8c14d17 	ldw	r3,1332(sp)
    6d5c:	008011c4 	movi	r2,71
    6d60:	18809226 	beq	r3,r2,6fac <___vfprintf_internal_r+0x1cd8>
    6d64:	d9414117 	ldw	r5,1284(sp)
    6d68:	d9814d17 	ldw	r6,1332(sp)
    6d6c:	00801984 	movi	r2,102
    6d70:	2d25883a 	add	r18,r5,r20
    6d74:	30808626 	beq	r6,r2,6f90 <___vfprintf_internal_r+0x1cbc>
    6d78:	00801184 	movi	r2,70
    6d7c:	30808426 	beq	r6,r2,6f90 <___vfprintf_internal_r+0x1cbc>
    6d80:	000d883a 	mov	r6,zero
    6d84:	000f883a 	mov	r7,zero
    6d88:	880b883a 	mov	r5,r17
    6d8c:	8009883a 	mov	r4,r16
    6d90:	0003cb80 	call	3cb8 <__eqdf2>
    6d94:	1000751e 	bne	r2,zero,6f6c <___vfprintf_internal_r+0x1c98>
    6d98:	9005883a 	mov	r2,r18
    6d9c:	dc800715 	stw	r18,28(sp)
    6da0:	d9014117 	ldw	r4,1284(sp)
    6da4:	d9414d17 	ldw	r5,1332(sp)
    6da8:	00c019c4 	movi	r3,103
    6dac:	1125c83a 	sub	r18,r2,r4
    6db0:	28c06826 	beq	r5,r3,6f54 <___vfprintf_internal_r+0x1c80>
    6db4:	008011c4 	movi	r2,71
    6db8:	28806626 	beq	r5,r2,6f54 <___vfprintf_internal_r+0x1c80>
    6dbc:	d9000517 	ldw	r4,20(sp)
    6dc0:	d8c14d17 	ldw	r3,1332(sp)
    6dc4:	00801944 	movi	r2,101
    6dc8:	10c05516 	blt	r2,r3,6f20 <___vfprintf_internal_r+0x1c4c>
    6dcc:	213fffc4 	addi	r4,r4,-1
    6dd0:	d9000515 	stw	r4,20(sp)
    6dd4:	d8c00805 	stb	r3,32(sp)
    6dd8:	2021883a 	mov	r16,r4
    6ddc:	2000c116 	blt	r4,zero,70e4 <___vfprintf_internal_r+0x1e10>
    6de0:	00800ac4 	movi	r2,43
    6de4:	d8800845 	stb	r2,33(sp)
    6de8:	00800244 	movi	r2,9
    6dec:	1400af0e 	bge	r2,r16,70ac <___vfprintf_internal_r+0x1dd8>
    6df0:	1027883a 	mov	r19,r2
    6df4:	dc400b84 	addi	r17,sp,46
    6df8:	8009883a 	mov	r4,r16
    6dfc:	01400284 	movi	r5,10
    6e00:	000cb6c0 	call	cb6c <__modsi3>
    6e04:	10800c04 	addi	r2,r2,48
    6e08:	8c7fffc4 	addi	r17,r17,-1
    6e0c:	8009883a 	mov	r4,r16
    6e10:	01400284 	movi	r5,10
    6e14:	88800005 	stb	r2,0(r17)
    6e18:	000cb0c0 	call	cb0c <__divsi3>
    6e1c:	1021883a 	mov	r16,r2
    6e20:	98bff516 	blt	r19,r2,6df8 <___vfprintf_internal_r+0x1b24>
    6e24:	10c00c04 	addi	r3,r2,48
    6e28:	d88009c4 	addi	r2,sp,39
    6e2c:	108001c4 	addi	r2,r2,7
    6e30:	897fffc4 	addi	r5,r17,-1
    6e34:	88ffffc5 	stb	r3,-1(r17)
    6e38:	2880a72e 	bgeu	r5,r2,70d8 <___vfprintf_internal_r+0x1e04>
    6e3c:	1009883a 	mov	r4,r2
    6e40:	d9800804 	addi	r6,sp,32
    6e44:	d8c00884 	addi	r3,sp,34
    6e48:	28800003 	ldbu	r2,0(r5)
    6e4c:	29400044 	addi	r5,r5,1
    6e50:	18800005 	stb	r2,0(r3)
    6e54:	18c00044 	addi	r3,r3,1
    6e58:	293ffb36 	bltu	r5,r4,6e48 <___vfprintf_internal_r+0x1b74>
    6e5c:	1987c83a 	sub	r3,r3,r6
    6e60:	00800044 	movi	r2,1
    6e64:	d8c14815 	stw	r3,1312(sp)
    6e68:	90cf883a 	add	r7,r18,r3
    6e6c:	1480960e 	bge	r2,r18,70c8 <___vfprintf_internal_r+0x1df4>
    6e70:	39c00044 	addi	r7,r7,1
    6e74:	d9c14515 	stw	r7,1300(sp)
    6e78:	38003416 	blt	r7,zero,6f4c <___vfprintf_internal_r+0x1c78>
    6e7c:	e0803fcc 	andi	r2,fp,255
    6e80:	1080201c 	xori	r2,r2,128
    6e84:	10bfe004 	addi	r2,r2,-128
    6e88:	10004e26 	beq	r2,zero,6fc4 <___vfprintf_internal_r+0x1cf0>
    6e8c:	00800b44 	movi	r2,45
    6e90:	dc814715 	stw	r18,1308(sp)
    6e94:	d8014615 	stw	zero,1304(sp)
    6e98:	d8800405 	stb	r2,16(sp)
    6e9c:	003bb106 	br	5d64 <___vfprintf_internal_r+0xa90>
    6ea0:	00800b44 	movi	r2,45
    6ea4:	d8800405 	stb	r2,16(sp)
    6ea8:	003d3306 	br	6378 <___vfprintf_internal_r+0x10a4>
    6eac:	d9014f17 	ldw	r4,1340(sp)
    6eb0:	b00b883a 	mov	r5,r22
    6eb4:	d9800c04 	addi	r6,sp,48
    6eb8:	000527c0 	call	527c <__sprint_r>
    6ebc:	103abd1e 	bne	r2,zero,59b4 <___vfprintf_internal_r+0x6e0>
    6ec0:	003abb06 	br	59b0 <___vfprintf_internal_r+0x6dc>
    6ec4:	38800017 	ldw	r2,0(r7)
    6ec8:	39c00104 	addi	r7,r7,4
    6ecc:	d9c14015 	stw	r7,1280(sp)
    6ed0:	d9414b17 	ldw	r5,1324(sp)
    6ed4:	d9c14017 	ldw	r7,1280(sp)
    6ed8:	11400015 	stw	r5,0(r2)
    6edc:	00395906 	br	5444 <___vfprintf_internal_r+0x170>
    6ee0:	980f883a 	mov	r7,r19
    6ee4:	dcc14515 	stw	r19,1300(sp)
    6ee8:	d8014615 	stw	zero,1304(sp)
    6eec:	003b9b06 	br	5d5c <___vfprintf_internal_r+0xa88>
    6ef0:	0027883a 	mov	r19,zero
    6ef4:	00397806 	br	54d8 <___vfprintf_internal_r+0x204>
    6ef8:	00c00074 	movhi	r3,1
    6efc:	18fe4304 	addi	r3,r3,-1780
    6f00:	100f883a 	mov	r7,r2
    6f04:	d8814515 	stw	r2,1300(sp)
    6f08:	d8c14115 	stw	r3,1284(sp)
    6f0c:	0039e006 	br	5690 <___vfprintf_internal_r+0x3bc>
    6f10:	00800074 	movhi	r2,1
    6f14:	10be4204 	addi	r2,r2,-1784
    6f18:	d8814115 	stw	r2,1284(sp)
    6f1c:	003d1c06 	br	6390 <___vfprintf_internal_r+0x10bc>
    6f20:	d9414d17 	ldw	r5,1332(sp)
    6f24:	00801984 	movi	r2,102
    6f28:	28804926 	beq	r5,r2,7050 <___vfprintf_internal_r+0x1d7c>
    6f2c:	200f883a 	mov	r7,r4
    6f30:	24805716 	blt	r4,r18,7090 <___vfprintf_internal_r+0x1dbc>
    6f34:	d9414c17 	ldw	r5,1328(sp)
    6f38:	2880004c 	andi	r2,r5,1
    6f3c:	10000126 	beq	r2,zero,6f44 <___vfprintf_internal_r+0x1c70>
    6f40:	21c00044 	addi	r7,r4,1
    6f44:	d9c14515 	stw	r7,1300(sp)
    6f48:	383fcc0e 	bge	r7,zero,6e7c <___vfprintf_internal_r+0x1ba8>
    6f4c:	d8014515 	stw	zero,1300(sp)
    6f50:	003fca06 	br	6e7c <___vfprintf_internal_r+0x1ba8>
    6f54:	d9000517 	ldw	r4,20(sp)
    6f58:	00bfff04 	movi	r2,-4
    6f5c:	1100480e 	bge	r2,r4,7080 <___vfprintf_internal_r+0x1dac>
    6f60:	99004716 	blt	r19,r4,7080 <___vfprintf_internal_r+0x1dac>
    6f64:	d8c14d15 	stw	r3,1332(sp)
    6f68:	003ff006 	br	6f2c <___vfprintf_internal_r+0x1c58>
    6f6c:	d8800717 	ldw	r2,28(sp)
    6f70:	14bf8b2e 	bgeu	r2,r18,6da0 <___vfprintf_internal_r+0x1acc>
    6f74:	9007883a 	mov	r3,r18
    6f78:	01000c04 	movi	r4,48
    6f7c:	11000005 	stb	r4,0(r2)
    6f80:	10800044 	addi	r2,r2,1
    6f84:	d8800715 	stw	r2,28(sp)
    6f88:	18bffc1e 	bne	r3,r2,6f7c <___vfprintf_internal_r+0x1ca8>
    6f8c:	003f8406 	br	6da0 <___vfprintf_internal_r+0x1acc>
    6f90:	d8814117 	ldw	r2,1284(sp)
    6f94:	10c00007 	ldb	r3,0(r2)
    6f98:	00800c04 	movi	r2,48
    6f9c:	18805b26 	beq	r3,r2,710c <___vfprintf_internal_r+0x1e38>
    6fa0:	d9000517 	ldw	r4,20(sp)
    6fa4:	9125883a 	add	r18,r18,r4
    6fa8:	003f7506 	br	6d80 <___vfprintf_internal_r+0x1aac>
    6fac:	d9014c17 	ldw	r4,1328(sp)
    6fb0:	2080004c 	andi	r2,r4,1
    6fb4:	1005003a 	cmpeq	r2,r2,zero
    6fb8:	103f6a26 	beq	r2,zero,6d64 <___vfprintf_internal_r+0x1a90>
    6fbc:	d8800717 	ldw	r2,28(sp)
    6fc0:	003f7706 	br	6da0 <___vfprintf_internal_r+0x1acc>
    6fc4:	d9c14515 	stw	r7,1300(sp)
    6fc8:	38004d16 	blt	r7,zero,7100 <___vfprintf_internal_r+0x1e2c>
    6fcc:	dc814715 	stw	r18,1308(sp)
    6fd0:	d8014615 	stw	zero,1304(sp)
    6fd4:	003b6106 	br	5d5c <___vfprintf_internal_r+0xa88>
    6fd8:	d9014f17 	ldw	r4,1340(sp)
    6fdc:	d8800504 	addi	r2,sp,20
    6fe0:	d8800115 	stw	r2,4(sp)
    6fe4:	d8c00604 	addi	r3,sp,24
    6fe8:	d8800704 	addi	r2,sp,28
    6fec:	800b883a 	mov	r5,r16
    6ff0:	880d883a 	mov	r6,r17
    6ff4:	01c000c4 	movi	r7,3
    6ff8:	d8c00215 	stw	r3,8(sp)
    6ffc:	d8800315 	stw	r2,12(sp)
    7000:	dcc00015 	stw	r19,0(sp)
    7004:	9829883a 	mov	r20,r19
    7008:	00074f80 	call	74f8 <_dtoa_r>
    700c:	d8814115 	stw	r2,1284(sp)
    7010:	003f5106 	br	6d58 <___vfprintf_internal_r+0x1a84>
    7014:	d8c14217 	ldw	r3,1288(sp)
    7018:	d9014317 	ldw	r4,1292(sp)
    701c:	07000b44 	movi	fp,45
    7020:	1821883a 	mov	r16,r3
    7024:	2460003c 	xorhi	r17,r4,32768
    7028:	003f3106 	br	6cf0 <___vfprintf_internal_r+0x1a1c>
    702c:	9d000044 	addi	r20,r19,1
    7030:	003f3906 	br	6d18 <___vfprintf_internal_r+0x1a44>
    7034:	983f251e 	bne	r19,zero,6ccc <___vfprintf_internal_r+0x19f8>
    7038:	04c00044 	movi	r19,1
    703c:	003f2306 	br	6ccc <___vfprintf_internal_r+0x19f8>
    7040:	04c00184 	movi	r19,6
    7044:	003f2106 	br	6ccc <___vfprintf_internal_r+0x19f8>
    7048:	d8014515 	stw	zero,1300(sp)
    704c:	003eee06 	br	6c08 <___vfprintf_internal_r+0x1934>
    7050:	200f883a 	mov	r7,r4
    7054:	0100370e 	bge	zero,r4,7134 <___vfprintf_internal_r+0x1e60>
    7058:	9800031e 	bne	r19,zero,7068 <___vfprintf_internal_r+0x1d94>
    705c:	d9814c17 	ldw	r6,1328(sp)
    7060:	3080004c 	andi	r2,r6,1
    7064:	103fb726 	beq	r2,zero,6f44 <___vfprintf_internal_r+0x1c70>
    7068:	20800044 	addi	r2,r4,1
    706c:	98a7883a 	add	r19,r19,r2
    7070:	dcc14515 	stw	r19,1300(sp)
    7074:	980f883a 	mov	r7,r19
    7078:	983f800e 	bge	r19,zero,6e7c <___vfprintf_internal_r+0x1ba8>
    707c:	003fb306 	br	6f4c <___vfprintf_internal_r+0x1c78>
    7080:	d9814d17 	ldw	r6,1332(sp)
    7084:	31bfff84 	addi	r6,r6,-2
    7088:	d9814d15 	stw	r6,1332(sp)
    708c:	003f4c06 	br	6dc0 <___vfprintf_internal_r+0x1aec>
    7090:	0100180e 	bge	zero,r4,70f4 <___vfprintf_internal_r+0x1e20>
    7094:	00800044 	movi	r2,1
    7098:	1485883a 	add	r2,r2,r18
    709c:	d8814515 	stw	r2,1300(sp)
    70a0:	100f883a 	mov	r7,r2
    70a4:	103f750e 	bge	r2,zero,6e7c <___vfprintf_internal_r+0x1ba8>
    70a8:	003fa806 	br	6f4c <___vfprintf_internal_r+0x1c78>
    70ac:	80c00c04 	addi	r3,r16,48
    70b0:	00800c04 	movi	r2,48
    70b4:	d8c008c5 	stb	r3,35(sp)
    70b8:	d9800804 	addi	r6,sp,32
    70bc:	d8c00904 	addi	r3,sp,36
    70c0:	d8800885 	stb	r2,34(sp)
    70c4:	003f6506 	br	6e5c <___vfprintf_internal_r+0x1b88>
    70c8:	d9014c17 	ldw	r4,1328(sp)
    70cc:	2084703a 	and	r2,r4,r2
    70d0:	103f9c26 	beq	r2,zero,6f44 <___vfprintf_internal_r+0x1c70>
    70d4:	003f6606 	br	6e70 <___vfprintf_internal_r+0x1b9c>
    70d8:	d9800804 	addi	r6,sp,32
    70dc:	d8c00884 	addi	r3,sp,34
    70e0:	003f5e06 	br	6e5c <___vfprintf_internal_r+0x1b88>
    70e4:	00800b44 	movi	r2,45
    70e8:	0121c83a 	sub	r16,zero,r4
    70ec:	d8800845 	stb	r2,33(sp)
    70f0:	003f3d06 	br	6de8 <___vfprintf_internal_r+0x1b14>
    70f4:	00800084 	movi	r2,2
    70f8:	1105c83a 	sub	r2,r2,r4
    70fc:	003fe606 	br	7098 <___vfprintf_internal_r+0x1dc4>
    7100:	d8014515 	stw	zero,1300(sp)
    7104:	dc814715 	stw	r18,1308(sp)
    7108:	003fb106 	br	6fd0 <___vfprintf_internal_r+0x1cfc>
    710c:	000d883a 	mov	r6,zero
    7110:	000f883a 	mov	r7,zero
    7114:	8009883a 	mov	r4,r16
    7118:	880b883a 	mov	r5,r17
    711c:	000c79c0 	call	c79c <__nedf2>
    7120:	103f9f26 	beq	r2,zero,6fa0 <___vfprintf_internal_r+0x1ccc>
    7124:	00800044 	movi	r2,1
    7128:	1509c83a 	sub	r4,r2,r20
    712c:	d9000515 	stw	r4,20(sp)
    7130:	003f9b06 	br	6fa0 <___vfprintf_internal_r+0x1ccc>
    7134:	98000d1e 	bne	r19,zero,716c <___vfprintf_internal_r+0x1e98>
    7138:	d8c14c17 	ldw	r3,1328(sp)
    713c:	1880004c 	andi	r2,r3,1
    7140:	10000a1e 	bne	r2,zero,716c <___vfprintf_internal_r+0x1e98>
    7144:	01000044 	movi	r4,1
    7148:	200f883a 	mov	r7,r4
    714c:	d9014515 	stw	r4,1300(sp)
    7150:	003f4a06 	br	6e7c <___vfprintf_internal_r+0x1ba8>
    7154:	3cc00017 	ldw	r19,0(r7)
    7158:	39c00104 	addi	r7,r7,4
    715c:	983d0e0e 	bge	r19,zero,6598 <___vfprintf_internal_r+0x12c4>
    7160:	b8c00007 	ldb	r3,0(r23)
    7164:	04ffffc4 	movi	r19,-1
    7168:	0038d906 	br	54d0 <___vfprintf_internal_r+0x1fc>
    716c:	9cc00084 	addi	r19,r19,2
    7170:	dcc14515 	stw	r19,1300(sp)
    7174:	980f883a 	mov	r7,r19
    7178:	983f400e 	bge	r19,zero,6e7c <___vfprintf_internal_r+0x1ba8>
    717c:	003f7306 	br	6f4c <___vfprintf_internal_r+0x1c78>

00007180 <__vfprintf_internal>:
    7180:	008000b4 	movhi	r2,2
    7184:	10a6e504 	addi	r2,r2,-25708
    7188:	2013883a 	mov	r9,r4
    718c:	11000017 	ldw	r4,0(r2)
    7190:	2805883a 	mov	r2,r5
    7194:	300f883a 	mov	r7,r6
    7198:	480b883a 	mov	r5,r9
    719c:	100d883a 	mov	r6,r2
    71a0:	00052d41 	jmpi	52d4 <___vfprintf_internal_r>

000071a4 <__swsetup_r>:
    71a4:	008000b4 	movhi	r2,2
    71a8:	10a6e504 	addi	r2,r2,-25708
    71ac:	10c00017 	ldw	r3,0(r2)
    71b0:	defffd04 	addi	sp,sp,-12
    71b4:	dc400115 	stw	r17,4(sp)
    71b8:	dc000015 	stw	r16,0(sp)
    71bc:	dfc00215 	stw	ra,8(sp)
    71c0:	2023883a 	mov	r17,r4
    71c4:	2821883a 	mov	r16,r5
    71c8:	18000226 	beq	r3,zero,71d4 <__swsetup_r+0x30>
    71cc:	18800e17 	ldw	r2,56(r3)
    71d0:	10001f26 	beq	r2,zero,7250 <__swsetup_r+0xac>
    71d4:	8100030b 	ldhu	r4,12(r16)
    71d8:	2080020c 	andi	r2,r4,8
    71dc:	10002826 	beq	r2,zero,7280 <__swsetup_r+0xdc>
    71e0:	81400417 	ldw	r5,16(r16)
    71e4:	28001d26 	beq	r5,zero,725c <__swsetup_r+0xb8>
    71e8:	2080004c 	andi	r2,r4,1
    71ec:	1005003a 	cmpeq	r2,r2,zero
    71f0:	10000b26 	beq	r2,zero,7220 <__swsetup_r+0x7c>
    71f4:	2080008c 	andi	r2,r4,2
    71f8:	10001226 	beq	r2,zero,7244 <__swsetup_r+0xa0>
    71fc:	0005883a 	mov	r2,zero
    7200:	80800215 	stw	r2,8(r16)
    7204:	28000b26 	beq	r5,zero,7234 <__swsetup_r+0x90>
    7208:	0005883a 	mov	r2,zero
    720c:	dfc00217 	ldw	ra,8(sp)
    7210:	dc400117 	ldw	r17,4(sp)
    7214:	dc000017 	ldw	r16,0(sp)
    7218:	dec00304 	addi	sp,sp,12
    721c:	f800283a 	ret
    7220:	80800517 	ldw	r2,20(r16)
    7224:	80000215 	stw	zero,8(r16)
    7228:	0085c83a 	sub	r2,zero,r2
    722c:	80800615 	stw	r2,24(r16)
    7230:	283ff51e 	bne	r5,zero,7208 <__swsetup_r+0x64>
    7234:	2080200c 	andi	r2,r4,128
    7238:	103ff326 	beq	r2,zero,7208 <__swsetup_r+0x64>
    723c:	00bfffc4 	movi	r2,-1
    7240:	003ff206 	br	720c <__swsetup_r+0x68>
    7244:	80800517 	ldw	r2,20(r16)
    7248:	80800215 	stw	r2,8(r16)
    724c:	003fed06 	br	7204 <__swsetup_r+0x60>
    7250:	1809883a 	mov	r4,r3
    7254:	0008d440 	call	8d44 <__sinit>
    7258:	003fde06 	br	71d4 <__swsetup_r+0x30>
    725c:	20c0a00c 	andi	r3,r4,640
    7260:	00808004 	movi	r2,512
    7264:	18bfe026 	beq	r3,r2,71e8 <__swsetup_r+0x44>
    7268:	8809883a 	mov	r4,r17
    726c:	800b883a 	mov	r5,r16
    7270:	0009abc0 	call	9abc <__smakebuf_r>
    7274:	8100030b 	ldhu	r4,12(r16)
    7278:	81400417 	ldw	r5,16(r16)
    727c:	003fda06 	br	71e8 <__swsetup_r+0x44>
    7280:	2080040c 	andi	r2,r4,16
    7284:	103fed26 	beq	r2,zero,723c <__swsetup_r+0x98>
    7288:	2080010c 	andi	r2,r4,4
    728c:	10001226 	beq	r2,zero,72d8 <__swsetup_r+0x134>
    7290:	81400c17 	ldw	r5,48(r16)
    7294:	28000526 	beq	r5,zero,72ac <__swsetup_r+0x108>
    7298:	80801004 	addi	r2,r16,64
    729c:	28800226 	beq	r5,r2,72a8 <__swsetup_r+0x104>
    72a0:	8809883a 	mov	r4,r17
    72a4:	00090c80 	call	90c8 <_free_r>
    72a8:	80000c15 	stw	zero,48(r16)
    72ac:	8080030b 	ldhu	r2,12(r16)
    72b0:	81400417 	ldw	r5,16(r16)
    72b4:	80000115 	stw	zero,4(r16)
    72b8:	10bff6cc 	andi	r2,r2,65499
    72bc:	8080030d 	sth	r2,12(r16)
    72c0:	81400015 	stw	r5,0(r16)
    72c4:	8080030b 	ldhu	r2,12(r16)
    72c8:	10800214 	ori	r2,r2,8
    72cc:	113fffcc 	andi	r4,r2,65535
    72d0:	8080030d 	sth	r2,12(r16)
    72d4:	003fc306 	br	71e4 <__swsetup_r+0x40>
    72d8:	81400417 	ldw	r5,16(r16)
    72dc:	003ff906 	br	72c4 <__swsetup_r+0x120>

000072e0 <quorem>:
    72e0:	28c00417 	ldw	r3,16(r5)
    72e4:	20800417 	ldw	r2,16(r4)
    72e8:	defff604 	addi	sp,sp,-40
    72ec:	ddc00715 	stw	r23,28(sp)
    72f0:	dd400515 	stw	r21,20(sp)
    72f4:	dfc00915 	stw	ra,36(sp)
    72f8:	df000815 	stw	fp,32(sp)
    72fc:	dd800615 	stw	r22,24(sp)
    7300:	dd000415 	stw	r20,16(sp)
    7304:	dcc00315 	stw	r19,12(sp)
    7308:	dc800215 	stw	r18,8(sp)
    730c:	dc400115 	stw	r17,4(sp)
    7310:	dc000015 	stw	r16,0(sp)
    7314:	202f883a 	mov	r23,r4
    7318:	282b883a 	mov	r21,r5
    731c:	10c07416 	blt	r2,r3,74f0 <quorem+0x210>
    7320:	1c7fffc4 	addi	r17,r3,-1
    7324:	8c45883a 	add	r2,r17,r17
    7328:	1085883a 	add	r2,r2,r2
    732c:	2c000504 	addi	r16,r5,20
    7330:	24c00504 	addi	r19,r4,20
    7334:	14ed883a 	add	r22,r2,r19
    7338:	80a5883a 	add	r18,r16,r2
    733c:	b7000017 	ldw	fp,0(r22)
    7340:	91400017 	ldw	r5,0(r18)
    7344:	e009883a 	mov	r4,fp
    7348:	29400044 	addi	r5,r5,1
    734c:	000cbcc0 	call	cbcc <__udivsi3>
    7350:	1029883a 	mov	r20,r2
    7354:	10003c1e 	bne	r2,zero,7448 <quorem+0x168>
    7358:	a80b883a 	mov	r5,r21
    735c:	b809883a 	mov	r4,r23
    7360:	000a0a80 	call	a0a8 <__mcmp>
    7364:	10002b16 	blt	r2,zero,7414 <quorem+0x134>
    7368:	a5000044 	addi	r20,r20,1
    736c:	980f883a 	mov	r7,r19
    7370:	0011883a 	mov	r8,zero
    7374:	0009883a 	mov	r4,zero
    7378:	81400017 	ldw	r5,0(r16)
    737c:	38c00017 	ldw	r3,0(r7)
    7380:	84000104 	addi	r16,r16,4
    7384:	28bfffcc 	andi	r2,r5,65535
    7388:	2085883a 	add	r2,r4,r2
    738c:	11bfffcc 	andi	r6,r2,65535
    7390:	193fffcc 	andi	r4,r3,65535
    7394:	1004d43a 	srli	r2,r2,16
    7398:	280ad43a 	srli	r5,r5,16
    739c:	2189c83a 	sub	r4,r4,r6
    73a0:	2209883a 	add	r4,r4,r8
    73a4:	1806d43a 	srli	r3,r3,16
    73a8:	288b883a 	add	r5,r5,r2
    73ac:	200dd43a 	srai	r6,r4,16
    73b0:	28bfffcc 	andi	r2,r5,65535
    73b4:	1887c83a 	sub	r3,r3,r2
    73b8:	1987883a 	add	r3,r3,r6
    73bc:	3900000d 	sth	r4,0(r7)
    73c0:	38c0008d 	sth	r3,2(r7)
    73c4:	2808d43a 	srli	r4,r5,16
    73c8:	39c00104 	addi	r7,r7,4
    73cc:	1811d43a 	srai	r8,r3,16
    73d0:	943fe92e 	bgeu	r18,r16,7378 <quorem+0x98>
    73d4:	8c45883a 	add	r2,r17,r17
    73d8:	1085883a 	add	r2,r2,r2
    73dc:	9885883a 	add	r2,r19,r2
    73e0:	10c00017 	ldw	r3,0(r2)
    73e4:	18000b1e 	bne	r3,zero,7414 <quorem+0x134>
    73e8:	113fff04 	addi	r4,r2,-4
    73ec:	9900082e 	bgeu	r19,r4,7410 <quorem+0x130>
    73f0:	10bfff17 	ldw	r2,-4(r2)
    73f4:	10000326 	beq	r2,zero,7404 <quorem+0x124>
    73f8:	00000506 	br	7410 <quorem+0x130>
    73fc:	20800017 	ldw	r2,0(r4)
    7400:	1000031e 	bne	r2,zero,7410 <quorem+0x130>
    7404:	213fff04 	addi	r4,r4,-4
    7408:	8c7fffc4 	addi	r17,r17,-1
    740c:	993ffb36 	bltu	r19,r4,73fc <quorem+0x11c>
    7410:	bc400415 	stw	r17,16(r23)
    7414:	a005883a 	mov	r2,r20
    7418:	dfc00917 	ldw	ra,36(sp)
    741c:	df000817 	ldw	fp,32(sp)
    7420:	ddc00717 	ldw	r23,28(sp)
    7424:	dd800617 	ldw	r22,24(sp)
    7428:	dd400517 	ldw	r21,20(sp)
    742c:	dd000417 	ldw	r20,16(sp)
    7430:	dcc00317 	ldw	r19,12(sp)
    7434:	dc800217 	ldw	r18,8(sp)
    7438:	dc400117 	ldw	r17,4(sp)
    743c:	dc000017 	ldw	r16,0(sp)
    7440:	dec00a04 	addi	sp,sp,40
    7444:	f800283a 	ret
    7448:	980f883a 	mov	r7,r19
    744c:	8011883a 	mov	r8,r16
    7450:	0013883a 	mov	r9,zero
    7454:	000d883a 	mov	r6,zero
    7458:	40c00017 	ldw	r3,0(r8)
    745c:	39000017 	ldw	r4,0(r7)
    7460:	42000104 	addi	r8,r8,4
    7464:	18bfffcc 	andi	r2,r3,65535
    7468:	a085383a 	mul	r2,r20,r2
    746c:	1806d43a 	srli	r3,r3,16
    7470:	217fffcc 	andi	r5,r4,65535
    7474:	3085883a 	add	r2,r6,r2
    7478:	11bfffcc 	andi	r6,r2,65535
    747c:	a0c7383a 	mul	r3,r20,r3
    7480:	1004d43a 	srli	r2,r2,16
    7484:	298bc83a 	sub	r5,r5,r6
    7488:	2a4b883a 	add	r5,r5,r9
    748c:	2008d43a 	srli	r4,r4,16
    7490:	1887883a 	add	r3,r3,r2
    7494:	280dd43a 	srai	r6,r5,16
    7498:	18bfffcc 	andi	r2,r3,65535
    749c:	2089c83a 	sub	r4,r4,r2
    74a0:	2189883a 	add	r4,r4,r6
    74a4:	3900008d 	sth	r4,2(r7)
    74a8:	3940000d 	sth	r5,0(r7)
    74ac:	180cd43a 	srli	r6,r3,16
    74b0:	39c00104 	addi	r7,r7,4
    74b4:	2013d43a 	srai	r9,r4,16
    74b8:	923fe72e 	bgeu	r18,r8,7458 <quorem+0x178>
    74bc:	e03fa61e 	bne	fp,zero,7358 <quorem+0x78>
    74c0:	b0ffff04 	addi	r3,r22,-4
    74c4:	98c0082e 	bgeu	r19,r3,74e8 <quorem+0x208>
    74c8:	b0bfff17 	ldw	r2,-4(r22)
    74cc:	10000326 	beq	r2,zero,74dc <quorem+0x1fc>
    74d0:	00000506 	br	74e8 <quorem+0x208>
    74d4:	18800017 	ldw	r2,0(r3)
    74d8:	1000031e 	bne	r2,zero,74e8 <quorem+0x208>
    74dc:	18ffff04 	addi	r3,r3,-4
    74e0:	8c7fffc4 	addi	r17,r17,-1
    74e4:	98fffb36 	bltu	r19,r3,74d4 <quorem+0x1f4>
    74e8:	bc400415 	stw	r17,16(r23)
    74ec:	003f9a06 	br	7358 <quorem+0x78>
    74f0:	0005883a 	mov	r2,zero
    74f4:	003fc806 	br	7418 <quorem+0x138>

000074f8 <_dtoa_r>:
    74f8:	22001017 	ldw	r8,64(r4)
    74fc:	deffda04 	addi	sp,sp,-152
    7500:	dd402115 	stw	r21,132(sp)
    7504:	dd002015 	stw	r20,128(sp)
    7508:	dc801e15 	stw	r18,120(sp)
    750c:	dc401d15 	stw	r17,116(sp)
    7510:	dfc02515 	stw	ra,148(sp)
    7514:	df002415 	stw	fp,144(sp)
    7518:	ddc02315 	stw	r23,140(sp)
    751c:	dd802215 	stw	r22,136(sp)
    7520:	dcc01f15 	stw	r19,124(sp)
    7524:	dc001c15 	stw	r16,112(sp)
    7528:	d9001615 	stw	r4,88(sp)
    752c:	3023883a 	mov	r17,r6
    7530:	2829883a 	mov	r20,r5
    7534:	d9c01715 	stw	r7,92(sp)
    7538:	dc802817 	ldw	r18,160(sp)
    753c:	302b883a 	mov	r21,r6
    7540:	40000a26 	beq	r8,zero,756c <_dtoa_r+0x74>
    7544:	20801117 	ldw	r2,68(r4)
    7548:	400b883a 	mov	r5,r8
    754c:	40800115 	stw	r2,4(r8)
    7550:	20c01117 	ldw	r3,68(r4)
    7554:	00800044 	movi	r2,1
    7558:	10c4983a 	sll	r2,r2,r3
    755c:	40800215 	stw	r2,8(r8)
    7560:	0009f4c0 	call	9f4c <_Bfree>
    7564:	d8c01617 	ldw	r3,88(sp)
    7568:	18001015 	stw	zero,64(r3)
    756c:	8800a316 	blt	r17,zero,77fc <_dtoa_r+0x304>
    7570:	90000015 	stw	zero,0(r18)
    7574:	a8dffc2c 	andhi	r3,r21,32752
    7578:	009ffc34 	movhi	r2,32752
    757c:	18809126 	beq	r3,r2,77c4 <_dtoa_r+0x2cc>
    7580:	000d883a 	mov	r6,zero
    7584:	000f883a 	mov	r7,zero
    7588:	a009883a 	mov	r4,r20
    758c:	a80b883a 	mov	r5,r21
    7590:	dd001215 	stw	r20,72(sp)
    7594:	dd401315 	stw	r21,76(sp)
    7598:	000c79c0 	call	c79c <__nedf2>
    759c:	1000171e 	bne	r2,zero,75fc <_dtoa_r+0x104>
    75a0:	d9802717 	ldw	r6,156(sp)
    75a4:	00800044 	movi	r2,1
    75a8:	30800015 	stw	r2,0(r6)
    75ac:	d8802917 	ldw	r2,164(sp)
    75b0:	10029b26 	beq	r2,zero,8020 <_dtoa_r+0xb28>
    75b4:	d9002917 	ldw	r4,164(sp)
    75b8:	00800074 	movhi	r2,1
    75bc:	10bdf144 	addi	r2,r2,-2107
    75c0:	10ffffc4 	addi	r3,r2,-1
    75c4:	20800015 	stw	r2,0(r4)
    75c8:	1805883a 	mov	r2,r3
    75cc:	dfc02517 	ldw	ra,148(sp)
    75d0:	df002417 	ldw	fp,144(sp)
    75d4:	ddc02317 	ldw	r23,140(sp)
    75d8:	dd802217 	ldw	r22,136(sp)
    75dc:	dd402117 	ldw	r21,132(sp)
    75e0:	dd002017 	ldw	r20,128(sp)
    75e4:	dcc01f17 	ldw	r19,124(sp)
    75e8:	dc801e17 	ldw	r18,120(sp)
    75ec:	dc401d17 	ldw	r17,116(sp)
    75f0:	dc001c17 	ldw	r16,112(sp)
    75f4:	dec02604 	addi	sp,sp,152
    75f8:	f800283a 	ret
    75fc:	d9001617 	ldw	r4,88(sp)
    7600:	d9401217 	ldw	r5,72(sp)
    7604:	d8800104 	addi	r2,sp,4
    7608:	a80d883a 	mov	r6,r21
    760c:	d9c00204 	addi	r7,sp,8
    7610:	d8800015 	stw	r2,0(sp)
    7614:	000a5880 	call	a588 <__d2b>
    7618:	d8800715 	stw	r2,28(sp)
    761c:	a804d53a 	srli	r2,r21,20
    7620:	1101ffcc 	andi	r4,r2,2047
    7624:	20008626 	beq	r4,zero,7840 <_dtoa_r+0x348>
    7628:	d8c01217 	ldw	r3,72(sp)
    762c:	00800434 	movhi	r2,16
    7630:	10bfffc4 	addi	r2,r2,-1
    7634:	ddc00117 	ldw	r23,4(sp)
    7638:	a884703a 	and	r2,r21,r2
    763c:	1811883a 	mov	r8,r3
    7640:	124ffc34 	orhi	r9,r2,16368
    7644:	25bf0044 	addi	r22,r4,-1023
    7648:	d8000815 	stw	zero,32(sp)
    764c:	0005883a 	mov	r2,zero
    7650:	00cffe34 	movhi	r3,16376
    7654:	480b883a 	mov	r5,r9
    7658:	4009883a 	mov	r4,r8
    765c:	180f883a 	mov	r7,r3
    7660:	100d883a 	mov	r6,r2
    7664:	00035a80 	call	35a8 <__subdf3>
    7668:	0218dbf4 	movhi	r8,25455
    766c:	4210d844 	addi	r8,r8,17249
    7670:	024ff4f4 	movhi	r9,16339
    7674:	4a61e9c4 	addi	r9,r9,-30809
    7678:	480f883a 	mov	r7,r9
    767c:	400d883a 	mov	r6,r8
    7680:	180b883a 	mov	r5,r3
    7684:	1009883a 	mov	r4,r2
    7688:	000369c0 	call	369c <__muldf3>
    768c:	0222d874 	movhi	r8,35681
    7690:	42322cc4 	addi	r8,r8,-14157
    7694:	024ff1f4 	movhi	r9,16327
    7698:	4a628a04 	addi	r9,r9,-30168
    769c:	480f883a 	mov	r7,r9
    76a0:	400d883a 	mov	r6,r8
    76a4:	180b883a 	mov	r5,r3
    76a8:	1009883a 	mov	r4,r2
    76ac:	00036280 	call	3628 <__adddf3>
    76b0:	b009883a 	mov	r4,r22
    76b4:	1021883a 	mov	r16,r2
    76b8:	1823883a 	mov	r17,r3
    76bc:	0003f600 	call	3f60 <__floatsidf>
    76c0:	021427f4 	movhi	r8,20639
    76c4:	421e7ec4 	addi	r8,r8,31227
    76c8:	024ff4f4 	movhi	r9,16339
    76cc:	4a5104c4 	addi	r9,r9,17427
    76d0:	480f883a 	mov	r7,r9
    76d4:	400d883a 	mov	r6,r8
    76d8:	180b883a 	mov	r5,r3
    76dc:	1009883a 	mov	r4,r2
    76e0:	000369c0 	call	369c <__muldf3>
    76e4:	180f883a 	mov	r7,r3
    76e8:	880b883a 	mov	r5,r17
    76ec:	100d883a 	mov	r6,r2
    76f0:	8009883a 	mov	r4,r16
    76f4:	00036280 	call	3628 <__adddf3>
    76f8:	1009883a 	mov	r4,r2
    76fc:	180b883a 	mov	r5,r3
    7700:	1021883a 	mov	r16,r2
    7704:	1823883a 	mov	r17,r3
    7708:	000c8240 	call	c824 <__fixdfsi>
    770c:	000d883a 	mov	r6,zero
    7710:	000f883a 	mov	r7,zero
    7714:	8009883a 	mov	r4,r16
    7718:	880b883a 	mov	r5,r17
    771c:	d8800d15 	stw	r2,52(sp)
    7720:	0003e500 	call	3e50 <__ltdf2>
    7724:	10031716 	blt	r2,zero,8384 <_dtoa_r+0xe8c>
    7728:	d8c00d17 	ldw	r3,52(sp)
    772c:	00800584 	movi	r2,22
    7730:	10c1482e 	bgeu	r2,r3,7c54 <_dtoa_r+0x75c>
    7734:	01000044 	movi	r4,1
    7738:	d9000c15 	stw	r4,48(sp)
    773c:	bd85c83a 	sub	r2,r23,r22
    7740:	11bfffc4 	addi	r6,r2,-1
    7744:	30030b16 	blt	r6,zero,8374 <_dtoa_r+0xe7c>
    7748:	d9800a15 	stw	r6,40(sp)
    774c:	d8001115 	stw	zero,68(sp)
    7750:	d8c00d17 	ldw	r3,52(sp)
    7754:	1802ff16 	blt	r3,zero,8354 <_dtoa_r+0xe5c>
    7758:	d9000a17 	ldw	r4,40(sp)
    775c:	d8c00915 	stw	r3,36(sp)
    7760:	d8001015 	stw	zero,64(sp)
    7764:	20c9883a 	add	r4,r4,r3
    7768:	d9000a15 	stw	r4,40(sp)
    776c:	d9001717 	ldw	r4,92(sp)
    7770:	00800244 	movi	r2,9
    7774:	11004636 	bltu	r2,r4,7890 <_dtoa_r+0x398>
    7778:	00800144 	movi	r2,5
    777c:	11020416 	blt	r2,r4,7f90 <_dtoa_r+0xa98>
    7780:	04400044 	movi	r17,1
    7784:	d8c01717 	ldw	r3,92(sp)
    7788:	00800144 	movi	r2,5
    778c:	10c1ed36 	bltu	r2,r3,7f44 <_dtoa_r+0xa4c>
    7790:	18c5883a 	add	r2,r3,r3
    7794:	1085883a 	add	r2,r2,r2
    7798:	00c00034 	movhi	r3,0
    779c:	18ddeb04 	addi	r3,r3,30636
    77a0:	10c5883a 	add	r2,r2,r3
    77a4:	11000017 	ldw	r4,0(r2)
    77a8:	2000683a 	jmp	r4
    77ac:	00007898 	cmpnei	zero,zero,482
    77b0:	00007898 	cmpnei	zero,zero,482
    77b4:	00008298 	cmpnei	zero,zero,522
    77b8:	00008270 	cmpltui	zero,zero,521
    77bc:	000082b4 	movhi	zero,522
    77c0:	000082c0 	call	82c <lookup_10+0x48>
    77c4:	d9002717 	ldw	r4,156(sp)
    77c8:	0089c3c4 	movi	r2,9999
    77cc:	20800015 	stw	r2,0(r4)
    77d0:	a0001026 	beq	r20,zero,7814 <_dtoa_r+0x31c>
    77d4:	00c00074 	movhi	r3,1
    77d8:	18fe5c04 	addi	r3,r3,-1680
    77dc:	d9802917 	ldw	r6,164(sp)
    77e0:	303f7926 	beq	r6,zero,75c8 <_dtoa_r+0xd0>
    77e4:	188000c7 	ldb	r2,3(r3)
    77e8:	190000c4 	addi	r4,r3,3
    77ec:	1000101e 	bne	r2,zero,7830 <_dtoa_r+0x338>
    77f0:	d8802917 	ldw	r2,164(sp)
    77f4:	11000015 	stw	r4,0(r2)
    77f8:	003f7306 	br	75c8 <_dtoa_r+0xd0>
    77fc:	00a00034 	movhi	r2,32768
    7800:	10bfffc4 	addi	r2,r2,-1
    7804:	00c00044 	movi	r3,1
    7808:	88aa703a 	and	r21,r17,r2
    780c:	90c00015 	stw	r3,0(r18)
    7810:	003f5806 	br	7574 <_dtoa_r+0x7c>
    7814:	00800434 	movhi	r2,16
    7818:	10bfffc4 	addi	r2,r2,-1
    781c:	a884703a 	and	r2,r21,r2
    7820:	103fec1e 	bne	r2,zero,77d4 <_dtoa_r+0x2dc>
    7824:	00c00074 	movhi	r3,1
    7828:	18fe5904 	addi	r3,r3,-1692
    782c:	003feb06 	br	77dc <_dtoa_r+0x2e4>
    7830:	d8802917 	ldw	r2,164(sp)
    7834:	19000204 	addi	r4,r3,8
    7838:	11000015 	stw	r4,0(r2)
    783c:	003f6206 	br	75c8 <_dtoa_r+0xd0>
    7840:	ddc00117 	ldw	r23,4(sp)
    7844:	d8800217 	ldw	r2,8(sp)
    7848:	01000804 	movi	r4,32
    784c:	b8c10c84 	addi	r3,r23,1074
    7850:	18a3883a 	add	r17,r3,r2
    7854:	2441b80e 	bge	r4,r17,7f38 <_dtoa_r+0xa40>
    7858:	00c01004 	movi	r3,64
    785c:	1c47c83a 	sub	r3,r3,r17
    7860:	88bff804 	addi	r2,r17,-32
    7864:	a8c6983a 	sll	r3,r21,r3
    7868:	a084d83a 	srl	r2,r20,r2
    786c:	1888b03a 	or	r4,r3,r2
    7870:	000c8fc0 	call	c8fc <__floatunsidf>
    7874:	1011883a 	mov	r8,r2
    7878:	00bf8434 	movhi	r2,65040
    787c:	01000044 	movi	r4,1
    7880:	10d3883a 	add	r9,r2,r3
    7884:	8dbef344 	addi	r22,r17,-1075
    7888:	d9000815 	stw	r4,32(sp)
    788c:	003f6f06 	br	764c <_dtoa_r+0x154>
    7890:	d8001715 	stw	zero,92(sp)
    7894:	04400044 	movi	r17,1
    7898:	00bfffc4 	movi	r2,-1
    789c:	00c00044 	movi	r3,1
    78a0:	d8800e15 	stw	r2,56(sp)
    78a4:	d8002615 	stw	zero,152(sp)
    78a8:	d8800f15 	stw	r2,60(sp)
    78ac:	d8c00b15 	stw	r3,44(sp)
    78b0:	1021883a 	mov	r16,r2
    78b4:	d8801617 	ldw	r2,88(sp)
    78b8:	10001115 	stw	zero,68(r2)
    78bc:	d8801617 	ldw	r2,88(sp)
    78c0:	11401117 	ldw	r5,68(r2)
    78c4:	1009883a 	mov	r4,r2
    78c8:	000a4cc0 	call	a4cc <_Balloc>
    78cc:	d8c01617 	ldw	r3,88(sp)
    78d0:	d8800515 	stw	r2,20(sp)
    78d4:	18801015 	stw	r2,64(r3)
    78d8:	00800384 	movi	r2,14
    78dc:	14006836 	bltu	r2,r16,7a80 <_dtoa_r+0x588>
    78e0:	8805003a 	cmpeq	r2,r17,zero
    78e4:	1000661e 	bne	r2,zero,7a80 <_dtoa_r+0x588>
    78e8:	d9000d17 	ldw	r4,52(sp)
    78ec:	0102300e 	bge	zero,r4,81b0 <_dtoa_r+0xcb8>
    78f0:	208003cc 	andi	r2,r4,15
    78f4:	100490fa 	slli	r2,r2,3
    78f8:	2025d13a 	srai	r18,r4,4
    78fc:	00c00074 	movhi	r3,1
    7900:	18fe6d04 	addi	r3,r3,-1612
    7904:	10c5883a 	add	r2,r2,r3
    7908:	90c0040c 	andi	r3,r18,16
    790c:	14000017 	ldw	r16,0(r2)
    7910:	14400117 	ldw	r17,4(r2)
    7914:	18036a1e 	bne	r3,zero,86c0 <_dtoa_r+0x11c8>
    7918:	05800084 	movi	r22,2
    791c:	90001026 	beq	r18,zero,7960 <_dtoa_r+0x468>
    7920:	04c00074 	movhi	r19,1
    7924:	9cfe9f04 	addi	r19,r19,-1412
    7928:	9080004c 	andi	r2,r18,1
    792c:	1005003a 	cmpeq	r2,r2,zero
    7930:	1000081e 	bne	r2,zero,7954 <_dtoa_r+0x45c>
    7934:	99800017 	ldw	r6,0(r19)
    7938:	99c00117 	ldw	r7,4(r19)
    793c:	880b883a 	mov	r5,r17
    7940:	8009883a 	mov	r4,r16
    7944:	000369c0 	call	369c <__muldf3>
    7948:	1021883a 	mov	r16,r2
    794c:	b5800044 	addi	r22,r22,1
    7950:	1823883a 	mov	r17,r3
    7954:	9025d07a 	srai	r18,r18,1
    7958:	9cc00204 	addi	r19,r19,8
    795c:	903ff21e 	bne	r18,zero,7928 <_dtoa_r+0x430>
    7960:	a80b883a 	mov	r5,r21
    7964:	a009883a 	mov	r4,r20
    7968:	880f883a 	mov	r7,r17
    796c:	800d883a 	mov	r6,r16
    7970:	0003a600 	call	3a60 <__divdf3>
    7974:	1029883a 	mov	r20,r2
    7978:	182b883a 	mov	r21,r3
    797c:	d8c00c17 	ldw	r3,48(sp)
    7980:	1805003a 	cmpeq	r2,r3,zero
    7984:	1000081e 	bne	r2,zero,79a8 <_dtoa_r+0x4b0>
    7988:	0005883a 	mov	r2,zero
    798c:	00cffc34 	movhi	r3,16368
    7990:	180f883a 	mov	r7,r3
    7994:	a009883a 	mov	r4,r20
    7998:	a80b883a 	mov	r5,r21
    799c:	100d883a 	mov	r6,r2
    79a0:	0003e500 	call	3e50 <__ltdf2>
    79a4:	1003fe16 	blt	r2,zero,89a0 <_dtoa_r+0x14a8>
    79a8:	b009883a 	mov	r4,r22
    79ac:	0003f600 	call	3f60 <__floatsidf>
    79b0:	180b883a 	mov	r5,r3
    79b4:	1009883a 	mov	r4,r2
    79b8:	a00d883a 	mov	r6,r20
    79bc:	a80f883a 	mov	r7,r21
    79c0:	000369c0 	call	369c <__muldf3>
    79c4:	0011883a 	mov	r8,zero
    79c8:	02500734 	movhi	r9,16412
    79cc:	1009883a 	mov	r4,r2
    79d0:	180b883a 	mov	r5,r3
    79d4:	480f883a 	mov	r7,r9
    79d8:	400d883a 	mov	r6,r8
    79dc:	00036280 	call	3628 <__adddf3>
    79e0:	d9000f17 	ldw	r4,60(sp)
    79e4:	102d883a 	mov	r22,r2
    79e8:	00bf3034 	movhi	r2,64704
    79ec:	18b9883a 	add	fp,r3,r2
    79f0:	e02f883a 	mov	r23,fp
    79f4:	20028f1e 	bne	r4,zero,8434 <_dtoa_r+0xf3c>
    79f8:	0005883a 	mov	r2,zero
    79fc:	00d00534 	movhi	r3,16404
    7a00:	a009883a 	mov	r4,r20
    7a04:	a80b883a 	mov	r5,r21
    7a08:	180f883a 	mov	r7,r3
    7a0c:	100d883a 	mov	r6,r2
    7a10:	00035a80 	call	35a8 <__subdf3>
    7a14:	1009883a 	mov	r4,r2
    7a18:	e00f883a 	mov	r7,fp
    7a1c:	180b883a 	mov	r5,r3
    7a20:	b00d883a 	mov	r6,r22
    7a24:	1025883a 	mov	r18,r2
    7a28:	1827883a 	mov	r19,r3
    7a2c:	0003d400 	call	3d40 <__gtdf2>
    7a30:	00834f16 	blt	zero,r2,8770 <_dtoa_r+0x1278>
    7a34:	e0e0003c 	xorhi	r3,fp,32768
    7a38:	9009883a 	mov	r4,r18
    7a3c:	980b883a 	mov	r5,r19
    7a40:	180f883a 	mov	r7,r3
    7a44:	b00d883a 	mov	r6,r22
    7a48:	0003e500 	call	3e50 <__ltdf2>
    7a4c:	1000080e 	bge	r2,zero,7a70 <_dtoa_r+0x578>
    7a50:	0027883a 	mov	r19,zero
    7a54:	0025883a 	mov	r18,zero
    7a58:	d8802617 	ldw	r2,152(sp)
    7a5c:	df000517 	ldw	fp,20(sp)
    7a60:	d8000615 	stw	zero,24(sp)
    7a64:	0084303a 	nor	r2,zero,r2
    7a68:	d8800d15 	stw	r2,52(sp)
    7a6c:	00019b06 	br	80dc <_dtoa_r+0xbe4>
    7a70:	d9801217 	ldw	r6,72(sp)
    7a74:	d8801317 	ldw	r2,76(sp)
    7a78:	3029883a 	mov	r20,r6
    7a7c:	102b883a 	mov	r21,r2
    7a80:	d8c00217 	ldw	r3,8(sp)
    7a84:	18008516 	blt	r3,zero,7c9c <_dtoa_r+0x7a4>
    7a88:	d9000d17 	ldw	r4,52(sp)
    7a8c:	00800384 	movi	r2,14
    7a90:	11008216 	blt	r2,r4,7c9c <_dtoa_r+0x7a4>
    7a94:	200490fa 	slli	r2,r4,3
    7a98:	d9802617 	ldw	r6,152(sp)
    7a9c:	00c00074 	movhi	r3,1
    7aa0:	18fe6d04 	addi	r3,r3,-1612
    7aa4:	10c5883a 	add	r2,r2,r3
    7aa8:	14800017 	ldw	r18,0(r2)
    7aac:	14c00117 	ldw	r19,4(r2)
    7ab0:	30031e16 	blt	r6,zero,872c <_dtoa_r+0x1234>
    7ab4:	d9000517 	ldw	r4,20(sp)
    7ab8:	d8c00f17 	ldw	r3,60(sp)
    7abc:	a823883a 	mov	r17,r21
    7ac0:	a021883a 	mov	r16,r20
    7ac4:	192b883a 	add	r21,r3,r4
    7ac8:	2039883a 	mov	fp,r4
    7acc:	00000f06 	br	7b0c <_dtoa_r+0x614>
    7ad0:	0005883a 	mov	r2,zero
    7ad4:	00d00934 	movhi	r3,16420
    7ad8:	5009883a 	mov	r4,r10
    7adc:	580b883a 	mov	r5,r11
    7ae0:	180f883a 	mov	r7,r3
    7ae4:	100d883a 	mov	r6,r2
    7ae8:	000369c0 	call	369c <__muldf3>
    7aec:	180b883a 	mov	r5,r3
    7af0:	000d883a 	mov	r6,zero
    7af4:	000f883a 	mov	r7,zero
    7af8:	1009883a 	mov	r4,r2
    7afc:	1021883a 	mov	r16,r2
    7b00:	1823883a 	mov	r17,r3
    7b04:	000c79c0 	call	c79c <__nedf2>
    7b08:	10004526 	beq	r2,zero,7c20 <_dtoa_r+0x728>
    7b0c:	900d883a 	mov	r6,r18
    7b10:	980f883a 	mov	r7,r19
    7b14:	8009883a 	mov	r4,r16
    7b18:	880b883a 	mov	r5,r17
    7b1c:	0003a600 	call	3a60 <__divdf3>
    7b20:	180b883a 	mov	r5,r3
    7b24:	1009883a 	mov	r4,r2
    7b28:	000c8240 	call	c824 <__fixdfsi>
    7b2c:	1009883a 	mov	r4,r2
    7b30:	1029883a 	mov	r20,r2
    7b34:	0003f600 	call	3f60 <__floatsidf>
    7b38:	180f883a 	mov	r7,r3
    7b3c:	9009883a 	mov	r4,r18
    7b40:	980b883a 	mov	r5,r19
    7b44:	100d883a 	mov	r6,r2
    7b48:	000369c0 	call	369c <__muldf3>
    7b4c:	180f883a 	mov	r7,r3
    7b50:	880b883a 	mov	r5,r17
    7b54:	8009883a 	mov	r4,r16
    7b58:	100d883a 	mov	r6,r2
    7b5c:	00035a80 	call	35a8 <__subdf3>
    7b60:	1015883a 	mov	r10,r2
    7b64:	a0800c04 	addi	r2,r20,48
    7b68:	e0800005 	stb	r2,0(fp)
    7b6c:	e7000044 	addi	fp,fp,1
    7b70:	1817883a 	mov	r11,r3
    7b74:	e57fd61e 	bne	fp,r21,7ad0 <_dtoa_r+0x5d8>
    7b78:	500d883a 	mov	r6,r10
    7b7c:	180f883a 	mov	r7,r3
    7b80:	5009883a 	mov	r4,r10
    7b84:	180b883a 	mov	r5,r3
    7b88:	00036280 	call	3628 <__adddf3>
    7b8c:	100d883a 	mov	r6,r2
    7b90:	9009883a 	mov	r4,r18
    7b94:	980b883a 	mov	r5,r19
    7b98:	180f883a 	mov	r7,r3
    7b9c:	1021883a 	mov	r16,r2
    7ba0:	1823883a 	mov	r17,r3
    7ba4:	0003e500 	call	3e50 <__ltdf2>
    7ba8:	10000816 	blt	r2,zero,7bcc <_dtoa_r+0x6d4>
    7bac:	980b883a 	mov	r5,r19
    7bb0:	800d883a 	mov	r6,r16
    7bb4:	880f883a 	mov	r7,r17
    7bb8:	9009883a 	mov	r4,r18
    7bbc:	0003cb80 	call	3cb8 <__eqdf2>
    7bc0:	1000171e 	bne	r2,zero,7c20 <_dtoa_r+0x728>
    7bc4:	a080004c 	andi	r2,r20,1
    7bc8:	10001526 	beq	r2,zero,7c20 <_dtoa_r+0x728>
    7bcc:	d8800d17 	ldw	r2,52(sp)
    7bd0:	d8800415 	stw	r2,16(sp)
    7bd4:	e009883a 	mov	r4,fp
    7bd8:	213fffc4 	addi	r4,r4,-1
    7bdc:	20c00007 	ldb	r3,0(r4)
    7be0:	00800e44 	movi	r2,57
    7be4:	1880081e 	bne	r3,r2,7c08 <_dtoa_r+0x710>
    7be8:	d8800517 	ldw	r2,20(sp)
    7bec:	113ffa1e 	bne	r2,r4,7bd8 <_dtoa_r+0x6e0>
    7bf0:	d8c00417 	ldw	r3,16(sp)
    7bf4:	d9800517 	ldw	r6,20(sp)
    7bf8:	00800c04 	movi	r2,48
    7bfc:	18c00044 	addi	r3,r3,1
    7c00:	d8c00415 	stw	r3,16(sp)
    7c04:	30800005 	stb	r2,0(r6)
    7c08:	20800003 	ldbu	r2,0(r4)
    7c0c:	d8c00417 	ldw	r3,16(sp)
    7c10:	27000044 	addi	fp,r4,1
    7c14:	10800044 	addi	r2,r2,1
    7c18:	d8c00d15 	stw	r3,52(sp)
    7c1c:	20800005 	stb	r2,0(r4)
    7c20:	d9001617 	ldw	r4,88(sp)
    7c24:	d9400717 	ldw	r5,28(sp)
    7c28:	0009f4c0 	call	9f4c <_Bfree>
    7c2c:	e0000005 	stb	zero,0(fp)
    7c30:	d9800d17 	ldw	r6,52(sp)
    7c34:	d8c02717 	ldw	r3,156(sp)
    7c38:	d9002917 	ldw	r4,164(sp)
    7c3c:	30800044 	addi	r2,r6,1
    7c40:	18800015 	stw	r2,0(r3)
    7c44:	20029c26 	beq	r4,zero,86b8 <_dtoa_r+0x11c0>
    7c48:	d8c00517 	ldw	r3,20(sp)
    7c4c:	27000015 	stw	fp,0(r4)
    7c50:	003e5d06 	br	75c8 <_dtoa_r+0xd0>
    7c54:	d9800d17 	ldw	r6,52(sp)
    7c58:	00c00074 	movhi	r3,1
    7c5c:	18fe6d04 	addi	r3,r3,-1612
    7c60:	d9001217 	ldw	r4,72(sp)
    7c64:	300490fa 	slli	r2,r6,3
    7c68:	d9401317 	ldw	r5,76(sp)
    7c6c:	10c5883a 	add	r2,r2,r3
    7c70:	12000017 	ldw	r8,0(r2)
    7c74:	12400117 	ldw	r9,4(r2)
    7c78:	400d883a 	mov	r6,r8
    7c7c:	480f883a 	mov	r7,r9
    7c80:	0003e500 	call	3e50 <__ltdf2>
    7c84:	1000030e 	bge	r2,zero,7c94 <_dtoa_r+0x79c>
    7c88:	d8800d17 	ldw	r2,52(sp)
    7c8c:	10bfffc4 	addi	r2,r2,-1
    7c90:	d8800d15 	stw	r2,52(sp)
    7c94:	d8000c15 	stw	zero,48(sp)
    7c98:	003ea806 	br	773c <_dtoa_r+0x244>
    7c9c:	d9000b17 	ldw	r4,44(sp)
    7ca0:	202cc03a 	cmpne	r22,r4,zero
    7ca4:	b000c71e 	bne	r22,zero,7fc4 <_dtoa_r+0xacc>
    7ca8:	dc001117 	ldw	r16,68(sp)
    7cac:	dc801017 	ldw	r18,64(sp)
    7cb0:	0027883a 	mov	r19,zero
    7cb4:	04000b0e 	bge	zero,r16,7ce4 <_dtoa_r+0x7ec>
    7cb8:	d8c00a17 	ldw	r3,40(sp)
    7cbc:	00c0090e 	bge	zero,r3,7ce4 <_dtoa_r+0x7ec>
    7cc0:	8005883a 	mov	r2,r16
    7cc4:	1c011316 	blt	r3,r16,8114 <_dtoa_r+0xc1c>
    7cc8:	d9000a17 	ldw	r4,40(sp)
    7ccc:	d9801117 	ldw	r6,68(sp)
    7cd0:	80a1c83a 	sub	r16,r16,r2
    7cd4:	2089c83a 	sub	r4,r4,r2
    7cd8:	308dc83a 	sub	r6,r6,r2
    7cdc:	d9000a15 	stw	r4,40(sp)
    7ce0:	d9801115 	stw	r6,68(sp)
    7ce4:	d8801017 	ldw	r2,64(sp)
    7ce8:	0080150e 	bge	zero,r2,7d40 <_dtoa_r+0x848>
    7cec:	d8c00b17 	ldw	r3,44(sp)
    7cf0:	1805003a 	cmpeq	r2,r3,zero
    7cf4:	1001c91e 	bne	r2,zero,841c <_dtoa_r+0xf24>
    7cf8:	04800e0e 	bge	zero,r18,7d34 <_dtoa_r+0x83c>
    7cfc:	d9001617 	ldw	r4,88(sp)
    7d00:	980b883a 	mov	r5,r19
    7d04:	900d883a 	mov	r6,r18
    7d08:	000ad000 	call	ad00 <__pow5mult>
    7d0c:	d9001617 	ldw	r4,88(sp)
    7d10:	d9800717 	ldw	r6,28(sp)
    7d14:	100b883a 	mov	r5,r2
    7d18:	1027883a 	mov	r19,r2
    7d1c:	000a9dc0 	call	a9dc <__multiply>
    7d20:	d9001617 	ldw	r4,88(sp)
    7d24:	d9400717 	ldw	r5,28(sp)
    7d28:	1023883a 	mov	r17,r2
    7d2c:	0009f4c0 	call	9f4c <_Bfree>
    7d30:	dc400715 	stw	r17,28(sp)
    7d34:	d9001017 	ldw	r4,64(sp)
    7d38:	248dc83a 	sub	r6,r4,r18
    7d3c:	30010e1e 	bne	r6,zero,8178 <_dtoa_r+0xc80>
    7d40:	d9001617 	ldw	r4,88(sp)
    7d44:	04400044 	movi	r17,1
    7d48:	880b883a 	mov	r5,r17
    7d4c:	000abc40 	call	abc4 <__i2b>
    7d50:	d9800917 	ldw	r6,36(sp)
    7d54:	1025883a 	mov	r18,r2
    7d58:	0180040e 	bge	zero,r6,7d6c <_dtoa_r+0x874>
    7d5c:	d9001617 	ldw	r4,88(sp)
    7d60:	100b883a 	mov	r5,r2
    7d64:	000ad000 	call	ad00 <__pow5mult>
    7d68:	1025883a 	mov	r18,r2
    7d6c:	d8801717 	ldw	r2,92(sp)
    7d70:	8880f30e 	bge	r17,r2,8140 <_dtoa_r+0xc48>
    7d74:	0023883a 	mov	r17,zero
    7d78:	d9800917 	ldw	r6,36(sp)
    7d7c:	30019e1e 	bne	r6,zero,83f8 <_dtoa_r+0xf00>
    7d80:	00c00044 	movi	r3,1
    7d84:	d9000a17 	ldw	r4,40(sp)
    7d88:	20c5883a 	add	r2,r4,r3
    7d8c:	10c007cc 	andi	r3,r2,31
    7d90:	1800841e 	bne	r3,zero,7fa4 <_dtoa_r+0xaac>
    7d94:	00800704 	movi	r2,28
    7d98:	d9000a17 	ldw	r4,40(sp)
    7d9c:	d9801117 	ldw	r6,68(sp)
    7da0:	80a1883a 	add	r16,r16,r2
    7da4:	2089883a 	add	r4,r4,r2
    7da8:	308d883a 	add	r6,r6,r2
    7dac:	d9000a15 	stw	r4,40(sp)
    7db0:	d9801115 	stw	r6,68(sp)
    7db4:	d8801117 	ldw	r2,68(sp)
    7db8:	0080050e 	bge	zero,r2,7dd0 <_dtoa_r+0x8d8>
    7dbc:	d9400717 	ldw	r5,28(sp)
    7dc0:	d9001617 	ldw	r4,88(sp)
    7dc4:	100d883a 	mov	r6,r2
    7dc8:	000a8900 	call	a890 <__lshift>
    7dcc:	d8800715 	stw	r2,28(sp)
    7dd0:	d8c00a17 	ldw	r3,40(sp)
    7dd4:	00c0050e 	bge	zero,r3,7dec <_dtoa_r+0x8f4>
    7dd8:	d9001617 	ldw	r4,88(sp)
    7ddc:	900b883a 	mov	r5,r18
    7de0:	180d883a 	mov	r6,r3
    7de4:	000a8900 	call	a890 <__lshift>
    7de8:	1025883a 	mov	r18,r2
    7dec:	d9000c17 	ldw	r4,48(sp)
    7df0:	2005003a 	cmpeq	r2,r4,zero
    7df4:	10016f26 	beq	r2,zero,83b4 <_dtoa_r+0xebc>
    7df8:	d9000f17 	ldw	r4,60(sp)
    7dfc:	0102170e 	bge	zero,r4,865c <_dtoa_r+0x1164>
    7e00:	d9800b17 	ldw	r6,44(sp)
    7e04:	3005003a 	cmpeq	r2,r6,zero
    7e08:	1000881e 	bne	r2,zero,802c <_dtoa_r+0xb34>
    7e0c:	0400050e 	bge	zero,r16,7e24 <_dtoa_r+0x92c>
    7e10:	d9001617 	ldw	r4,88(sp)
    7e14:	980b883a 	mov	r5,r19
    7e18:	800d883a 	mov	r6,r16
    7e1c:	000a8900 	call	a890 <__lshift>
    7e20:	1027883a 	mov	r19,r2
    7e24:	8804c03a 	cmpne	r2,r17,zero
    7e28:	1002541e 	bne	r2,zero,877c <_dtoa_r+0x1284>
    7e2c:	980b883a 	mov	r5,r19
    7e30:	dd800517 	ldw	r22,20(sp)
    7e34:	dcc00615 	stw	r19,24(sp)
    7e38:	a700004c 	andi	fp,r20,1
    7e3c:	2827883a 	mov	r19,r5
    7e40:	d9000717 	ldw	r4,28(sp)
    7e44:	900b883a 	mov	r5,r18
    7e48:	00072e00 	call	72e0 <quorem>
    7e4c:	d9000717 	ldw	r4,28(sp)
    7e50:	d9400617 	ldw	r5,24(sp)
    7e54:	1023883a 	mov	r17,r2
    7e58:	8dc00c04 	addi	r23,r17,48
    7e5c:	000a0a80 	call	a0a8 <__mcmp>
    7e60:	d9001617 	ldw	r4,88(sp)
    7e64:	900b883a 	mov	r5,r18
    7e68:	980d883a 	mov	r6,r19
    7e6c:	1029883a 	mov	r20,r2
    7e70:	000a7040 	call	a704 <__mdiff>
    7e74:	102b883a 	mov	r21,r2
    7e78:	10800317 	ldw	r2,12(r2)
    7e7c:	1001281e 	bne	r2,zero,8320 <_dtoa_r+0xe28>
    7e80:	d9000717 	ldw	r4,28(sp)
    7e84:	a80b883a 	mov	r5,r21
    7e88:	000a0a80 	call	a0a8 <__mcmp>
    7e8c:	d9001617 	ldw	r4,88(sp)
    7e90:	1021883a 	mov	r16,r2
    7e94:	a80b883a 	mov	r5,r21
    7e98:	0009f4c0 	call	9f4c <_Bfree>
    7e9c:	8000041e 	bne	r16,zero,7eb0 <_dtoa_r+0x9b8>
    7ea0:	d8801717 	ldw	r2,92(sp)
    7ea4:	1000021e 	bne	r2,zero,7eb0 <_dtoa_r+0x9b8>
    7ea8:	e004c03a 	cmpne	r2,fp,zero
    7eac:	10011726 	beq	r2,zero,830c <_dtoa_r+0xe14>
    7eb0:	a0010616 	blt	r20,zero,82cc <_dtoa_r+0xdd4>
    7eb4:	a000041e 	bne	r20,zero,7ec8 <_dtoa_r+0x9d0>
    7eb8:	d8c01717 	ldw	r3,92(sp)
    7ebc:	1800021e 	bne	r3,zero,7ec8 <_dtoa_r+0x9d0>
    7ec0:	e004c03a 	cmpne	r2,fp,zero
    7ec4:	10010126 	beq	r2,zero,82cc <_dtoa_r+0xdd4>
    7ec8:	04023d16 	blt	zero,r16,87c0 <_dtoa_r+0x12c8>
    7ecc:	b5c00005 	stb	r23,0(r22)
    7ed0:	d9800517 	ldw	r6,20(sp)
    7ed4:	d9000f17 	ldw	r4,60(sp)
    7ed8:	b5800044 	addi	r22,r22,1
    7edc:	3105883a 	add	r2,r6,r4
    7ee0:	b0806526 	beq	r22,r2,8078 <_dtoa_r+0xb80>
    7ee4:	d9400717 	ldw	r5,28(sp)
    7ee8:	d9001617 	ldw	r4,88(sp)
    7eec:	01800284 	movi	r6,10
    7ef0:	000f883a 	mov	r7,zero
    7ef4:	000ac000 	call	ac00 <__multadd>
    7ef8:	d8800715 	stw	r2,28(sp)
    7efc:	d8800617 	ldw	r2,24(sp)
    7f00:	14c10c26 	beq	r2,r19,8334 <_dtoa_r+0xe3c>
    7f04:	d9400617 	ldw	r5,24(sp)
    7f08:	d9001617 	ldw	r4,88(sp)
    7f0c:	01800284 	movi	r6,10
    7f10:	000f883a 	mov	r7,zero
    7f14:	000ac000 	call	ac00 <__multadd>
    7f18:	d9001617 	ldw	r4,88(sp)
    7f1c:	980b883a 	mov	r5,r19
    7f20:	01800284 	movi	r6,10
    7f24:	000f883a 	mov	r7,zero
    7f28:	d8800615 	stw	r2,24(sp)
    7f2c:	000ac000 	call	ac00 <__multadd>
    7f30:	1027883a 	mov	r19,r2
    7f34:	003fc206 	br	7e40 <_dtoa_r+0x948>
    7f38:	2445c83a 	sub	r2,r4,r17
    7f3c:	a088983a 	sll	r4,r20,r2
    7f40:	003e4b06 	br	7870 <_dtoa_r+0x378>
    7f44:	01bfffc4 	movi	r6,-1
    7f48:	00800044 	movi	r2,1
    7f4c:	d9800e15 	stw	r6,56(sp)
    7f50:	d9800f15 	stw	r6,60(sp)
    7f54:	d8800b15 	stw	r2,44(sp)
    7f58:	d8c01617 	ldw	r3,88(sp)
    7f5c:	008005c4 	movi	r2,23
    7f60:	18001115 	stw	zero,68(r3)
    7f64:	1580082e 	bgeu	r2,r22,7f88 <_dtoa_r+0xa90>
    7f68:	00c00104 	movi	r3,4
    7f6c:	0009883a 	mov	r4,zero
    7f70:	18c7883a 	add	r3,r3,r3
    7f74:	18800504 	addi	r2,r3,20
    7f78:	21000044 	addi	r4,r4,1
    7f7c:	b0bffc2e 	bgeu	r22,r2,7f70 <_dtoa_r+0xa78>
    7f80:	d9801617 	ldw	r6,88(sp)
    7f84:	31001115 	stw	r4,68(r6)
    7f88:	dc000f17 	ldw	r16,60(sp)
    7f8c:	003e4b06 	br	78bc <_dtoa_r+0x3c4>
    7f90:	d9801717 	ldw	r6,92(sp)
    7f94:	0023883a 	mov	r17,zero
    7f98:	31bfff04 	addi	r6,r6,-4
    7f9c:	d9801715 	stw	r6,92(sp)
    7fa0:	003df806 	br	7784 <_dtoa_r+0x28c>
    7fa4:	00800804 	movi	r2,32
    7fa8:	10c9c83a 	sub	r4,r2,r3
    7fac:	00c00104 	movi	r3,4
    7fb0:	19005a16 	blt	r3,r4,811c <_dtoa_r+0xc24>
    7fb4:	008000c4 	movi	r2,3
    7fb8:	113f7e16 	blt	r2,r4,7db4 <_dtoa_r+0x8bc>
    7fbc:	20800704 	addi	r2,r4,28
    7fc0:	003f7506 	br	7d98 <_dtoa_r+0x8a0>
    7fc4:	d9801717 	ldw	r6,92(sp)
    7fc8:	00800044 	movi	r2,1
    7fcc:	1180a10e 	bge	r2,r6,8254 <_dtoa_r+0xd5c>
    7fd0:	d9800f17 	ldw	r6,60(sp)
    7fd4:	d8c01017 	ldw	r3,64(sp)
    7fd8:	30bfffc4 	addi	r2,r6,-1
    7fdc:	1881c616 	blt	r3,r2,86f8 <_dtoa_r+0x1200>
    7fe0:	18a5c83a 	sub	r18,r3,r2
    7fe4:	d8800f17 	ldw	r2,60(sp)
    7fe8:	10026216 	blt	r2,zero,8974 <_dtoa_r+0x147c>
    7fec:	dc001117 	ldw	r16,68(sp)
    7ff0:	1007883a 	mov	r3,r2
    7ff4:	d9800a17 	ldw	r6,40(sp)
    7ff8:	d8801117 	ldw	r2,68(sp)
    7ffc:	d9001617 	ldw	r4,88(sp)
    8000:	30cd883a 	add	r6,r6,r3
    8004:	10c5883a 	add	r2,r2,r3
    8008:	01400044 	movi	r5,1
    800c:	d9800a15 	stw	r6,40(sp)
    8010:	d8801115 	stw	r2,68(sp)
    8014:	000abc40 	call	abc4 <__i2b>
    8018:	1027883a 	mov	r19,r2
    801c:	003f2506 	br	7cb4 <_dtoa_r+0x7bc>
    8020:	00c00074 	movhi	r3,1
    8024:	18fdf104 	addi	r3,r3,-2108
    8028:	003d6706 	br	75c8 <_dtoa_r+0xd0>
    802c:	dd800517 	ldw	r22,20(sp)
    8030:	04000044 	movi	r16,1
    8034:	00000706 	br	8054 <_dtoa_r+0xb5c>
    8038:	d9400717 	ldw	r5,28(sp)
    803c:	d9001617 	ldw	r4,88(sp)
    8040:	01800284 	movi	r6,10
    8044:	000f883a 	mov	r7,zero
    8048:	000ac000 	call	ac00 <__multadd>
    804c:	d8800715 	stw	r2,28(sp)
    8050:	84000044 	addi	r16,r16,1
    8054:	d9000717 	ldw	r4,28(sp)
    8058:	900b883a 	mov	r5,r18
    805c:	00072e00 	call	72e0 <quorem>
    8060:	15c00c04 	addi	r23,r2,48
    8064:	b5c00005 	stb	r23,0(r22)
    8068:	d8c00f17 	ldw	r3,60(sp)
    806c:	b5800044 	addi	r22,r22,1
    8070:	80fff116 	blt	r16,r3,8038 <_dtoa_r+0xb40>
    8074:	d8000615 	stw	zero,24(sp)
    8078:	d9400717 	ldw	r5,28(sp)
    807c:	d9001617 	ldw	r4,88(sp)
    8080:	01800044 	movi	r6,1
    8084:	000a8900 	call	a890 <__lshift>
    8088:	1009883a 	mov	r4,r2
    808c:	900b883a 	mov	r5,r18
    8090:	d8800715 	stw	r2,28(sp)
    8094:	000a0a80 	call	a0a8 <__mcmp>
    8098:	00803c0e 	bge	zero,r2,818c <_dtoa_r+0xc94>
    809c:	b009883a 	mov	r4,r22
    80a0:	213fffc4 	addi	r4,r4,-1
    80a4:	21400003 	ldbu	r5,0(r4)
    80a8:	00800e44 	movi	r2,57
    80ac:	28c03fcc 	andi	r3,r5,255
    80b0:	18c0201c 	xori	r3,r3,128
    80b4:	18ffe004 	addi	r3,r3,-128
    80b8:	1881981e 	bne	r3,r2,871c <_dtoa_r+0x1224>
    80bc:	d9800517 	ldw	r6,20(sp)
    80c0:	21bff71e 	bne	r4,r6,80a0 <_dtoa_r+0xba8>
    80c4:	d8800d17 	ldw	r2,52(sp)
    80c8:	37000044 	addi	fp,r6,1
    80cc:	10800044 	addi	r2,r2,1
    80d0:	d8800d15 	stw	r2,52(sp)
    80d4:	00800c44 	movi	r2,49
    80d8:	30800005 	stb	r2,0(r6)
    80dc:	d9001617 	ldw	r4,88(sp)
    80e0:	900b883a 	mov	r5,r18
    80e4:	0009f4c0 	call	9f4c <_Bfree>
    80e8:	983ecd26 	beq	r19,zero,7c20 <_dtoa_r+0x728>
    80ec:	d8c00617 	ldw	r3,24(sp)
    80f0:	18000426 	beq	r3,zero,8104 <_dtoa_r+0xc0c>
    80f4:	1cc00326 	beq	r3,r19,8104 <_dtoa_r+0xc0c>
    80f8:	d9001617 	ldw	r4,88(sp)
    80fc:	180b883a 	mov	r5,r3
    8100:	0009f4c0 	call	9f4c <_Bfree>
    8104:	d9001617 	ldw	r4,88(sp)
    8108:	980b883a 	mov	r5,r19
    810c:	0009f4c0 	call	9f4c <_Bfree>
    8110:	003ec306 	br	7c20 <_dtoa_r+0x728>
    8114:	1805883a 	mov	r2,r3
    8118:	003eeb06 	br	7cc8 <_dtoa_r+0x7d0>
    811c:	d9800a17 	ldw	r6,40(sp)
    8120:	d8c01117 	ldw	r3,68(sp)
    8124:	20bfff04 	addi	r2,r4,-4
    8128:	308d883a 	add	r6,r6,r2
    812c:	1887883a 	add	r3,r3,r2
    8130:	80a1883a 	add	r16,r16,r2
    8134:	d9800a15 	stw	r6,40(sp)
    8138:	d8c01115 	stw	r3,68(sp)
    813c:	003f1d06 	br	7db4 <_dtoa_r+0x8bc>
    8140:	a03f0c1e 	bne	r20,zero,7d74 <_dtoa_r+0x87c>
    8144:	00800434 	movhi	r2,16
    8148:	10bfffc4 	addi	r2,r2,-1
    814c:	a884703a 	and	r2,r21,r2
    8150:	103f081e 	bne	r2,zero,7d74 <_dtoa_r+0x87c>
    8154:	a89ffc2c 	andhi	r2,r21,32752
    8158:	103f0626 	beq	r2,zero,7d74 <_dtoa_r+0x87c>
    815c:	d8c01117 	ldw	r3,68(sp)
    8160:	d9000a17 	ldw	r4,40(sp)
    8164:	18c00044 	addi	r3,r3,1
    8168:	21000044 	addi	r4,r4,1
    816c:	d8c01115 	stw	r3,68(sp)
    8170:	d9000a15 	stw	r4,40(sp)
    8174:	003f0006 	br	7d78 <_dtoa_r+0x880>
    8178:	d9400717 	ldw	r5,28(sp)
    817c:	d9001617 	ldw	r4,88(sp)
    8180:	000ad000 	call	ad00 <__pow5mult>
    8184:	d8800715 	stw	r2,28(sp)
    8188:	003eed06 	br	7d40 <_dtoa_r+0x848>
    818c:	1000021e 	bne	r2,zero,8198 <_dtoa_r+0xca0>
    8190:	b880004c 	andi	r2,r23,1
    8194:	103fc11e 	bne	r2,zero,809c <_dtoa_r+0xba4>
    8198:	b5bfffc4 	addi	r22,r22,-1
    819c:	b0c00007 	ldb	r3,0(r22)
    81a0:	00800c04 	movi	r2,48
    81a4:	18bffc26 	beq	r3,r2,8198 <_dtoa_r+0xca0>
    81a8:	b7000044 	addi	fp,r22,1
    81ac:	003fcb06 	br	80dc <_dtoa_r+0xbe4>
    81b0:	d9800d17 	ldw	r6,52(sp)
    81b4:	018fc83a 	sub	r7,zero,r6
    81b8:	3801f726 	beq	r7,zero,8998 <_dtoa_r+0x14a0>
    81bc:	398003cc 	andi	r6,r7,15
    81c0:	300c90fa 	slli	r6,r6,3
    81c4:	01400074 	movhi	r5,1
    81c8:	297e6d04 	addi	r5,r5,-1612
    81cc:	d9001217 	ldw	r4,72(sp)
    81d0:	314d883a 	add	r6,r6,r5
    81d4:	30c00117 	ldw	r3,4(r6)
    81d8:	30800017 	ldw	r2,0(r6)
    81dc:	d9401317 	ldw	r5,76(sp)
    81e0:	3821d13a 	srai	r16,r7,4
    81e4:	100d883a 	mov	r6,r2
    81e8:	180f883a 	mov	r7,r3
    81ec:	000369c0 	call	369c <__muldf3>
    81f0:	1011883a 	mov	r8,r2
    81f4:	1813883a 	mov	r9,r3
    81f8:	1029883a 	mov	r20,r2
    81fc:	182b883a 	mov	r21,r3
    8200:	8001e526 	beq	r16,zero,8998 <_dtoa_r+0x14a0>
    8204:	05800084 	movi	r22,2
    8208:	04400074 	movhi	r17,1
    820c:	8c7e9f04 	addi	r17,r17,-1412
    8210:	8080004c 	andi	r2,r16,1
    8214:	1005003a 	cmpeq	r2,r2,zero
    8218:	1000081e 	bne	r2,zero,823c <_dtoa_r+0xd44>
    821c:	89800017 	ldw	r6,0(r17)
    8220:	89c00117 	ldw	r7,4(r17)
    8224:	480b883a 	mov	r5,r9
    8228:	4009883a 	mov	r4,r8
    822c:	000369c0 	call	369c <__muldf3>
    8230:	1011883a 	mov	r8,r2
    8234:	b5800044 	addi	r22,r22,1
    8238:	1813883a 	mov	r9,r3
    823c:	8021d07a 	srai	r16,r16,1
    8240:	8c400204 	addi	r17,r17,8
    8244:	803ff21e 	bne	r16,zero,8210 <_dtoa_r+0xd18>
    8248:	4029883a 	mov	r20,r8
    824c:	482b883a 	mov	r21,r9
    8250:	003dca06 	br	797c <_dtoa_r+0x484>
    8254:	d9000817 	ldw	r4,32(sp)
    8258:	2005003a 	cmpeq	r2,r4,zero
    825c:	1001f61e 	bne	r2,zero,8a38 <_dtoa_r+0x1540>
    8260:	dc001117 	ldw	r16,68(sp)
    8264:	dc801017 	ldw	r18,64(sp)
    8268:	18c10cc4 	addi	r3,r3,1075
    826c:	003f6106 	br	7ff4 <_dtoa_r+0xafc>
    8270:	d8000b15 	stw	zero,44(sp)
    8274:	d9802617 	ldw	r6,152(sp)
    8278:	d8c00d17 	ldw	r3,52(sp)
    827c:	30800044 	addi	r2,r6,1
    8280:	18ad883a 	add	r22,r3,r2
    8284:	b13fffc4 	addi	r4,r22,-1
    8288:	d9000e15 	stw	r4,56(sp)
    828c:	0581f60e 	bge	zero,r22,8a68 <_dtoa_r+0x1570>
    8290:	dd800f15 	stw	r22,60(sp)
    8294:	003f3006 	br	7f58 <_dtoa_r+0xa60>
    8298:	d8000b15 	stw	zero,44(sp)
    829c:	d9002617 	ldw	r4,152(sp)
    82a0:	0101eb0e 	bge	zero,r4,8a50 <_dtoa_r+0x1558>
    82a4:	202d883a 	mov	r22,r4
    82a8:	d9000e15 	stw	r4,56(sp)
    82ac:	d9000f15 	stw	r4,60(sp)
    82b0:	003f2906 	br	7f58 <_dtoa_r+0xa60>
    82b4:	01800044 	movi	r6,1
    82b8:	d9800b15 	stw	r6,44(sp)
    82bc:	003ff706 	br	829c <_dtoa_r+0xda4>
    82c0:	01000044 	movi	r4,1
    82c4:	d9000b15 	stw	r4,44(sp)
    82c8:	003fea06 	br	8274 <_dtoa_r+0xd7c>
    82cc:	04000c0e 	bge	zero,r16,8300 <_dtoa_r+0xe08>
    82d0:	d9400717 	ldw	r5,28(sp)
    82d4:	d9001617 	ldw	r4,88(sp)
    82d8:	01800044 	movi	r6,1
    82dc:	000a8900 	call	a890 <__lshift>
    82e0:	1009883a 	mov	r4,r2
    82e4:	900b883a 	mov	r5,r18
    82e8:	d8800715 	stw	r2,28(sp)
    82ec:	000a0a80 	call	a0a8 <__mcmp>
    82f0:	0081e00e 	bge	zero,r2,8a74 <_dtoa_r+0x157c>
    82f4:	bdc00044 	addi	r23,r23,1
    82f8:	00800e84 	movi	r2,58
    82fc:	b881a226 	beq	r23,r2,8988 <_dtoa_r+0x1490>
    8300:	b7000044 	addi	fp,r22,1
    8304:	b5c00005 	stb	r23,0(r22)
    8308:	003f7406 	br	80dc <_dtoa_r+0xbe4>
    830c:	00800e44 	movi	r2,57
    8310:	b8819d26 	beq	r23,r2,8988 <_dtoa_r+0x1490>
    8314:	053ffa0e 	bge	zero,r20,8300 <_dtoa_r+0xe08>
    8318:	8dc00c44 	addi	r23,r17,49
    831c:	003ff806 	br	8300 <_dtoa_r+0xe08>
    8320:	d9001617 	ldw	r4,88(sp)
    8324:	a80b883a 	mov	r5,r21
    8328:	04000044 	movi	r16,1
    832c:	0009f4c0 	call	9f4c <_Bfree>
    8330:	003edf06 	br	7eb0 <_dtoa_r+0x9b8>
    8334:	d9001617 	ldw	r4,88(sp)
    8338:	980b883a 	mov	r5,r19
    833c:	01800284 	movi	r6,10
    8340:	000f883a 	mov	r7,zero
    8344:	000ac000 	call	ac00 <__multadd>
    8348:	1027883a 	mov	r19,r2
    834c:	d8800615 	stw	r2,24(sp)
    8350:	003ebb06 	br	7e40 <_dtoa_r+0x948>
    8354:	d9801117 	ldw	r6,68(sp)
    8358:	d8800d17 	ldw	r2,52(sp)
    835c:	d8000915 	stw	zero,36(sp)
    8360:	308dc83a 	sub	r6,r6,r2
    8364:	0087c83a 	sub	r3,zero,r2
    8368:	d9801115 	stw	r6,68(sp)
    836c:	d8c01015 	stw	r3,64(sp)
    8370:	003cfe06 	br	776c <_dtoa_r+0x274>
    8374:	018dc83a 	sub	r6,zero,r6
    8378:	d9801115 	stw	r6,68(sp)
    837c:	d8000a15 	stw	zero,40(sp)
    8380:	003cf306 	br	7750 <_dtoa_r+0x258>
    8384:	d9000d17 	ldw	r4,52(sp)
    8388:	0003f600 	call	3f60 <__floatsidf>
    838c:	880b883a 	mov	r5,r17
    8390:	8009883a 	mov	r4,r16
    8394:	180f883a 	mov	r7,r3
    8398:	100d883a 	mov	r6,r2
    839c:	000c79c0 	call	c79c <__nedf2>
    83a0:	103ce126 	beq	r2,zero,7728 <_dtoa_r+0x230>
    83a4:	d9800d17 	ldw	r6,52(sp)
    83a8:	31bfffc4 	addi	r6,r6,-1
    83ac:	d9800d15 	stw	r6,52(sp)
    83b0:	003cdd06 	br	7728 <_dtoa_r+0x230>
    83b4:	d9000717 	ldw	r4,28(sp)
    83b8:	900b883a 	mov	r5,r18
    83bc:	000a0a80 	call	a0a8 <__mcmp>
    83c0:	103e8d0e 	bge	r2,zero,7df8 <_dtoa_r+0x900>
    83c4:	d9400717 	ldw	r5,28(sp)
    83c8:	d9001617 	ldw	r4,88(sp)
    83cc:	01800284 	movi	r6,10
    83d0:	000f883a 	mov	r7,zero
    83d4:	000ac000 	call	ac00 <__multadd>
    83d8:	d9800d17 	ldw	r6,52(sp)
    83dc:	d8800715 	stw	r2,28(sp)
    83e0:	31bfffc4 	addi	r6,r6,-1
    83e4:	d9800d15 	stw	r6,52(sp)
    83e8:	b001a71e 	bne	r22,zero,8a88 <_dtoa_r+0x1590>
    83ec:	d8800e17 	ldw	r2,56(sp)
    83f0:	d8800f15 	stw	r2,60(sp)
    83f4:	003e8006 	br	7df8 <_dtoa_r+0x900>
    83f8:	90800417 	ldw	r2,16(r18)
    83fc:	1085883a 	add	r2,r2,r2
    8400:	1085883a 	add	r2,r2,r2
    8404:	1485883a 	add	r2,r2,r18
    8408:	11000417 	ldw	r4,16(r2)
    840c:	0009f740 	call	9f74 <__hi0bits>
    8410:	00c00804 	movi	r3,32
    8414:	1887c83a 	sub	r3,r3,r2
    8418:	003e5a06 	br	7d84 <_dtoa_r+0x88c>
    841c:	d9400717 	ldw	r5,28(sp)
    8420:	d9801017 	ldw	r6,64(sp)
    8424:	d9001617 	ldw	r4,88(sp)
    8428:	000ad000 	call	ad00 <__pow5mult>
    842c:	d8800715 	stw	r2,28(sp)
    8430:	003e4306 	br	7d40 <_dtoa_r+0x848>
    8434:	d9800f17 	ldw	r6,60(sp)
    8438:	d8800d17 	ldw	r2,52(sp)
    843c:	d9800315 	stw	r6,12(sp)
    8440:	d8800415 	stw	r2,16(sp)
    8444:	d8c00b17 	ldw	r3,44(sp)
    8448:	1805003a 	cmpeq	r2,r3,zero
    844c:	1000e21e 	bne	r2,zero,87d8 <_dtoa_r+0x12e0>
    8450:	d9000317 	ldw	r4,12(sp)
    8454:	0005883a 	mov	r2,zero
    8458:	00cff834 	movhi	r3,16352
    845c:	200c90fa 	slli	r6,r4,3
    8460:	01000074 	movhi	r4,1
    8464:	213e6d04 	addi	r4,r4,-1612
    8468:	180b883a 	mov	r5,r3
    846c:	310d883a 	add	r6,r6,r4
    8470:	327fff17 	ldw	r9,-4(r6)
    8474:	323ffe17 	ldw	r8,-8(r6)
    8478:	1009883a 	mov	r4,r2
    847c:	480f883a 	mov	r7,r9
    8480:	400d883a 	mov	r6,r8
    8484:	0003a600 	call	3a60 <__divdf3>
    8488:	180b883a 	mov	r5,r3
    848c:	b00d883a 	mov	r6,r22
    8490:	b80f883a 	mov	r7,r23
    8494:	1009883a 	mov	r4,r2
    8498:	00035a80 	call	35a8 <__subdf3>
    849c:	a80b883a 	mov	r5,r21
    84a0:	a009883a 	mov	r4,r20
    84a4:	d8c01915 	stw	r3,100(sp)
    84a8:	d8801815 	stw	r2,96(sp)
    84ac:	000c8240 	call	c824 <__fixdfsi>
    84b0:	1009883a 	mov	r4,r2
    84b4:	1027883a 	mov	r19,r2
    84b8:	0003f600 	call	3f60 <__floatsidf>
    84bc:	a80b883a 	mov	r5,r21
    84c0:	a009883a 	mov	r4,r20
    84c4:	180f883a 	mov	r7,r3
    84c8:	100d883a 	mov	r6,r2
    84cc:	00035a80 	call	35a8 <__subdf3>
    84d0:	d9801817 	ldw	r6,96(sp)
    84d4:	1823883a 	mov	r17,r3
    84d8:	d8801415 	stw	r2,80(sp)
    84dc:	302d883a 	mov	r22,r6
    84e0:	d9800517 	ldw	r6,20(sp)
    84e4:	9cc00c04 	addi	r19,r19,48
    84e8:	dc401515 	stw	r17,84(sp)
    84ec:	d8c01917 	ldw	r3,100(sp)
    84f0:	34c00005 	stb	r19,0(r6)
    84f4:	d8800517 	ldw	r2,20(sp)
    84f8:	d9401917 	ldw	r5,100(sp)
    84fc:	d9801417 	ldw	r6,80(sp)
    8500:	b009883a 	mov	r4,r22
    8504:	880f883a 	mov	r7,r17
    8508:	182f883a 	mov	r23,r3
    850c:	17000044 	addi	fp,r2,1
    8510:	0003d400 	call	3d40 <__gtdf2>
    8514:	00804e16 	blt	zero,r2,8650 <_dtoa_r+0x1158>
    8518:	d9801417 	ldw	r6,80(sp)
    851c:	0005883a 	mov	r2,zero
    8520:	00cffc34 	movhi	r3,16368
    8524:	180b883a 	mov	r5,r3
    8528:	880f883a 	mov	r7,r17
    852c:	1009883a 	mov	r4,r2
    8530:	00035a80 	call	35a8 <__subdf3>
    8534:	d9401917 	ldw	r5,100(sp)
    8538:	180f883a 	mov	r7,r3
    853c:	b009883a 	mov	r4,r22
    8540:	100d883a 	mov	r6,r2
    8544:	0003d400 	call	3d40 <__gtdf2>
    8548:	00bda216 	blt	zero,r2,7bd4 <_dtoa_r+0x6dc>
    854c:	d8c00317 	ldw	r3,12(sp)
    8550:	00800044 	movi	r2,1
    8554:	10c01216 	blt	r2,r3,85a0 <_dtoa_r+0x10a8>
    8558:	003d4506 	br	7a70 <_dtoa_r+0x578>
    855c:	d9801417 	ldw	r6,80(sp)
    8560:	0005883a 	mov	r2,zero
    8564:	00cffc34 	movhi	r3,16368
    8568:	180b883a 	mov	r5,r3
    856c:	880f883a 	mov	r7,r17
    8570:	1009883a 	mov	r4,r2
    8574:	00035a80 	call	35a8 <__subdf3>
    8578:	d9c01b17 	ldw	r7,108(sp)
    857c:	180b883a 	mov	r5,r3
    8580:	1009883a 	mov	r4,r2
    8584:	b00d883a 	mov	r6,r22
    8588:	0003e500 	call	3e50 <__ltdf2>
    858c:	103d9116 	blt	r2,zero,7bd4 <_dtoa_r+0x6dc>
    8590:	d9800517 	ldw	r6,20(sp)
    8594:	d9000317 	ldw	r4,12(sp)
    8598:	3105883a 	add	r2,r6,r4
    859c:	e0bd3426 	beq	fp,r2,7a70 <_dtoa_r+0x578>
    85a0:	04500934 	movhi	r17,16420
    85a4:	0021883a 	mov	r16,zero
    85a8:	b80b883a 	mov	r5,r23
    85ac:	b009883a 	mov	r4,r22
    85b0:	800d883a 	mov	r6,r16
    85b4:	880f883a 	mov	r7,r17
    85b8:	000369c0 	call	369c <__muldf3>
    85bc:	d9401517 	ldw	r5,84(sp)
    85c0:	d9001417 	ldw	r4,80(sp)
    85c4:	880f883a 	mov	r7,r17
    85c8:	000d883a 	mov	r6,zero
    85cc:	d8801a15 	stw	r2,104(sp)
    85d0:	d8c01b15 	stw	r3,108(sp)
    85d4:	000369c0 	call	369c <__muldf3>
    85d8:	180b883a 	mov	r5,r3
    85dc:	1009883a 	mov	r4,r2
    85e0:	1823883a 	mov	r17,r3
    85e4:	1021883a 	mov	r16,r2
    85e8:	000c8240 	call	c824 <__fixdfsi>
    85ec:	1009883a 	mov	r4,r2
    85f0:	102b883a 	mov	r21,r2
    85f4:	0003f600 	call	3f60 <__floatsidf>
    85f8:	880b883a 	mov	r5,r17
    85fc:	8009883a 	mov	r4,r16
    8600:	180f883a 	mov	r7,r3
    8604:	100d883a 	mov	r6,r2
    8608:	00035a80 	call	35a8 <__subdf3>
    860c:	1021883a 	mov	r16,r2
    8610:	d9001b17 	ldw	r4,108(sp)
    8614:	1823883a 	mov	r17,r3
    8618:	dc001415 	stw	r16,80(sp)
    861c:	ad400c04 	addi	r21,r21,48
    8620:	dc401515 	stw	r17,84(sp)
    8624:	d8801a17 	ldw	r2,104(sp)
    8628:	e5400005 	stb	r21,0(fp)
    862c:	202f883a 	mov	r23,r4
    8630:	d9c01b17 	ldw	r7,108(sp)
    8634:	d9001417 	ldw	r4,80(sp)
    8638:	880b883a 	mov	r5,r17
    863c:	100d883a 	mov	r6,r2
    8640:	102d883a 	mov	r22,r2
    8644:	e7000044 	addi	fp,fp,1
    8648:	0003e500 	call	3e50 <__ltdf2>
    864c:	103fc30e 	bge	r2,zero,855c <_dtoa_r+0x1064>
    8650:	d9000417 	ldw	r4,16(sp)
    8654:	d9000d15 	stw	r4,52(sp)
    8658:	003d7106 	br	7c20 <_dtoa_r+0x728>
    865c:	d9801717 	ldw	r6,92(sp)
    8660:	00800084 	movi	r2,2
    8664:	11bde60e 	bge	r2,r6,7e00 <_dtoa_r+0x908>
    8668:	203cfb1e 	bne	r4,zero,7a58 <_dtoa_r+0x560>
    866c:	d9001617 	ldw	r4,88(sp)
    8670:	900b883a 	mov	r5,r18
    8674:	01800144 	movi	r6,5
    8678:	000f883a 	mov	r7,zero
    867c:	000ac000 	call	ac00 <__multadd>
    8680:	d9000717 	ldw	r4,28(sp)
    8684:	100b883a 	mov	r5,r2
    8688:	1025883a 	mov	r18,r2
    868c:	000a0a80 	call	a0a8 <__mcmp>
    8690:	00bcf10e 	bge	zero,r2,7a58 <_dtoa_r+0x560>
    8694:	d8c00d17 	ldw	r3,52(sp)
    8698:	d9000517 	ldw	r4,20(sp)
    869c:	d8000615 	stw	zero,24(sp)
    86a0:	18c00044 	addi	r3,r3,1
    86a4:	d8c00d15 	stw	r3,52(sp)
    86a8:	00800c44 	movi	r2,49
    86ac:	27000044 	addi	fp,r4,1
    86b0:	20800005 	stb	r2,0(r4)
    86b4:	003e8906 	br	80dc <_dtoa_r+0xbe4>
    86b8:	d8c00517 	ldw	r3,20(sp)
    86bc:	003bc206 	br	75c8 <_dtoa_r+0xd0>
    86c0:	01800074 	movhi	r6,1
    86c4:	31be9f04 	addi	r6,r6,-1412
    86c8:	30c00917 	ldw	r3,36(r6)
    86cc:	30800817 	ldw	r2,32(r6)
    86d0:	d9001217 	ldw	r4,72(sp)
    86d4:	d9401317 	ldw	r5,76(sp)
    86d8:	180f883a 	mov	r7,r3
    86dc:	100d883a 	mov	r6,r2
    86e0:	0003a600 	call	3a60 <__divdf3>
    86e4:	948003cc 	andi	r18,r18,15
    86e8:	058000c4 	movi	r22,3
    86ec:	1029883a 	mov	r20,r2
    86f0:	182b883a 	mov	r21,r3
    86f4:	003c8906 	br	791c <_dtoa_r+0x424>
    86f8:	d9001017 	ldw	r4,64(sp)
    86fc:	d9800917 	ldw	r6,36(sp)
    8700:	0025883a 	mov	r18,zero
    8704:	1105c83a 	sub	r2,r2,r4
    8708:	2089883a 	add	r4,r4,r2
    870c:	308d883a 	add	r6,r6,r2
    8710:	d9001015 	stw	r4,64(sp)
    8714:	d9800915 	stw	r6,36(sp)
    8718:	003e3206 	br	7fe4 <_dtoa_r+0xaec>
    871c:	28800044 	addi	r2,r5,1
    8720:	27000044 	addi	fp,r4,1
    8724:	20800005 	stb	r2,0(r4)
    8728:	003e6c06 	br	80dc <_dtoa_r+0xbe4>
    872c:	d8800f17 	ldw	r2,60(sp)
    8730:	00bce016 	blt	zero,r2,7ab4 <_dtoa_r+0x5bc>
    8734:	d9800f17 	ldw	r6,60(sp)
    8738:	303cc51e 	bne	r6,zero,7a50 <_dtoa_r+0x558>
    873c:	0005883a 	mov	r2,zero
    8740:	00d00534 	movhi	r3,16404
    8744:	980b883a 	mov	r5,r19
    8748:	180f883a 	mov	r7,r3
    874c:	9009883a 	mov	r4,r18
    8750:	100d883a 	mov	r6,r2
    8754:	000369c0 	call	369c <__muldf3>
    8758:	180b883a 	mov	r5,r3
    875c:	a80f883a 	mov	r7,r21
    8760:	1009883a 	mov	r4,r2
    8764:	a00d883a 	mov	r6,r20
    8768:	0003dc80 	call	3dc8 <__gedf2>
    876c:	103cb80e 	bge	r2,zero,7a50 <_dtoa_r+0x558>
    8770:	0027883a 	mov	r19,zero
    8774:	0025883a 	mov	r18,zero
    8778:	003fc606 	br	8694 <_dtoa_r+0x119c>
    877c:	99400117 	ldw	r5,4(r19)
    8780:	d9001617 	ldw	r4,88(sp)
    8784:	000a4cc0 	call	a4cc <_Balloc>
    8788:	99800417 	ldw	r6,16(r19)
    878c:	11000304 	addi	r4,r2,12
    8790:	99400304 	addi	r5,r19,12
    8794:	318d883a 	add	r6,r6,r6
    8798:	318d883a 	add	r6,r6,r6
    879c:	31800204 	addi	r6,r6,8
    87a0:	1023883a 	mov	r17,r2
    87a4:	0009d340 	call	9d34 <memcpy>
    87a8:	d9001617 	ldw	r4,88(sp)
    87ac:	880b883a 	mov	r5,r17
    87b0:	01800044 	movi	r6,1
    87b4:	000a8900 	call	a890 <__lshift>
    87b8:	100b883a 	mov	r5,r2
    87bc:	003d9c06 	br	7e30 <_dtoa_r+0x938>
    87c0:	00800e44 	movi	r2,57
    87c4:	b8807026 	beq	r23,r2,8988 <_dtoa_r+0x1490>
    87c8:	b8800044 	addi	r2,r23,1
    87cc:	b7000044 	addi	fp,r22,1
    87d0:	b0800005 	stb	r2,0(r22)
    87d4:	003e4106 	br	80dc <_dtoa_r+0xbe4>
    87d8:	d8800317 	ldw	r2,12(sp)
    87dc:	01800074 	movhi	r6,1
    87e0:	31be6d04 	addi	r6,r6,-1612
    87e4:	b009883a 	mov	r4,r22
    87e8:	100e90fa 	slli	r7,r2,3
    87ec:	b80b883a 	mov	r5,r23
    87f0:	398f883a 	add	r7,r7,r6
    87f4:	38bffe17 	ldw	r2,-8(r7)
    87f8:	d9800517 	ldw	r6,20(sp)
    87fc:	38ffff17 	ldw	r3,-4(r7)
    8800:	37000044 	addi	fp,r6,1
    8804:	180f883a 	mov	r7,r3
    8808:	100d883a 	mov	r6,r2
    880c:	000369c0 	call	369c <__muldf3>
    8810:	a80b883a 	mov	r5,r21
    8814:	a009883a 	mov	r4,r20
    8818:	182f883a 	mov	r23,r3
    881c:	102d883a 	mov	r22,r2
    8820:	000c8240 	call	c824 <__fixdfsi>
    8824:	1009883a 	mov	r4,r2
    8828:	1027883a 	mov	r19,r2
    882c:	0003f600 	call	3f60 <__floatsidf>
    8830:	a80b883a 	mov	r5,r21
    8834:	a009883a 	mov	r4,r20
    8838:	180f883a 	mov	r7,r3
    883c:	100d883a 	mov	r6,r2
    8840:	00035a80 	call	35a8 <__subdf3>
    8844:	180b883a 	mov	r5,r3
    8848:	d8c00517 	ldw	r3,20(sp)
    884c:	9cc00c04 	addi	r19,r19,48
    8850:	1009883a 	mov	r4,r2
    8854:	1cc00005 	stb	r19,0(r3)
    8858:	2021883a 	mov	r16,r4
    885c:	d9000317 	ldw	r4,12(sp)
    8860:	00800044 	movi	r2,1
    8864:	2823883a 	mov	r17,r5
    8868:	20802226 	beq	r4,r2,88f4 <_dtoa_r+0x13fc>
    886c:	1029883a 	mov	r20,r2
    8870:	0005883a 	mov	r2,zero
    8874:	00d00934 	movhi	r3,16420
    8878:	180f883a 	mov	r7,r3
    887c:	100d883a 	mov	r6,r2
    8880:	880b883a 	mov	r5,r17
    8884:	8009883a 	mov	r4,r16
    8888:	000369c0 	call	369c <__muldf3>
    888c:	180b883a 	mov	r5,r3
    8890:	1009883a 	mov	r4,r2
    8894:	1823883a 	mov	r17,r3
    8898:	1021883a 	mov	r16,r2
    889c:	000c8240 	call	c824 <__fixdfsi>
    88a0:	1009883a 	mov	r4,r2
    88a4:	102b883a 	mov	r21,r2
    88a8:	0003f600 	call	3f60 <__floatsidf>
    88ac:	880b883a 	mov	r5,r17
    88b0:	8009883a 	mov	r4,r16
    88b4:	180f883a 	mov	r7,r3
    88b8:	100d883a 	mov	r6,r2
    88bc:	00035a80 	call	35a8 <__subdf3>
    88c0:	180b883a 	mov	r5,r3
    88c4:	d8c00517 	ldw	r3,20(sp)
    88c8:	1009883a 	mov	r4,r2
    88cc:	ad400c04 	addi	r21,r21,48
    88d0:	1d05883a 	add	r2,r3,r20
    88d4:	15400005 	stb	r21,0(r2)
    88d8:	2021883a 	mov	r16,r4
    88dc:	d9000317 	ldw	r4,12(sp)
    88e0:	a5000044 	addi	r20,r20,1
    88e4:	2823883a 	mov	r17,r5
    88e8:	a13fe11e 	bne	r20,r4,8870 <_dtoa_r+0x1378>
    88ec:	e505883a 	add	r2,fp,r20
    88f0:	173fffc4 	addi	fp,r2,-1
    88f4:	0025883a 	mov	r18,zero
    88f8:	04cff834 	movhi	r19,16352
    88fc:	b009883a 	mov	r4,r22
    8900:	b80b883a 	mov	r5,r23
    8904:	900d883a 	mov	r6,r18
    8908:	980f883a 	mov	r7,r19
    890c:	00036280 	call	3628 <__adddf3>
    8910:	180b883a 	mov	r5,r3
    8914:	1009883a 	mov	r4,r2
    8918:	800d883a 	mov	r6,r16
    891c:	880f883a 	mov	r7,r17
    8920:	0003e500 	call	3e50 <__ltdf2>
    8924:	103cab16 	blt	r2,zero,7bd4 <_dtoa_r+0x6dc>
    8928:	0009883a 	mov	r4,zero
    892c:	980b883a 	mov	r5,r19
    8930:	b80f883a 	mov	r7,r23
    8934:	b00d883a 	mov	r6,r22
    8938:	00035a80 	call	35a8 <__subdf3>
    893c:	180b883a 	mov	r5,r3
    8940:	880f883a 	mov	r7,r17
    8944:	1009883a 	mov	r4,r2
    8948:	800d883a 	mov	r6,r16
    894c:	0003d400 	call	3d40 <__gtdf2>
    8950:	00bc470e 	bge	zero,r2,7a70 <_dtoa_r+0x578>
    8954:	00c00c04 	movi	r3,48
    8958:	e73fffc4 	addi	fp,fp,-1
    895c:	e0800007 	ldb	r2,0(fp)
    8960:	10fffd26 	beq	r2,r3,8958 <_dtoa_r+0x1460>
    8964:	d9800417 	ldw	r6,16(sp)
    8968:	e7000044 	addi	fp,fp,1
    896c:	d9800d15 	stw	r6,52(sp)
    8970:	003cab06 	br	7c20 <_dtoa_r+0x728>
    8974:	d8c00f17 	ldw	r3,60(sp)
    8978:	d9001117 	ldw	r4,68(sp)
    897c:	20e1c83a 	sub	r16,r4,r3
    8980:	0007883a 	mov	r3,zero
    8984:	003d9b06 	br	7ff4 <_dtoa_r+0xafc>
    8988:	00800e44 	movi	r2,57
    898c:	b0800005 	stb	r2,0(r22)
    8990:	b5800044 	addi	r22,r22,1
    8994:	003dc106 	br	809c <_dtoa_r+0xba4>
    8998:	05800084 	movi	r22,2
    899c:	003bf706 	br	797c <_dtoa_r+0x484>
    89a0:	d9000f17 	ldw	r4,60(sp)
    89a4:	013c000e 	bge	zero,r4,79a8 <_dtoa_r+0x4b0>
    89a8:	d9800e17 	ldw	r6,56(sp)
    89ac:	01bc300e 	bge	zero,r6,7a70 <_dtoa_r+0x578>
    89b0:	0005883a 	mov	r2,zero
    89b4:	00d00934 	movhi	r3,16420
    89b8:	a80b883a 	mov	r5,r21
    89bc:	180f883a 	mov	r7,r3
    89c0:	a009883a 	mov	r4,r20
    89c4:	100d883a 	mov	r6,r2
    89c8:	000369c0 	call	369c <__muldf3>
    89cc:	b1000044 	addi	r4,r22,1
    89d0:	1021883a 	mov	r16,r2
    89d4:	1823883a 	mov	r17,r3
    89d8:	0003f600 	call	3f60 <__floatsidf>
    89dc:	880b883a 	mov	r5,r17
    89e0:	8009883a 	mov	r4,r16
    89e4:	180f883a 	mov	r7,r3
    89e8:	100d883a 	mov	r6,r2
    89ec:	000369c0 	call	369c <__muldf3>
    89f0:	0011883a 	mov	r8,zero
    89f4:	02500734 	movhi	r9,16412
    89f8:	180b883a 	mov	r5,r3
    89fc:	480f883a 	mov	r7,r9
    8a00:	1009883a 	mov	r4,r2
    8a04:	400d883a 	mov	r6,r8
    8a08:	00036280 	call	3628 <__adddf3>
    8a0c:	102d883a 	mov	r22,r2
    8a10:	00bf3034 	movhi	r2,64704
    8a14:	10ef883a 	add	r23,r2,r3
    8a18:	d8800d17 	ldw	r2,52(sp)
    8a1c:	d8c00e17 	ldw	r3,56(sp)
    8a20:	8029883a 	mov	r20,r16
    8a24:	10bfffc4 	addi	r2,r2,-1
    8a28:	882b883a 	mov	r21,r17
    8a2c:	d8800415 	stw	r2,16(sp)
    8a30:	d8c00315 	stw	r3,12(sp)
    8a34:	003e8306 	br	8444 <_dtoa_r+0xf4c>
    8a38:	d8800117 	ldw	r2,4(sp)
    8a3c:	dc001117 	ldw	r16,68(sp)
    8a40:	dc801017 	ldw	r18,64(sp)
    8a44:	00c00d84 	movi	r3,54
    8a48:	1887c83a 	sub	r3,r3,r2
    8a4c:	003d6906 	br	7ff4 <_dtoa_r+0xafc>
    8a50:	01800044 	movi	r6,1
    8a54:	3021883a 	mov	r16,r6
    8a58:	d9800f15 	stw	r6,60(sp)
    8a5c:	d9802615 	stw	r6,152(sp)
    8a60:	d9800e15 	stw	r6,56(sp)
    8a64:	003b9306 	br	78b4 <_dtoa_r+0x3bc>
    8a68:	b021883a 	mov	r16,r22
    8a6c:	dd800f15 	stw	r22,60(sp)
    8a70:	003b9006 	br	78b4 <_dtoa_r+0x3bc>
    8a74:	103e221e 	bne	r2,zero,8300 <_dtoa_r+0xe08>
    8a78:	b880004c 	andi	r2,r23,1
    8a7c:	1005003a 	cmpeq	r2,r2,zero
    8a80:	103e1f1e 	bne	r2,zero,8300 <_dtoa_r+0xe08>
    8a84:	003e1b06 	br	82f4 <_dtoa_r+0xdfc>
    8a88:	d9001617 	ldw	r4,88(sp)
    8a8c:	980b883a 	mov	r5,r19
    8a90:	01800284 	movi	r6,10
    8a94:	000f883a 	mov	r7,zero
    8a98:	000ac000 	call	ac00 <__multadd>
    8a9c:	d8c00e17 	ldw	r3,56(sp)
    8aa0:	1027883a 	mov	r19,r2
    8aa4:	d8c00f15 	stw	r3,60(sp)
    8aa8:	003cd306 	br	7df8 <_dtoa_r+0x900>

00008aac <_fflush_r>:
    8aac:	defffb04 	addi	sp,sp,-20
    8ab0:	dcc00315 	stw	r19,12(sp)
    8ab4:	dc800215 	stw	r18,8(sp)
    8ab8:	dfc00415 	stw	ra,16(sp)
    8abc:	dc400115 	stw	r17,4(sp)
    8ac0:	dc000015 	stw	r16,0(sp)
    8ac4:	2027883a 	mov	r19,r4
    8ac8:	2825883a 	mov	r18,r5
    8acc:	20000226 	beq	r4,zero,8ad8 <_fflush_r+0x2c>
    8ad0:	20800e17 	ldw	r2,56(r4)
    8ad4:	10005626 	beq	r2,zero,8c30 <_fflush_r+0x184>
    8ad8:	9100030b 	ldhu	r4,12(r18)
    8adc:	20ffffcc 	andi	r3,r4,65535
    8ae0:	18e0001c 	xori	r3,r3,32768
    8ae4:	18e00004 	addi	r3,r3,-32768
    8ae8:	1880020c 	andi	r2,r3,8
    8aec:	1000261e 	bne	r2,zero,8b88 <_fflush_r+0xdc>
    8af0:	90c00117 	ldw	r3,4(r18)
    8af4:	20820014 	ori	r2,r4,2048
    8af8:	9080030d 	sth	r2,12(r18)
    8afc:	1009883a 	mov	r4,r2
    8b00:	00c0400e 	bge	zero,r3,8c04 <_fflush_r+0x158>
    8b04:	92000a17 	ldw	r8,40(r18)
    8b08:	40004026 	beq	r8,zero,8c0c <_fflush_r+0x160>
    8b0c:	2084000c 	andi	r2,r4,4096
    8b10:	10005326 	beq	r2,zero,8c60 <_fflush_r+0x1b4>
    8b14:	94001417 	ldw	r16,80(r18)
    8b18:	9080030b 	ldhu	r2,12(r18)
    8b1c:	1080010c 	andi	r2,r2,4
    8b20:	1000481e 	bne	r2,zero,8c44 <_fflush_r+0x198>
    8b24:	91400717 	ldw	r5,28(r18)
    8b28:	9809883a 	mov	r4,r19
    8b2c:	800d883a 	mov	r6,r16
    8b30:	000f883a 	mov	r7,zero
    8b34:	403ee83a 	callr	r8
    8b38:	8080261e 	bne	r16,r2,8bd4 <_fflush_r+0x128>
    8b3c:	9080030b 	ldhu	r2,12(r18)
    8b40:	91000417 	ldw	r4,16(r18)
    8b44:	90000115 	stw	zero,4(r18)
    8b48:	10bdffcc 	andi	r2,r2,63487
    8b4c:	10ffffcc 	andi	r3,r2,65535
    8b50:	18c4000c 	andi	r3,r3,4096
    8b54:	9080030d 	sth	r2,12(r18)
    8b58:	91000015 	stw	r4,0(r18)
    8b5c:	18002b26 	beq	r3,zero,8c0c <_fflush_r+0x160>
    8b60:	0007883a 	mov	r3,zero
    8b64:	1805883a 	mov	r2,r3
    8b68:	94001415 	stw	r16,80(r18)
    8b6c:	dfc00417 	ldw	ra,16(sp)
    8b70:	dcc00317 	ldw	r19,12(sp)
    8b74:	dc800217 	ldw	r18,8(sp)
    8b78:	dc400117 	ldw	r17,4(sp)
    8b7c:	dc000017 	ldw	r16,0(sp)
    8b80:	dec00504 	addi	sp,sp,20
    8b84:	f800283a 	ret
    8b88:	94400417 	ldw	r17,16(r18)
    8b8c:	88001f26 	beq	r17,zero,8c0c <_fflush_r+0x160>
    8b90:	90800017 	ldw	r2,0(r18)
    8b94:	18c000cc 	andi	r3,r3,3
    8b98:	94400015 	stw	r17,0(r18)
    8b9c:	1461c83a 	sub	r16,r2,r17
    8ba0:	18002526 	beq	r3,zero,8c38 <_fflush_r+0x18c>
    8ba4:	0005883a 	mov	r2,zero
    8ba8:	90800215 	stw	r2,8(r18)
    8bac:	0400170e 	bge	zero,r16,8c0c <_fflush_r+0x160>
    8bb0:	90c00917 	ldw	r3,36(r18)
    8bb4:	91400717 	ldw	r5,28(r18)
    8bb8:	880d883a 	mov	r6,r17
    8bbc:	800f883a 	mov	r7,r16
    8bc0:	9809883a 	mov	r4,r19
    8bc4:	183ee83a 	callr	r3
    8bc8:	88a3883a 	add	r17,r17,r2
    8bcc:	80a1c83a 	sub	r16,r16,r2
    8bd0:	00bff616 	blt	zero,r2,8bac <_fflush_r+0x100>
    8bd4:	9080030b 	ldhu	r2,12(r18)
    8bd8:	00ffffc4 	movi	r3,-1
    8bdc:	10801014 	ori	r2,r2,64
    8be0:	9080030d 	sth	r2,12(r18)
    8be4:	1805883a 	mov	r2,r3
    8be8:	dfc00417 	ldw	ra,16(sp)
    8bec:	dcc00317 	ldw	r19,12(sp)
    8bf0:	dc800217 	ldw	r18,8(sp)
    8bf4:	dc400117 	ldw	r17,4(sp)
    8bf8:	dc000017 	ldw	r16,0(sp)
    8bfc:	dec00504 	addi	sp,sp,20
    8c00:	f800283a 	ret
    8c04:	90800f17 	ldw	r2,60(r18)
    8c08:	00bfbe16 	blt	zero,r2,8b04 <_fflush_r+0x58>
    8c0c:	0007883a 	mov	r3,zero
    8c10:	1805883a 	mov	r2,r3
    8c14:	dfc00417 	ldw	ra,16(sp)
    8c18:	dcc00317 	ldw	r19,12(sp)
    8c1c:	dc800217 	ldw	r18,8(sp)
    8c20:	dc400117 	ldw	r17,4(sp)
    8c24:	dc000017 	ldw	r16,0(sp)
    8c28:	dec00504 	addi	sp,sp,20
    8c2c:	f800283a 	ret
    8c30:	0008d440 	call	8d44 <__sinit>
    8c34:	003fa806 	br	8ad8 <_fflush_r+0x2c>
    8c38:	90800517 	ldw	r2,20(r18)
    8c3c:	90800215 	stw	r2,8(r18)
    8c40:	003fda06 	br	8bac <_fflush_r+0x100>
    8c44:	90800117 	ldw	r2,4(r18)
    8c48:	90c00c17 	ldw	r3,48(r18)
    8c4c:	80a1c83a 	sub	r16,r16,r2
    8c50:	183fb426 	beq	r3,zero,8b24 <_fflush_r+0x78>
    8c54:	90800f17 	ldw	r2,60(r18)
    8c58:	80a1c83a 	sub	r16,r16,r2
    8c5c:	003fb106 	br	8b24 <_fflush_r+0x78>
    8c60:	91400717 	ldw	r5,28(r18)
    8c64:	9809883a 	mov	r4,r19
    8c68:	000d883a 	mov	r6,zero
    8c6c:	01c00044 	movi	r7,1
    8c70:	403ee83a 	callr	r8
    8c74:	1021883a 	mov	r16,r2
    8c78:	00bfffc4 	movi	r2,-1
    8c7c:	80800226 	beq	r16,r2,8c88 <_fflush_r+0x1dc>
    8c80:	92000a17 	ldw	r8,40(r18)
    8c84:	003fa406 	br	8b18 <_fflush_r+0x6c>
    8c88:	98c00017 	ldw	r3,0(r19)
    8c8c:	00800744 	movi	r2,29
    8c90:	18bfde26 	beq	r3,r2,8c0c <_fflush_r+0x160>
    8c94:	9080030b 	ldhu	r2,12(r18)
    8c98:	8007883a 	mov	r3,r16
    8c9c:	10801014 	ori	r2,r2,64
    8ca0:	9080030d 	sth	r2,12(r18)
    8ca4:	003fcf06 	br	8be4 <_fflush_r+0x138>

00008ca8 <fflush>:
    8ca8:	01400074 	movhi	r5,1
    8cac:	2962ab04 	addi	r5,r5,-30036
    8cb0:	2007883a 	mov	r3,r4
    8cb4:	20000526 	beq	r4,zero,8ccc <fflush+0x24>
    8cb8:	008000b4 	movhi	r2,2
    8cbc:	10a6e504 	addi	r2,r2,-25708
    8cc0:	11000017 	ldw	r4,0(r2)
    8cc4:	180b883a 	mov	r5,r3
    8cc8:	0008aac1 	jmpi	8aac <_fflush_r>
    8ccc:	008000b4 	movhi	r2,2
    8cd0:	10a6e604 	addi	r2,r2,-25704
    8cd4:	11000017 	ldw	r4,0(r2)
    8cd8:	00098781 	jmpi	9878 <_fwalk_reent>

00008cdc <std>:
    8cdc:	00800074 	movhi	r2,1
    8ce0:	10ad5d04 	addi	r2,r2,-19084
    8ce4:	20800b15 	stw	r2,44(r4)
    8ce8:	00800074 	movhi	r2,1
    8cec:	10ad9804 	addi	r2,r2,-18848
    8cf0:	20800815 	stw	r2,32(r4)
    8cf4:	00c00074 	movhi	r3,1
    8cf8:	18ed7904 	addi	r3,r3,-18972
    8cfc:	00800074 	movhi	r2,1
    8d00:	10ad5f04 	addi	r2,r2,-19076
    8d04:	2140030d 	sth	r5,12(r4)
    8d08:	2180038d 	sth	r6,14(r4)
    8d0c:	20c00915 	stw	r3,36(r4)
    8d10:	20800a15 	stw	r2,40(r4)
    8d14:	20000015 	stw	zero,0(r4)
    8d18:	20000115 	stw	zero,4(r4)
    8d1c:	20000215 	stw	zero,8(r4)
    8d20:	20000415 	stw	zero,16(r4)
    8d24:	20000515 	stw	zero,20(r4)
    8d28:	20000615 	stw	zero,24(r4)
    8d2c:	21000715 	stw	r4,28(r4)
    8d30:	f800283a 	ret

00008d34 <__sfp_lock_acquire>:
    8d34:	f800283a 	ret

00008d38 <__sfp_lock_release>:
    8d38:	f800283a 	ret

00008d3c <__sinit_lock_acquire>:
    8d3c:	f800283a 	ret

00008d40 <__sinit_lock_release>:
    8d40:	f800283a 	ret

00008d44 <__sinit>:
    8d44:	20800e17 	ldw	r2,56(r4)
    8d48:	defffd04 	addi	sp,sp,-12
    8d4c:	dc400115 	stw	r17,4(sp)
    8d50:	dc000015 	stw	r16,0(sp)
    8d54:	dfc00215 	stw	ra,8(sp)
    8d58:	04400044 	movi	r17,1
    8d5c:	01400104 	movi	r5,4
    8d60:	000d883a 	mov	r6,zero
    8d64:	2021883a 	mov	r16,r4
    8d68:	2200bb04 	addi	r8,r4,748
    8d6c:	200f883a 	mov	r7,r4
    8d70:	10000526 	beq	r2,zero,8d88 <__sinit+0x44>
    8d74:	dfc00217 	ldw	ra,8(sp)
    8d78:	dc400117 	ldw	r17,4(sp)
    8d7c:	dc000017 	ldw	r16,0(sp)
    8d80:	dec00304 	addi	sp,sp,12
    8d84:	f800283a 	ret
    8d88:	21000117 	ldw	r4,4(r4)
    8d8c:	00800074 	movhi	r2,1
    8d90:	10a38a04 	addi	r2,r2,-29144
    8d94:	00c000c4 	movi	r3,3
    8d98:	80800f15 	stw	r2,60(r16)
    8d9c:	80c0b915 	stw	r3,740(r16)
    8da0:	8200ba15 	stw	r8,744(r16)
    8da4:	84400e15 	stw	r17,56(r16)
    8da8:	8000b815 	stw	zero,736(r16)
    8dac:	0008cdc0 	call	8cdc <std>
    8db0:	81000217 	ldw	r4,8(r16)
    8db4:	880d883a 	mov	r6,r17
    8db8:	800f883a 	mov	r7,r16
    8dbc:	01400284 	movi	r5,10
    8dc0:	0008cdc0 	call	8cdc <std>
    8dc4:	81000317 	ldw	r4,12(r16)
    8dc8:	800f883a 	mov	r7,r16
    8dcc:	01400484 	movi	r5,18
    8dd0:	01800084 	movi	r6,2
    8dd4:	dfc00217 	ldw	ra,8(sp)
    8dd8:	dc400117 	ldw	r17,4(sp)
    8ddc:	dc000017 	ldw	r16,0(sp)
    8de0:	dec00304 	addi	sp,sp,12
    8de4:	0008cdc1 	jmpi	8cdc <std>

00008de8 <__fp_lock>:
    8de8:	0005883a 	mov	r2,zero
    8dec:	f800283a 	ret

00008df0 <__fp_unlock>:
    8df0:	0005883a 	mov	r2,zero
    8df4:	f800283a 	ret

00008df8 <__fp_unlock_all>:
    8df8:	008000b4 	movhi	r2,2
    8dfc:	10a6e504 	addi	r2,r2,-25708
    8e00:	11000017 	ldw	r4,0(r2)
    8e04:	01400074 	movhi	r5,1
    8e08:	29637c04 	addi	r5,r5,-29200
    8e0c:	00099401 	jmpi	9940 <_fwalk>

00008e10 <__fp_lock_all>:
    8e10:	008000b4 	movhi	r2,2
    8e14:	10a6e504 	addi	r2,r2,-25708
    8e18:	11000017 	ldw	r4,0(r2)
    8e1c:	01400074 	movhi	r5,1
    8e20:	29637a04 	addi	r5,r5,-29208
    8e24:	00099401 	jmpi	9940 <_fwalk>

00008e28 <_cleanup_r>:
    8e28:	01400074 	movhi	r5,1
    8e2c:	296e8a04 	addi	r5,r5,-17880
    8e30:	00099401 	jmpi	9940 <_fwalk>

00008e34 <_cleanup>:
    8e34:	008000b4 	movhi	r2,2
    8e38:	10a6e604 	addi	r2,r2,-25704
    8e3c:	11000017 	ldw	r4,0(r2)
    8e40:	0008e281 	jmpi	8e28 <_cleanup_r>

00008e44 <__sfmoreglue>:
    8e44:	defffc04 	addi	sp,sp,-16
    8e48:	dc400115 	stw	r17,4(sp)
    8e4c:	2c401724 	muli	r17,r5,92
    8e50:	dc800215 	stw	r18,8(sp)
    8e54:	2825883a 	mov	r18,r5
    8e58:	89400304 	addi	r5,r17,12
    8e5c:	dc000015 	stw	r16,0(sp)
    8e60:	dfc00315 	stw	ra,12(sp)
    8e64:	00047bc0 	call	47bc <_malloc_r>
    8e68:	0021883a 	mov	r16,zero
    8e6c:	880d883a 	mov	r6,r17
    8e70:	000b883a 	mov	r5,zero
    8e74:	10000626 	beq	r2,zero,8e90 <__sfmoreglue+0x4c>
    8e78:	11000304 	addi	r4,r2,12
    8e7c:	14800115 	stw	r18,4(r2)
    8e80:	10000015 	stw	zero,0(r2)
    8e84:	11000215 	stw	r4,8(r2)
    8e88:	1021883a 	mov	r16,r2
    8e8c:	0009eb40 	call	9eb4 <memset>
    8e90:	8005883a 	mov	r2,r16
    8e94:	dfc00317 	ldw	ra,12(sp)
    8e98:	dc800217 	ldw	r18,8(sp)
    8e9c:	dc400117 	ldw	r17,4(sp)
    8ea0:	dc000017 	ldw	r16,0(sp)
    8ea4:	dec00404 	addi	sp,sp,16
    8ea8:	f800283a 	ret

00008eac <__sfp>:
    8eac:	defffd04 	addi	sp,sp,-12
    8eb0:	008000b4 	movhi	r2,2
    8eb4:	10a6e604 	addi	r2,r2,-25704
    8eb8:	dc000015 	stw	r16,0(sp)
    8ebc:	14000017 	ldw	r16,0(r2)
    8ec0:	dc400115 	stw	r17,4(sp)
    8ec4:	dfc00215 	stw	ra,8(sp)
    8ec8:	80800e17 	ldw	r2,56(r16)
    8ecc:	2023883a 	mov	r17,r4
    8ed0:	10002626 	beq	r2,zero,8f6c <__sfp+0xc0>
    8ed4:	8400b804 	addi	r16,r16,736
    8ed8:	80800117 	ldw	r2,4(r16)
    8edc:	81000217 	ldw	r4,8(r16)
    8ee0:	10ffffc4 	addi	r3,r2,-1
    8ee4:	18000916 	blt	r3,zero,8f0c <__sfp+0x60>
    8ee8:	2080030f 	ldh	r2,12(r4)
    8eec:	10000b26 	beq	r2,zero,8f1c <__sfp+0x70>
    8ef0:	017fffc4 	movi	r5,-1
    8ef4:	00000206 	br	8f00 <__sfp+0x54>
    8ef8:	2080030f 	ldh	r2,12(r4)
    8efc:	10000726 	beq	r2,zero,8f1c <__sfp+0x70>
    8f00:	18ffffc4 	addi	r3,r3,-1
    8f04:	21001704 	addi	r4,r4,92
    8f08:	197ffb1e 	bne	r3,r5,8ef8 <__sfp+0x4c>
    8f0c:	80800017 	ldw	r2,0(r16)
    8f10:	10001926 	beq	r2,zero,8f78 <__sfp+0xcc>
    8f14:	1021883a 	mov	r16,r2
    8f18:	003fef06 	br	8ed8 <__sfp+0x2c>
    8f1c:	00bfffc4 	movi	r2,-1
    8f20:	00c00044 	movi	r3,1
    8f24:	2080038d 	sth	r2,14(r4)
    8f28:	20c0030d 	sth	r3,12(r4)
    8f2c:	20000015 	stw	zero,0(r4)
    8f30:	20000215 	stw	zero,8(r4)
    8f34:	20000115 	stw	zero,4(r4)
    8f38:	20000415 	stw	zero,16(r4)
    8f3c:	20000515 	stw	zero,20(r4)
    8f40:	20000615 	stw	zero,24(r4)
    8f44:	20000c15 	stw	zero,48(r4)
    8f48:	20000d15 	stw	zero,52(r4)
    8f4c:	20001115 	stw	zero,68(r4)
    8f50:	20001215 	stw	zero,72(r4)
    8f54:	2005883a 	mov	r2,r4
    8f58:	dfc00217 	ldw	ra,8(sp)
    8f5c:	dc400117 	ldw	r17,4(sp)
    8f60:	dc000017 	ldw	r16,0(sp)
    8f64:	dec00304 	addi	sp,sp,12
    8f68:	f800283a 	ret
    8f6c:	8009883a 	mov	r4,r16
    8f70:	0008d440 	call	8d44 <__sinit>
    8f74:	003fd706 	br	8ed4 <__sfp+0x28>
    8f78:	8809883a 	mov	r4,r17
    8f7c:	01400104 	movi	r5,4
    8f80:	0008e440 	call	8e44 <__sfmoreglue>
    8f84:	80800015 	stw	r2,0(r16)
    8f88:	103fe21e 	bne	r2,zero,8f14 <__sfp+0x68>
    8f8c:	00800304 	movi	r2,12
    8f90:	0009883a 	mov	r4,zero
    8f94:	88800015 	stw	r2,0(r17)
    8f98:	003fee06 	br	8f54 <__sfp+0xa8>

00008f9c <_malloc_trim_r>:
    8f9c:	defffb04 	addi	sp,sp,-20
    8fa0:	dcc00315 	stw	r19,12(sp)
    8fa4:	04c000b4 	movhi	r19,2
    8fa8:	9ce03704 	addi	r19,r19,-32548
    8fac:	dc800215 	stw	r18,8(sp)
    8fb0:	dc400115 	stw	r17,4(sp)
    8fb4:	dc000015 	stw	r16,0(sp)
    8fb8:	2823883a 	mov	r17,r5
    8fbc:	2025883a 	mov	r18,r4
    8fc0:	dfc00415 	stw	ra,16(sp)
    8fc4:	000d0300 	call	d030 <__malloc_lock>
    8fc8:	98800217 	ldw	r2,8(r19)
    8fcc:	9009883a 	mov	r4,r18
    8fd0:	000b883a 	mov	r5,zero
    8fd4:	10c00117 	ldw	r3,4(r2)
    8fd8:	00bfff04 	movi	r2,-4
    8fdc:	18a0703a 	and	r16,r3,r2
    8fe0:	8463c83a 	sub	r17,r16,r17
    8fe4:	8c43fbc4 	addi	r17,r17,4079
    8fe8:	8822d33a 	srli	r17,r17,12
    8fec:	0083ffc4 	movi	r2,4095
    8ff0:	8c7fffc4 	addi	r17,r17,-1
    8ff4:	8822933a 	slli	r17,r17,12
    8ff8:	1440060e 	bge	r2,r17,9014 <_malloc_trim_r+0x78>
    8ffc:	00050280 	call	5028 <_sbrk_r>
    9000:	98c00217 	ldw	r3,8(r19)
    9004:	9009883a 	mov	r4,r18
    9008:	044bc83a 	sub	r5,zero,r17
    900c:	80c7883a 	add	r3,r16,r3
    9010:	10c00926 	beq	r2,r3,9038 <_malloc_trim_r+0x9c>
    9014:	000d0340 	call	d034 <__malloc_unlock>
    9018:	0005883a 	mov	r2,zero
    901c:	dfc00417 	ldw	ra,16(sp)
    9020:	dcc00317 	ldw	r19,12(sp)
    9024:	dc800217 	ldw	r18,8(sp)
    9028:	dc400117 	ldw	r17,4(sp)
    902c:	dc000017 	ldw	r16,0(sp)
    9030:	dec00504 	addi	sp,sp,20
    9034:	f800283a 	ret
    9038:	9009883a 	mov	r4,r18
    903c:	00050280 	call	5028 <_sbrk_r>
    9040:	844dc83a 	sub	r6,r16,r17
    9044:	00ffffc4 	movi	r3,-1
    9048:	9009883a 	mov	r4,r18
    904c:	000b883a 	mov	r5,zero
    9050:	01c00274 	movhi	r7,9
    9054:	39dd3b04 	addi	r7,r7,29932
    9058:	31800054 	ori	r6,r6,1
    905c:	10c00926 	beq	r2,r3,9084 <_malloc_trim_r+0xe8>
    9060:	38800017 	ldw	r2,0(r7)
    9064:	98c00217 	ldw	r3,8(r19)
    9068:	9009883a 	mov	r4,r18
    906c:	1445c83a 	sub	r2,r2,r17
    9070:	38800015 	stw	r2,0(r7)
    9074:	19800115 	stw	r6,4(r3)
    9078:	000d0340 	call	d034 <__malloc_unlock>
    907c:	00800044 	movi	r2,1
    9080:	003fe606 	br	901c <_malloc_trim_r+0x80>
    9084:	00050280 	call	5028 <_sbrk_r>
    9088:	99800217 	ldw	r6,8(r19)
    908c:	100f883a 	mov	r7,r2
    9090:	9009883a 	mov	r4,r18
    9094:	1187c83a 	sub	r3,r2,r6
    9098:	008003c4 	movi	r2,15
    909c:	19400054 	ori	r5,r3,1
    90a0:	10ffdc0e 	bge	r2,r3,9014 <_malloc_trim_r+0x78>
    90a4:	008000b4 	movhi	r2,2
    90a8:	10a6e804 	addi	r2,r2,-25696
    90ac:	10c00017 	ldw	r3,0(r2)
    90b0:	00800274 	movhi	r2,9
    90b4:	109d3b04 	addi	r2,r2,29932
    90b8:	31400115 	stw	r5,4(r6)
    90bc:	38c7c83a 	sub	r3,r7,r3
    90c0:	10c00015 	stw	r3,0(r2)
    90c4:	003fd306 	br	9014 <_malloc_trim_r+0x78>

000090c8 <_free_r>:
    90c8:	defffd04 	addi	sp,sp,-12
    90cc:	dc400115 	stw	r17,4(sp)
    90d0:	dc000015 	stw	r16,0(sp)
    90d4:	dfc00215 	stw	ra,8(sp)
    90d8:	2821883a 	mov	r16,r5
    90dc:	2023883a 	mov	r17,r4
    90e0:	28005a26 	beq	r5,zero,924c <_free_r+0x184>
    90e4:	000d0300 	call	d030 <__malloc_lock>
    90e8:	823ffe04 	addi	r8,r16,-8
    90ec:	41400117 	ldw	r5,4(r8)
    90f0:	00bfff84 	movi	r2,-2
    90f4:	028000b4 	movhi	r10,2
    90f8:	52a03704 	addi	r10,r10,-32548
    90fc:	288e703a 	and	r7,r5,r2
    9100:	41cd883a 	add	r6,r8,r7
    9104:	30c00117 	ldw	r3,4(r6)
    9108:	51000217 	ldw	r4,8(r10)
    910c:	00bfff04 	movi	r2,-4
    9110:	1892703a 	and	r9,r3,r2
    9114:	5017883a 	mov	r11,r10
    9118:	31006726 	beq	r6,r4,92b8 <_free_r+0x1f0>
    911c:	2880004c 	andi	r2,r5,1
    9120:	1005003a 	cmpeq	r2,r2,zero
    9124:	32400115 	stw	r9,4(r6)
    9128:	10001a1e 	bne	r2,zero,9194 <_free_r+0xcc>
    912c:	000b883a 	mov	r5,zero
    9130:	3247883a 	add	r3,r6,r9
    9134:	18800117 	ldw	r2,4(r3)
    9138:	1080004c 	andi	r2,r2,1
    913c:	1000231e 	bne	r2,zero,91cc <_free_r+0x104>
    9140:	280ac03a 	cmpne	r5,r5,zero
    9144:	3a4f883a 	add	r7,r7,r9
    9148:	2800451e 	bne	r5,zero,9260 <_free_r+0x198>
    914c:	31000217 	ldw	r4,8(r6)
    9150:	008000b4 	movhi	r2,2
    9154:	10a03904 	addi	r2,r2,-32540
    9158:	20807b26 	beq	r4,r2,9348 <_free_r+0x280>
    915c:	30800317 	ldw	r2,12(r6)
    9160:	3a07883a 	add	r3,r7,r8
    9164:	19c00015 	stw	r7,0(r3)
    9168:	11000215 	stw	r4,8(r2)
    916c:	20800315 	stw	r2,12(r4)
    9170:	38800054 	ori	r2,r7,1
    9174:	40800115 	stw	r2,4(r8)
    9178:	28001a26 	beq	r5,zero,91e4 <_free_r+0x11c>
    917c:	8809883a 	mov	r4,r17
    9180:	dfc00217 	ldw	ra,8(sp)
    9184:	dc400117 	ldw	r17,4(sp)
    9188:	dc000017 	ldw	r16,0(sp)
    918c:	dec00304 	addi	sp,sp,12
    9190:	000d0341 	jmpi	d034 <__malloc_unlock>
    9194:	80bffe17 	ldw	r2,-8(r16)
    9198:	50c00204 	addi	r3,r10,8
    919c:	4091c83a 	sub	r8,r8,r2
    91a0:	41000217 	ldw	r4,8(r8)
    91a4:	388f883a 	add	r7,r7,r2
    91a8:	20c06126 	beq	r4,r3,9330 <_free_r+0x268>
    91ac:	40800317 	ldw	r2,12(r8)
    91b0:	3247883a 	add	r3,r6,r9
    91b4:	000b883a 	mov	r5,zero
    91b8:	11000215 	stw	r4,8(r2)
    91bc:	20800315 	stw	r2,12(r4)
    91c0:	18800117 	ldw	r2,4(r3)
    91c4:	1080004c 	andi	r2,r2,1
    91c8:	103fdd26 	beq	r2,zero,9140 <_free_r+0x78>
    91cc:	38800054 	ori	r2,r7,1
    91d0:	3a07883a 	add	r3,r7,r8
    91d4:	280ac03a 	cmpne	r5,r5,zero
    91d8:	40800115 	stw	r2,4(r8)
    91dc:	19c00015 	stw	r7,0(r3)
    91e0:	283fe61e 	bne	r5,zero,917c <_free_r+0xb4>
    91e4:	00807fc4 	movi	r2,511
    91e8:	11c01f2e 	bgeu	r2,r7,9268 <_free_r+0x1a0>
    91ec:	3806d27a 	srli	r3,r7,9
    91f0:	1800481e 	bne	r3,zero,9314 <_free_r+0x24c>
    91f4:	3804d0fa 	srli	r2,r7,3
    91f8:	100690fa 	slli	r3,r2,3
    91fc:	1acd883a 	add	r6,r3,r11
    9200:	31400217 	ldw	r5,8(r6)
    9204:	31405926 	beq	r6,r5,936c <_free_r+0x2a4>
    9208:	28800117 	ldw	r2,4(r5)
    920c:	00ffff04 	movi	r3,-4
    9210:	10c4703a 	and	r2,r2,r3
    9214:	3880022e 	bgeu	r7,r2,9220 <_free_r+0x158>
    9218:	29400217 	ldw	r5,8(r5)
    921c:	317ffa1e 	bne	r6,r5,9208 <_free_r+0x140>
    9220:	29800317 	ldw	r6,12(r5)
    9224:	41800315 	stw	r6,12(r8)
    9228:	41400215 	stw	r5,8(r8)
    922c:	8809883a 	mov	r4,r17
    9230:	2a000315 	stw	r8,12(r5)
    9234:	32000215 	stw	r8,8(r6)
    9238:	dfc00217 	ldw	ra,8(sp)
    923c:	dc400117 	ldw	r17,4(sp)
    9240:	dc000017 	ldw	r16,0(sp)
    9244:	dec00304 	addi	sp,sp,12
    9248:	000d0341 	jmpi	d034 <__malloc_unlock>
    924c:	dfc00217 	ldw	ra,8(sp)
    9250:	dc400117 	ldw	r17,4(sp)
    9254:	dc000017 	ldw	r16,0(sp)
    9258:	dec00304 	addi	sp,sp,12
    925c:	f800283a 	ret
    9260:	31000217 	ldw	r4,8(r6)
    9264:	003fbd06 	br	915c <_free_r+0x94>
    9268:	3806d0fa 	srli	r3,r7,3
    926c:	00800044 	movi	r2,1
    9270:	51400117 	ldw	r5,4(r10)
    9274:	180890fa 	slli	r4,r3,3
    9278:	1807d0ba 	srai	r3,r3,2
    927c:	22c9883a 	add	r4,r4,r11
    9280:	21800217 	ldw	r6,8(r4)
    9284:	10c4983a 	sll	r2,r2,r3
    9288:	41000315 	stw	r4,12(r8)
    928c:	41800215 	stw	r6,8(r8)
    9290:	288ab03a 	or	r5,r5,r2
    9294:	22000215 	stw	r8,8(r4)
    9298:	8809883a 	mov	r4,r17
    929c:	51400115 	stw	r5,4(r10)
    92a0:	32000315 	stw	r8,12(r6)
    92a4:	dfc00217 	ldw	ra,8(sp)
    92a8:	dc400117 	ldw	r17,4(sp)
    92ac:	dc000017 	ldw	r16,0(sp)
    92b0:	dec00304 	addi	sp,sp,12
    92b4:	000d0341 	jmpi	d034 <__malloc_unlock>
    92b8:	2880004c 	andi	r2,r5,1
    92bc:	3a4d883a 	add	r6,r7,r9
    92c0:	1000071e 	bne	r2,zero,92e0 <_free_r+0x218>
    92c4:	80bffe17 	ldw	r2,-8(r16)
    92c8:	4091c83a 	sub	r8,r8,r2
    92cc:	41000317 	ldw	r4,12(r8)
    92d0:	40c00217 	ldw	r3,8(r8)
    92d4:	308d883a 	add	r6,r6,r2
    92d8:	20c00215 	stw	r3,8(r4)
    92dc:	19000315 	stw	r4,12(r3)
    92e0:	008000b4 	movhi	r2,2
    92e4:	10a6e704 	addi	r2,r2,-25700
    92e8:	11000017 	ldw	r4,0(r2)
    92ec:	30c00054 	ori	r3,r6,1
    92f0:	52000215 	stw	r8,8(r10)
    92f4:	40c00115 	stw	r3,4(r8)
    92f8:	313fa036 	bltu	r6,r4,917c <_free_r+0xb4>
    92fc:	008000b4 	movhi	r2,2
    9300:	108eca04 	addi	r2,r2,15144
    9304:	11400017 	ldw	r5,0(r2)
    9308:	8809883a 	mov	r4,r17
    930c:	0008f9c0 	call	8f9c <_malloc_trim_r>
    9310:	003f9a06 	br	917c <_free_r+0xb4>
    9314:	00800104 	movi	r2,4
    9318:	10c0072e 	bgeu	r2,r3,9338 <_free_r+0x270>
    931c:	00800504 	movi	r2,20
    9320:	10c01936 	bltu	r2,r3,9388 <_free_r+0x2c0>
    9324:	188016c4 	addi	r2,r3,91
    9328:	100690fa 	slli	r3,r2,3
    932c:	003fb306 	br	91fc <_free_r+0x134>
    9330:	01400044 	movi	r5,1
    9334:	003f7e06 	br	9130 <_free_r+0x68>
    9338:	3804d1ba 	srli	r2,r7,6
    933c:	10800e04 	addi	r2,r2,56
    9340:	100690fa 	slli	r3,r2,3
    9344:	003fad06 	br	91fc <_free_r+0x134>
    9348:	22000315 	stw	r8,12(r4)
    934c:	22000215 	stw	r8,8(r4)
    9350:	3a05883a 	add	r2,r7,r8
    9354:	38c00054 	ori	r3,r7,1
    9358:	11c00015 	stw	r7,0(r2)
    935c:	41000215 	stw	r4,8(r8)
    9360:	40c00115 	stw	r3,4(r8)
    9364:	41000315 	stw	r4,12(r8)
    9368:	003f8406 	br	917c <_free_r+0xb4>
    936c:	1005d0ba 	srai	r2,r2,2
    9370:	00c00044 	movi	r3,1
    9374:	51000117 	ldw	r4,4(r10)
    9378:	1886983a 	sll	r3,r3,r2
    937c:	20c8b03a 	or	r4,r4,r3
    9380:	51000115 	stw	r4,4(r10)
    9384:	003fa706 	br	9224 <_free_r+0x15c>
    9388:	00801504 	movi	r2,84
    938c:	10c00436 	bltu	r2,r3,93a0 <_free_r+0x2d8>
    9390:	3804d33a 	srli	r2,r7,12
    9394:	10801b84 	addi	r2,r2,110
    9398:	100690fa 	slli	r3,r2,3
    939c:	003f9706 	br	91fc <_free_r+0x134>
    93a0:	00805504 	movi	r2,340
    93a4:	10c00436 	bltu	r2,r3,93b8 <_free_r+0x2f0>
    93a8:	3804d3fa 	srli	r2,r7,15
    93ac:	10801dc4 	addi	r2,r2,119
    93b0:	100690fa 	slli	r3,r2,3
    93b4:	003f9106 	br	91fc <_free_r+0x134>
    93b8:	00815504 	movi	r2,1364
    93bc:	10c0032e 	bgeu	r2,r3,93cc <_free_r+0x304>
    93c0:	00801f84 	movi	r2,126
    93c4:	00c0fc04 	movi	r3,1008
    93c8:	003f8c06 	br	91fc <_free_r+0x134>
    93cc:	3804d4ba 	srli	r2,r7,18
    93d0:	10801f04 	addi	r2,r2,124
    93d4:	100690fa 	slli	r3,r2,3
    93d8:	003f8806 	br	91fc <_free_r+0x134>

000093dc <__sfvwrite_r>:
    93dc:	30800217 	ldw	r2,8(r6)
    93e0:	defff504 	addi	sp,sp,-44
    93e4:	df000915 	stw	fp,36(sp)
    93e8:	dd800715 	stw	r22,28(sp)
    93ec:	dc800315 	stw	r18,12(sp)
    93f0:	dfc00a15 	stw	ra,40(sp)
    93f4:	ddc00815 	stw	r23,32(sp)
    93f8:	dd400615 	stw	r21,24(sp)
    93fc:	dd000515 	stw	r20,20(sp)
    9400:	dcc00415 	stw	r19,16(sp)
    9404:	dc400215 	stw	r17,8(sp)
    9408:	dc000115 	stw	r16,4(sp)
    940c:	302d883a 	mov	r22,r6
    9410:	2039883a 	mov	fp,r4
    9414:	2825883a 	mov	r18,r5
    9418:	10001c26 	beq	r2,zero,948c <__sfvwrite_r+0xb0>
    941c:	29c0030b 	ldhu	r7,12(r5)
    9420:	3880020c 	andi	r2,r7,8
    9424:	10002726 	beq	r2,zero,94c4 <__sfvwrite_r+0xe8>
    9428:	28800417 	ldw	r2,16(r5)
    942c:	10002526 	beq	r2,zero,94c4 <__sfvwrite_r+0xe8>
    9430:	3880008c 	andi	r2,r7,2
    9434:	b5400017 	ldw	r21,0(r22)
    9438:	10002826 	beq	r2,zero,94dc <__sfvwrite_r+0x100>
    943c:	0021883a 	mov	r16,zero
    9440:	0023883a 	mov	r17,zero
    9444:	880d883a 	mov	r6,r17
    9448:	e009883a 	mov	r4,fp
    944c:	00810004 	movi	r2,1024
    9450:	80006e26 	beq	r16,zero,960c <__sfvwrite_r+0x230>
    9454:	800f883a 	mov	r7,r16
    9458:	91400717 	ldw	r5,28(r18)
    945c:	1400012e 	bgeu	r2,r16,9464 <__sfvwrite_r+0x88>
    9460:	100f883a 	mov	r7,r2
    9464:	90c00917 	ldw	r3,36(r18)
    9468:	183ee83a 	callr	r3
    946c:	1007883a 	mov	r3,r2
    9470:	80a1c83a 	sub	r16,r16,r2
    9474:	88a3883a 	add	r17,r17,r2
    9478:	00806d0e 	bge	zero,r2,9630 <__sfvwrite_r+0x254>
    947c:	b0800217 	ldw	r2,8(r22)
    9480:	10c5c83a 	sub	r2,r2,r3
    9484:	b0800215 	stw	r2,8(r22)
    9488:	103fee1e 	bne	r2,zero,9444 <__sfvwrite_r+0x68>
    948c:	0009883a 	mov	r4,zero
    9490:	2005883a 	mov	r2,r4
    9494:	dfc00a17 	ldw	ra,40(sp)
    9498:	df000917 	ldw	fp,36(sp)
    949c:	ddc00817 	ldw	r23,32(sp)
    94a0:	dd800717 	ldw	r22,28(sp)
    94a4:	dd400617 	ldw	r21,24(sp)
    94a8:	dd000517 	ldw	r20,20(sp)
    94ac:	dcc00417 	ldw	r19,16(sp)
    94b0:	dc800317 	ldw	r18,12(sp)
    94b4:	dc400217 	ldw	r17,8(sp)
    94b8:	dc000117 	ldw	r16,4(sp)
    94bc:	dec00b04 	addi	sp,sp,44
    94c0:	f800283a 	ret
    94c4:	00071a40 	call	71a4 <__swsetup_r>
    94c8:	1000e41e 	bne	r2,zero,985c <__sfvwrite_r+0x480>
    94cc:	91c0030b 	ldhu	r7,12(r18)
    94d0:	b5400017 	ldw	r21,0(r22)
    94d4:	3880008c 	andi	r2,r7,2
    94d8:	103fd81e 	bne	r2,zero,943c <__sfvwrite_r+0x60>
    94dc:	3880004c 	andi	r2,r7,1
    94e0:	1005003a 	cmpeq	r2,r2,zero
    94e4:	10005726 	beq	r2,zero,9644 <__sfvwrite_r+0x268>
    94e8:	0029883a 	mov	r20,zero
    94ec:	002f883a 	mov	r23,zero
    94f0:	a0004226 	beq	r20,zero,95fc <__sfvwrite_r+0x220>
    94f4:	3880800c 	andi	r2,r7,512
    94f8:	94000217 	ldw	r16,8(r18)
    94fc:	10008b26 	beq	r2,zero,972c <__sfvwrite_r+0x350>
    9500:	800d883a 	mov	r6,r16
    9504:	a400a536 	bltu	r20,r16,979c <__sfvwrite_r+0x3c0>
    9508:	3881200c 	andi	r2,r7,1152
    950c:	10002726 	beq	r2,zero,95ac <__sfvwrite_r+0x1d0>
    9510:	90800517 	ldw	r2,20(r18)
    9514:	92000417 	ldw	r8,16(r18)
    9518:	91400017 	ldw	r5,0(r18)
    951c:	1087883a 	add	r3,r2,r2
    9520:	1887883a 	add	r3,r3,r2
    9524:	1808d7fa 	srli	r4,r3,31
    9528:	2a21c83a 	sub	r16,r5,r8
    952c:	80800044 	addi	r2,r16,1
    9530:	20c9883a 	add	r4,r4,r3
    9534:	2027d07a 	srai	r19,r4,1
    9538:	a085883a 	add	r2,r20,r2
    953c:	980d883a 	mov	r6,r19
    9540:	9880022e 	bgeu	r19,r2,954c <__sfvwrite_r+0x170>
    9544:	1027883a 	mov	r19,r2
    9548:	100d883a 	mov	r6,r2
    954c:	3881000c 	andi	r2,r7,1024
    9550:	1000b826 	beq	r2,zero,9834 <__sfvwrite_r+0x458>
    9554:	300b883a 	mov	r5,r6
    9558:	e009883a 	mov	r4,fp
    955c:	00047bc0 	call	47bc <_malloc_r>
    9560:	10003126 	beq	r2,zero,9628 <__sfvwrite_r+0x24c>
    9564:	91400417 	ldw	r5,16(r18)
    9568:	1009883a 	mov	r4,r2
    956c:	800d883a 	mov	r6,r16
    9570:	1023883a 	mov	r17,r2
    9574:	0009d340 	call	9d34 <memcpy>
    9578:	90c0030b 	ldhu	r3,12(r18)
    957c:	00beffc4 	movi	r2,-1025
    9580:	1886703a 	and	r3,r3,r2
    9584:	18c02014 	ori	r3,r3,128
    9588:	90c0030d 	sth	r3,12(r18)
    958c:	9c07c83a 	sub	r3,r19,r16
    9590:	8c05883a 	add	r2,r17,r16
    9594:	a00d883a 	mov	r6,r20
    9598:	a021883a 	mov	r16,r20
    959c:	90800015 	stw	r2,0(r18)
    95a0:	90c00215 	stw	r3,8(r18)
    95a4:	94400415 	stw	r17,16(r18)
    95a8:	94c00515 	stw	r19,20(r18)
    95ac:	91000017 	ldw	r4,0(r18)
    95b0:	b80b883a 	mov	r5,r23
    95b4:	a023883a 	mov	r17,r20
    95b8:	0009dd40 	call	9dd4 <memmove>
    95bc:	90c00217 	ldw	r3,8(r18)
    95c0:	90800017 	ldw	r2,0(r18)
    95c4:	a027883a 	mov	r19,r20
    95c8:	1c07c83a 	sub	r3,r3,r16
    95cc:	1405883a 	add	r2,r2,r16
    95d0:	90c00215 	stw	r3,8(r18)
    95d4:	a021883a 	mov	r16,r20
    95d8:	90800015 	stw	r2,0(r18)
    95dc:	b0800217 	ldw	r2,8(r22)
    95e0:	1405c83a 	sub	r2,r2,r16
    95e4:	b0800215 	stw	r2,8(r22)
    95e8:	103fa826 	beq	r2,zero,948c <__sfvwrite_r+0xb0>
    95ec:	a469c83a 	sub	r20,r20,r17
    95f0:	91c0030b 	ldhu	r7,12(r18)
    95f4:	bcef883a 	add	r23,r23,r19
    95f8:	a03fbe1e 	bne	r20,zero,94f4 <__sfvwrite_r+0x118>
    95fc:	adc00017 	ldw	r23,0(r21)
    9600:	ad000117 	ldw	r20,4(r21)
    9604:	ad400204 	addi	r21,r21,8
    9608:	003fb906 	br	94f0 <__sfvwrite_r+0x114>
    960c:	ac400017 	ldw	r17,0(r21)
    9610:	ac000117 	ldw	r16,4(r21)
    9614:	ad400204 	addi	r21,r21,8
    9618:	003f8a06 	br	9444 <__sfvwrite_r+0x68>
    961c:	91400417 	ldw	r5,16(r18)
    9620:	e009883a 	mov	r4,fp
    9624:	00090c80 	call	90c8 <_free_r>
    9628:	00800304 	movi	r2,12
    962c:	e0800015 	stw	r2,0(fp)
    9630:	9080030b 	ldhu	r2,12(r18)
    9634:	013fffc4 	movi	r4,-1
    9638:	10801014 	ori	r2,r2,64
    963c:	9080030d 	sth	r2,12(r18)
    9640:	003f9306 	br	9490 <__sfvwrite_r+0xb4>
    9644:	0027883a 	mov	r19,zero
    9648:	002f883a 	mov	r23,zero
    964c:	d8000015 	stw	zero,0(sp)
    9650:	0029883a 	mov	r20,zero
    9654:	98001e26 	beq	r19,zero,96d0 <__sfvwrite_r+0x2f4>
    9658:	d8c00017 	ldw	r3,0(sp)
    965c:	1804c03a 	cmpne	r2,r3,zero
    9660:	10005e26 	beq	r2,zero,97dc <__sfvwrite_r+0x400>
    9664:	9821883a 	mov	r16,r19
    9668:	a4c0012e 	bgeu	r20,r19,9670 <__sfvwrite_r+0x294>
    966c:	a021883a 	mov	r16,r20
    9670:	91000017 	ldw	r4,0(r18)
    9674:	90800417 	ldw	r2,16(r18)
    9678:	91800217 	ldw	r6,8(r18)
    967c:	91c00517 	ldw	r7,20(r18)
    9680:	1100022e 	bgeu	r2,r4,968c <__sfvwrite_r+0x2b0>
    9684:	31e3883a 	add	r17,r6,r7
    9688:	8c001616 	blt	r17,r16,96e4 <__sfvwrite_r+0x308>
    968c:	81c03816 	blt	r16,r7,9770 <__sfvwrite_r+0x394>
    9690:	90c00917 	ldw	r3,36(r18)
    9694:	91400717 	ldw	r5,28(r18)
    9698:	e009883a 	mov	r4,fp
    969c:	b80d883a 	mov	r6,r23
    96a0:	183ee83a 	callr	r3
    96a4:	1023883a 	mov	r17,r2
    96a8:	00bfe10e 	bge	zero,r2,9630 <__sfvwrite_r+0x254>
    96ac:	a469c83a 	sub	r20,r20,r17
    96b0:	a0001826 	beq	r20,zero,9714 <__sfvwrite_r+0x338>
    96b4:	b0800217 	ldw	r2,8(r22)
    96b8:	1445c83a 	sub	r2,r2,r17
    96bc:	b0800215 	stw	r2,8(r22)
    96c0:	103f7226 	beq	r2,zero,948c <__sfvwrite_r+0xb0>
    96c4:	9c67c83a 	sub	r19,r19,r17
    96c8:	bc6f883a 	add	r23,r23,r17
    96cc:	983fe21e 	bne	r19,zero,9658 <__sfvwrite_r+0x27c>
    96d0:	adc00017 	ldw	r23,0(r21)
    96d4:	acc00117 	ldw	r19,4(r21)
    96d8:	ad400204 	addi	r21,r21,8
    96dc:	d8000015 	stw	zero,0(sp)
    96e0:	003fdc06 	br	9654 <__sfvwrite_r+0x278>
    96e4:	b80b883a 	mov	r5,r23
    96e8:	880d883a 	mov	r6,r17
    96ec:	0009dd40 	call	9dd4 <memmove>
    96f0:	90c00017 	ldw	r3,0(r18)
    96f4:	e009883a 	mov	r4,fp
    96f8:	900b883a 	mov	r5,r18
    96fc:	1c47883a 	add	r3,r3,r17
    9700:	90c00015 	stw	r3,0(r18)
    9704:	0008aac0 	call	8aac <_fflush_r>
    9708:	103fc91e 	bne	r2,zero,9630 <__sfvwrite_r+0x254>
    970c:	a469c83a 	sub	r20,r20,r17
    9710:	a03fe81e 	bne	r20,zero,96b4 <__sfvwrite_r+0x2d8>
    9714:	e009883a 	mov	r4,fp
    9718:	900b883a 	mov	r5,r18
    971c:	0008aac0 	call	8aac <_fflush_r>
    9720:	103fc31e 	bne	r2,zero,9630 <__sfvwrite_r+0x254>
    9724:	d8000015 	stw	zero,0(sp)
    9728:	003fe206 	br	96b4 <__sfvwrite_r+0x2d8>
    972c:	91000017 	ldw	r4,0(r18)
    9730:	90800417 	ldw	r2,16(r18)
    9734:	1100022e 	bgeu	r2,r4,9740 <__sfvwrite_r+0x364>
    9738:	8023883a 	mov	r17,r16
    973c:	85003136 	bltu	r16,r20,9804 <__sfvwrite_r+0x428>
    9740:	91c00517 	ldw	r7,20(r18)
    9744:	a1c01836 	bltu	r20,r7,97a8 <__sfvwrite_r+0x3cc>
    9748:	90c00917 	ldw	r3,36(r18)
    974c:	91400717 	ldw	r5,28(r18)
    9750:	e009883a 	mov	r4,fp
    9754:	b80d883a 	mov	r6,r23
    9758:	183ee83a 	callr	r3
    975c:	1021883a 	mov	r16,r2
    9760:	00bfb30e 	bge	zero,r2,9630 <__sfvwrite_r+0x254>
    9764:	1023883a 	mov	r17,r2
    9768:	1027883a 	mov	r19,r2
    976c:	003f9b06 	br	95dc <__sfvwrite_r+0x200>
    9770:	b80b883a 	mov	r5,r23
    9774:	800d883a 	mov	r6,r16
    9778:	0009dd40 	call	9dd4 <memmove>
    977c:	90c00217 	ldw	r3,8(r18)
    9780:	90800017 	ldw	r2,0(r18)
    9784:	8023883a 	mov	r17,r16
    9788:	1c07c83a 	sub	r3,r3,r16
    978c:	1405883a 	add	r2,r2,r16
    9790:	90c00215 	stw	r3,8(r18)
    9794:	90800015 	stw	r2,0(r18)
    9798:	003fc406 	br	96ac <__sfvwrite_r+0x2d0>
    979c:	a00d883a 	mov	r6,r20
    97a0:	a021883a 	mov	r16,r20
    97a4:	003f8106 	br	95ac <__sfvwrite_r+0x1d0>
    97a8:	b80b883a 	mov	r5,r23
    97ac:	a00d883a 	mov	r6,r20
    97b0:	0009dd40 	call	9dd4 <memmove>
    97b4:	90c00217 	ldw	r3,8(r18)
    97b8:	90800017 	ldw	r2,0(r18)
    97bc:	a021883a 	mov	r16,r20
    97c0:	1d07c83a 	sub	r3,r3,r20
    97c4:	1505883a 	add	r2,r2,r20
    97c8:	a023883a 	mov	r17,r20
    97cc:	a027883a 	mov	r19,r20
    97d0:	90c00215 	stw	r3,8(r18)
    97d4:	90800015 	stw	r2,0(r18)
    97d8:	003f8006 	br	95dc <__sfvwrite_r+0x200>
    97dc:	b809883a 	mov	r4,r23
    97e0:	01400284 	movi	r5,10
    97e4:	980d883a 	mov	r6,r19
    97e8:	0009c500 	call	9c50 <memchr>
    97ec:	10001726 	beq	r2,zero,984c <__sfvwrite_r+0x470>
    97f0:	15c5c83a 	sub	r2,r2,r23
    97f4:	15000044 	addi	r20,r2,1
    97f8:	00800044 	movi	r2,1
    97fc:	d8800015 	stw	r2,0(sp)
    9800:	003f9806 	br	9664 <__sfvwrite_r+0x288>
    9804:	b80b883a 	mov	r5,r23
    9808:	800d883a 	mov	r6,r16
    980c:	0009dd40 	call	9dd4 <memmove>
    9810:	90c00017 	ldw	r3,0(r18)
    9814:	e009883a 	mov	r4,fp
    9818:	900b883a 	mov	r5,r18
    981c:	1c07883a 	add	r3,r3,r16
    9820:	90c00015 	stw	r3,0(r18)
    9824:	8027883a 	mov	r19,r16
    9828:	0008aac0 	call	8aac <_fflush_r>
    982c:	103f6b26 	beq	r2,zero,95dc <__sfvwrite_r+0x200>
    9830:	003f7f06 	br	9630 <__sfvwrite_r+0x254>
    9834:	400b883a 	mov	r5,r8
    9838:	e009883a 	mov	r4,fp
    983c:	000af400 	call	af40 <_realloc_r>
    9840:	103f7626 	beq	r2,zero,961c <__sfvwrite_r+0x240>
    9844:	1023883a 	mov	r17,r2
    9848:	003f5006 	br	958c <__sfvwrite_r+0x1b0>
    984c:	00c00044 	movi	r3,1
    9850:	9d000044 	addi	r20,r19,1
    9854:	d8c00015 	stw	r3,0(sp)
    9858:	003f8206 	br	9664 <__sfvwrite_r+0x288>
    985c:	9080030b 	ldhu	r2,12(r18)
    9860:	00c00244 	movi	r3,9
    9864:	013fffc4 	movi	r4,-1
    9868:	10801014 	ori	r2,r2,64
    986c:	9080030d 	sth	r2,12(r18)
    9870:	e0c00015 	stw	r3,0(fp)
    9874:	003f0606 	br	9490 <__sfvwrite_r+0xb4>

00009878 <_fwalk_reent>:
    9878:	defff704 	addi	sp,sp,-36
    987c:	dcc00315 	stw	r19,12(sp)
    9880:	24c0b804 	addi	r19,r4,736
    9884:	dd800615 	stw	r22,24(sp)
    9888:	dd400515 	stw	r21,20(sp)
    988c:	dfc00815 	stw	ra,32(sp)
    9890:	ddc00715 	stw	r23,28(sp)
    9894:	dd000415 	stw	r20,16(sp)
    9898:	dc800215 	stw	r18,8(sp)
    989c:	dc400115 	stw	r17,4(sp)
    98a0:	dc000015 	stw	r16,0(sp)
    98a4:	202b883a 	mov	r21,r4
    98a8:	282d883a 	mov	r22,r5
    98ac:	0008d340 	call	8d34 <__sfp_lock_acquire>
    98b0:	98002126 	beq	r19,zero,9938 <_fwalk_reent+0xc0>
    98b4:	002f883a 	mov	r23,zero
    98b8:	9c800117 	ldw	r18,4(r19)
    98bc:	9c000217 	ldw	r16,8(r19)
    98c0:	90bfffc4 	addi	r2,r18,-1
    98c4:	10000d16 	blt	r2,zero,98fc <_fwalk_reent+0x84>
    98c8:	0023883a 	mov	r17,zero
    98cc:	053fffc4 	movi	r20,-1
    98d0:	8080030f 	ldh	r2,12(r16)
    98d4:	8c400044 	addi	r17,r17,1
    98d8:	10000626 	beq	r2,zero,98f4 <_fwalk_reent+0x7c>
    98dc:	8080038f 	ldh	r2,14(r16)
    98e0:	800b883a 	mov	r5,r16
    98e4:	a809883a 	mov	r4,r21
    98e8:	15000226 	beq	r2,r20,98f4 <_fwalk_reent+0x7c>
    98ec:	b03ee83a 	callr	r22
    98f0:	b8aeb03a 	or	r23,r23,r2
    98f4:	84001704 	addi	r16,r16,92
    98f8:	947ff51e 	bne	r18,r17,98d0 <_fwalk_reent+0x58>
    98fc:	9cc00017 	ldw	r19,0(r19)
    9900:	983fed1e 	bne	r19,zero,98b8 <_fwalk_reent+0x40>
    9904:	0008d380 	call	8d38 <__sfp_lock_release>
    9908:	b805883a 	mov	r2,r23
    990c:	dfc00817 	ldw	ra,32(sp)
    9910:	ddc00717 	ldw	r23,28(sp)
    9914:	dd800617 	ldw	r22,24(sp)
    9918:	dd400517 	ldw	r21,20(sp)
    991c:	dd000417 	ldw	r20,16(sp)
    9920:	dcc00317 	ldw	r19,12(sp)
    9924:	dc800217 	ldw	r18,8(sp)
    9928:	dc400117 	ldw	r17,4(sp)
    992c:	dc000017 	ldw	r16,0(sp)
    9930:	dec00904 	addi	sp,sp,36
    9934:	f800283a 	ret
    9938:	002f883a 	mov	r23,zero
    993c:	003ff106 	br	9904 <_fwalk_reent+0x8c>

00009940 <_fwalk>:
    9940:	defff804 	addi	sp,sp,-32
    9944:	dcc00315 	stw	r19,12(sp)
    9948:	24c0b804 	addi	r19,r4,736
    994c:	dd400515 	stw	r21,20(sp)
    9950:	dfc00715 	stw	ra,28(sp)
    9954:	dd800615 	stw	r22,24(sp)
    9958:	dd000415 	stw	r20,16(sp)
    995c:	dc800215 	stw	r18,8(sp)
    9960:	dc400115 	stw	r17,4(sp)
    9964:	dc000015 	stw	r16,0(sp)
    9968:	282b883a 	mov	r21,r5
    996c:	0008d340 	call	8d34 <__sfp_lock_acquire>
    9970:	98001f26 	beq	r19,zero,99f0 <_fwalk+0xb0>
    9974:	002d883a 	mov	r22,zero
    9978:	9c800117 	ldw	r18,4(r19)
    997c:	9c000217 	ldw	r16,8(r19)
    9980:	90bfffc4 	addi	r2,r18,-1
    9984:	10000c16 	blt	r2,zero,99b8 <_fwalk+0x78>
    9988:	0023883a 	mov	r17,zero
    998c:	053fffc4 	movi	r20,-1
    9990:	8080030f 	ldh	r2,12(r16)
    9994:	8c400044 	addi	r17,r17,1
    9998:	10000526 	beq	r2,zero,99b0 <_fwalk+0x70>
    999c:	8080038f 	ldh	r2,14(r16)
    99a0:	8009883a 	mov	r4,r16
    99a4:	15000226 	beq	r2,r20,99b0 <_fwalk+0x70>
    99a8:	a83ee83a 	callr	r21
    99ac:	b0acb03a 	or	r22,r22,r2
    99b0:	84001704 	addi	r16,r16,92
    99b4:	947ff61e 	bne	r18,r17,9990 <_fwalk+0x50>
    99b8:	9cc00017 	ldw	r19,0(r19)
    99bc:	983fee1e 	bne	r19,zero,9978 <_fwalk+0x38>
    99c0:	0008d380 	call	8d38 <__sfp_lock_release>
    99c4:	b005883a 	mov	r2,r22
    99c8:	dfc00717 	ldw	ra,28(sp)
    99cc:	dd800617 	ldw	r22,24(sp)
    99d0:	dd400517 	ldw	r21,20(sp)
    99d4:	dd000417 	ldw	r20,16(sp)
    99d8:	dcc00317 	ldw	r19,12(sp)
    99dc:	dc800217 	ldw	r18,8(sp)
    99e0:	dc400117 	ldw	r17,4(sp)
    99e4:	dc000017 	ldw	r16,0(sp)
    99e8:	dec00804 	addi	sp,sp,32
    99ec:	f800283a 	ret
    99f0:	002d883a 	mov	r22,zero
    99f4:	003ff206 	br	99c0 <_fwalk+0x80>

000099f8 <__locale_charset>:
    99f8:	d0a01f17 	ldw	r2,-32644(gp)
    99fc:	f800283a 	ret

00009a00 <_localeconv_r>:
    9a00:	00800074 	movhi	r2,1
    9a04:	10be6104 	addi	r2,r2,-1660
    9a08:	f800283a 	ret

00009a0c <localeconv>:
    9a0c:	008000b4 	movhi	r2,2
    9a10:	10a6e504 	addi	r2,r2,-25708
    9a14:	11000017 	ldw	r4,0(r2)
    9a18:	0009a001 	jmpi	9a00 <_localeconv_r>

00009a1c <_setlocale_r>:
    9a1c:	defffc04 	addi	sp,sp,-16
    9a20:	00c00074 	movhi	r3,1
    9a24:	18fe3904 	addi	r3,r3,-1820
    9a28:	dc800215 	stw	r18,8(sp)
    9a2c:	dc400115 	stw	r17,4(sp)
    9a30:	dc000015 	stw	r16,0(sp)
    9a34:	2023883a 	mov	r17,r4
    9a38:	2825883a 	mov	r18,r5
    9a3c:	dfc00315 	stw	ra,12(sp)
    9a40:	3021883a 	mov	r16,r6
    9a44:	3009883a 	mov	r4,r6
    9a48:	180b883a 	mov	r5,r3
    9a4c:	30000926 	beq	r6,zero,9a74 <_setlocale_r+0x58>
    9a50:	000b6c00 	call	b6c0 <strcmp>
    9a54:	8009883a 	mov	r4,r16
    9a58:	01400074 	movhi	r5,1
    9a5c:	297ddc04 	addi	r5,r5,-2192
    9a60:	10000b1e 	bne	r2,zero,9a90 <_setlocale_r+0x74>
    9a64:	8c000d15 	stw	r16,52(r17)
    9a68:	8c800c15 	stw	r18,48(r17)
    9a6c:	00c00074 	movhi	r3,1
    9a70:	18fe3904 	addi	r3,r3,-1820
    9a74:	1805883a 	mov	r2,r3
    9a78:	dfc00317 	ldw	ra,12(sp)
    9a7c:	dc800217 	ldw	r18,8(sp)
    9a80:	dc400117 	ldw	r17,4(sp)
    9a84:	dc000017 	ldw	r16,0(sp)
    9a88:	dec00404 	addi	sp,sp,16
    9a8c:	f800283a 	ret
    9a90:	000b6c00 	call	b6c0 <strcmp>
    9a94:	0007883a 	mov	r3,zero
    9a98:	103ff226 	beq	r2,zero,9a64 <_setlocale_r+0x48>
    9a9c:	003ff506 	br	9a74 <_setlocale_r+0x58>

00009aa0 <setlocale>:
    9aa0:	018000b4 	movhi	r6,2
    9aa4:	31a6e504 	addi	r6,r6,-25708
    9aa8:	2007883a 	mov	r3,r4
    9aac:	31000017 	ldw	r4,0(r6)
    9ab0:	280d883a 	mov	r6,r5
    9ab4:	180b883a 	mov	r5,r3
    9ab8:	0009a1c1 	jmpi	9a1c <_setlocale_r>

00009abc <__smakebuf_r>:
    9abc:	2880030b 	ldhu	r2,12(r5)
    9ac0:	deffed04 	addi	sp,sp,-76
    9ac4:	dc401015 	stw	r17,64(sp)
    9ac8:	1080008c 	andi	r2,r2,2
    9acc:	dc000f15 	stw	r16,60(sp)
    9ad0:	dfc01215 	stw	ra,72(sp)
    9ad4:	dc801115 	stw	r18,68(sp)
    9ad8:	2821883a 	mov	r16,r5
    9adc:	2023883a 	mov	r17,r4
    9ae0:	10000b26 	beq	r2,zero,9b10 <__smakebuf_r+0x54>
    9ae4:	28c010c4 	addi	r3,r5,67
    9ae8:	00800044 	movi	r2,1
    9aec:	28800515 	stw	r2,20(r5)
    9af0:	28c00415 	stw	r3,16(r5)
    9af4:	28c00015 	stw	r3,0(r5)
    9af8:	dfc01217 	ldw	ra,72(sp)
    9afc:	dc801117 	ldw	r18,68(sp)
    9b00:	dc401017 	ldw	r17,64(sp)
    9b04:	dc000f17 	ldw	r16,60(sp)
    9b08:	dec01304 	addi	sp,sp,76
    9b0c:	f800283a 	ret
    9b10:	2940038f 	ldh	r5,14(r5)
    9b14:	28002116 	blt	r5,zero,9b9c <__smakebuf_r+0xe0>
    9b18:	d80d883a 	mov	r6,sp
    9b1c:	000ba3c0 	call	ba3c <_fstat_r>
    9b20:	10001e16 	blt	r2,zero,9b9c <__smakebuf_r+0xe0>
    9b24:	d8800117 	ldw	r2,4(sp)
    9b28:	00e00014 	movui	r3,32768
    9b2c:	113c000c 	andi	r4,r2,61440
    9b30:	20c03126 	beq	r4,r3,9bf8 <__smakebuf_r+0x13c>
    9b34:	8080030b 	ldhu	r2,12(r16)
    9b38:	00c80004 	movi	r3,8192
    9b3c:	10820014 	ori	r2,r2,2048
    9b40:	8080030d 	sth	r2,12(r16)
    9b44:	20c01e26 	beq	r4,r3,9bc0 <__smakebuf_r+0x104>
    9b48:	04810004 	movi	r18,1024
    9b4c:	8809883a 	mov	r4,r17
    9b50:	900b883a 	mov	r5,r18
    9b54:	00047bc0 	call	47bc <_malloc_r>
    9b58:	1009883a 	mov	r4,r2
    9b5c:	10003126 	beq	r2,zero,9c24 <__smakebuf_r+0x168>
    9b60:	80c0030b 	ldhu	r3,12(r16)
    9b64:	00800074 	movhi	r2,1
    9b68:	10a38a04 	addi	r2,r2,-29144
    9b6c:	88800f15 	stw	r2,60(r17)
    9b70:	18c02014 	ori	r3,r3,128
    9b74:	84800515 	stw	r18,20(r16)
    9b78:	80c0030d 	sth	r3,12(r16)
    9b7c:	81000415 	stw	r4,16(r16)
    9b80:	81000015 	stw	r4,0(r16)
    9b84:	dfc01217 	ldw	ra,72(sp)
    9b88:	dc801117 	ldw	r18,68(sp)
    9b8c:	dc401017 	ldw	r17,64(sp)
    9b90:	dc000f17 	ldw	r16,60(sp)
    9b94:	dec01304 	addi	sp,sp,76
    9b98:	f800283a 	ret
    9b9c:	80c0030b 	ldhu	r3,12(r16)
    9ba0:	1880200c 	andi	r2,r3,128
    9ba4:	10000426 	beq	r2,zero,9bb8 <__smakebuf_r+0xfc>
    9ba8:	04801004 	movi	r18,64
    9bac:	18820014 	ori	r2,r3,2048
    9bb0:	8080030d 	sth	r2,12(r16)
    9bb4:	003fe506 	br	9b4c <__smakebuf_r+0x90>
    9bb8:	04810004 	movi	r18,1024
    9bbc:	003ffb06 	br	9bac <__smakebuf_r+0xf0>
    9bc0:	8140038f 	ldh	r5,14(r16)
    9bc4:	8809883a 	mov	r4,r17
    9bc8:	000bab00 	call	bab0 <_isatty_r>
    9bcc:	103fde26 	beq	r2,zero,9b48 <__smakebuf_r+0x8c>
    9bd0:	8080030b 	ldhu	r2,12(r16)
    9bd4:	80c010c4 	addi	r3,r16,67
    9bd8:	04810004 	movi	r18,1024
    9bdc:	10800054 	ori	r2,r2,1
    9be0:	8080030d 	sth	r2,12(r16)
    9be4:	00800044 	movi	r2,1
    9be8:	80c00415 	stw	r3,16(r16)
    9bec:	80800515 	stw	r2,20(r16)
    9bf0:	80c00015 	stw	r3,0(r16)
    9bf4:	003fd506 	br	9b4c <__smakebuf_r+0x90>
    9bf8:	80c00a17 	ldw	r3,40(r16)
    9bfc:	00800074 	movhi	r2,1
    9c00:	10ad5f04 	addi	r2,r2,-19076
    9c04:	18bfcb1e 	bne	r3,r2,9b34 <__smakebuf_r+0x78>
    9c08:	8080030b 	ldhu	r2,12(r16)
    9c0c:	00c10004 	movi	r3,1024
    9c10:	1825883a 	mov	r18,r3
    9c14:	10c4b03a 	or	r2,r2,r3
    9c18:	8080030d 	sth	r2,12(r16)
    9c1c:	80c01315 	stw	r3,76(r16)
    9c20:	003fca06 	br	9b4c <__smakebuf_r+0x90>
    9c24:	8100030b 	ldhu	r4,12(r16)
    9c28:	2080800c 	andi	r2,r4,512
    9c2c:	103fb21e 	bne	r2,zero,9af8 <__smakebuf_r+0x3c>
    9c30:	80c010c4 	addi	r3,r16,67
    9c34:	21000094 	ori	r4,r4,2
    9c38:	00800044 	movi	r2,1
    9c3c:	80800515 	stw	r2,20(r16)
    9c40:	8100030d 	sth	r4,12(r16)
    9c44:	80c00415 	stw	r3,16(r16)
    9c48:	80c00015 	stw	r3,0(r16)
    9c4c:	003faa06 	br	9af8 <__smakebuf_r+0x3c>

00009c50 <memchr>:
    9c50:	008000c4 	movi	r2,3
    9c54:	29403fcc 	andi	r5,r5,255
    9c58:	2007883a 	mov	r3,r4
    9c5c:	1180022e 	bgeu	r2,r6,9c68 <memchr+0x18>
    9c60:	2084703a 	and	r2,r4,r2
    9c64:	10000b26 	beq	r2,zero,9c94 <memchr+0x44>
    9c68:	313fffc4 	addi	r4,r6,-1
    9c6c:	3000051e 	bne	r6,zero,9c84 <memchr+0x34>
    9c70:	00002c06 	br	9d24 <memchr+0xd4>
    9c74:	213fffc4 	addi	r4,r4,-1
    9c78:	00bfffc4 	movi	r2,-1
    9c7c:	18c00044 	addi	r3,r3,1
    9c80:	20802826 	beq	r4,r2,9d24 <memchr+0xd4>
    9c84:	18800003 	ldbu	r2,0(r3)
    9c88:	28bffa1e 	bne	r5,r2,9c74 <memchr+0x24>
    9c8c:	1805883a 	mov	r2,r3
    9c90:	f800283a 	ret
    9c94:	0011883a 	mov	r8,zero
    9c98:	0007883a 	mov	r3,zero
    9c9c:	01c00104 	movi	r7,4
    9ca0:	4004923a 	slli	r2,r8,8
    9ca4:	18c00044 	addi	r3,r3,1
    9ca8:	1151883a 	add	r8,r2,r5
    9cac:	19fffc1e 	bne	r3,r7,9ca0 <memchr+0x50>
    9cb0:	02bfbff4 	movhi	r10,65279
    9cb4:	52bfbfc4 	addi	r10,r10,-257
    9cb8:	02602074 	movhi	r9,32897
    9cbc:	4a602004 	addi	r9,r9,-32640
    9cc0:	02c000c4 	movi	r11,3
    9cc4:	20800017 	ldw	r2,0(r4)
    9cc8:	31bfff04 	addi	r6,r6,-4
    9ccc:	200f883a 	mov	r7,r4
    9cd0:	1204f03a 	xor	r2,r2,r8
    9cd4:	1287883a 	add	r3,r2,r10
    9cd8:	1a46703a 	and	r3,r3,r9
    9cdc:	0084303a 	nor	r2,zero,r2
    9ce0:	10c4703a 	and	r2,r2,r3
    9ce4:	10000b26 	beq	r2,zero,9d14 <memchr+0xc4>
    9ce8:	20800003 	ldbu	r2,0(r4)
    9cec:	28800f26 	beq	r5,r2,9d2c <memchr+0xdc>
    9cf0:	20800043 	ldbu	r2,1(r4)
    9cf4:	21c00044 	addi	r7,r4,1
    9cf8:	28800c26 	beq	r5,r2,9d2c <memchr+0xdc>
    9cfc:	20800083 	ldbu	r2,2(r4)
    9d00:	21c00084 	addi	r7,r4,2
    9d04:	28800926 	beq	r5,r2,9d2c <memchr+0xdc>
    9d08:	208000c3 	ldbu	r2,3(r4)
    9d0c:	21c000c4 	addi	r7,r4,3
    9d10:	28800626 	beq	r5,r2,9d2c <memchr+0xdc>
    9d14:	21000104 	addi	r4,r4,4
    9d18:	59bfea36 	bltu	r11,r6,9cc4 <memchr+0x74>
    9d1c:	2007883a 	mov	r3,r4
    9d20:	003fd106 	br	9c68 <memchr+0x18>
    9d24:	0005883a 	mov	r2,zero
    9d28:	f800283a 	ret
    9d2c:	3805883a 	mov	r2,r7
    9d30:	f800283a 	ret

00009d34 <memcpy>:
    9d34:	01c003c4 	movi	r7,15
    9d38:	2007883a 	mov	r3,r4
    9d3c:	3980032e 	bgeu	r7,r6,9d4c <memcpy+0x18>
    9d40:	2904b03a 	or	r2,r5,r4
    9d44:	108000cc 	andi	r2,r2,3
    9d48:	10000926 	beq	r2,zero,9d70 <memcpy+0x3c>
    9d4c:	30000626 	beq	r6,zero,9d68 <memcpy+0x34>
    9d50:	30cd883a 	add	r6,r6,r3
    9d54:	28800003 	ldbu	r2,0(r5)
    9d58:	29400044 	addi	r5,r5,1
    9d5c:	18800005 	stb	r2,0(r3)
    9d60:	18c00044 	addi	r3,r3,1
    9d64:	30fffb1e 	bne	r6,r3,9d54 <memcpy+0x20>
    9d68:	2005883a 	mov	r2,r4
    9d6c:	f800283a 	ret
    9d70:	3811883a 	mov	r8,r7
    9d74:	200f883a 	mov	r7,r4
    9d78:	28c00017 	ldw	r3,0(r5)
    9d7c:	31bffc04 	addi	r6,r6,-16
    9d80:	38c00015 	stw	r3,0(r7)
    9d84:	28800117 	ldw	r2,4(r5)
    9d88:	38800115 	stw	r2,4(r7)
    9d8c:	28c00217 	ldw	r3,8(r5)
    9d90:	38c00215 	stw	r3,8(r7)
    9d94:	28800317 	ldw	r2,12(r5)
    9d98:	29400404 	addi	r5,r5,16
    9d9c:	38800315 	stw	r2,12(r7)
    9da0:	39c00404 	addi	r7,r7,16
    9da4:	41bff436 	bltu	r8,r6,9d78 <memcpy+0x44>
    9da8:	008000c4 	movi	r2,3
    9dac:	1180072e 	bgeu	r2,r6,9dcc <memcpy+0x98>
    9db0:	1007883a 	mov	r3,r2
    9db4:	28800017 	ldw	r2,0(r5)
    9db8:	31bfff04 	addi	r6,r6,-4
    9dbc:	29400104 	addi	r5,r5,4
    9dc0:	38800015 	stw	r2,0(r7)
    9dc4:	39c00104 	addi	r7,r7,4
    9dc8:	19bffa36 	bltu	r3,r6,9db4 <memcpy+0x80>
    9dcc:	3807883a 	mov	r3,r7
    9dd0:	003fde06 	br	9d4c <memcpy+0x18>

00009dd4 <memmove>:
    9dd4:	2807883a 	mov	r3,r5
    9dd8:	2011883a 	mov	r8,r4
    9ddc:	29000c2e 	bgeu	r5,r4,9e10 <memmove+0x3c>
    9de0:	298f883a 	add	r7,r5,r6
    9de4:	21c00a2e 	bgeu	r4,r7,9e10 <memmove+0x3c>
    9de8:	30000726 	beq	r6,zero,9e08 <memmove+0x34>
    9dec:	2187883a 	add	r3,r4,r6
    9df0:	198dc83a 	sub	r6,r3,r6
    9df4:	39ffffc4 	addi	r7,r7,-1
    9df8:	38800003 	ldbu	r2,0(r7)
    9dfc:	18ffffc4 	addi	r3,r3,-1
    9e00:	18800005 	stb	r2,0(r3)
    9e04:	19bffb1e 	bne	r3,r6,9df4 <memmove+0x20>
    9e08:	2005883a 	mov	r2,r4
    9e0c:	f800283a 	ret
    9e10:	01c003c4 	movi	r7,15
    9e14:	39800a36 	bltu	r7,r6,9e40 <memmove+0x6c>
    9e18:	303ffb26 	beq	r6,zero,9e08 <memmove+0x34>
    9e1c:	400f883a 	mov	r7,r8
    9e20:	320d883a 	add	r6,r6,r8
    9e24:	28800003 	ldbu	r2,0(r5)
    9e28:	29400044 	addi	r5,r5,1
    9e2c:	38800005 	stb	r2,0(r7)
    9e30:	39c00044 	addi	r7,r7,1
    9e34:	39bffb1e 	bne	r7,r6,9e24 <memmove+0x50>
    9e38:	2005883a 	mov	r2,r4
    9e3c:	f800283a 	ret
    9e40:	1904b03a 	or	r2,r3,r4
    9e44:	108000cc 	andi	r2,r2,3
    9e48:	103ff31e 	bne	r2,zero,9e18 <memmove+0x44>
    9e4c:	3811883a 	mov	r8,r7
    9e50:	180b883a 	mov	r5,r3
    9e54:	200f883a 	mov	r7,r4
    9e58:	28c00017 	ldw	r3,0(r5)
    9e5c:	31bffc04 	addi	r6,r6,-16
    9e60:	38c00015 	stw	r3,0(r7)
    9e64:	28800117 	ldw	r2,4(r5)
    9e68:	38800115 	stw	r2,4(r7)
    9e6c:	28c00217 	ldw	r3,8(r5)
    9e70:	38c00215 	stw	r3,8(r7)
    9e74:	28800317 	ldw	r2,12(r5)
    9e78:	29400404 	addi	r5,r5,16
    9e7c:	38800315 	stw	r2,12(r7)
    9e80:	39c00404 	addi	r7,r7,16
    9e84:	41bff436 	bltu	r8,r6,9e58 <memmove+0x84>
    9e88:	008000c4 	movi	r2,3
    9e8c:	1180072e 	bgeu	r2,r6,9eac <memmove+0xd8>
    9e90:	1007883a 	mov	r3,r2
    9e94:	28800017 	ldw	r2,0(r5)
    9e98:	31bfff04 	addi	r6,r6,-4
    9e9c:	29400104 	addi	r5,r5,4
    9ea0:	38800015 	stw	r2,0(r7)
    9ea4:	39c00104 	addi	r7,r7,4
    9ea8:	19bffa36 	bltu	r3,r6,9e94 <memmove+0xc0>
    9eac:	3811883a 	mov	r8,r7
    9eb0:	003fd906 	br	9e18 <memmove+0x44>

00009eb4 <memset>:
    9eb4:	008000c4 	movi	r2,3
    9eb8:	29403fcc 	andi	r5,r5,255
    9ebc:	2007883a 	mov	r3,r4
    9ec0:	1180022e 	bgeu	r2,r6,9ecc <memset+0x18>
    9ec4:	2084703a 	and	r2,r4,r2
    9ec8:	10000826 	beq	r2,zero,9eec <memset+0x38>
    9ecc:	30000526 	beq	r6,zero,9ee4 <memset+0x30>
    9ed0:	2805883a 	mov	r2,r5
    9ed4:	30cd883a 	add	r6,r6,r3
    9ed8:	18800005 	stb	r2,0(r3)
    9edc:	18c00044 	addi	r3,r3,1
    9ee0:	19bffd1e 	bne	r3,r6,9ed8 <memset+0x24>
    9ee4:	2005883a 	mov	r2,r4
    9ee8:	f800283a 	ret
    9eec:	2804923a 	slli	r2,r5,8
    9ef0:	020003c4 	movi	r8,15
    9ef4:	200f883a 	mov	r7,r4
    9ef8:	2884b03a 	or	r2,r5,r2
    9efc:	1006943a 	slli	r3,r2,16
    9f00:	10c6b03a 	or	r3,r2,r3
    9f04:	41800a2e 	bgeu	r8,r6,9f30 <memset+0x7c>
    9f08:	4005883a 	mov	r2,r8
    9f0c:	31bffc04 	addi	r6,r6,-16
    9f10:	38c00015 	stw	r3,0(r7)
    9f14:	38c00115 	stw	r3,4(r7)
    9f18:	38c00215 	stw	r3,8(r7)
    9f1c:	38c00315 	stw	r3,12(r7)
    9f20:	39c00404 	addi	r7,r7,16
    9f24:	11bff936 	bltu	r2,r6,9f0c <memset+0x58>
    9f28:	008000c4 	movi	r2,3
    9f2c:	1180052e 	bgeu	r2,r6,9f44 <memset+0x90>
    9f30:	31bfff04 	addi	r6,r6,-4
    9f34:	008000c4 	movi	r2,3
    9f38:	38c00015 	stw	r3,0(r7)
    9f3c:	39c00104 	addi	r7,r7,4
    9f40:	11bffb36 	bltu	r2,r6,9f30 <memset+0x7c>
    9f44:	3807883a 	mov	r3,r7
    9f48:	003fe006 	br	9ecc <memset+0x18>

00009f4c <_Bfree>:
    9f4c:	28000826 	beq	r5,zero,9f70 <_Bfree+0x24>
    9f50:	28800117 	ldw	r2,4(r5)
    9f54:	21001317 	ldw	r4,76(r4)
    9f58:	1085883a 	add	r2,r2,r2
    9f5c:	1085883a 	add	r2,r2,r2
    9f60:	1105883a 	add	r2,r2,r4
    9f64:	10c00017 	ldw	r3,0(r2)
    9f68:	28c00015 	stw	r3,0(r5)
    9f6c:	11400015 	stw	r5,0(r2)
    9f70:	f800283a 	ret

00009f74 <__hi0bits>:
    9f74:	20bfffec 	andhi	r2,r4,65535
    9f78:	10001426 	beq	r2,zero,9fcc <__hi0bits+0x58>
    9f7c:	0007883a 	mov	r3,zero
    9f80:	20bfc02c 	andhi	r2,r4,65280
    9f84:	1000021e 	bne	r2,zero,9f90 <__hi0bits+0x1c>
    9f88:	2008923a 	slli	r4,r4,8
    9f8c:	18c00204 	addi	r3,r3,8
    9f90:	20bc002c 	andhi	r2,r4,61440
    9f94:	1000021e 	bne	r2,zero,9fa0 <__hi0bits+0x2c>
    9f98:	2008913a 	slli	r4,r4,4
    9f9c:	18c00104 	addi	r3,r3,4
    9fa0:	20b0002c 	andhi	r2,r4,49152
    9fa4:	1000031e 	bne	r2,zero,9fb4 <__hi0bits+0x40>
    9fa8:	2105883a 	add	r2,r4,r4
    9fac:	18c00084 	addi	r3,r3,2
    9fb0:	1089883a 	add	r4,r2,r2
    9fb4:	20000316 	blt	r4,zero,9fc4 <__hi0bits+0x50>
    9fb8:	2090002c 	andhi	r2,r4,16384
    9fbc:	10000626 	beq	r2,zero,9fd8 <__hi0bits+0x64>
    9fc0:	18c00044 	addi	r3,r3,1
    9fc4:	1805883a 	mov	r2,r3
    9fc8:	f800283a 	ret
    9fcc:	2008943a 	slli	r4,r4,16
    9fd0:	00c00404 	movi	r3,16
    9fd4:	003fea06 	br	9f80 <__hi0bits+0xc>
    9fd8:	00c00804 	movi	r3,32
    9fdc:	1805883a 	mov	r2,r3
    9fe0:	f800283a 	ret

00009fe4 <__lo0bits>:
    9fe4:	20c00017 	ldw	r3,0(r4)
    9fe8:	188001cc 	andi	r2,r3,7
    9fec:	10000a26 	beq	r2,zero,a018 <__lo0bits+0x34>
    9ff0:	1880004c 	andi	r2,r3,1
    9ff4:	1005003a 	cmpeq	r2,r2,zero
    9ff8:	10002126 	beq	r2,zero,a080 <__lo0bits+0x9c>
    9ffc:	1880008c 	andi	r2,r3,2
    a000:	1000251e 	bne	r2,zero,a098 <__lo0bits+0xb4>
    a004:	1804d0ba 	srli	r2,r3,2
    a008:	01400084 	movi	r5,2
    a00c:	20800015 	stw	r2,0(r4)
    a010:	2805883a 	mov	r2,r5
    a014:	f800283a 	ret
    a018:	18bfffcc 	andi	r2,r3,65535
    a01c:	10001526 	beq	r2,zero,a074 <__lo0bits+0x90>
    a020:	000b883a 	mov	r5,zero
    a024:	18803fcc 	andi	r2,r3,255
    a028:	1000021e 	bne	r2,zero,a034 <__lo0bits+0x50>
    a02c:	1806d23a 	srli	r3,r3,8
    a030:	29400204 	addi	r5,r5,8
    a034:	188003cc 	andi	r2,r3,15
    a038:	1000021e 	bne	r2,zero,a044 <__lo0bits+0x60>
    a03c:	1806d13a 	srli	r3,r3,4
    a040:	29400104 	addi	r5,r5,4
    a044:	188000cc 	andi	r2,r3,3
    a048:	1000021e 	bne	r2,zero,a054 <__lo0bits+0x70>
    a04c:	1806d0ba 	srli	r3,r3,2
    a050:	29400084 	addi	r5,r5,2
    a054:	1880004c 	andi	r2,r3,1
    a058:	1000031e 	bne	r2,zero,a068 <__lo0bits+0x84>
    a05c:	1806d07a 	srli	r3,r3,1
    a060:	18000a26 	beq	r3,zero,a08c <__lo0bits+0xa8>
    a064:	29400044 	addi	r5,r5,1
    a068:	2805883a 	mov	r2,r5
    a06c:	20c00015 	stw	r3,0(r4)
    a070:	f800283a 	ret
    a074:	1806d43a 	srli	r3,r3,16
    a078:	01400404 	movi	r5,16
    a07c:	003fe906 	br	a024 <__lo0bits+0x40>
    a080:	000b883a 	mov	r5,zero
    a084:	2805883a 	mov	r2,r5
    a088:	f800283a 	ret
    a08c:	01400804 	movi	r5,32
    a090:	2805883a 	mov	r2,r5
    a094:	f800283a 	ret
    a098:	1804d07a 	srli	r2,r3,1
    a09c:	01400044 	movi	r5,1
    a0a0:	20800015 	stw	r2,0(r4)
    a0a4:	003fda06 	br	a010 <__lo0bits+0x2c>

0000a0a8 <__mcmp>:
    a0a8:	20800417 	ldw	r2,16(r4)
    a0ac:	28c00417 	ldw	r3,16(r5)
    a0b0:	10cfc83a 	sub	r7,r2,r3
    a0b4:	38000c1e 	bne	r7,zero,a0e8 <__mcmp+0x40>
    a0b8:	18c5883a 	add	r2,r3,r3
    a0bc:	1085883a 	add	r2,r2,r2
    a0c0:	10c00504 	addi	r3,r2,20
    a0c4:	21000504 	addi	r4,r4,20
    a0c8:	28cb883a 	add	r5,r5,r3
    a0cc:	2085883a 	add	r2,r4,r2
    a0d0:	10bfff04 	addi	r2,r2,-4
    a0d4:	297fff04 	addi	r5,r5,-4
    a0d8:	11800017 	ldw	r6,0(r2)
    a0dc:	28c00017 	ldw	r3,0(r5)
    a0e0:	30c0031e 	bne	r6,r3,a0f0 <__mcmp+0x48>
    a0e4:	20bffa36 	bltu	r4,r2,a0d0 <__mcmp+0x28>
    a0e8:	3805883a 	mov	r2,r7
    a0ec:	f800283a 	ret
    a0f0:	30c00336 	bltu	r6,r3,a100 <__mcmp+0x58>
    a0f4:	01c00044 	movi	r7,1
    a0f8:	3805883a 	mov	r2,r7
    a0fc:	f800283a 	ret
    a100:	01ffffc4 	movi	r7,-1
    a104:	003ff806 	br	a0e8 <__mcmp+0x40>

0000a108 <__ulp>:
    a108:	295ffc2c 	andhi	r5,r5,32752
    a10c:	013f3034 	movhi	r4,64704
    a110:	290b883a 	add	r5,r5,r4
    a114:	0145c83a 	sub	r2,zero,r5
    a118:	1007d53a 	srai	r3,r2,20
    a11c:	000d883a 	mov	r6,zero
    a120:	0140040e 	bge	zero,r5,a134 <__ulp+0x2c>
    a124:	280f883a 	mov	r7,r5
    a128:	3807883a 	mov	r3,r7
    a12c:	3005883a 	mov	r2,r6
    a130:	f800283a 	ret
    a134:	008004c4 	movi	r2,19
    a138:	193ffb04 	addi	r4,r3,-20
    a13c:	10c00c0e 	bge	r2,r3,a170 <__ulp+0x68>
    a140:	008007c4 	movi	r2,31
    a144:	1107c83a 	sub	r3,r2,r4
    a148:	00800784 	movi	r2,30
    a14c:	01400044 	movi	r5,1
    a150:	11000216 	blt	r2,r4,a15c <__ulp+0x54>
    a154:	00800044 	movi	r2,1
    a158:	10ca983a 	sll	r5,r2,r3
    a15c:	000f883a 	mov	r7,zero
    a160:	280d883a 	mov	r6,r5
    a164:	3807883a 	mov	r3,r7
    a168:	3005883a 	mov	r2,r6
    a16c:	f800283a 	ret
    a170:	00800234 	movhi	r2,8
    a174:	10cfd83a 	sra	r7,r2,r3
    a178:	000d883a 	mov	r6,zero
    a17c:	3005883a 	mov	r2,r6
    a180:	3807883a 	mov	r3,r7
    a184:	f800283a 	ret

0000a188 <__b2d>:
    a188:	20800417 	ldw	r2,16(r4)
    a18c:	defff904 	addi	sp,sp,-28
    a190:	dd000415 	stw	r20,16(sp)
    a194:	1085883a 	add	r2,r2,r2
    a198:	25000504 	addi	r20,r4,20
    a19c:	1085883a 	add	r2,r2,r2
    a1a0:	dc000015 	stw	r16,0(sp)
    a1a4:	a0a1883a 	add	r16,r20,r2
    a1a8:	dd400515 	stw	r21,20(sp)
    a1ac:	857fff17 	ldw	r21,-4(r16)
    a1b0:	dc400115 	stw	r17,4(sp)
    a1b4:	dfc00615 	stw	ra,24(sp)
    a1b8:	a809883a 	mov	r4,r21
    a1bc:	2823883a 	mov	r17,r5
    a1c0:	dcc00315 	stw	r19,12(sp)
    a1c4:	dc800215 	stw	r18,8(sp)
    a1c8:	0009f740 	call	9f74 <__hi0bits>
    a1cc:	100b883a 	mov	r5,r2
    a1d0:	00800804 	movi	r2,32
    a1d4:	1145c83a 	sub	r2,r2,r5
    a1d8:	88800015 	stw	r2,0(r17)
    a1dc:	00800284 	movi	r2,10
    a1e0:	80ffff04 	addi	r3,r16,-4
    a1e4:	11401416 	blt	r2,r5,a238 <__b2d+0xb0>
    a1e8:	008002c4 	movi	r2,11
    a1ec:	1149c83a 	sub	r4,r2,r5
    a1f0:	a0c02736 	bltu	r20,r3,a290 <__b2d+0x108>
    a1f4:	000d883a 	mov	r6,zero
    a1f8:	28800544 	addi	r2,r5,21
    a1fc:	a906d83a 	srl	r3,r21,r4
    a200:	a884983a 	sll	r2,r21,r2
    a204:	1ccffc34 	orhi	r19,r3,16368
    a208:	11a4b03a 	or	r18,r2,r6
    a20c:	9005883a 	mov	r2,r18
    a210:	9807883a 	mov	r3,r19
    a214:	dfc00617 	ldw	ra,24(sp)
    a218:	dd400517 	ldw	r21,20(sp)
    a21c:	dd000417 	ldw	r20,16(sp)
    a220:	dcc00317 	ldw	r19,12(sp)
    a224:	dc800217 	ldw	r18,8(sp)
    a228:	dc400117 	ldw	r17,4(sp)
    a22c:	dc000017 	ldw	r16,0(sp)
    a230:	dec00704 	addi	sp,sp,28
    a234:	f800283a 	ret
    a238:	a0c00e36 	bltu	r20,r3,a274 <__b2d+0xec>
    a23c:	293ffd44 	addi	r4,r5,-11
    a240:	000d883a 	mov	r6,zero
    a244:	20000f26 	beq	r4,zero,a284 <__b2d+0xfc>
    a248:	00800804 	movi	r2,32
    a24c:	110bc83a 	sub	r5,r2,r4
    a250:	a0c01236 	bltu	r20,r3,a29c <__b2d+0x114>
    a254:	000f883a 	mov	r7,zero
    a258:	a904983a 	sll	r2,r21,r4
    a25c:	3146d83a 	srl	r3,r6,r5
    a260:	3108983a 	sll	r4,r6,r4
    a264:	108ffc34 	orhi	r2,r2,16368
    a268:	18a6b03a 	or	r19,r3,r2
    a26c:	3924b03a 	or	r18,r7,r4
    a270:	003fe606 	br	a20c <__b2d+0x84>
    a274:	293ffd44 	addi	r4,r5,-11
    a278:	81bffe17 	ldw	r6,-8(r16)
    a27c:	80fffe04 	addi	r3,r16,-8
    a280:	203ff11e 	bne	r4,zero,a248 <__b2d+0xc0>
    a284:	accffc34 	orhi	r19,r21,16368
    a288:	3025883a 	mov	r18,r6
    a28c:	003fdf06 	br	a20c <__b2d+0x84>
    a290:	18bfff17 	ldw	r2,-4(r3)
    a294:	110cd83a 	srl	r6,r2,r4
    a298:	003fd706 	br	a1f8 <__b2d+0x70>
    a29c:	18bfff17 	ldw	r2,-4(r3)
    a2a0:	114ed83a 	srl	r7,r2,r5
    a2a4:	003fec06 	br	a258 <__b2d+0xd0>

0000a2a8 <__ratio>:
    a2a8:	defff904 	addi	sp,sp,-28
    a2ac:	dc400215 	stw	r17,8(sp)
    a2b0:	2823883a 	mov	r17,r5
    a2b4:	d80b883a 	mov	r5,sp
    a2b8:	dfc00615 	stw	ra,24(sp)
    a2bc:	dd000515 	stw	r20,20(sp)
    a2c0:	dcc00415 	stw	r19,16(sp)
    a2c4:	dc800315 	stw	r18,12(sp)
    a2c8:	2025883a 	mov	r18,r4
    a2cc:	000a1880 	call	a188 <__b2d>
    a2d0:	8809883a 	mov	r4,r17
    a2d4:	d9400104 	addi	r5,sp,4
    a2d8:	1027883a 	mov	r19,r2
    a2dc:	1829883a 	mov	r20,r3
    a2e0:	000a1880 	call	a188 <__b2d>
    a2e4:	89000417 	ldw	r4,16(r17)
    a2e8:	91c00417 	ldw	r7,16(r18)
    a2ec:	d9800117 	ldw	r6,4(sp)
    a2f0:	180b883a 	mov	r5,r3
    a2f4:	390fc83a 	sub	r7,r7,r4
    a2f8:	1009883a 	mov	r4,r2
    a2fc:	d8800017 	ldw	r2,0(sp)
    a300:	380e917a 	slli	r7,r7,5
    a304:	2011883a 	mov	r8,r4
    a308:	1185c83a 	sub	r2,r2,r6
    a30c:	11c5883a 	add	r2,r2,r7
    a310:	1006953a 	slli	r3,r2,20
    a314:	2813883a 	mov	r9,r5
    a318:	00800d0e 	bge	zero,r2,a350 <__ratio+0xa8>
    a31c:	1d29883a 	add	r20,r3,r20
    a320:	a00b883a 	mov	r5,r20
    a324:	480f883a 	mov	r7,r9
    a328:	9809883a 	mov	r4,r19
    a32c:	400d883a 	mov	r6,r8
    a330:	0003a600 	call	3a60 <__divdf3>
    a334:	dfc00617 	ldw	ra,24(sp)
    a338:	dd000517 	ldw	r20,20(sp)
    a33c:	dcc00417 	ldw	r19,16(sp)
    a340:	dc800317 	ldw	r18,12(sp)
    a344:	dc400217 	ldw	r17,8(sp)
    a348:	dec00704 	addi	sp,sp,28
    a34c:	f800283a 	ret
    a350:	28d3c83a 	sub	r9,r5,r3
    a354:	003ff206 	br	a320 <__ratio+0x78>

0000a358 <_mprec_log10>:
    a358:	defffe04 	addi	sp,sp,-8
    a35c:	008005c4 	movi	r2,23
    a360:	dc000015 	stw	r16,0(sp)
    a364:	dfc00115 	stw	ra,4(sp)
    a368:	2021883a 	mov	r16,r4
    a36c:	11000c16 	blt	r2,r4,a3a0 <_mprec_log10+0x48>
    a370:	200490fa 	slli	r2,r4,3
    a374:	00c00074 	movhi	r3,1
    a378:	18fe6d04 	addi	r3,r3,-1612
    a37c:	10c5883a 	add	r2,r2,r3
    a380:	12400117 	ldw	r9,4(r2)
    a384:	12000017 	ldw	r8,0(r2)
    a388:	4807883a 	mov	r3,r9
    a38c:	4005883a 	mov	r2,r8
    a390:	dfc00117 	ldw	ra,4(sp)
    a394:	dc000017 	ldw	r16,0(sp)
    a398:	dec00204 	addi	sp,sp,8
    a39c:	f800283a 	ret
    a3a0:	0011883a 	mov	r8,zero
    a3a4:	024ffc34 	movhi	r9,16368
    a3a8:	0005883a 	mov	r2,zero
    a3ac:	00d00934 	movhi	r3,16420
    a3b0:	480b883a 	mov	r5,r9
    a3b4:	4009883a 	mov	r4,r8
    a3b8:	180f883a 	mov	r7,r3
    a3bc:	100d883a 	mov	r6,r2
    a3c0:	000369c0 	call	369c <__muldf3>
    a3c4:	843fffc4 	addi	r16,r16,-1
    a3c8:	1011883a 	mov	r8,r2
    a3cc:	1813883a 	mov	r9,r3
    a3d0:	803ff51e 	bne	r16,zero,a3a8 <_mprec_log10+0x50>
    a3d4:	4005883a 	mov	r2,r8
    a3d8:	4807883a 	mov	r3,r9
    a3dc:	dfc00117 	ldw	ra,4(sp)
    a3e0:	dc000017 	ldw	r16,0(sp)
    a3e4:	dec00204 	addi	sp,sp,8
    a3e8:	f800283a 	ret

0000a3ec <__copybits>:
    a3ec:	297fffc4 	addi	r5,r5,-1
    a3f0:	30800417 	ldw	r2,16(r6)
    a3f4:	280bd17a 	srai	r5,r5,5
    a3f8:	31800504 	addi	r6,r6,20
    a3fc:	1085883a 	add	r2,r2,r2
    a400:	294b883a 	add	r5,r5,r5
    a404:	294b883a 	add	r5,r5,r5
    a408:	1085883a 	add	r2,r2,r2
    a40c:	290b883a 	add	r5,r5,r4
    a410:	3087883a 	add	r3,r6,r2
    a414:	29400104 	addi	r5,r5,4
    a418:	30c0052e 	bgeu	r6,r3,a430 <__copybits+0x44>
    a41c:	30800017 	ldw	r2,0(r6)
    a420:	31800104 	addi	r6,r6,4
    a424:	20800015 	stw	r2,0(r4)
    a428:	21000104 	addi	r4,r4,4
    a42c:	30fffb36 	bltu	r6,r3,a41c <__copybits+0x30>
    a430:	2140032e 	bgeu	r4,r5,a440 <__copybits+0x54>
    a434:	20000015 	stw	zero,0(r4)
    a438:	21000104 	addi	r4,r4,4
    a43c:	217ffd36 	bltu	r4,r5,a434 <__copybits+0x48>
    a440:	f800283a 	ret

0000a444 <__any_on>:
    a444:	20800417 	ldw	r2,16(r4)
    a448:	2807d17a 	srai	r3,r5,5
    a44c:	21000504 	addi	r4,r4,20
    a450:	10c00d0e 	bge	r2,r3,a488 <__any_on+0x44>
    a454:	1085883a 	add	r2,r2,r2
    a458:	1085883a 	add	r2,r2,r2
    a45c:	208d883a 	add	r6,r4,r2
    a460:	2180182e 	bgeu	r4,r6,a4c4 <__any_on+0x80>
    a464:	30bfff17 	ldw	r2,-4(r6)
    a468:	30ffff04 	addi	r3,r6,-4
    a46c:	1000041e 	bne	r2,zero,a480 <__any_on+0x3c>
    a470:	20c0142e 	bgeu	r4,r3,a4c4 <__any_on+0x80>
    a474:	18ffff04 	addi	r3,r3,-4
    a478:	18800017 	ldw	r2,0(r3)
    a47c:	103ffc26 	beq	r2,zero,a470 <__any_on+0x2c>
    a480:	00800044 	movi	r2,1
    a484:	f800283a 	ret
    a488:	18800a0e 	bge	r3,r2,a4b4 <__any_on+0x70>
    a48c:	294007cc 	andi	r5,r5,31
    a490:	28000826 	beq	r5,zero,a4b4 <__any_on+0x70>
    a494:	18c5883a 	add	r2,r3,r3
    a498:	1085883a 	add	r2,r2,r2
    a49c:	208d883a 	add	r6,r4,r2
    a4a0:	30c00017 	ldw	r3,0(r6)
    a4a4:	1944d83a 	srl	r2,r3,r5
    a4a8:	1144983a 	sll	r2,r2,r5
    a4ac:	18bff41e 	bne	r3,r2,a480 <__any_on+0x3c>
    a4b0:	003feb06 	br	a460 <__any_on+0x1c>
    a4b4:	18c5883a 	add	r2,r3,r3
    a4b8:	1085883a 	add	r2,r2,r2
    a4bc:	208d883a 	add	r6,r4,r2
    a4c0:	003fe706 	br	a460 <__any_on+0x1c>
    a4c4:	0005883a 	mov	r2,zero
    a4c8:	f800283a 	ret

0000a4cc <_Balloc>:
    a4cc:	20c01317 	ldw	r3,76(r4)
    a4d0:	defffb04 	addi	sp,sp,-20
    a4d4:	dcc00315 	stw	r19,12(sp)
    a4d8:	dc800215 	stw	r18,8(sp)
    a4dc:	dfc00415 	stw	ra,16(sp)
    a4e0:	2825883a 	mov	r18,r5
    a4e4:	dc400115 	stw	r17,4(sp)
    a4e8:	dc000015 	stw	r16,0(sp)
    a4ec:	2027883a 	mov	r19,r4
    a4f0:	01800404 	movi	r6,16
    a4f4:	01400104 	movi	r5,4
    a4f8:	18001726 	beq	r3,zero,a558 <_Balloc+0x8c>
    a4fc:	01400044 	movi	r5,1
    a500:	9485883a 	add	r2,r18,r18
    a504:	2ca2983a 	sll	r17,r5,r18
    a508:	1085883a 	add	r2,r2,r2
    a50c:	10c7883a 	add	r3,r2,r3
    a510:	1c000017 	ldw	r16,0(r3)
    a514:	8c4d883a 	add	r6,r17,r17
    a518:	318d883a 	add	r6,r6,r6
    a51c:	9809883a 	mov	r4,r19
    a520:	31800504 	addi	r6,r6,20
    a524:	80001226 	beq	r16,zero,a570 <_Balloc+0xa4>
    a528:	80800017 	ldw	r2,0(r16)
    a52c:	18800015 	stw	r2,0(r3)
    a530:	80000415 	stw	zero,16(r16)
    a534:	80000315 	stw	zero,12(r16)
    a538:	8005883a 	mov	r2,r16
    a53c:	dfc00417 	ldw	ra,16(sp)
    a540:	dcc00317 	ldw	r19,12(sp)
    a544:	dc800217 	ldw	r18,8(sp)
    a548:	dc400117 	ldw	r17,4(sp)
    a54c:	dc000017 	ldw	r16,0(sp)
    a550:	dec00504 	addi	sp,sp,20
    a554:	f800283a 	ret
    a558:	000b7f40 	call	b7f4 <_calloc_r>
    a55c:	1007883a 	mov	r3,r2
    a560:	0021883a 	mov	r16,zero
    a564:	98801315 	stw	r2,76(r19)
    a568:	103fe41e 	bne	r2,zero,a4fc <_Balloc+0x30>
    a56c:	003ff206 	br	a538 <_Balloc+0x6c>
    a570:	000b7f40 	call	b7f4 <_calloc_r>
    a574:	103ff026 	beq	r2,zero,a538 <_Balloc+0x6c>
    a578:	1021883a 	mov	r16,r2
    a57c:	14800115 	stw	r18,4(r2)
    a580:	14400215 	stw	r17,8(r2)
    a584:	003fea06 	br	a530 <_Balloc+0x64>

0000a588 <__d2b>:
    a588:	defff504 	addi	sp,sp,-44
    a58c:	dcc00515 	stw	r19,20(sp)
    a590:	04c00044 	movi	r19,1
    a594:	dc000215 	stw	r16,8(sp)
    a598:	2821883a 	mov	r16,r5
    a59c:	980b883a 	mov	r5,r19
    a5a0:	ddc00915 	stw	r23,36(sp)
    a5a4:	dd800815 	stw	r22,32(sp)
    a5a8:	dd400715 	stw	r21,28(sp)
    a5ac:	dd000615 	stw	r20,24(sp)
    a5b0:	dc800415 	stw	r18,16(sp)
    a5b4:	dc400315 	stw	r17,12(sp)
    a5b8:	dfc00a15 	stw	ra,40(sp)
    a5bc:	3023883a 	mov	r17,r6
    a5c0:	382d883a 	mov	r22,r7
    a5c4:	ddc00b17 	ldw	r23,44(sp)
    a5c8:	000a4cc0 	call	a4cc <_Balloc>
    a5cc:	1025883a 	mov	r18,r2
    a5d0:	00a00034 	movhi	r2,32768
    a5d4:	10bfffc4 	addi	r2,r2,-1
    a5d8:	8888703a 	and	r4,r17,r2
    a5dc:	202ad53a 	srli	r21,r4,20
    a5e0:	00800434 	movhi	r2,16
    a5e4:	10bfffc4 	addi	r2,r2,-1
    a5e8:	8886703a 	and	r3,r17,r2
    a5ec:	a829003a 	cmpeq	r20,r21,zero
    a5f0:	800b883a 	mov	r5,r16
    a5f4:	d8c00115 	stw	r3,4(sp)
    a5f8:	94000504 	addi	r16,r18,20
    a5fc:	a000021e 	bne	r20,zero,a608 <__d2b+0x80>
    a600:	18c00434 	orhi	r3,r3,16
    a604:	d8c00115 	stw	r3,4(sp)
    a608:	28002726 	beq	r5,zero,a6a8 <__d2b+0x120>
    a60c:	d809883a 	mov	r4,sp
    a610:	d9400015 	stw	r5,0(sp)
    a614:	0009fe40 	call	9fe4 <__lo0bits>
    a618:	100d883a 	mov	r6,r2
    a61c:	10003526 	beq	r2,zero,a6f4 <__d2b+0x16c>
    a620:	d8c00117 	ldw	r3,4(sp)
    a624:	00800804 	movi	r2,32
    a628:	1185c83a 	sub	r2,r2,r6
    a62c:	d9000017 	ldw	r4,0(sp)
    a630:	1886983a 	sll	r3,r3,r2
    a634:	1906b03a 	or	r3,r3,r4
    a638:	90c00515 	stw	r3,20(r18)
    a63c:	d8c00117 	ldw	r3,4(sp)
    a640:	1986d83a 	srl	r3,r3,r6
    a644:	d8c00115 	stw	r3,4(sp)
    a648:	180b003a 	cmpeq	r5,r3,zero
    a64c:	00800084 	movi	r2,2
    a650:	114bc83a 	sub	r5,r2,r5
    a654:	80c00115 	stw	r3,4(r16)
    a658:	91400415 	stw	r5,16(r18)
    a65c:	a0001a1e 	bne	r20,zero,a6c8 <__d2b+0x140>
    a660:	3545883a 	add	r2,r6,r21
    a664:	10bef344 	addi	r2,r2,-1075
    a668:	00c00d44 	movi	r3,53
    a66c:	b0800015 	stw	r2,0(r22)
    a670:	1987c83a 	sub	r3,r3,r6
    a674:	b8c00015 	stw	r3,0(r23)
    a678:	9005883a 	mov	r2,r18
    a67c:	dfc00a17 	ldw	ra,40(sp)
    a680:	ddc00917 	ldw	r23,36(sp)
    a684:	dd800817 	ldw	r22,32(sp)
    a688:	dd400717 	ldw	r21,28(sp)
    a68c:	dd000617 	ldw	r20,24(sp)
    a690:	dcc00517 	ldw	r19,20(sp)
    a694:	dc800417 	ldw	r18,16(sp)
    a698:	dc400317 	ldw	r17,12(sp)
    a69c:	dc000217 	ldw	r16,8(sp)
    a6a0:	dec00b04 	addi	sp,sp,44
    a6a4:	f800283a 	ret
    a6a8:	d9000104 	addi	r4,sp,4
    a6ac:	0009fe40 	call	9fe4 <__lo0bits>
    a6b0:	11800804 	addi	r6,r2,32
    a6b4:	d8800117 	ldw	r2,4(sp)
    a6b8:	94c00415 	stw	r19,16(r18)
    a6bc:	980b883a 	mov	r5,r19
    a6c0:	90800515 	stw	r2,20(r18)
    a6c4:	a03fe626 	beq	r20,zero,a660 <__d2b+0xd8>
    a6c8:	2945883a 	add	r2,r5,r5
    a6cc:	1085883a 	add	r2,r2,r2
    a6d0:	1405883a 	add	r2,r2,r16
    a6d4:	113fff17 	ldw	r4,-4(r2)
    a6d8:	30fef384 	addi	r3,r6,-1074
    a6dc:	2820917a 	slli	r16,r5,5
    a6e0:	b0c00015 	stw	r3,0(r22)
    a6e4:	0009f740 	call	9f74 <__hi0bits>
    a6e8:	80a1c83a 	sub	r16,r16,r2
    a6ec:	bc000015 	stw	r16,0(r23)
    a6f0:	003fe106 	br	a678 <__d2b+0xf0>
    a6f4:	d8800017 	ldw	r2,0(sp)
    a6f8:	90800515 	stw	r2,20(r18)
    a6fc:	d8c00117 	ldw	r3,4(sp)
    a700:	003fd106 	br	a648 <__d2b+0xc0>

0000a704 <__mdiff>:
    a704:	defffb04 	addi	sp,sp,-20
    a708:	dc000015 	stw	r16,0(sp)
    a70c:	2821883a 	mov	r16,r5
    a710:	dc800215 	stw	r18,8(sp)
    a714:	300b883a 	mov	r5,r6
    a718:	2025883a 	mov	r18,r4
    a71c:	8009883a 	mov	r4,r16
    a720:	dc400115 	stw	r17,4(sp)
    a724:	dfc00415 	stw	ra,16(sp)
    a728:	dcc00315 	stw	r19,12(sp)
    a72c:	3023883a 	mov	r17,r6
    a730:	000a0a80 	call	a0a8 <__mcmp>
    a734:	10004226 	beq	r2,zero,a840 <__mdiff+0x13c>
    a738:	10005016 	blt	r2,zero,a87c <__mdiff+0x178>
    a73c:	0027883a 	mov	r19,zero
    a740:	81400117 	ldw	r5,4(r16)
    a744:	9009883a 	mov	r4,r18
    a748:	000a4cc0 	call	a4cc <_Balloc>
    a74c:	1019883a 	mov	r12,r2
    a750:	82800417 	ldw	r10,16(r16)
    a754:	88800417 	ldw	r2,16(r17)
    a758:	81800504 	addi	r6,r16,20
    a75c:	5287883a 	add	r3,r10,r10
    a760:	1085883a 	add	r2,r2,r2
    a764:	18c7883a 	add	r3,r3,r3
    a768:	1085883a 	add	r2,r2,r2
    a76c:	8a000504 	addi	r8,r17,20
    a770:	64c00315 	stw	r19,12(r12)
    a774:	30db883a 	add	r13,r6,r3
    a778:	4097883a 	add	r11,r8,r2
    a77c:	61c00504 	addi	r7,r12,20
    a780:	0013883a 	mov	r9,zero
    a784:	31000017 	ldw	r4,0(r6)
    a788:	41400017 	ldw	r5,0(r8)
    a78c:	42000104 	addi	r8,r8,4
    a790:	20bfffcc 	andi	r2,r4,65535
    a794:	28ffffcc 	andi	r3,r5,65535
    a798:	10c5c83a 	sub	r2,r2,r3
    a79c:	1245883a 	add	r2,r2,r9
    a7a0:	2008d43a 	srli	r4,r4,16
    a7a4:	280ad43a 	srli	r5,r5,16
    a7a8:	1007d43a 	srai	r3,r2,16
    a7ac:	3880000d 	sth	r2,0(r7)
    a7b0:	2149c83a 	sub	r4,r4,r5
    a7b4:	20c9883a 	add	r4,r4,r3
    a7b8:	3900008d 	sth	r4,2(r7)
    a7bc:	31800104 	addi	r6,r6,4
    a7c0:	39c00104 	addi	r7,r7,4
    a7c4:	2013d43a 	srai	r9,r4,16
    a7c8:	42ffee36 	bltu	r8,r11,a784 <__mdiff+0x80>
    a7cc:	33400c2e 	bgeu	r6,r13,a800 <__mdiff+0xfc>
    a7d0:	30800017 	ldw	r2,0(r6)
    a7d4:	31800104 	addi	r6,r6,4
    a7d8:	10ffffcc 	andi	r3,r2,65535
    a7dc:	1a47883a 	add	r3,r3,r9
    a7e0:	1004d43a 	srli	r2,r2,16
    a7e4:	1809d43a 	srai	r4,r3,16
    a7e8:	38c0000d 	sth	r3,0(r7)
    a7ec:	1105883a 	add	r2,r2,r4
    a7f0:	3880008d 	sth	r2,2(r7)
    a7f4:	1013d43a 	srai	r9,r2,16
    a7f8:	39c00104 	addi	r7,r7,4
    a7fc:	337ff436 	bltu	r6,r13,a7d0 <__mdiff+0xcc>
    a800:	38bfff17 	ldw	r2,-4(r7)
    a804:	38ffff04 	addi	r3,r7,-4
    a808:	1000041e 	bne	r2,zero,a81c <__mdiff+0x118>
    a80c:	18ffff04 	addi	r3,r3,-4
    a810:	18800017 	ldw	r2,0(r3)
    a814:	52bfffc4 	addi	r10,r10,-1
    a818:	103ffc26 	beq	r2,zero,a80c <__mdiff+0x108>
    a81c:	6005883a 	mov	r2,r12
    a820:	62800415 	stw	r10,16(r12)
    a824:	dfc00417 	ldw	ra,16(sp)
    a828:	dcc00317 	ldw	r19,12(sp)
    a82c:	dc800217 	ldw	r18,8(sp)
    a830:	dc400117 	ldw	r17,4(sp)
    a834:	dc000017 	ldw	r16,0(sp)
    a838:	dec00504 	addi	sp,sp,20
    a83c:	f800283a 	ret
    a840:	9009883a 	mov	r4,r18
    a844:	000b883a 	mov	r5,zero
    a848:	000a4cc0 	call	a4cc <_Balloc>
    a84c:	1019883a 	mov	r12,r2
    a850:	00800044 	movi	r2,1
    a854:	60800415 	stw	r2,16(r12)
    a858:	6005883a 	mov	r2,r12
    a85c:	60000515 	stw	zero,20(r12)
    a860:	dfc00417 	ldw	ra,16(sp)
    a864:	dcc00317 	ldw	r19,12(sp)
    a868:	dc800217 	ldw	r18,8(sp)
    a86c:	dc400117 	ldw	r17,4(sp)
    a870:	dc000017 	ldw	r16,0(sp)
    a874:	dec00504 	addi	sp,sp,20
    a878:	f800283a 	ret
    a87c:	880d883a 	mov	r6,r17
    a880:	04c00044 	movi	r19,1
    a884:	8023883a 	mov	r17,r16
    a888:	3021883a 	mov	r16,r6
    a88c:	003fac06 	br	a740 <__mdiff+0x3c>

0000a890 <__lshift>:
    a890:	defff904 	addi	sp,sp,-28
    a894:	28800417 	ldw	r2,16(r5)
    a898:	dc000015 	stw	r16,0(sp)
    a89c:	3021d17a 	srai	r16,r6,5
    a8a0:	28c00217 	ldw	r3,8(r5)
    a8a4:	10800044 	addi	r2,r2,1
    a8a8:	dc400115 	stw	r17,4(sp)
    a8ac:	80a3883a 	add	r17,r16,r2
    a8b0:	dd400515 	stw	r21,20(sp)
    a8b4:	dd000415 	stw	r20,16(sp)
    a8b8:	dc800215 	stw	r18,8(sp)
    a8bc:	dfc00615 	stw	ra,24(sp)
    a8c0:	2825883a 	mov	r18,r5
    a8c4:	dcc00315 	stw	r19,12(sp)
    a8c8:	3029883a 	mov	r20,r6
    a8cc:	202b883a 	mov	r21,r4
    a8d0:	29400117 	ldw	r5,4(r5)
    a8d4:	1c40030e 	bge	r3,r17,a8e4 <__lshift+0x54>
    a8d8:	18c7883a 	add	r3,r3,r3
    a8dc:	29400044 	addi	r5,r5,1
    a8e0:	1c7ffd16 	blt	r3,r17,a8d8 <__lshift+0x48>
    a8e4:	a809883a 	mov	r4,r21
    a8e8:	000a4cc0 	call	a4cc <_Balloc>
    a8ec:	1027883a 	mov	r19,r2
    a8f0:	11400504 	addi	r5,r2,20
    a8f4:	0400090e 	bge	zero,r16,a91c <__lshift+0x8c>
    a8f8:	2805883a 	mov	r2,r5
    a8fc:	0007883a 	mov	r3,zero
    a900:	18c00044 	addi	r3,r3,1
    a904:	10000015 	stw	zero,0(r2)
    a908:	10800104 	addi	r2,r2,4
    a90c:	80fffc1e 	bne	r16,r3,a900 <__lshift+0x70>
    a910:	8405883a 	add	r2,r16,r16
    a914:	1085883a 	add	r2,r2,r2
    a918:	288b883a 	add	r5,r5,r2
    a91c:	90800417 	ldw	r2,16(r18)
    a920:	91000504 	addi	r4,r18,20
    a924:	a18007cc 	andi	r6,r20,31
    a928:	1085883a 	add	r2,r2,r2
    a92c:	1085883a 	add	r2,r2,r2
    a930:	208f883a 	add	r7,r4,r2
    a934:	30001e26 	beq	r6,zero,a9b0 <__lshift+0x120>
    a938:	00800804 	movi	r2,32
    a93c:	1191c83a 	sub	r8,r2,r6
    a940:	0007883a 	mov	r3,zero
    a944:	20800017 	ldw	r2,0(r4)
    a948:	1184983a 	sll	r2,r2,r6
    a94c:	1884b03a 	or	r2,r3,r2
    a950:	28800015 	stw	r2,0(r5)
    a954:	20c00017 	ldw	r3,0(r4)
    a958:	21000104 	addi	r4,r4,4
    a95c:	29400104 	addi	r5,r5,4
    a960:	1a06d83a 	srl	r3,r3,r8
    a964:	21fff736 	bltu	r4,r7,a944 <__lshift+0xb4>
    a968:	28c00015 	stw	r3,0(r5)
    a96c:	18000126 	beq	r3,zero,a974 <__lshift+0xe4>
    a970:	8c400044 	addi	r17,r17,1
    a974:	88bfffc4 	addi	r2,r17,-1
    a978:	98800415 	stw	r2,16(r19)
    a97c:	a809883a 	mov	r4,r21
    a980:	900b883a 	mov	r5,r18
    a984:	0009f4c0 	call	9f4c <_Bfree>
    a988:	9805883a 	mov	r2,r19
    a98c:	dfc00617 	ldw	ra,24(sp)
    a990:	dd400517 	ldw	r21,20(sp)
    a994:	dd000417 	ldw	r20,16(sp)
    a998:	dcc00317 	ldw	r19,12(sp)
    a99c:	dc800217 	ldw	r18,8(sp)
    a9a0:	dc400117 	ldw	r17,4(sp)
    a9a4:	dc000017 	ldw	r16,0(sp)
    a9a8:	dec00704 	addi	sp,sp,28
    a9ac:	f800283a 	ret
    a9b0:	20800017 	ldw	r2,0(r4)
    a9b4:	21000104 	addi	r4,r4,4
    a9b8:	28800015 	stw	r2,0(r5)
    a9bc:	29400104 	addi	r5,r5,4
    a9c0:	21ffec2e 	bgeu	r4,r7,a974 <__lshift+0xe4>
    a9c4:	20800017 	ldw	r2,0(r4)
    a9c8:	21000104 	addi	r4,r4,4
    a9cc:	28800015 	stw	r2,0(r5)
    a9d0:	29400104 	addi	r5,r5,4
    a9d4:	21fff636 	bltu	r4,r7,a9b0 <__lshift+0x120>
    a9d8:	003fe606 	br	a974 <__lshift+0xe4>

0000a9dc <__multiply>:
    a9dc:	defff904 	addi	sp,sp,-28
    a9e0:	dcc00315 	stw	r19,12(sp)
    a9e4:	dc800215 	stw	r18,8(sp)
    a9e8:	2cc00417 	ldw	r19,16(r5)
    a9ec:	34800417 	ldw	r18,16(r6)
    a9f0:	dd000415 	stw	r20,16(sp)
    a9f4:	dc400115 	stw	r17,4(sp)
    a9f8:	dfc00615 	stw	ra,24(sp)
    a9fc:	dd400515 	stw	r21,20(sp)
    aa00:	dc000015 	stw	r16,0(sp)
    aa04:	2823883a 	mov	r17,r5
    aa08:	3029883a 	mov	r20,r6
    aa0c:	9c80040e 	bge	r19,r18,aa20 <__multiply+0x44>
    aa10:	9027883a 	mov	r19,r18
    aa14:	2c800417 	ldw	r18,16(r5)
    aa18:	2829883a 	mov	r20,r5
    aa1c:	3023883a 	mov	r17,r6
    aa20:	88800217 	ldw	r2,8(r17)
    aa24:	9ca1883a 	add	r16,r19,r18
    aa28:	89400117 	ldw	r5,4(r17)
    aa2c:	1400010e 	bge	r2,r16,aa34 <__multiply+0x58>
    aa30:	29400044 	addi	r5,r5,1
    aa34:	000a4cc0 	call	a4cc <_Balloc>
    aa38:	102b883a 	mov	r21,r2
    aa3c:	8405883a 	add	r2,r16,r16
    aa40:	1085883a 	add	r2,r2,r2
    aa44:	a9000504 	addi	r4,r21,20
    aa48:	209d883a 	add	r14,r4,r2
    aa4c:	2380042e 	bgeu	r4,r14,aa60 <__multiply+0x84>
    aa50:	2005883a 	mov	r2,r4
    aa54:	10000015 	stw	zero,0(r2)
    aa58:	10800104 	addi	r2,r2,4
    aa5c:	13bffd36 	bltu	r2,r14,aa54 <__multiply+0x78>
    aa60:	9485883a 	add	r2,r18,r18
    aa64:	9cc7883a 	add	r3,r19,r19
    aa68:	a1800504 	addi	r6,r20,20
    aa6c:	1085883a 	add	r2,r2,r2
    aa70:	8b400504 	addi	r13,r17,20
    aa74:	18c7883a 	add	r3,r3,r3
    aa78:	309f883a 	add	r15,r6,r2
    aa7c:	68d7883a 	add	r11,r13,r3
    aa80:	33c03b2e 	bgeu	r6,r15,ab70 <__multiply+0x194>
    aa84:	2019883a 	mov	r12,r4
    aa88:	30800017 	ldw	r2,0(r6)
    aa8c:	127fffcc 	andi	r9,r2,65535
    aa90:	48001826 	beq	r9,zero,aaf4 <__multiply+0x118>
    aa94:	6811883a 	mov	r8,r13
    aa98:	600f883a 	mov	r7,r12
    aa9c:	0015883a 	mov	r10,zero
    aaa0:	40c00017 	ldw	r3,0(r8)
    aaa4:	39400017 	ldw	r5,0(r7)
    aaa8:	42000104 	addi	r8,r8,4
    aaac:	193fffcc 	andi	r4,r3,65535
    aab0:	4909383a 	mul	r4,r9,r4
    aab4:	1806d43a 	srli	r3,r3,16
    aab8:	28bfffcc 	andi	r2,r5,65535
    aabc:	5085883a 	add	r2,r10,r2
    aac0:	2089883a 	add	r4,r4,r2
    aac4:	48c7383a 	mul	r3,r9,r3
    aac8:	280ad43a 	srli	r5,r5,16
    aacc:	2004d43a 	srli	r2,r4,16
    aad0:	3900000d 	sth	r4,0(r7)
    aad4:	1947883a 	add	r3,r3,r5
    aad8:	10c5883a 	add	r2,r2,r3
    aadc:	3880008d 	sth	r2,2(r7)
    aae0:	1014d43a 	srli	r10,r2,16
    aae4:	39c00104 	addi	r7,r7,4
    aae8:	42ffed36 	bltu	r8,r11,aaa0 <__multiply+0xc4>
    aaec:	3a800015 	stw	r10,0(r7)
    aaf0:	30800017 	ldw	r2,0(r6)
    aaf4:	1012d43a 	srli	r9,r2,16
    aaf8:	48001926 	beq	r9,zero,ab60 <__multiply+0x184>
    aafc:	60800017 	ldw	r2,0(r12)
    ab00:	6811883a 	mov	r8,r13
    ab04:	600f883a 	mov	r7,r12
    ab08:	0015883a 	mov	r10,zero
    ab0c:	100b883a 	mov	r5,r2
    ab10:	41000017 	ldw	r4,0(r8)
    ab14:	2806d43a 	srli	r3,r5,16
    ab18:	3880000d 	sth	r2,0(r7)
    ab1c:	20bfffcc 	andi	r2,r4,65535
    ab20:	4885383a 	mul	r2,r9,r2
    ab24:	50c7883a 	add	r3,r10,r3
    ab28:	2008d43a 	srli	r4,r4,16
    ab2c:	10c5883a 	add	r2,r2,r3
    ab30:	3880008d 	sth	r2,2(r7)
    ab34:	39c00104 	addi	r7,r7,4
    ab38:	39400017 	ldw	r5,0(r7)
    ab3c:	4909383a 	mul	r4,r9,r4
    ab40:	1004d43a 	srli	r2,r2,16
    ab44:	28ffffcc 	andi	r3,r5,65535
    ab48:	20c9883a 	add	r4,r4,r3
    ab4c:	1105883a 	add	r2,r2,r4
    ab50:	42000104 	addi	r8,r8,4
    ab54:	1014d43a 	srli	r10,r2,16
    ab58:	42ffed36 	bltu	r8,r11,ab10 <__multiply+0x134>
    ab5c:	38800015 	stw	r2,0(r7)
    ab60:	31800104 	addi	r6,r6,4
    ab64:	33c0022e 	bgeu	r6,r15,ab70 <__multiply+0x194>
    ab68:	63000104 	addi	r12,r12,4
    ab6c:	003fc606 	br	aa88 <__multiply+0xac>
    ab70:	0400090e 	bge	zero,r16,ab98 <__multiply+0x1bc>
    ab74:	70bfff17 	ldw	r2,-4(r14)
    ab78:	70ffff04 	addi	r3,r14,-4
    ab7c:	10000326 	beq	r2,zero,ab8c <__multiply+0x1b0>
    ab80:	00000506 	br	ab98 <__multiply+0x1bc>
    ab84:	18800017 	ldw	r2,0(r3)
    ab88:	1000031e 	bne	r2,zero,ab98 <__multiply+0x1bc>
    ab8c:	843fffc4 	addi	r16,r16,-1
    ab90:	18ffff04 	addi	r3,r3,-4
    ab94:	803ffb1e 	bne	r16,zero,ab84 <__multiply+0x1a8>
    ab98:	a805883a 	mov	r2,r21
    ab9c:	ac000415 	stw	r16,16(r21)
    aba0:	dfc00617 	ldw	ra,24(sp)
    aba4:	dd400517 	ldw	r21,20(sp)
    aba8:	dd000417 	ldw	r20,16(sp)
    abac:	dcc00317 	ldw	r19,12(sp)
    abb0:	dc800217 	ldw	r18,8(sp)
    abb4:	dc400117 	ldw	r17,4(sp)
    abb8:	dc000017 	ldw	r16,0(sp)
    abbc:	dec00704 	addi	sp,sp,28
    abc0:	f800283a 	ret

0000abc4 <__i2b>:
    abc4:	defffd04 	addi	sp,sp,-12
    abc8:	dc000015 	stw	r16,0(sp)
    abcc:	04000044 	movi	r16,1
    abd0:	dc800115 	stw	r18,4(sp)
    abd4:	2825883a 	mov	r18,r5
    abd8:	800b883a 	mov	r5,r16
    abdc:	dfc00215 	stw	ra,8(sp)
    abe0:	000a4cc0 	call	a4cc <_Balloc>
    abe4:	14000415 	stw	r16,16(r2)
    abe8:	14800515 	stw	r18,20(r2)
    abec:	dfc00217 	ldw	ra,8(sp)
    abf0:	dc800117 	ldw	r18,4(sp)
    abf4:	dc000017 	ldw	r16,0(sp)
    abf8:	dec00304 	addi	sp,sp,12
    abfc:	f800283a 	ret

0000ac00 <__multadd>:
    ac00:	defffa04 	addi	sp,sp,-24
    ac04:	dc800215 	stw	r18,8(sp)
    ac08:	2c800417 	ldw	r18,16(r5)
    ac0c:	dd000415 	stw	r20,16(sp)
    ac10:	dcc00315 	stw	r19,12(sp)
    ac14:	dc000015 	stw	r16,0(sp)
    ac18:	dfc00515 	stw	ra,20(sp)
    ac1c:	3821883a 	mov	r16,r7
    ac20:	dc400115 	stw	r17,4(sp)
    ac24:	2827883a 	mov	r19,r5
    ac28:	2029883a 	mov	r20,r4
    ac2c:	2a000504 	addi	r8,r5,20
    ac30:	000f883a 	mov	r7,zero
    ac34:	40800017 	ldw	r2,0(r8)
    ac38:	39c00044 	addi	r7,r7,1
    ac3c:	10ffffcc 	andi	r3,r2,65535
    ac40:	1987383a 	mul	r3,r3,r6
    ac44:	1004d43a 	srli	r2,r2,16
    ac48:	1c07883a 	add	r3,r3,r16
    ac4c:	180ad43a 	srli	r5,r3,16
    ac50:	1185383a 	mul	r2,r2,r6
    ac54:	18ffffcc 	andi	r3,r3,65535
    ac58:	1145883a 	add	r2,r2,r5
    ac5c:	1008943a 	slli	r4,r2,16
    ac60:	1020d43a 	srli	r16,r2,16
    ac64:	20c9883a 	add	r4,r4,r3
    ac68:	41000015 	stw	r4,0(r8)
    ac6c:	42000104 	addi	r8,r8,4
    ac70:	3cbff016 	blt	r7,r18,ac34 <__multadd+0x34>
    ac74:	80000826 	beq	r16,zero,ac98 <__multadd+0x98>
    ac78:	98800217 	ldw	r2,8(r19)
    ac7c:	90800f0e 	bge	r18,r2,acbc <__multadd+0xbc>
    ac80:	9485883a 	add	r2,r18,r18
    ac84:	1085883a 	add	r2,r2,r2
    ac88:	14c5883a 	add	r2,r2,r19
    ac8c:	90c00044 	addi	r3,r18,1
    ac90:	14000515 	stw	r16,20(r2)
    ac94:	98c00415 	stw	r3,16(r19)
    ac98:	9805883a 	mov	r2,r19
    ac9c:	dfc00517 	ldw	ra,20(sp)
    aca0:	dd000417 	ldw	r20,16(sp)
    aca4:	dcc00317 	ldw	r19,12(sp)
    aca8:	dc800217 	ldw	r18,8(sp)
    acac:	dc400117 	ldw	r17,4(sp)
    acb0:	dc000017 	ldw	r16,0(sp)
    acb4:	dec00604 	addi	sp,sp,24
    acb8:	f800283a 	ret
    acbc:	99400117 	ldw	r5,4(r19)
    acc0:	a009883a 	mov	r4,r20
    acc4:	29400044 	addi	r5,r5,1
    acc8:	000a4cc0 	call	a4cc <_Balloc>
    accc:	99800417 	ldw	r6,16(r19)
    acd0:	99400304 	addi	r5,r19,12
    acd4:	11000304 	addi	r4,r2,12
    acd8:	318d883a 	add	r6,r6,r6
    acdc:	318d883a 	add	r6,r6,r6
    ace0:	31800204 	addi	r6,r6,8
    ace4:	1023883a 	mov	r17,r2
    ace8:	0009d340 	call	9d34 <memcpy>
    acec:	980b883a 	mov	r5,r19
    acf0:	a009883a 	mov	r4,r20
    acf4:	0009f4c0 	call	9f4c <_Bfree>
    acf8:	8827883a 	mov	r19,r17
    acfc:	003fe006 	br	ac80 <__multadd+0x80>

0000ad00 <__pow5mult>:
    ad00:	defffa04 	addi	sp,sp,-24
    ad04:	308000cc 	andi	r2,r6,3
    ad08:	dd000415 	stw	r20,16(sp)
    ad0c:	dcc00315 	stw	r19,12(sp)
    ad10:	dc000015 	stw	r16,0(sp)
    ad14:	dfc00515 	stw	ra,20(sp)
    ad18:	dc800215 	stw	r18,8(sp)
    ad1c:	dc400115 	stw	r17,4(sp)
    ad20:	3021883a 	mov	r16,r6
    ad24:	2027883a 	mov	r19,r4
    ad28:	2829883a 	mov	r20,r5
    ad2c:	10002b1e 	bne	r2,zero,addc <__pow5mult+0xdc>
    ad30:	8025d0ba 	srai	r18,r16,2
    ad34:	90001b26 	beq	r18,zero,ada4 <__pow5mult+0xa4>
    ad38:	9c001217 	ldw	r16,72(r19)
    ad3c:	8000081e 	bne	r16,zero,ad60 <__pow5mult+0x60>
    ad40:	00003006 	br	ae04 <__pow5mult+0x104>
    ad44:	800b883a 	mov	r5,r16
    ad48:	800d883a 	mov	r6,r16
    ad4c:	9809883a 	mov	r4,r19
    ad50:	90001426 	beq	r18,zero,ada4 <__pow5mult+0xa4>
    ad54:	80800017 	ldw	r2,0(r16)
    ad58:	10001b26 	beq	r2,zero,adc8 <__pow5mult+0xc8>
    ad5c:	1021883a 	mov	r16,r2
    ad60:	9080004c 	andi	r2,r18,1
    ad64:	1005003a 	cmpeq	r2,r2,zero
    ad68:	9025d07a 	srai	r18,r18,1
    ad6c:	800d883a 	mov	r6,r16
    ad70:	9809883a 	mov	r4,r19
    ad74:	a00b883a 	mov	r5,r20
    ad78:	103ff21e 	bne	r2,zero,ad44 <__pow5mult+0x44>
    ad7c:	000a9dc0 	call	a9dc <__multiply>
    ad80:	a00b883a 	mov	r5,r20
    ad84:	9809883a 	mov	r4,r19
    ad88:	1023883a 	mov	r17,r2
    ad8c:	0009f4c0 	call	9f4c <_Bfree>
    ad90:	8829883a 	mov	r20,r17
    ad94:	800b883a 	mov	r5,r16
    ad98:	800d883a 	mov	r6,r16
    ad9c:	9809883a 	mov	r4,r19
    ada0:	903fec1e 	bne	r18,zero,ad54 <__pow5mult+0x54>
    ada4:	a005883a 	mov	r2,r20
    ada8:	dfc00517 	ldw	ra,20(sp)
    adac:	dd000417 	ldw	r20,16(sp)
    adb0:	dcc00317 	ldw	r19,12(sp)
    adb4:	dc800217 	ldw	r18,8(sp)
    adb8:	dc400117 	ldw	r17,4(sp)
    adbc:	dc000017 	ldw	r16,0(sp)
    adc0:	dec00604 	addi	sp,sp,24
    adc4:	f800283a 	ret
    adc8:	000a9dc0 	call	a9dc <__multiply>
    adcc:	80800015 	stw	r2,0(r16)
    add0:	1021883a 	mov	r16,r2
    add4:	10000015 	stw	zero,0(r2)
    add8:	003fe106 	br	ad60 <__pow5mult+0x60>
    addc:	1085883a 	add	r2,r2,r2
    ade0:	00c00074 	movhi	r3,1
    ade4:	18feb304 	addi	r3,r3,-1332
    ade8:	1085883a 	add	r2,r2,r2
    adec:	10c5883a 	add	r2,r2,r3
    adf0:	11bfff17 	ldw	r6,-4(r2)
    adf4:	000f883a 	mov	r7,zero
    adf8:	000ac000 	call	ac00 <__multadd>
    adfc:	1029883a 	mov	r20,r2
    ae00:	003fcb06 	br	ad30 <__pow5mult+0x30>
    ae04:	9809883a 	mov	r4,r19
    ae08:	01409c44 	movi	r5,625
    ae0c:	000abc40 	call	abc4 <__i2b>
    ae10:	98801215 	stw	r2,72(r19)
    ae14:	1021883a 	mov	r16,r2
    ae18:	10000015 	stw	zero,0(r2)
    ae1c:	003fd006 	br	ad60 <__pow5mult+0x60>

0000ae20 <__s2b>:
    ae20:	defff904 	addi	sp,sp,-28
    ae24:	dcc00315 	stw	r19,12(sp)
    ae28:	dc800215 	stw	r18,8(sp)
    ae2c:	2827883a 	mov	r19,r5
    ae30:	2025883a 	mov	r18,r4
    ae34:	01400244 	movi	r5,9
    ae38:	39000204 	addi	r4,r7,8
    ae3c:	dd000415 	stw	r20,16(sp)
    ae40:	dc400115 	stw	r17,4(sp)
    ae44:	dfc00615 	stw	ra,24(sp)
    ae48:	dd400515 	stw	r21,20(sp)
    ae4c:	dc000015 	stw	r16,0(sp)
    ae50:	3829883a 	mov	r20,r7
    ae54:	3023883a 	mov	r17,r6
    ae58:	000cb0c0 	call	cb0c <__divsi3>
    ae5c:	00c00044 	movi	r3,1
    ae60:	1880350e 	bge	r3,r2,af38 <__s2b+0x118>
    ae64:	000b883a 	mov	r5,zero
    ae68:	18c7883a 	add	r3,r3,r3
    ae6c:	29400044 	addi	r5,r5,1
    ae70:	18bffd16 	blt	r3,r2,ae68 <__s2b+0x48>
    ae74:	9009883a 	mov	r4,r18
    ae78:	000a4cc0 	call	a4cc <_Balloc>
    ae7c:	1011883a 	mov	r8,r2
    ae80:	d8800717 	ldw	r2,28(sp)
    ae84:	00c00044 	movi	r3,1
    ae88:	01800244 	movi	r6,9
    ae8c:	40800515 	stw	r2,20(r8)
    ae90:	40c00415 	stw	r3,16(r8)
    ae94:	3440260e 	bge	r6,r17,af30 <__s2b+0x110>
    ae98:	3021883a 	mov	r16,r6
    ae9c:	99ab883a 	add	r21,r19,r6
    aea0:	9c05883a 	add	r2,r19,r16
    aea4:	11c00007 	ldb	r7,0(r2)
    aea8:	400b883a 	mov	r5,r8
    aeac:	9009883a 	mov	r4,r18
    aeb0:	39fff404 	addi	r7,r7,-48
    aeb4:	01800284 	movi	r6,10
    aeb8:	000ac000 	call	ac00 <__multadd>
    aebc:	84000044 	addi	r16,r16,1
    aec0:	1011883a 	mov	r8,r2
    aec4:	8c3ff61e 	bne	r17,r16,aea0 <__s2b+0x80>
    aec8:	ac45883a 	add	r2,r21,r17
    aecc:	117ffe04 	addi	r5,r2,-8
    aed0:	880d883a 	mov	r6,r17
    aed4:	35000c0e 	bge	r6,r20,af08 <__s2b+0xe8>
    aed8:	a185c83a 	sub	r2,r20,r6
    aedc:	2821883a 	mov	r16,r5
    aee0:	28a3883a 	add	r17,r5,r2
    aee4:	81c00007 	ldb	r7,0(r16)
    aee8:	400b883a 	mov	r5,r8
    aeec:	9009883a 	mov	r4,r18
    aef0:	39fff404 	addi	r7,r7,-48
    aef4:	01800284 	movi	r6,10
    aef8:	000ac000 	call	ac00 <__multadd>
    aefc:	84000044 	addi	r16,r16,1
    af00:	1011883a 	mov	r8,r2
    af04:	847ff71e 	bne	r16,r17,aee4 <__s2b+0xc4>
    af08:	4005883a 	mov	r2,r8
    af0c:	dfc00617 	ldw	ra,24(sp)
    af10:	dd400517 	ldw	r21,20(sp)
    af14:	dd000417 	ldw	r20,16(sp)
    af18:	dcc00317 	ldw	r19,12(sp)
    af1c:	dc800217 	ldw	r18,8(sp)
    af20:	dc400117 	ldw	r17,4(sp)
    af24:	dc000017 	ldw	r16,0(sp)
    af28:	dec00704 	addi	sp,sp,28
    af2c:	f800283a 	ret
    af30:	99400284 	addi	r5,r19,10
    af34:	003fe706 	br	aed4 <__s2b+0xb4>
    af38:	000b883a 	mov	r5,zero
    af3c:	003fcd06 	br	ae74 <__s2b+0x54>

0000af40 <_realloc_r>:
    af40:	defff404 	addi	sp,sp,-48
    af44:	dd800815 	stw	r22,32(sp)
    af48:	dc800415 	stw	r18,16(sp)
    af4c:	dc400315 	stw	r17,12(sp)
    af50:	dfc00b15 	stw	ra,44(sp)
    af54:	df000a15 	stw	fp,40(sp)
    af58:	ddc00915 	stw	r23,36(sp)
    af5c:	dd400715 	stw	r21,28(sp)
    af60:	dd000615 	stw	r20,24(sp)
    af64:	dcc00515 	stw	r19,20(sp)
    af68:	dc000215 	stw	r16,8(sp)
    af6c:	2825883a 	mov	r18,r5
    af70:	3023883a 	mov	r17,r6
    af74:	202d883a 	mov	r22,r4
    af78:	2800c926 	beq	r5,zero,b2a0 <_realloc_r+0x360>
    af7c:	000d0300 	call	d030 <__malloc_lock>
    af80:	943ffe04 	addi	r16,r18,-8
    af84:	88c002c4 	addi	r3,r17,11
    af88:	00800584 	movi	r2,22
    af8c:	82000117 	ldw	r8,4(r16)
    af90:	10c01b2e 	bgeu	r2,r3,b000 <_realloc_r+0xc0>
    af94:	00bffe04 	movi	r2,-8
    af98:	188e703a 	and	r7,r3,r2
    af9c:	3839883a 	mov	fp,r7
    afa0:	38001a16 	blt	r7,zero,b00c <_realloc_r+0xcc>
    afa4:	e4401936 	bltu	fp,r17,b00c <_realloc_r+0xcc>
    afa8:	013fff04 	movi	r4,-4
    afac:	4126703a 	and	r19,r8,r4
    afb0:	99c02616 	blt	r19,r7,b04c <_realloc_r+0x10c>
    afb4:	802b883a 	mov	r21,r16
    afb8:	9829883a 	mov	r20,r19
    afbc:	84000204 	addi	r16,r16,8
    afc0:	a80f883a 	mov	r7,r21
    afc4:	a70dc83a 	sub	r6,r20,fp
    afc8:	008003c4 	movi	r2,15
    afcc:	1180c136 	bltu	r2,r6,b2d4 <_realloc_r+0x394>
    afd0:	38800117 	ldw	r2,4(r7)
    afd4:	a549883a 	add	r4,r20,r21
    afd8:	1080004c 	andi	r2,r2,1
    afdc:	a084b03a 	or	r2,r20,r2
    afe0:	38800115 	stw	r2,4(r7)
    afe4:	20c00117 	ldw	r3,4(r4)
    afe8:	18c00054 	ori	r3,r3,1
    afec:	20c00115 	stw	r3,4(r4)
    aff0:	b009883a 	mov	r4,r22
    aff4:	000d0340 	call	d034 <__malloc_unlock>
    aff8:	8023883a 	mov	r17,r16
    affc:	00000606 	br	b018 <_realloc_r+0xd8>
    b000:	01c00404 	movi	r7,16
    b004:	3839883a 	mov	fp,r7
    b008:	e47fe72e 	bgeu	fp,r17,afa8 <_realloc_r+0x68>
    b00c:	00800304 	movi	r2,12
    b010:	0023883a 	mov	r17,zero
    b014:	b0800015 	stw	r2,0(r22)
    b018:	8805883a 	mov	r2,r17
    b01c:	dfc00b17 	ldw	ra,44(sp)
    b020:	df000a17 	ldw	fp,40(sp)
    b024:	ddc00917 	ldw	r23,36(sp)
    b028:	dd800817 	ldw	r22,32(sp)
    b02c:	dd400717 	ldw	r21,28(sp)
    b030:	dd000617 	ldw	r20,24(sp)
    b034:	dcc00517 	ldw	r19,20(sp)
    b038:	dc800417 	ldw	r18,16(sp)
    b03c:	dc400317 	ldw	r17,12(sp)
    b040:	dc000217 	ldw	r16,8(sp)
    b044:	dec00c04 	addi	sp,sp,48
    b048:	f800283a 	ret
    b04c:	008000b4 	movhi	r2,2
    b050:	10a03704 	addi	r2,r2,-32548
    b054:	12400217 	ldw	r9,8(r2)
    b058:	84cd883a 	add	r6,r16,r19
    b05c:	802b883a 	mov	r21,r16
    b060:	3240b926 	beq	r6,r9,b348 <_realloc_r+0x408>
    b064:	31400117 	ldw	r5,4(r6)
    b068:	00bfff84 	movi	r2,-2
    b06c:	2884703a 	and	r2,r5,r2
    b070:	1185883a 	add	r2,r2,r6
    b074:	10c00117 	ldw	r3,4(r2)
    b078:	18c0004c 	andi	r3,r3,1
    b07c:	1807003a 	cmpeq	r3,r3,zero
    b080:	1800a326 	beq	r3,zero,b310 <_realloc_r+0x3d0>
    b084:	2908703a 	and	r4,r5,r4
    b088:	9929883a 	add	r20,r19,r4
    b08c:	a1c0a30e 	bge	r20,r7,b31c <_realloc_r+0x3dc>
    b090:	4080004c 	andi	r2,r8,1
    b094:	1000551e 	bne	r2,zero,b1ec <_realloc_r+0x2ac>
    b098:	80800017 	ldw	r2,0(r16)
    b09c:	80afc83a 	sub	r23,r16,r2
    b0a0:	b8c00117 	ldw	r3,4(r23)
    b0a4:	00bfff04 	movi	r2,-4
    b0a8:	1884703a 	and	r2,r3,r2
    b0ac:	30002e26 	beq	r6,zero,b168 <_realloc_r+0x228>
    b0b0:	3240b926 	beq	r6,r9,b398 <_realloc_r+0x458>
    b0b4:	98a9883a 	add	r20,r19,r2
    b0b8:	2509883a 	add	r4,r4,r20
    b0bc:	d9000015 	stw	r4,0(sp)
    b0c0:	21c02a16 	blt	r4,r7,b16c <_realloc_r+0x22c>
    b0c4:	30800317 	ldw	r2,12(r6)
    b0c8:	30c00217 	ldw	r3,8(r6)
    b0cc:	01400904 	movi	r5,36
    b0d0:	99bfff04 	addi	r6,r19,-4
    b0d4:	18800315 	stw	r2,12(r3)
    b0d8:	10c00215 	stw	r3,8(r2)
    b0dc:	b9000317 	ldw	r4,12(r23)
    b0e0:	b8800217 	ldw	r2,8(r23)
    b0e4:	b82b883a 	mov	r21,r23
    b0e8:	bc000204 	addi	r16,r23,8
    b0ec:	20800215 	stw	r2,8(r4)
    b0f0:	11000315 	stw	r4,12(r2)
    b0f4:	2980e436 	bltu	r5,r6,b488 <_realloc_r+0x548>
    b0f8:	008004c4 	movi	r2,19
    b0fc:	9009883a 	mov	r4,r18
    b100:	8011883a 	mov	r8,r16
    b104:	11800f2e 	bgeu	r2,r6,b144 <_realloc_r+0x204>
    b108:	90800017 	ldw	r2,0(r18)
    b10c:	ba000404 	addi	r8,r23,16
    b110:	91000204 	addi	r4,r18,8
    b114:	b8800215 	stw	r2,8(r23)
    b118:	90c00117 	ldw	r3,4(r18)
    b11c:	008006c4 	movi	r2,27
    b120:	b8c00315 	stw	r3,12(r23)
    b124:	1180072e 	bgeu	r2,r6,b144 <_realloc_r+0x204>
    b128:	90c00217 	ldw	r3,8(r18)
    b12c:	ba000604 	addi	r8,r23,24
    b130:	91000404 	addi	r4,r18,16
    b134:	b8c00415 	stw	r3,16(r23)
    b138:	90800317 	ldw	r2,12(r18)
    b13c:	b8800515 	stw	r2,20(r23)
    b140:	3140e726 	beq	r6,r5,b4e0 <_realloc_r+0x5a0>
    b144:	20800017 	ldw	r2,0(r4)
    b148:	dd000017 	ldw	r20,0(sp)
    b14c:	b80f883a 	mov	r7,r23
    b150:	40800015 	stw	r2,0(r8)
    b154:	20c00117 	ldw	r3,4(r4)
    b158:	40c00115 	stw	r3,4(r8)
    b15c:	20800217 	ldw	r2,8(r4)
    b160:	40800215 	stw	r2,8(r8)
    b164:	003f9706 	br	afc4 <_realloc_r+0x84>
    b168:	98a9883a 	add	r20,r19,r2
    b16c:	a1c01f16 	blt	r20,r7,b1ec <_realloc_r+0x2ac>
    b170:	b8c00317 	ldw	r3,12(r23)
    b174:	b8800217 	ldw	r2,8(r23)
    b178:	99bfff04 	addi	r6,r19,-4
    b17c:	01400904 	movi	r5,36
    b180:	b82b883a 	mov	r21,r23
    b184:	18800215 	stw	r2,8(r3)
    b188:	10c00315 	stw	r3,12(r2)
    b18c:	bc000204 	addi	r16,r23,8
    b190:	2980c336 	bltu	r5,r6,b4a0 <_realloc_r+0x560>
    b194:	008004c4 	movi	r2,19
    b198:	9009883a 	mov	r4,r18
    b19c:	8011883a 	mov	r8,r16
    b1a0:	11800f2e 	bgeu	r2,r6,b1e0 <_realloc_r+0x2a0>
    b1a4:	90800017 	ldw	r2,0(r18)
    b1a8:	ba000404 	addi	r8,r23,16
    b1ac:	91000204 	addi	r4,r18,8
    b1b0:	b8800215 	stw	r2,8(r23)
    b1b4:	90c00117 	ldw	r3,4(r18)
    b1b8:	008006c4 	movi	r2,27
    b1bc:	b8c00315 	stw	r3,12(r23)
    b1c0:	1180072e 	bgeu	r2,r6,b1e0 <_realloc_r+0x2a0>
    b1c4:	90c00217 	ldw	r3,8(r18)
    b1c8:	ba000604 	addi	r8,r23,24
    b1cc:	91000404 	addi	r4,r18,16
    b1d0:	b8c00415 	stw	r3,16(r23)
    b1d4:	90800317 	ldw	r2,12(r18)
    b1d8:	b8800515 	stw	r2,20(r23)
    b1dc:	3140c726 	beq	r6,r5,b4fc <_realloc_r+0x5bc>
    b1e0:	20800017 	ldw	r2,0(r4)
    b1e4:	b80f883a 	mov	r7,r23
    b1e8:	003fd906 	br	b150 <_realloc_r+0x210>
    b1ec:	880b883a 	mov	r5,r17
    b1f0:	b009883a 	mov	r4,r22
    b1f4:	00047bc0 	call	47bc <_malloc_r>
    b1f8:	1023883a 	mov	r17,r2
    b1fc:	10002526 	beq	r2,zero,b294 <_realloc_r+0x354>
    b200:	80800117 	ldw	r2,4(r16)
    b204:	00ffff84 	movi	r3,-2
    b208:	893ffe04 	addi	r4,r17,-8
    b20c:	10c4703a 	and	r2,r2,r3
    b210:	8085883a 	add	r2,r16,r2
    b214:	20809526 	beq	r4,r2,b46c <_realloc_r+0x52c>
    b218:	99bfff04 	addi	r6,r19,-4
    b21c:	01c00904 	movi	r7,36
    b220:	39804536 	bltu	r7,r6,b338 <_realloc_r+0x3f8>
    b224:	008004c4 	movi	r2,19
    b228:	9009883a 	mov	r4,r18
    b22c:	880b883a 	mov	r5,r17
    b230:	11800f2e 	bgeu	r2,r6,b270 <_realloc_r+0x330>
    b234:	90800017 	ldw	r2,0(r18)
    b238:	89400204 	addi	r5,r17,8
    b23c:	91000204 	addi	r4,r18,8
    b240:	88800015 	stw	r2,0(r17)
    b244:	90c00117 	ldw	r3,4(r18)
    b248:	008006c4 	movi	r2,27
    b24c:	88c00115 	stw	r3,4(r17)
    b250:	1180072e 	bgeu	r2,r6,b270 <_realloc_r+0x330>
    b254:	90c00217 	ldw	r3,8(r18)
    b258:	89400404 	addi	r5,r17,16
    b25c:	91000404 	addi	r4,r18,16
    b260:	88c00215 	stw	r3,8(r17)
    b264:	90800317 	ldw	r2,12(r18)
    b268:	88800315 	stw	r2,12(r17)
    b26c:	31c09126 	beq	r6,r7,b4b4 <_realloc_r+0x574>
    b270:	20800017 	ldw	r2,0(r4)
    b274:	28800015 	stw	r2,0(r5)
    b278:	20c00117 	ldw	r3,4(r4)
    b27c:	28c00115 	stw	r3,4(r5)
    b280:	20800217 	ldw	r2,8(r4)
    b284:	28800215 	stw	r2,8(r5)
    b288:	900b883a 	mov	r5,r18
    b28c:	b009883a 	mov	r4,r22
    b290:	00090c80 	call	90c8 <_free_r>
    b294:	b009883a 	mov	r4,r22
    b298:	000d0340 	call	d034 <__malloc_unlock>
    b29c:	003f5e06 	br	b018 <_realloc_r+0xd8>
    b2a0:	300b883a 	mov	r5,r6
    b2a4:	dfc00b17 	ldw	ra,44(sp)
    b2a8:	df000a17 	ldw	fp,40(sp)
    b2ac:	ddc00917 	ldw	r23,36(sp)
    b2b0:	dd800817 	ldw	r22,32(sp)
    b2b4:	dd400717 	ldw	r21,28(sp)
    b2b8:	dd000617 	ldw	r20,24(sp)
    b2bc:	dcc00517 	ldw	r19,20(sp)
    b2c0:	dc800417 	ldw	r18,16(sp)
    b2c4:	dc400317 	ldw	r17,12(sp)
    b2c8:	dc000217 	ldw	r16,8(sp)
    b2cc:	dec00c04 	addi	sp,sp,48
    b2d0:	00047bc1 	jmpi	47bc <_malloc_r>
    b2d4:	38800117 	ldw	r2,4(r7)
    b2d8:	e54b883a 	add	r5,fp,r21
    b2dc:	31000054 	ori	r4,r6,1
    b2e0:	1080004c 	andi	r2,r2,1
    b2e4:	1704b03a 	or	r2,r2,fp
    b2e8:	38800115 	stw	r2,4(r7)
    b2ec:	29000115 	stw	r4,4(r5)
    b2f0:	2987883a 	add	r3,r5,r6
    b2f4:	18800117 	ldw	r2,4(r3)
    b2f8:	29400204 	addi	r5,r5,8
    b2fc:	b009883a 	mov	r4,r22
    b300:	10800054 	ori	r2,r2,1
    b304:	18800115 	stw	r2,4(r3)
    b308:	00090c80 	call	90c8 <_free_r>
    b30c:	003f3806 	br	aff0 <_realloc_r+0xb0>
    b310:	000d883a 	mov	r6,zero
    b314:	0009883a 	mov	r4,zero
    b318:	003f5d06 	br	b090 <_realloc_r+0x150>
    b31c:	30c00217 	ldw	r3,8(r6)
    b320:	30800317 	ldw	r2,12(r6)
    b324:	800f883a 	mov	r7,r16
    b328:	84000204 	addi	r16,r16,8
    b32c:	10c00215 	stw	r3,8(r2)
    b330:	18800315 	stw	r2,12(r3)
    b334:	003f2306 	br	afc4 <_realloc_r+0x84>
    b338:	8809883a 	mov	r4,r17
    b33c:	900b883a 	mov	r5,r18
    b340:	0009dd40 	call	9dd4 <memmove>
    b344:	003fd006 	br	b288 <_realloc_r+0x348>
    b348:	30800117 	ldw	r2,4(r6)
    b34c:	e0c00404 	addi	r3,fp,16
    b350:	1108703a 	and	r4,r2,r4
    b354:	9905883a 	add	r2,r19,r4
    b358:	10ff4d16 	blt	r2,r3,b090 <_realloc_r+0x150>
    b35c:	1705c83a 	sub	r2,r2,fp
    b360:	870b883a 	add	r5,r16,fp
    b364:	10800054 	ori	r2,r2,1
    b368:	28800115 	stw	r2,4(r5)
    b36c:	80c00117 	ldw	r3,4(r16)
    b370:	008000b4 	movhi	r2,2
    b374:	10a03704 	addi	r2,r2,-32548
    b378:	b009883a 	mov	r4,r22
    b37c:	18c0004c 	andi	r3,r3,1
    b380:	e0c6b03a 	or	r3,fp,r3
    b384:	11400215 	stw	r5,8(r2)
    b388:	80c00115 	stw	r3,4(r16)
    b38c:	000d0340 	call	d034 <__malloc_unlock>
    b390:	84400204 	addi	r17,r16,8
    b394:	003f2006 	br	b018 <_realloc_r+0xd8>
    b398:	98a9883a 	add	r20,r19,r2
    b39c:	2509883a 	add	r4,r4,r20
    b3a0:	e0800404 	addi	r2,fp,16
    b3a4:	d9000115 	stw	r4,4(sp)
    b3a8:	20bf7016 	blt	r4,r2,b16c <_realloc_r+0x22c>
    b3ac:	b8c00317 	ldw	r3,12(r23)
    b3b0:	b8800217 	ldw	r2,8(r23)
    b3b4:	99bfff04 	addi	r6,r19,-4
    b3b8:	01400904 	movi	r5,36
    b3bc:	18800215 	stw	r2,8(r3)
    b3c0:	10c00315 	stw	r3,12(r2)
    b3c4:	bc400204 	addi	r17,r23,8
    b3c8:	29804136 	bltu	r5,r6,b4d0 <_realloc_r+0x590>
    b3cc:	008004c4 	movi	r2,19
    b3d0:	9009883a 	mov	r4,r18
    b3d4:	880f883a 	mov	r7,r17
    b3d8:	11800f2e 	bgeu	r2,r6,b418 <_realloc_r+0x4d8>
    b3dc:	90800017 	ldw	r2,0(r18)
    b3e0:	b9c00404 	addi	r7,r23,16
    b3e4:	91000204 	addi	r4,r18,8
    b3e8:	b8800215 	stw	r2,8(r23)
    b3ec:	90c00117 	ldw	r3,4(r18)
    b3f0:	008006c4 	movi	r2,27
    b3f4:	b8c00315 	stw	r3,12(r23)
    b3f8:	1180072e 	bgeu	r2,r6,b418 <_realloc_r+0x4d8>
    b3fc:	90c00217 	ldw	r3,8(r18)
    b400:	b9c00604 	addi	r7,r23,24
    b404:	91000404 	addi	r4,r18,16
    b408:	b8c00415 	stw	r3,16(r23)
    b40c:	90800317 	ldw	r2,12(r18)
    b410:	b8800515 	stw	r2,20(r23)
    b414:	31404026 	beq	r6,r5,b518 <_realloc_r+0x5d8>
    b418:	20800017 	ldw	r2,0(r4)
    b41c:	38800015 	stw	r2,0(r7)
    b420:	20c00117 	ldw	r3,4(r4)
    b424:	38c00115 	stw	r3,4(r7)
    b428:	20800217 	ldw	r2,8(r4)
    b42c:	38800215 	stw	r2,8(r7)
    b430:	d8c00117 	ldw	r3,4(sp)
    b434:	bf0b883a 	add	r5,r23,fp
    b438:	b009883a 	mov	r4,r22
    b43c:	1f05c83a 	sub	r2,r3,fp
    b440:	10800054 	ori	r2,r2,1
    b444:	28800115 	stw	r2,4(r5)
    b448:	b8c00117 	ldw	r3,4(r23)
    b44c:	008000b4 	movhi	r2,2
    b450:	10a03704 	addi	r2,r2,-32548
    b454:	11400215 	stw	r5,8(r2)
    b458:	18c0004c 	andi	r3,r3,1
    b45c:	e0c6b03a 	or	r3,fp,r3
    b460:	b8c00115 	stw	r3,4(r23)
    b464:	000d0340 	call	d034 <__malloc_unlock>
    b468:	003eeb06 	br	b018 <_realloc_r+0xd8>
    b46c:	20800117 	ldw	r2,4(r4)
    b470:	00ffff04 	movi	r3,-4
    b474:	800f883a 	mov	r7,r16
    b478:	10c4703a 	and	r2,r2,r3
    b47c:	98a9883a 	add	r20,r19,r2
    b480:	84000204 	addi	r16,r16,8
    b484:	003ecf06 	br	afc4 <_realloc_r+0x84>
    b488:	900b883a 	mov	r5,r18
    b48c:	8009883a 	mov	r4,r16
    b490:	0009dd40 	call	9dd4 <memmove>
    b494:	dd000017 	ldw	r20,0(sp)
    b498:	b80f883a 	mov	r7,r23
    b49c:	003ec906 	br	afc4 <_realloc_r+0x84>
    b4a0:	900b883a 	mov	r5,r18
    b4a4:	8009883a 	mov	r4,r16
    b4a8:	0009dd40 	call	9dd4 <memmove>
    b4ac:	b80f883a 	mov	r7,r23
    b4b0:	003ec406 	br	afc4 <_realloc_r+0x84>
    b4b4:	90c00417 	ldw	r3,16(r18)
    b4b8:	89400604 	addi	r5,r17,24
    b4bc:	91000604 	addi	r4,r18,24
    b4c0:	88c00415 	stw	r3,16(r17)
    b4c4:	90800517 	ldw	r2,20(r18)
    b4c8:	88800515 	stw	r2,20(r17)
    b4cc:	003f6806 	br	b270 <_realloc_r+0x330>
    b4d0:	900b883a 	mov	r5,r18
    b4d4:	8809883a 	mov	r4,r17
    b4d8:	0009dd40 	call	9dd4 <memmove>
    b4dc:	003fd406 	br	b430 <_realloc_r+0x4f0>
    b4e0:	90c00417 	ldw	r3,16(r18)
    b4e4:	91000604 	addi	r4,r18,24
    b4e8:	ba000804 	addi	r8,r23,32
    b4ec:	b8c00615 	stw	r3,24(r23)
    b4f0:	90800517 	ldw	r2,20(r18)
    b4f4:	b8800715 	stw	r2,28(r23)
    b4f8:	003f1206 	br	b144 <_realloc_r+0x204>
    b4fc:	90c00417 	ldw	r3,16(r18)
    b500:	91000604 	addi	r4,r18,24
    b504:	ba000804 	addi	r8,r23,32
    b508:	b8c00615 	stw	r3,24(r23)
    b50c:	90800517 	ldw	r2,20(r18)
    b510:	b8800715 	stw	r2,28(r23)
    b514:	003f3206 	br	b1e0 <_realloc_r+0x2a0>
    b518:	90c00417 	ldw	r3,16(r18)
    b51c:	91000604 	addi	r4,r18,24
    b520:	b9c00804 	addi	r7,r23,32
    b524:	b8c00615 	stw	r3,24(r23)
    b528:	90800517 	ldw	r2,20(r18)
    b52c:	b8800715 	stw	r2,28(r23)
    b530:	003fb906 	br	b418 <_realloc_r+0x4d8>

0000b534 <__isinfd>:
    b534:	200d883a 	mov	r6,r4
    b538:	0109c83a 	sub	r4,zero,r4
    b53c:	2188b03a 	or	r4,r4,r6
    b540:	2008d7fa 	srli	r4,r4,31
    b544:	00a00034 	movhi	r2,32768
    b548:	10bfffc4 	addi	r2,r2,-1
    b54c:	1144703a 	and	r2,r2,r5
    b550:	2088b03a 	or	r4,r4,r2
    b554:	009ffc34 	movhi	r2,32752
    b558:	1105c83a 	sub	r2,r2,r4
    b55c:	0087c83a 	sub	r3,zero,r2
    b560:	10c4b03a 	or	r2,r2,r3
    b564:	1004d7fa 	srli	r2,r2,31
    b568:	00c00044 	movi	r3,1
    b56c:	1885c83a 	sub	r2,r3,r2
    b570:	f800283a 	ret

0000b574 <__sclose>:
    b574:	2940038f 	ldh	r5,14(r5)
    b578:	000b8a81 	jmpi	b8a8 <_close_r>

0000b57c <__sseek>:
    b57c:	defffe04 	addi	sp,sp,-8
    b580:	dc000015 	stw	r16,0(sp)
    b584:	2821883a 	mov	r16,r5
    b588:	2940038f 	ldh	r5,14(r5)
    b58c:	dfc00115 	stw	ra,4(sp)
    b590:	000bb200 	call	bb20 <_lseek_r>
    b594:	1007883a 	mov	r3,r2
    b598:	00bfffc4 	movi	r2,-1
    b59c:	18800926 	beq	r3,r2,b5c4 <__sseek+0x48>
    b5a0:	8080030b 	ldhu	r2,12(r16)
    b5a4:	80c01415 	stw	r3,80(r16)
    b5a8:	10840014 	ori	r2,r2,4096
    b5ac:	8080030d 	sth	r2,12(r16)
    b5b0:	1805883a 	mov	r2,r3
    b5b4:	dfc00117 	ldw	ra,4(sp)
    b5b8:	dc000017 	ldw	r16,0(sp)
    b5bc:	dec00204 	addi	sp,sp,8
    b5c0:	f800283a 	ret
    b5c4:	8080030b 	ldhu	r2,12(r16)
    b5c8:	10bbffcc 	andi	r2,r2,61439
    b5cc:	8080030d 	sth	r2,12(r16)
    b5d0:	1805883a 	mov	r2,r3
    b5d4:	dfc00117 	ldw	ra,4(sp)
    b5d8:	dc000017 	ldw	r16,0(sp)
    b5dc:	dec00204 	addi	sp,sp,8
    b5e0:	f800283a 	ret

0000b5e4 <__swrite>:
    b5e4:	2880030b 	ldhu	r2,12(r5)
    b5e8:	defffb04 	addi	sp,sp,-20
    b5ec:	dcc00315 	stw	r19,12(sp)
    b5f0:	1080400c 	andi	r2,r2,256
    b5f4:	dc800215 	stw	r18,8(sp)
    b5f8:	dc400115 	stw	r17,4(sp)
    b5fc:	dc000015 	stw	r16,0(sp)
    b600:	3027883a 	mov	r19,r6
    b604:	3825883a 	mov	r18,r7
    b608:	dfc00415 	stw	ra,16(sp)
    b60c:	2821883a 	mov	r16,r5
    b610:	000d883a 	mov	r6,zero
    b614:	01c00084 	movi	r7,2
    b618:	2023883a 	mov	r17,r4
    b61c:	10000226 	beq	r2,zero,b628 <__swrite+0x44>
    b620:	2940038f 	ldh	r5,14(r5)
    b624:	000bb200 	call	bb20 <_lseek_r>
    b628:	8080030b 	ldhu	r2,12(r16)
    b62c:	8140038f 	ldh	r5,14(r16)
    b630:	8809883a 	mov	r4,r17
    b634:	10bbffcc 	andi	r2,r2,61439
    b638:	980d883a 	mov	r6,r19
    b63c:	900f883a 	mov	r7,r18
    b640:	8080030d 	sth	r2,12(r16)
    b644:	dfc00417 	ldw	ra,16(sp)
    b648:	dcc00317 	ldw	r19,12(sp)
    b64c:	dc800217 	ldw	r18,8(sp)
    b650:	dc400117 	ldw	r17,4(sp)
    b654:	dc000017 	ldw	r16,0(sp)
    b658:	dec00504 	addi	sp,sp,20
    b65c:	000b77c1 	jmpi	b77c <_write_r>

0000b660 <__sread>:
    b660:	defffe04 	addi	sp,sp,-8
    b664:	dc000015 	stw	r16,0(sp)
    b668:	2821883a 	mov	r16,r5
    b66c:	2940038f 	ldh	r5,14(r5)
    b670:	dfc00115 	stw	ra,4(sp)
    b674:	000bb980 	call	bb98 <_read_r>
    b678:	1007883a 	mov	r3,r2
    b67c:	10000816 	blt	r2,zero,b6a0 <__sread+0x40>
    b680:	80801417 	ldw	r2,80(r16)
    b684:	10c5883a 	add	r2,r2,r3
    b688:	80801415 	stw	r2,80(r16)
    b68c:	1805883a 	mov	r2,r3
    b690:	dfc00117 	ldw	ra,4(sp)
    b694:	dc000017 	ldw	r16,0(sp)
    b698:	dec00204 	addi	sp,sp,8
    b69c:	f800283a 	ret
    b6a0:	8080030b 	ldhu	r2,12(r16)
    b6a4:	10bbffcc 	andi	r2,r2,61439
    b6a8:	8080030d 	sth	r2,12(r16)
    b6ac:	1805883a 	mov	r2,r3
    b6b0:	dfc00117 	ldw	ra,4(sp)
    b6b4:	dc000017 	ldw	r16,0(sp)
    b6b8:	dec00204 	addi	sp,sp,8
    b6bc:	f800283a 	ret

0000b6c0 <strcmp>:
    b6c0:	2144b03a 	or	r2,r4,r5
    b6c4:	108000cc 	andi	r2,r2,3
    b6c8:	10001d1e 	bne	r2,zero,b740 <strcmp+0x80>
    b6cc:	200f883a 	mov	r7,r4
    b6d0:	28800017 	ldw	r2,0(r5)
    b6d4:	21000017 	ldw	r4,0(r4)
    b6d8:	280d883a 	mov	r6,r5
    b6dc:	2080161e 	bne	r4,r2,b738 <strcmp+0x78>
    b6e0:	023fbff4 	movhi	r8,65279
    b6e4:	423fbfc4 	addi	r8,r8,-257
    b6e8:	2207883a 	add	r3,r4,r8
    b6ec:	01602074 	movhi	r5,32897
    b6f0:	29602004 	addi	r5,r5,-32640
    b6f4:	1946703a 	and	r3,r3,r5
    b6f8:	0104303a 	nor	r2,zero,r4
    b6fc:	10c4703a 	and	r2,r2,r3
    b700:	10001c1e 	bne	r2,zero,b774 <strcmp+0xb4>
    b704:	4013883a 	mov	r9,r8
    b708:	2811883a 	mov	r8,r5
    b70c:	00000106 	br	b714 <strcmp+0x54>
    b710:	1800181e 	bne	r3,zero,b774 <strcmp+0xb4>
    b714:	39c00104 	addi	r7,r7,4
    b718:	39000017 	ldw	r4,0(r7)
    b71c:	31800104 	addi	r6,r6,4
    b720:	31400017 	ldw	r5,0(r6)
    b724:	2245883a 	add	r2,r4,r9
    b728:	1204703a 	and	r2,r2,r8
    b72c:	0106303a 	nor	r3,zero,r4
    b730:	1886703a 	and	r3,r3,r2
    b734:	217ff626 	beq	r4,r5,b710 <strcmp+0x50>
    b738:	3809883a 	mov	r4,r7
    b73c:	300b883a 	mov	r5,r6
    b740:	20c00007 	ldb	r3,0(r4)
    b744:	1800051e 	bne	r3,zero,b75c <strcmp+0x9c>
    b748:	00000606 	br	b764 <strcmp+0xa4>
    b74c:	21000044 	addi	r4,r4,1
    b750:	20c00007 	ldb	r3,0(r4)
    b754:	29400044 	addi	r5,r5,1
    b758:	18000226 	beq	r3,zero,b764 <strcmp+0xa4>
    b75c:	28800007 	ldb	r2,0(r5)
    b760:	18bffa26 	beq	r3,r2,b74c <strcmp+0x8c>
    b764:	20c00003 	ldbu	r3,0(r4)
    b768:	28800003 	ldbu	r2,0(r5)
    b76c:	1885c83a 	sub	r2,r3,r2
    b770:	f800283a 	ret
    b774:	0005883a 	mov	r2,zero
    b778:	f800283a 	ret

0000b77c <_write_r>:
    b77c:	defffd04 	addi	sp,sp,-12
    b780:	dc000015 	stw	r16,0(sp)
    b784:	040000b4 	movhi	r16,2
    b788:	840ecd04 	addi	r16,r16,15156
    b78c:	dc400115 	stw	r17,4(sp)
    b790:	80000015 	stw	zero,0(r16)
    b794:	2023883a 	mov	r17,r4
    b798:	2809883a 	mov	r4,r5
    b79c:	300b883a 	mov	r5,r6
    b7a0:	380d883a 	mov	r6,r7
    b7a4:	dfc00215 	stw	ra,8(sp)
    b7a8:	000d1a40 	call	d1a4 <write>
    b7ac:	1007883a 	mov	r3,r2
    b7b0:	00bfffc4 	movi	r2,-1
    b7b4:	18800626 	beq	r3,r2,b7d0 <_write_r+0x54>
    b7b8:	1805883a 	mov	r2,r3
    b7bc:	dfc00217 	ldw	ra,8(sp)
    b7c0:	dc400117 	ldw	r17,4(sp)
    b7c4:	dc000017 	ldw	r16,0(sp)
    b7c8:	dec00304 	addi	sp,sp,12
    b7cc:	f800283a 	ret
    b7d0:	80800017 	ldw	r2,0(r16)
    b7d4:	103ff826 	beq	r2,zero,b7b8 <_write_r+0x3c>
    b7d8:	88800015 	stw	r2,0(r17)
    b7dc:	1805883a 	mov	r2,r3
    b7e0:	dfc00217 	ldw	ra,8(sp)
    b7e4:	dc400117 	ldw	r17,4(sp)
    b7e8:	dc000017 	ldw	r16,0(sp)
    b7ec:	dec00304 	addi	sp,sp,12
    b7f0:	f800283a 	ret

0000b7f4 <_calloc_r>:
    b7f4:	298b383a 	mul	r5,r5,r6
    b7f8:	defffe04 	addi	sp,sp,-8
    b7fc:	dc000015 	stw	r16,0(sp)
    b800:	dfc00115 	stw	ra,4(sp)
    b804:	00047bc0 	call	47bc <_malloc_r>
    b808:	1021883a 	mov	r16,r2
    b80c:	01c00904 	movi	r7,36
    b810:	10000d26 	beq	r2,zero,b848 <_calloc_r+0x54>
    b814:	10ffff17 	ldw	r3,-4(r2)
    b818:	1009883a 	mov	r4,r2
    b81c:	00bfff04 	movi	r2,-4
    b820:	1886703a 	and	r3,r3,r2
    b824:	1887883a 	add	r3,r3,r2
    b828:	180d883a 	mov	r6,r3
    b82c:	000b883a 	mov	r5,zero
    b830:	38c01736 	bltu	r7,r3,b890 <_calloc_r+0x9c>
    b834:	008004c4 	movi	r2,19
    b838:	10c00836 	bltu	r2,r3,b85c <_calloc_r+0x68>
    b83c:	20000215 	stw	zero,8(r4)
    b840:	20000015 	stw	zero,0(r4)
    b844:	20000115 	stw	zero,4(r4)
    b848:	8005883a 	mov	r2,r16
    b84c:	dfc00117 	ldw	ra,4(sp)
    b850:	dc000017 	ldw	r16,0(sp)
    b854:	dec00204 	addi	sp,sp,8
    b858:	f800283a 	ret
    b85c:	008006c4 	movi	r2,27
    b860:	80000015 	stw	zero,0(r16)
    b864:	80000115 	stw	zero,4(r16)
    b868:	81000204 	addi	r4,r16,8
    b86c:	10fff32e 	bgeu	r2,r3,b83c <_calloc_r+0x48>
    b870:	80000215 	stw	zero,8(r16)
    b874:	80000315 	stw	zero,12(r16)
    b878:	81000404 	addi	r4,r16,16
    b87c:	19ffef1e 	bne	r3,r7,b83c <_calloc_r+0x48>
    b880:	81000604 	addi	r4,r16,24
    b884:	80000415 	stw	zero,16(r16)
    b888:	80000515 	stw	zero,20(r16)
    b88c:	003feb06 	br	b83c <_calloc_r+0x48>
    b890:	0009eb40 	call	9eb4 <memset>
    b894:	8005883a 	mov	r2,r16
    b898:	dfc00117 	ldw	ra,4(sp)
    b89c:	dc000017 	ldw	r16,0(sp)
    b8a0:	dec00204 	addi	sp,sp,8
    b8a4:	f800283a 	ret

0000b8a8 <_close_r>:
    b8a8:	defffd04 	addi	sp,sp,-12
    b8ac:	dc000015 	stw	r16,0(sp)
    b8b0:	040000b4 	movhi	r16,2
    b8b4:	840ecd04 	addi	r16,r16,15156
    b8b8:	dc400115 	stw	r17,4(sp)
    b8bc:	80000015 	stw	zero,0(r16)
    b8c0:	2023883a 	mov	r17,r4
    b8c4:	2809883a 	mov	r4,r5
    b8c8:	dfc00215 	stw	ra,8(sp)
    b8cc:	000cbdc0 	call	cbdc <close>
    b8d0:	1007883a 	mov	r3,r2
    b8d4:	00bfffc4 	movi	r2,-1
    b8d8:	18800626 	beq	r3,r2,b8f4 <_close_r+0x4c>
    b8dc:	1805883a 	mov	r2,r3
    b8e0:	dfc00217 	ldw	ra,8(sp)
    b8e4:	dc400117 	ldw	r17,4(sp)
    b8e8:	dc000017 	ldw	r16,0(sp)
    b8ec:	dec00304 	addi	sp,sp,12
    b8f0:	f800283a 	ret
    b8f4:	80800017 	ldw	r2,0(r16)
    b8f8:	103ff826 	beq	r2,zero,b8dc <_close_r+0x34>
    b8fc:	88800015 	stw	r2,0(r17)
    b900:	1805883a 	mov	r2,r3
    b904:	dfc00217 	ldw	ra,8(sp)
    b908:	dc400117 	ldw	r17,4(sp)
    b90c:	dc000017 	ldw	r16,0(sp)
    b910:	dec00304 	addi	sp,sp,12
    b914:	f800283a 	ret

0000b918 <_fclose_r>:
    b918:	defffc04 	addi	sp,sp,-16
    b91c:	dc400115 	stw	r17,4(sp)
    b920:	dc000015 	stw	r16,0(sp)
    b924:	dfc00315 	stw	ra,12(sp)
    b928:	dc800215 	stw	r18,8(sp)
    b92c:	2821883a 	mov	r16,r5
    b930:	2023883a 	mov	r17,r4
    b934:	28002926 	beq	r5,zero,b9dc <_fclose_r+0xc4>
    b938:	0008d340 	call	8d34 <__sfp_lock_acquire>
    b93c:	88000226 	beq	r17,zero,b948 <_fclose_r+0x30>
    b940:	88800e17 	ldw	r2,56(r17)
    b944:	10002d26 	beq	r2,zero,b9fc <_fclose_r+0xe4>
    b948:	8080030f 	ldh	r2,12(r16)
    b94c:	10002226 	beq	r2,zero,b9d8 <_fclose_r+0xc0>
    b950:	8809883a 	mov	r4,r17
    b954:	800b883a 	mov	r5,r16
    b958:	0008aac0 	call	8aac <_fflush_r>
    b95c:	1025883a 	mov	r18,r2
    b960:	80800b17 	ldw	r2,44(r16)
    b964:	10000426 	beq	r2,zero,b978 <_fclose_r+0x60>
    b968:	81400717 	ldw	r5,28(r16)
    b96c:	8809883a 	mov	r4,r17
    b970:	103ee83a 	callr	r2
    b974:	10002a16 	blt	r2,zero,ba20 <_fclose_r+0x108>
    b978:	8080030b 	ldhu	r2,12(r16)
    b97c:	1080200c 	andi	r2,r2,128
    b980:	1000231e 	bne	r2,zero,ba10 <_fclose_r+0xf8>
    b984:	81400c17 	ldw	r5,48(r16)
    b988:	28000526 	beq	r5,zero,b9a0 <_fclose_r+0x88>
    b98c:	80801004 	addi	r2,r16,64
    b990:	28800226 	beq	r5,r2,b99c <_fclose_r+0x84>
    b994:	8809883a 	mov	r4,r17
    b998:	00090c80 	call	90c8 <_free_r>
    b99c:	80000c15 	stw	zero,48(r16)
    b9a0:	81401117 	ldw	r5,68(r16)
    b9a4:	28000326 	beq	r5,zero,b9b4 <_fclose_r+0x9c>
    b9a8:	8809883a 	mov	r4,r17
    b9ac:	00090c80 	call	90c8 <_free_r>
    b9b0:	80001115 	stw	zero,68(r16)
    b9b4:	8000030d 	sth	zero,12(r16)
    b9b8:	0008d380 	call	8d38 <__sfp_lock_release>
    b9bc:	9005883a 	mov	r2,r18
    b9c0:	dfc00317 	ldw	ra,12(sp)
    b9c4:	dc800217 	ldw	r18,8(sp)
    b9c8:	dc400117 	ldw	r17,4(sp)
    b9cc:	dc000017 	ldw	r16,0(sp)
    b9d0:	dec00404 	addi	sp,sp,16
    b9d4:	f800283a 	ret
    b9d8:	0008d380 	call	8d38 <__sfp_lock_release>
    b9dc:	0025883a 	mov	r18,zero
    b9e0:	9005883a 	mov	r2,r18
    b9e4:	dfc00317 	ldw	ra,12(sp)
    b9e8:	dc800217 	ldw	r18,8(sp)
    b9ec:	dc400117 	ldw	r17,4(sp)
    b9f0:	dc000017 	ldw	r16,0(sp)
    b9f4:	dec00404 	addi	sp,sp,16
    b9f8:	f800283a 	ret
    b9fc:	8809883a 	mov	r4,r17
    ba00:	0008d440 	call	8d44 <__sinit>
    ba04:	8080030f 	ldh	r2,12(r16)
    ba08:	103fd11e 	bne	r2,zero,b950 <_fclose_r+0x38>
    ba0c:	003ff206 	br	b9d8 <_fclose_r+0xc0>
    ba10:	81400417 	ldw	r5,16(r16)
    ba14:	8809883a 	mov	r4,r17
    ba18:	00090c80 	call	90c8 <_free_r>
    ba1c:	003fd906 	br	b984 <_fclose_r+0x6c>
    ba20:	04bfffc4 	movi	r18,-1
    ba24:	003fd406 	br	b978 <_fclose_r+0x60>

0000ba28 <fclose>:
    ba28:	008000b4 	movhi	r2,2
    ba2c:	10a6e504 	addi	r2,r2,-25708
    ba30:	200b883a 	mov	r5,r4
    ba34:	11000017 	ldw	r4,0(r2)
    ba38:	000b9181 	jmpi	b918 <_fclose_r>

0000ba3c <_fstat_r>:
    ba3c:	defffd04 	addi	sp,sp,-12
    ba40:	dc000015 	stw	r16,0(sp)
    ba44:	040000b4 	movhi	r16,2
    ba48:	840ecd04 	addi	r16,r16,15156
    ba4c:	dc400115 	stw	r17,4(sp)
    ba50:	80000015 	stw	zero,0(r16)
    ba54:	2023883a 	mov	r17,r4
    ba58:	2809883a 	mov	r4,r5
    ba5c:	300b883a 	mov	r5,r6
    ba60:	dfc00215 	stw	ra,8(sp)
    ba64:	000ccc40 	call	ccc4 <fstat>
    ba68:	1007883a 	mov	r3,r2
    ba6c:	00bfffc4 	movi	r2,-1
    ba70:	18800626 	beq	r3,r2,ba8c <_fstat_r+0x50>
    ba74:	1805883a 	mov	r2,r3
    ba78:	dfc00217 	ldw	ra,8(sp)
    ba7c:	dc400117 	ldw	r17,4(sp)
    ba80:	dc000017 	ldw	r16,0(sp)
    ba84:	dec00304 	addi	sp,sp,12
    ba88:	f800283a 	ret
    ba8c:	80800017 	ldw	r2,0(r16)
    ba90:	103ff826 	beq	r2,zero,ba74 <_fstat_r+0x38>
    ba94:	88800015 	stw	r2,0(r17)
    ba98:	1805883a 	mov	r2,r3
    ba9c:	dfc00217 	ldw	ra,8(sp)
    baa0:	dc400117 	ldw	r17,4(sp)
    baa4:	dc000017 	ldw	r16,0(sp)
    baa8:	dec00304 	addi	sp,sp,12
    baac:	f800283a 	ret

0000bab0 <_isatty_r>:
    bab0:	defffd04 	addi	sp,sp,-12
    bab4:	dc000015 	stw	r16,0(sp)
    bab8:	040000b4 	movhi	r16,2
    babc:	840ecd04 	addi	r16,r16,15156
    bac0:	dc400115 	stw	r17,4(sp)
    bac4:	80000015 	stw	zero,0(r16)
    bac8:	2023883a 	mov	r17,r4
    bacc:	2809883a 	mov	r4,r5
    bad0:	dfc00215 	stw	ra,8(sp)
    bad4:	000ce000 	call	ce00 <isatty>
    bad8:	1007883a 	mov	r3,r2
    badc:	00bfffc4 	movi	r2,-1
    bae0:	18800626 	beq	r3,r2,bafc <_isatty_r+0x4c>
    bae4:	1805883a 	mov	r2,r3
    bae8:	dfc00217 	ldw	ra,8(sp)
    baec:	dc400117 	ldw	r17,4(sp)
    baf0:	dc000017 	ldw	r16,0(sp)
    baf4:	dec00304 	addi	sp,sp,12
    baf8:	f800283a 	ret
    bafc:	80800017 	ldw	r2,0(r16)
    bb00:	103ff826 	beq	r2,zero,bae4 <_isatty_r+0x34>
    bb04:	88800015 	stw	r2,0(r17)
    bb08:	1805883a 	mov	r2,r3
    bb0c:	dfc00217 	ldw	ra,8(sp)
    bb10:	dc400117 	ldw	r17,4(sp)
    bb14:	dc000017 	ldw	r16,0(sp)
    bb18:	dec00304 	addi	sp,sp,12
    bb1c:	f800283a 	ret

0000bb20 <_lseek_r>:
    bb20:	defffd04 	addi	sp,sp,-12
    bb24:	dc000015 	stw	r16,0(sp)
    bb28:	040000b4 	movhi	r16,2
    bb2c:	840ecd04 	addi	r16,r16,15156
    bb30:	dc400115 	stw	r17,4(sp)
    bb34:	80000015 	stw	zero,0(r16)
    bb38:	2023883a 	mov	r17,r4
    bb3c:	2809883a 	mov	r4,r5
    bb40:	300b883a 	mov	r5,r6
    bb44:	380d883a 	mov	r6,r7
    bb48:	dfc00215 	stw	ra,8(sp)
    bb4c:	000cf480 	call	cf48 <lseek>
    bb50:	1007883a 	mov	r3,r2
    bb54:	00bfffc4 	movi	r2,-1
    bb58:	18800626 	beq	r3,r2,bb74 <_lseek_r+0x54>
    bb5c:	1805883a 	mov	r2,r3
    bb60:	dfc00217 	ldw	ra,8(sp)
    bb64:	dc400117 	ldw	r17,4(sp)
    bb68:	dc000017 	ldw	r16,0(sp)
    bb6c:	dec00304 	addi	sp,sp,12
    bb70:	f800283a 	ret
    bb74:	80800017 	ldw	r2,0(r16)
    bb78:	103ff826 	beq	r2,zero,bb5c <_lseek_r+0x3c>
    bb7c:	88800015 	stw	r2,0(r17)
    bb80:	1805883a 	mov	r2,r3
    bb84:	dfc00217 	ldw	ra,8(sp)
    bb88:	dc400117 	ldw	r17,4(sp)
    bb8c:	dc000017 	ldw	r16,0(sp)
    bb90:	dec00304 	addi	sp,sp,12
    bb94:	f800283a 	ret

0000bb98 <_read_r>:
    bb98:	defffd04 	addi	sp,sp,-12
    bb9c:	dc000015 	stw	r16,0(sp)
    bba0:	040000b4 	movhi	r16,2
    bba4:	840ecd04 	addi	r16,r16,15156
    bba8:	dc400115 	stw	r17,4(sp)
    bbac:	80000015 	stw	zero,0(r16)
    bbb0:	2023883a 	mov	r17,r4
    bbb4:	2809883a 	mov	r4,r5
    bbb8:	300b883a 	mov	r5,r6
    bbbc:	380d883a 	mov	r6,r7
    bbc0:	dfc00215 	stw	ra,8(sp)
    bbc4:	000d0380 	call	d038 <read>
    bbc8:	1007883a 	mov	r3,r2
    bbcc:	00bfffc4 	movi	r2,-1
    bbd0:	18800626 	beq	r3,r2,bbec <_read_r+0x54>
    bbd4:	1805883a 	mov	r2,r3
    bbd8:	dfc00217 	ldw	ra,8(sp)
    bbdc:	dc400117 	ldw	r17,4(sp)
    bbe0:	dc000017 	ldw	r16,0(sp)
    bbe4:	dec00304 	addi	sp,sp,12
    bbe8:	f800283a 	ret
    bbec:	80800017 	ldw	r2,0(r16)
    bbf0:	103ff826 	beq	r2,zero,bbd4 <_read_r+0x3c>
    bbf4:	88800015 	stw	r2,0(r17)
    bbf8:	1805883a 	mov	r2,r3
    bbfc:	dfc00217 	ldw	ra,8(sp)
    bc00:	dc400117 	ldw	r17,4(sp)
    bc04:	dc000017 	ldw	r16,0(sp)
    bc08:	dec00304 	addi	sp,sp,12
    bc0c:	f800283a 	ret

0000bc10 <__udivdi3>:
    bc10:	defff004 	addi	sp,sp,-64
    bc14:	2005883a 	mov	r2,r4
    bc18:	3011883a 	mov	r8,r6
    bc1c:	df000e15 	stw	fp,56(sp)
    bc20:	dd000a15 	stw	r20,40(sp)
    bc24:	dc000615 	stw	r16,24(sp)
    bc28:	dfc00f15 	stw	ra,60(sp)
    bc2c:	ddc00d15 	stw	r23,52(sp)
    bc30:	dd800c15 	stw	r22,48(sp)
    bc34:	dd400b15 	stw	r21,44(sp)
    bc38:	dcc00915 	stw	r19,36(sp)
    bc3c:	dc800815 	stw	r18,32(sp)
    bc40:	dc400715 	stw	r17,28(sp)
    bc44:	4021883a 	mov	r16,r8
    bc48:	1039883a 	mov	fp,r2
    bc4c:	2829883a 	mov	r20,r5
    bc50:	38003b1e 	bne	r7,zero,bd40 <__udivdi3+0x130>
    bc54:	2a005c36 	bltu	r5,r8,bdc8 <__udivdi3+0x1b8>
    bc58:	4000a626 	beq	r8,zero,bef4 <__udivdi3+0x2e4>
    bc5c:	00bfffd4 	movui	r2,65535
    bc60:	14009e36 	bltu	r2,r16,bedc <__udivdi3+0x2cc>
    bc64:	00803fc4 	movi	r2,255
    bc68:	14013d36 	bltu	r2,r16,c160 <__udivdi3+0x550>
    bc6c:	000b883a 	mov	r5,zero
    bc70:	0005883a 	mov	r2,zero
    bc74:	8084d83a 	srl	r2,r16,r2
    bc78:	01000074 	movhi	r4,1
    bc7c:	213df904 	addi	r4,r4,-2076
    bc80:	01800804 	movi	r6,32
    bc84:	1105883a 	add	r2,r2,r4
    bc88:	10c00003 	ldbu	r3,0(r2)
    bc8c:	28c7883a 	add	r3,r5,r3
    bc90:	30edc83a 	sub	r22,r6,r3
    bc94:	b000ee1e 	bne	r22,zero,c050 <__udivdi3+0x440>
    bc98:	802ad43a 	srli	r21,r16,16
    bc9c:	00800044 	movi	r2,1
    bca0:	a423c83a 	sub	r17,r20,r16
    bca4:	85ffffcc 	andi	r23,r16,65535
    bca8:	d8800315 	stw	r2,12(sp)
    bcac:	8809883a 	mov	r4,r17
    bcb0:	a80b883a 	mov	r5,r21
    bcb4:	000cbcc0 	call	cbcc <__udivsi3>
    bcb8:	8809883a 	mov	r4,r17
    bcbc:	a80b883a 	mov	r5,r21
    bcc0:	102d883a 	mov	r22,r2
    bcc4:	000cbd40 	call	cbd4 <__umodsi3>
    bcc8:	1004943a 	slli	r2,r2,16
    bccc:	e006d43a 	srli	r3,fp,16
    bcd0:	bda3383a 	mul	r17,r23,r22
    bcd4:	10c4b03a 	or	r2,r2,r3
    bcd8:	1440042e 	bgeu	r2,r17,bcec <__udivdi3+0xdc>
    bcdc:	1405883a 	add	r2,r2,r16
    bce0:	b5bfffc4 	addi	r22,r22,-1
    bce4:	14000136 	bltu	r2,r16,bcec <__udivdi3+0xdc>
    bce8:	14413d36 	bltu	r2,r17,c1e0 <__udivdi3+0x5d0>
    bcec:	1463c83a 	sub	r17,r2,r17
    bcf0:	8809883a 	mov	r4,r17
    bcf4:	a80b883a 	mov	r5,r21
    bcf8:	000cbcc0 	call	cbcc <__udivsi3>
    bcfc:	8809883a 	mov	r4,r17
    bd00:	a80b883a 	mov	r5,r21
    bd04:	1029883a 	mov	r20,r2
    bd08:	000cbd40 	call	cbd4 <__umodsi3>
    bd0c:	1004943a 	slli	r2,r2,16
    bd10:	bd09383a 	mul	r4,r23,r20
    bd14:	e0ffffcc 	andi	r3,fp,65535
    bd18:	10c4b03a 	or	r2,r2,r3
    bd1c:	1100042e 	bgeu	r2,r4,bd30 <__udivdi3+0x120>
    bd20:	8085883a 	add	r2,r16,r2
    bd24:	a53fffc4 	addi	r20,r20,-1
    bd28:	14000136 	bltu	r2,r16,bd30 <__udivdi3+0x120>
    bd2c:	11012036 	bltu	r2,r4,c1b0 <__udivdi3+0x5a0>
    bd30:	b004943a 	slli	r2,r22,16
    bd34:	d9000317 	ldw	r4,12(sp)
    bd38:	a084b03a 	or	r2,r20,r2
    bd3c:	00001506 	br	bd94 <__udivdi3+0x184>
    bd40:	380d883a 	mov	r6,r7
    bd44:	29c06236 	bltu	r5,r7,bed0 <__udivdi3+0x2c0>
    bd48:	00bfffd4 	movui	r2,65535
    bd4c:	11c05a36 	bltu	r2,r7,beb8 <__udivdi3+0x2a8>
    bd50:	00803fc4 	movi	r2,255
    bd54:	11c0fc36 	bltu	r2,r7,c148 <__udivdi3+0x538>
    bd58:	000b883a 	mov	r5,zero
    bd5c:	0005883a 	mov	r2,zero
    bd60:	3084d83a 	srl	r2,r6,r2
    bd64:	01000074 	movhi	r4,1
    bd68:	213df904 	addi	r4,r4,-2076
    bd6c:	01c00804 	movi	r7,32
    bd70:	1105883a 	add	r2,r2,r4
    bd74:	10c00003 	ldbu	r3,0(r2)
    bd78:	28c7883a 	add	r3,r5,r3
    bd7c:	38efc83a 	sub	r23,r7,r3
    bd80:	b800691e 	bne	r23,zero,bf28 <__udivdi3+0x318>
    bd84:	35000136 	bltu	r6,r20,bd8c <__udivdi3+0x17c>
    bd88:	e4005136 	bltu	fp,r16,bed0 <__udivdi3+0x2c0>
    bd8c:	00800044 	movi	r2,1
    bd90:	0009883a 	mov	r4,zero
    bd94:	2007883a 	mov	r3,r4
    bd98:	dfc00f17 	ldw	ra,60(sp)
    bd9c:	df000e17 	ldw	fp,56(sp)
    bda0:	ddc00d17 	ldw	r23,52(sp)
    bda4:	dd800c17 	ldw	r22,48(sp)
    bda8:	dd400b17 	ldw	r21,44(sp)
    bdac:	dd000a17 	ldw	r20,40(sp)
    bdb0:	dcc00917 	ldw	r19,36(sp)
    bdb4:	dc800817 	ldw	r18,32(sp)
    bdb8:	dc400717 	ldw	r17,28(sp)
    bdbc:	dc000617 	ldw	r16,24(sp)
    bdc0:	dec01004 	addi	sp,sp,64
    bdc4:	f800283a 	ret
    bdc8:	00bfffd4 	movui	r2,65535
    bdcc:	12005036 	bltu	r2,r8,bf10 <__udivdi3+0x300>
    bdd0:	00803fc4 	movi	r2,255
    bdd4:	1200e836 	bltu	r2,r8,c178 <__udivdi3+0x568>
    bdd8:	000b883a 	mov	r5,zero
    bddc:	0005883a 	mov	r2,zero
    bde0:	8084d83a 	srl	r2,r16,r2
    bde4:	01000074 	movhi	r4,1
    bde8:	213df904 	addi	r4,r4,-2076
    bdec:	01800804 	movi	r6,32
    bdf0:	1105883a 	add	r2,r2,r4
    bdf4:	10c00003 	ldbu	r3,0(r2)
    bdf8:	28c7883a 	add	r3,r5,r3
    bdfc:	30cbc83a 	sub	r5,r6,r3
    be00:	28000626 	beq	r5,zero,be1c <__udivdi3+0x20c>
    be04:	3145c83a 	sub	r2,r6,r5
    be08:	e084d83a 	srl	r2,fp,r2
    be0c:	a146983a 	sll	r3,r20,r5
    be10:	e178983a 	sll	fp,fp,r5
    be14:	8160983a 	sll	r16,r16,r5
    be18:	18a8b03a 	or	r20,r3,r2
    be1c:	802ad43a 	srli	r21,r16,16
    be20:	a009883a 	mov	r4,r20
    be24:	85ffffcc 	andi	r23,r16,65535
    be28:	a80b883a 	mov	r5,r21
    be2c:	000cbcc0 	call	cbcc <__udivsi3>
    be30:	a009883a 	mov	r4,r20
    be34:	a80b883a 	mov	r5,r21
    be38:	102d883a 	mov	r22,r2
    be3c:	000cbd40 	call	cbd4 <__umodsi3>
    be40:	1004943a 	slli	r2,r2,16
    be44:	e006d43a 	srli	r3,fp,16
    be48:	bda3383a 	mul	r17,r23,r22
    be4c:	10c4b03a 	or	r2,r2,r3
    be50:	1440042e 	bgeu	r2,r17,be64 <__udivdi3+0x254>
    be54:	1405883a 	add	r2,r2,r16
    be58:	b5bfffc4 	addi	r22,r22,-1
    be5c:	14000136 	bltu	r2,r16,be64 <__udivdi3+0x254>
    be60:	1440d536 	bltu	r2,r17,c1b8 <__udivdi3+0x5a8>
    be64:	1463c83a 	sub	r17,r2,r17
    be68:	8809883a 	mov	r4,r17
    be6c:	a80b883a 	mov	r5,r21
    be70:	000cbcc0 	call	cbcc <__udivsi3>
    be74:	8809883a 	mov	r4,r17
    be78:	a80b883a 	mov	r5,r21
    be7c:	1029883a 	mov	r20,r2
    be80:	000cbd40 	call	cbd4 <__umodsi3>
    be84:	1004943a 	slli	r2,r2,16
    be88:	bd09383a 	mul	r4,r23,r20
    be8c:	e0ffffcc 	andi	r3,fp,65535
    be90:	10c4b03a 	or	r2,r2,r3
    be94:	1100042e 	bgeu	r2,r4,bea8 <__udivdi3+0x298>
    be98:	8085883a 	add	r2,r16,r2
    be9c:	a53fffc4 	addi	r20,r20,-1
    bea0:	14000136 	bltu	r2,r16,bea8 <__udivdi3+0x298>
    bea4:	1100c736 	bltu	r2,r4,c1c4 <__udivdi3+0x5b4>
    bea8:	b004943a 	slli	r2,r22,16
    beac:	0009883a 	mov	r4,zero
    beb0:	a084b03a 	or	r2,r20,r2
    beb4:	003fb706 	br	bd94 <__udivdi3+0x184>
    beb8:	00804034 	movhi	r2,256
    bebc:	10bfffc4 	addi	r2,r2,-1
    bec0:	11c0a436 	bltu	r2,r7,c154 <__udivdi3+0x544>
    bec4:	01400404 	movi	r5,16
    bec8:	2805883a 	mov	r2,r5
    becc:	003fa406 	br	bd60 <__udivdi3+0x150>
    bed0:	0005883a 	mov	r2,zero
    bed4:	0009883a 	mov	r4,zero
    bed8:	003fae06 	br	bd94 <__udivdi3+0x184>
    bedc:	00804034 	movhi	r2,256
    bee0:	10bfffc4 	addi	r2,r2,-1
    bee4:	1400a136 	bltu	r2,r16,c16c <__udivdi3+0x55c>
    bee8:	01400404 	movi	r5,16
    beec:	2805883a 	mov	r2,r5
    bef0:	003f6006 	br	bc74 <__udivdi3+0x64>
    bef4:	01000044 	movi	r4,1
    bef8:	000b883a 	mov	r5,zero
    befc:	000cbcc0 	call	cbcc <__udivsi3>
    bf00:	1021883a 	mov	r16,r2
    bf04:	00bfffd4 	movui	r2,65535
    bf08:	143ff436 	bltu	r2,r16,bedc <__udivdi3+0x2cc>
    bf0c:	003f5506 	br	bc64 <__udivdi3+0x54>
    bf10:	00804034 	movhi	r2,256
    bf14:	10bfffc4 	addi	r2,r2,-1
    bf18:	12009a36 	bltu	r2,r8,c184 <__udivdi3+0x574>
    bf1c:	01400404 	movi	r5,16
    bf20:	2805883a 	mov	r2,r5
    bf24:	003fae06 	br	bde0 <__udivdi3+0x1d0>
    bf28:	3dc5c83a 	sub	r2,r7,r23
    bf2c:	35c8983a 	sll	r4,r6,r23
    bf30:	8086d83a 	srl	r3,r16,r2
    bf34:	a0a2d83a 	srl	r17,r20,r2
    bf38:	e084d83a 	srl	r2,fp,r2
    bf3c:	20eab03a 	or	r21,r4,r3
    bf40:	a82cd43a 	srli	r22,r21,16
    bf44:	a5c6983a 	sll	r3,r20,r23
    bf48:	8809883a 	mov	r4,r17
    bf4c:	b00b883a 	mov	r5,r22
    bf50:	1886b03a 	or	r3,r3,r2
    bf54:	d8c00215 	stw	r3,8(sp)
    bf58:	000cbcc0 	call	cbcc <__udivsi3>
    bf5c:	8809883a 	mov	r4,r17
    bf60:	b00b883a 	mov	r5,r22
    bf64:	1029883a 	mov	r20,r2
    bf68:	000cbd40 	call	cbd4 <__umodsi3>
    bf6c:	a8ffffcc 	andi	r3,r21,65535
    bf70:	d8c00515 	stw	r3,20(sp)
    bf74:	d9000217 	ldw	r4,8(sp)
    bf78:	d9400517 	ldw	r5,20(sp)
    bf7c:	1004943a 	slli	r2,r2,16
    bf80:	2006d43a 	srli	r3,r4,16
    bf84:	85e0983a 	sll	r16,r16,r23
    bf88:	2d23383a 	mul	r17,r5,r20
    bf8c:	10c4b03a 	or	r2,r2,r3
    bf90:	dc000015 	stw	r16,0(sp)
    bf94:	1440032e 	bgeu	r2,r17,bfa4 <__udivdi3+0x394>
    bf98:	1545883a 	add	r2,r2,r21
    bf9c:	a53fffc4 	addi	r20,r20,-1
    bfa0:	15407f2e 	bgeu	r2,r21,c1a0 <__udivdi3+0x590>
    bfa4:	1463c83a 	sub	r17,r2,r17
    bfa8:	8809883a 	mov	r4,r17
    bfac:	b00b883a 	mov	r5,r22
    bfb0:	000cbcc0 	call	cbcc <__udivsi3>
    bfb4:	8809883a 	mov	r4,r17
    bfb8:	b00b883a 	mov	r5,r22
    bfbc:	1021883a 	mov	r16,r2
    bfc0:	000cbd40 	call	cbd4 <__umodsi3>
    bfc4:	d8c00517 	ldw	r3,20(sp)
    bfc8:	d9000217 	ldw	r4,8(sp)
    bfcc:	1004943a 	slli	r2,r2,16
    bfd0:	1c0f383a 	mul	r7,r3,r16
    bfd4:	20ffffcc 	andi	r3,r4,65535
    bfd8:	10e2b03a 	or	r17,r2,r3
    bfdc:	89c0032e 	bgeu	r17,r7,bfec <__udivdi3+0x3dc>
    bfe0:	8d63883a 	add	r17,r17,r21
    bfe4:	843fffc4 	addi	r16,r16,-1
    bfe8:	8d40692e 	bgeu	r17,r21,c190 <__udivdi3+0x580>
    bfec:	a008943a 	slli	r4,r20,16
    bff0:	d9400017 	ldw	r5,0(sp)
    bff4:	89e3c83a 	sub	r17,r17,r7
    bff8:	8110b03a 	or	r8,r16,r4
    bffc:	280cd43a 	srli	r6,r5,16
    c000:	28ffffcc 	andi	r3,r5,65535
    c004:	40bfffcc 	andi	r2,r8,65535
    c008:	400ad43a 	srli	r5,r8,16
    c00c:	10d3383a 	mul	r9,r2,r3
    c010:	1185383a 	mul	r2,r2,r6
    c014:	28c7383a 	mul	r3,r5,r3
    c018:	4808d43a 	srli	r4,r9,16
    c01c:	298b383a 	mul	r5,r5,r6
    c020:	10c5883a 	add	r2,r2,r3
    c024:	2089883a 	add	r4,r4,r2
    c028:	20c0022e 	bgeu	r4,r3,c034 <__udivdi3+0x424>
    c02c:	00800074 	movhi	r2,1
    c030:	288b883a 	add	r5,r5,r2
    c034:	2004d43a 	srli	r2,r4,16
    c038:	288b883a 	add	r5,r5,r2
    c03c:	89403f36 	bltu	r17,r5,c13c <__udivdi3+0x52c>
    c040:	89403926 	beq	r17,r5,c128 <__udivdi3+0x518>
    c044:	4005883a 	mov	r2,r8
    c048:	0009883a 	mov	r4,zero
    c04c:	003f5106 	br	bd94 <__udivdi3+0x184>
    c050:	85a0983a 	sll	r16,r16,r22
    c054:	3585c83a 	sub	r2,r6,r22
    c058:	a0a2d83a 	srl	r17,r20,r2
    c05c:	802ad43a 	srli	r21,r16,16
    c060:	e084d83a 	srl	r2,fp,r2
    c064:	a586983a 	sll	r3,r20,r22
    c068:	8809883a 	mov	r4,r17
    c06c:	a80b883a 	mov	r5,r21
    c070:	1886b03a 	or	r3,r3,r2
    c074:	d8c00115 	stw	r3,4(sp)
    c078:	000cbcc0 	call	cbcc <__udivsi3>
    c07c:	8809883a 	mov	r4,r17
    c080:	a80b883a 	mov	r5,r21
    c084:	d8800415 	stw	r2,16(sp)
    c088:	000cbd40 	call	cbd4 <__umodsi3>
    c08c:	d9000117 	ldw	r4,4(sp)
    c090:	d9400417 	ldw	r5,16(sp)
    c094:	1004943a 	slli	r2,r2,16
    c098:	85ffffcc 	andi	r23,r16,65535
    c09c:	2006d43a 	srli	r3,r4,16
    c0a0:	b963383a 	mul	r17,r23,r5
    c0a4:	10c4b03a 	or	r2,r2,r3
    c0a8:	1440042e 	bgeu	r2,r17,c0bc <__udivdi3+0x4ac>
    c0ac:	297fffc4 	addi	r5,r5,-1
    c0b0:	1405883a 	add	r2,r2,r16
    c0b4:	d9400415 	stw	r5,16(sp)
    c0b8:	1400442e 	bgeu	r2,r16,c1cc <__udivdi3+0x5bc>
    c0bc:	1463c83a 	sub	r17,r2,r17
    c0c0:	8809883a 	mov	r4,r17
    c0c4:	a80b883a 	mov	r5,r21
    c0c8:	000cbcc0 	call	cbcc <__udivsi3>
    c0cc:	8809883a 	mov	r4,r17
    c0d0:	a80b883a 	mov	r5,r21
    c0d4:	1029883a 	mov	r20,r2
    c0d8:	000cbd40 	call	cbd4 <__umodsi3>
    c0dc:	d9400117 	ldw	r5,4(sp)
    c0e0:	1004943a 	slli	r2,r2,16
    c0e4:	bd09383a 	mul	r4,r23,r20
    c0e8:	28ffffcc 	andi	r3,r5,65535
    c0ec:	10c6b03a 	or	r3,r2,r3
    c0f0:	1900062e 	bgeu	r3,r4,c10c <__udivdi3+0x4fc>
    c0f4:	1c07883a 	add	r3,r3,r16
    c0f8:	a53fffc4 	addi	r20,r20,-1
    c0fc:	1c000336 	bltu	r3,r16,c10c <__udivdi3+0x4fc>
    c100:	1900022e 	bgeu	r3,r4,c10c <__udivdi3+0x4fc>
    c104:	a53fffc4 	addi	r20,r20,-1
    c108:	1c07883a 	add	r3,r3,r16
    c10c:	d9400417 	ldw	r5,16(sp)
    c110:	e5b8983a 	sll	fp,fp,r22
    c114:	1923c83a 	sub	r17,r3,r4
    c118:	2804943a 	slli	r2,r5,16
    c11c:	a0a8b03a 	or	r20,r20,r2
    c120:	dd000315 	stw	r20,12(sp)
    c124:	003ee106 	br	bcac <__udivdi3+0x9c>
    c128:	2004943a 	slli	r2,r4,16
    c12c:	e5c8983a 	sll	r4,fp,r23
    c130:	48ffffcc 	andi	r3,r9,65535
    c134:	10c5883a 	add	r2,r2,r3
    c138:	20bfc22e 	bgeu	r4,r2,c044 <__udivdi3+0x434>
    c13c:	40bfffc4 	addi	r2,r8,-1
    c140:	0009883a 	mov	r4,zero
    c144:	003f1306 	br	bd94 <__udivdi3+0x184>
    c148:	01400204 	movi	r5,8
    c14c:	2805883a 	mov	r2,r5
    c150:	003f0306 	br	bd60 <__udivdi3+0x150>
    c154:	01400604 	movi	r5,24
    c158:	2805883a 	mov	r2,r5
    c15c:	003f0006 	br	bd60 <__udivdi3+0x150>
    c160:	01400204 	movi	r5,8
    c164:	2805883a 	mov	r2,r5
    c168:	003ec206 	br	bc74 <__udivdi3+0x64>
    c16c:	01400604 	movi	r5,24
    c170:	2805883a 	mov	r2,r5
    c174:	003ebf06 	br	bc74 <__udivdi3+0x64>
    c178:	01400204 	movi	r5,8
    c17c:	2805883a 	mov	r2,r5
    c180:	003f1706 	br	bde0 <__udivdi3+0x1d0>
    c184:	01400604 	movi	r5,24
    c188:	2805883a 	mov	r2,r5
    c18c:	003f1406 	br	bde0 <__udivdi3+0x1d0>
    c190:	89ff962e 	bgeu	r17,r7,bfec <__udivdi3+0x3dc>
    c194:	8d63883a 	add	r17,r17,r21
    c198:	843fffc4 	addi	r16,r16,-1
    c19c:	003f9306 	br	bfec <__udivdi3+0x3dc>
    c1a0:	147f802e 	bgeu	r2,r17,bfa4 <__udivdi3+0x394>
    c1a4:	a53fffc4 	addi	r20,r20,-1
    c1a8:	1545883a 	add	r2,r2,r21
    c1ac:	003f7d06 	br	bfa4 <__udivdi3+0x394>
    c1b0:	a53fffc4 	addi	r20,r20,-1
    c1b4:	003ede06 	br	bd30 <__udivdi3+0x120>
    c1b8:	b5bfffc4 	addi	r22,r22,-1
    c1bc:	1405883a 	add	r2,r2,r16
    c1c0:	003f2806 	br	be64 <__udivdi3+0x254>
    c1c4:	a53fffc4 	addi	r20,r20,-1
    c1c8:	003f3706 	br	bea8 <__udivdi3+0x298>
    c1cc:	147fbb2e 	bgeu	r2,r17,c0bc <__udivdi3+0x4ac>
    c1d0:	297fffc4 	addi	r5,r5,-1
    c1d4:	1405883a 	add	r2,r2,r16
    c1d8:	d9400415 	stw	r5,16(sp)
    c1dc:	003fb706 	br	c0bc <__udivdi3+0x4ac>
    c1e0:	b5bfffc4 	addi	r22,r22,-1
    c1e4:	1405883a 	add	r2,r2,r16
    c1e8:	003ec006 	br	bcec <__udivdi3+0xdc>

0000c1ec <__umoddi3>:
    c1ec:	defff104 	addi	sp,sp,-60
    c1f0:	dd800b15 	stw	r22,44(sp)
    c1f4:	dd000915 	stw	r20,36(sp)
    c1f8:	dc000515 	stw	r16,20(sp)
    c1fc:	dfc00e15 	stw	ra,56(sp)
    c200:	df000d15 	stw	fp,52(sp)
    c204:	ddc00c15 	stw	r23,48(sp)
    c208:	dd400a15 	stw	r21,40(sp)
    c20c:	dcc00815 	stw	r19,32(sp)
    c210:	dc800715 	stw	r18,28(sp)
    c214:	dc400615 	stw	r17,24(sp)
    c218:	3021883a 	mov	r16,r6
    c21c:	202d883a 	mov	r22,r4
    c220:	2829883a 	mov	r20,r5
    c224:	38002b1e 	bne	r7,zero,c2d4 <__umoddi3+0xe8>
    c228:	29805036 	bltu	r5,r6,c36c <__umoddi3+0x180>
    c22c:	30008a26 	beq	r6,zero,c458 <__umoddi3+0x26c>
    c230:	00bfffd4 	movui	r2,65535
    c234:	14008236 	bltu	r2,r16,c440 <__umoddi3+0x254>
    c238:	00803fc4 	movi	r2,255
    c23c:	14013636 	bltu	r2,r16,c718 <__umoddi3+0x52c>
    c240:	000b883a 	mov	r5,zero
    c244:	0005883a 	mov	r2,zero
    c248:	8084d83a 	srl	r2,r16,r2
    c24c:	01000074 	movhi	r4,1
    c250:	213df904 	addi	r4,r4,-2076
    c254:	01800804 	movi	r6,32
    c258:	1105883a 	add	r2,r2,r4
    c25c:	10c00003 	ldbu	r3,0(r2)
    c260:	28c7883a 	add	r3,r5,r3
    c264:	30efc83a 	sub	r23,r6,r3
    c268:	b800941e 	bne	r23,zero,c4bc <__umoddi3+0x2d0>
    c26c:	802ad43a 	srli	r21,r16,16
    c270:	a423c83a 	sub	r17,r20,r16
    c274:	0039883a 	mov	fp,zero
    c278:	853fffcc 	andi	r20,r16,65535
    c27c:	8809883a 	mov	r4,r17
    c280:	a80b883a 	mov	r5,r21
    c284:	000cbcc0 	call	cbcc <__udivsi3>
    c288:	8809883a 	mov	r4,r17
    c28c:	a80b883a 	mov	r5,r21
    c290:	a0a3383a 	mul	r17,r20,r2
    c294:	000cbd40 	call	cbd4 <__umodsi3>
    c298:	1004943a 	slli	r2,r2,16
    c29c:	b006d43a 	srli	r3,r22,16
    c2a0:	10c4b03a 	or	r2,r2,r3
    c2a4:	1440032e 	bgeu	r2,r17,c2b4 <__umoddi3+0xc8>
    c2a8:	1405883a 	add	r2,r2,r16
    c2ac:	14000136 	bltu	r2,r16,c2b4 <__umoddi3+0xc8>
    c2b0:	14413536 	bltu	r2,r17,c788 <__umoddi3+0x59c>
    c2b4:	1463c83a 	sub	r17,r2,r17
    c2b8:	8809883a 	mov	r4,r17
    c2bc:	a80b883a 	mov	r5,r21
    c2c0:	000cbcc0 	call	cbcc <__udivsi3>
    c2c4:	8809883a 	mov	r4,r17
    c2c8:	a0a3383a 	mul	r17,r20,r2
    c2cc:	a80b883a 	mov	r5,r21
    c2d0:	00004d06 	br	c408 <__umoddi3+0x21c>
    c2d4:	380d883a 	mov	r6,r7
    c2d8:	29c0102e 	bgeu	r5,r7,c31c <__umoddi3+0x130>
    c2dc:	2011883a 	mov	r8,r4
    c2e0:	2813883a 	mov	r9,r5
    c2e4:	4005883a 	mov	r2,r8
    c2e8:	4807883a 	mov	r3,r9
    c2ec:	dfc00e17 	ldw	ra,56(sp)
    c2f0:	df000d17 	ldw	fp,52(sp)
    c2f4:	ddc00c17 	ldw	r23,48(sp)
    c2f8:	dd800b17 	ldw	r22,44(sp)
    c2fc:	dd400a17 	ldw	r21,40(sp)
    c300:	dd000917 	ldw	r20,36(sp)
    c304:	dcc00817 	ldw	r19,32(sp)
    c308:	dc800717 	ldw	r18,28(sp)
    c30c:	dc400617 	ldw	r17,24(sp)
    c310:	dc000517 	ldw	r16,20(sp)
    c314:	dec00f04 	addi	sp,sp,60
    c318:	f800283a 	ret
    c31c:	00bfffd4 	movui	r2,65535
    c320:	11c05a36 	bltu	r2,r7,c48c <__umoddi3+0x2a0>
    c324:	00803fc4 	movi	r2,255
    c328:	11c0fe36 	bltu	r2,r7,c724 <__umoddi3+0x538>
    c32c:	000b883a 	mov	r5,zero
    c330:	0005883a 	mov	r2,zero
    c334:	3084d83a 	srl	r2,r6,r2
    c338:	01000074 	movhi	r4,1
    c33c:	213df904 	addi	r4,r4,-2076
    c340:	01c00804 	movi	r7,32
    c344:	1105883a 	add	r2,r2,r4
    c348:	10c00003 	ldbu	r3,0(r2)
    c34c:	28c7883a 	add	r3,r5,r3
    c350:	38ebc83a 	sub	r21,r7,r3
    c354:	a800851e 	bne	r21,zero,c56c <__umoddi3+0x380>
    c358:	35005236 	bltu	r6,r20,c4a4 <__umoddi3+0x2b8>
    c35c:	b400512e 	bgeu	r22,r16,c4a4 <__umoddi3+0x2b8>
    c360:	b011883a 	mov	r8,r22
    c364:	a013883a 	mov	r9,r20
    c368:	003fde06 	br	c2e4 <__umoddi3+0xf8>
    c36c:	00bfffd4 	movui	r2,65535
    c370:	11804036 	bltu	r2,r6,c474 <__umoddi3+0x288>
    c374:	00803fc4 	movi	r2,255
    c378:	1180ed36 	bltu	r2,r6,c730 <__umoddi3+0x544>
    c37c:	000b883a 	mov	r5,zero
    c380:	0005883a 	mov	r2,zero
    c384:	8084d83a 	srl	r2,r16,r2
    c388:	01000074 	movhi	r4,1
    c38c:	213df904 	addi	r4,r4,-2076
    c390:	01800804 	movi	r6,32
    c394:	1105883a 	add	r2,r2,r4
    c398:	10c00003 	ldbu	r3,0(r2)
    c39c:	28c7883a 	add	r3,r5,r3
    c3a0:	30c7c83a 	sub	r3,r6,r3
    c3a4:	1800bf1e 	bne	r3,zero,c6a4 <__umoddi3+0x4b8>
    c3a8:	0039883a 	mov	fp,zero
    c3ac:	802ad43a 	srli	r21,r16,16
    c3b0:	a009883a 	mov	r4,r20
    c3b4:	85ffffcc 	andi	r23,r16,65535
    c3b8:	a80b883a 	mov	r5,r21
    c3bc:	000cbcc0 	call	cbcc <__udivsi3>
    c3c0:	a009883a 	mov	r4,r20
    c3c4:	a80b883a 	mov	r5,r21
    c3c8:	b8a3383a 	mul	r17,r23,r2
    c3cc:	000cbd40 	call	cbd4 <__umodsi3>
    c3d0:	1004943a 	slli	r2,r2,16
    c3d4:	b006d43a 	srli	r3,r22,16
    c3d8:	10c4b03a 	or	r2,r2,r3
    c3dc:	1440032e 	bgeu	r2,r17,c3ec <__umoddi3+0x200>
    c3e0:	1405883a 	add	r2,r2,r16
    c3e4:	14000136 	bltu	r2,r16,c3ec <__umoddi3+0x200>
    c3e8:	1440e536 	bltu	r2,r17,c780 <__umoddi3+0x594>
    c3ec:	1463c83a 	sub	r17,r2,r17
    c3f0:	8809883a 	mov	r4,r17
    c3f4:	a80b883a 	mov	r5,r21
    c3f8:	000cbcc0 	call	cbcc <__udivsi3>
    c3fc:	8809883a 	mov	r4,r17
    c400:	b8a3383a 	mul	r17,r23,r2
    c404:	a80b883a 	mov	r5,r21
    c408:	000cbd40 	call	cbd4 <__umodsi3>
    c40c:	1004943a 	slli	r2,r2,16
    c410:	b0ffffcc 	andi	r3,r22,65535
    c414:	10c4b03a 	or	r2,r2,r3
    c418:	1440042e 	bgeu	r2,r17,c42c <__umoddi3+0x240>
    c41c:	1405883a 	add	r2,r2,r16
    c420:	14000236 	bltu	r2,r16,c42c <__umoddi3+0x240>
    c424:	1440012e 	bgeu	r2,r17,c42c <__umoddi3+0x240>
    c428:	1405883a 	add	r2,r2,r16
    c42c:	1445c83a 	sub	r2,r2,r17
    c430:	1724d83a 	srl	r18,r2,fp
    c434:	0013883a 	mov	r9,zero
    c438:	9011883a 	mov	r8,r18
    c43c:	003fa906 	br	c2e4 <__umoddi3+0xf8>
    c440:	00804034 	movhi	r2,256
    c444:	10bfffc4 	addi	r2,r2,-1
    c448:	1400b036 	bltu	r2,r16,c70c <__umoddi3+0x520>
    c44c:	01400404 	movi	r5,16
    c450:	2805883a 	mov	r2,r5
    c454:	003f7c06 	br	c248 <__umoddi3+0x5c>
    c458:	01000044 	movi	r4,1
    c45c:	000b883a 	mov	r5,zero
    c460:	000cbcc0 	call	cbcc <__udivsi3>
    c464:	1021883a 	mov	r16,r2
    c468:	00bfffd4 	movui	r2,65535
    c46c:	143ff436 	bltu	r2,r16,c440 <__umoddi3+0x254>
    c470:	003f7106 	br	c238 <__umoddi3+0x4c>
    c474:	00804034 	movhi	r2,256
    c478:	10bfffc4 	addi	r2,r2,-1
    c47c:	1180af36 	bltu	r2,r6,c73c <__umoddi3+0x550>
    c480:	01400404 	movi	r5,16
    c484:	2805883a 	mov	r2,r5
    c488:	003fbe06 	br	c384 <__umoddi3+0x198>
    c48c:	00804034 	movhi	r2,256
    c490:	10bfffc4 	addi	r2,r2,-1
    c494:	11c0ac36 	bltu	r2,r7,c748 <__umoddi3+0x55c>
    c498:	01400404 	movi	r5,16
    c49c:	2805883a 	mov	r2,r5
    c4a0:	003fa406 	br	c334 <__umoddi3+0x148>
    c4a4:	b409c83a 	sub	r4,r22,r16
    c4a8:	b105803a 	cmpltu	r2,r22,r4
    c4ac:	a187c83a 	sub	r3,r20,r6
    c4b0:	18a9c83a 	sub	r20,r3,r2
    c4b4:	202d883a 	mov	r22,r4
    c4b8:	003fa906 	br	c360 <__umoddi3+0x174>
    c4bc:	85e0983a 	sll	r16,r16,r23
    c4c0:	35c5c83a 	sub	r2,r6,r23
    c4c4:	a0a2d83a 	srl	r17,r20,r2
    c4c8:	802ad43a 	srli	r21,r16,16
    c4cc:	b084d83a 	srl	r2,r22,r2
    c4d0:	a5c6983a 	sll	r3,r20,r23
    c4d4:	8809883a 	mov	r4,r17
    c4d8:	a80b883a 	mov	r5,r21
    c4dc:	1886b03a 	or	r3,r3,r2
    c4e0:	d8c00115 	stw	r3,4(sp)
    c4e4:	853fffcc 	andi	r20,r16,65535
    c4e8:	000cbcc0 	call	cbcc <__udivsi3>
    c4ec:	8809883a 	mov	r4,r17
    c4f0:	a80b883a 	mov	r5,r21
    c4f4:	a0a3383a 	mul	r17,r20,r2
    c4f8:	000cbd40 	call	cbd4 <__umodsi3>
    c4fc:	d9000117 	ldw	r4,4(sp)
    c500:	1004943a 	slli	r2,r2,16
    c504:	b839883a 	mov	fp,r23
    c508:	2006d43a 	srli	r3,r4,16
    c50c:	10c4b03a 	or	r2,r2,r3
    c510:	1440022e 	bgeu	r2,r17,c51c <__umoddi3+0x330>
    c514:	1405883a 	add	r2,r2,r16
    c518:	1400962e 	bgeu	r2,r16,c774 <__umoddi3+0x588>
    c51c:	1463c83a 	sub	r17,r2,r17
    c520:	8809883a 	mov	r4,r17
    c524:	a80b883a 	mov	r5,r21
    c528:	000cbcc0 	call	cbcc <__udivsi3>
    c52c:	8809883a 	mov	r4,r17
    c530:	a80b883a 	mov	r5,r21
    c534:	a0a3383a 	mul	r17,r20,r2
    c538:	000cbd40 	call	cbd4 <__umodsi3>
    c53c:	d9400117 	ldw	r5,4(sp)
    c540:	1004943a 	slli	r2,r2,16
    c544:	28ffffcc 	andi	r3,r5,65535
    c548:	10c4b03a 	or	r2,r2,r3
    c54c:	1440042e 	bgeu	r2,r17,c560 <__umoddi3+0x374>
    c550:	1405883a 	add	r2,r2,r16
    c554:	14000236 	bltu	r2,r16,c560 <__umoddi3+0x374>
    c558:	1440012e 	bgeu	r2,r17,c560 <__umoddi3+0x374>
    c55c:	1405883a 	add	r2,r2,r16
    c560:	b5ec983a 	sll	r22,r22,r23
    c564:	1463c83a 	sub	r17,r2,r17
    c568:	003f4406 	br	c27c <__umoddi3+0x90>
    c56c:	3d4fc83a 	sub	r7,r7,r21
    c570:	3546983a 	sll	r3,r6,r21
    c574:	81c4d83a 	srl	r2,r16,r7
    c578:	a1e2d83a 	srl	r17,r20,r7
    c57c:	a54c983a 	sll	r6,r20,r21
    c580:	18aeb03a 	or	r23,r3,r2
    c584:	b828d43a 	srli	r20,r23,16
    c588:	b1c4d83a 	srl	r2,r22,r7
    c58c:	8809883a 	mov	r4,r17
    c590:	a00b883a 	mov	r5,r20
    c594:	308cb03a 	or	r6,r6,r2
    c598:	d9c00315 	stw	r7,12(sp)
    c59c:	d9800215 	stw	r6,8(sp)
    c5a0:	000cbcc0 	call	cbcc <__udivsi3>
    c5a4:	8809883a 	mov	r4,r17
    c5a8:	a00b883a 	mov	r5,r20
    c5ac:	1039883a 	mov	fp,r2
    c5b0:	000cbd40 	call	cbd4 <__umodsi3>
    c5b4:	b8ffffcc 	andi	r3,r23,65535
    c5b8:	d8c00415 	stw	r3,16(sp)
    c5bc:	d9000217 	ldw	r4,8(sp)
    c5c0:	d9400417 	ldw	r5,16(sp)
    c5c4:	1004943a 	slli	r2,r2,16
    c5c8:	2006d43a 	srli	r3,r4,16
    c5cc:	8560983a 	sll	r16,r16,r21
    c5d0:	2f23383a 	mul	r17,r5,fp
    c5d4:	10c4b03a 	or	r2,r2,r3
    c5d8:	dc000015 	stw	r16,0(sp)
    c5dc:	b56c983a 	sll	r22,r22,r21
    c5e0:	1440032e 	bgeu	r2,r17,c5f0 <__umoddi3+0x404>
    c5e4:	15c5883a 	add	r2,r2,r23
    c5e8:	e73fffc4 	addi	fp,fp,-1
    c5ec:	15c05d2e 	bgeu	r2,r23,c764 <__umoddi3+0x578>
    c5f0:	1463c83a 	sub	r17,r2,r17
    c5f4:	8809883a 	mov	r4,r17
    c5f8:	a00b883a 	mov	r5,r20
    c5fc:	000cbcc0 	call	cbcc <__udivsi3>
    c600:	8809883a 	mov	r4,r17
    c604:	a00b883a 	mov	r5,r20
    c608:	1021883a 	mov	r16,r2
    c60c:	000cbd40 	call	cbd4 <__umodsi3>
    c610:	d8c00417 	ldw	r3,16(sp)
    c614:	d9000217 	ldw	r4,8(sp)
    c618:	1004943a 	slli	r2,r2,16
    c61c:	1c23383a 	mul	r17,r3,r16
    c620:	20ffffcc 	andi	r3,r4,65535
    c624:	10ceb03a 	or	r7,r2,r3
    c628:	3c40032e 	bgeu	r7,r17,c638 <__umoddi3+0x44c>
    c62c:	3dcf883a 	add	r7,r7,r23
    c630:	843fffc4 	addi	r16,r16,-1
    c634:	3dc0472e 	bgeu	r7,r23,c754 <__umoddi3+0x568>
    c638:	e004943a 	slli	r2,fp,16
    c63c:	d9400017 	ldw	r5,0(sp)
    c640:	3c4fc83a 	sub	r7,r7,r17
    c644:	8084b03a 	or	r2,r16,r2
    c648:	28ffffcc 	andi	r3,r5,65535
    c64c:	280cd43a 	srli	r6,r5,16
    c650:	100ad43a 	srli	r5,r2,16
    c654:	10bfffcc 	andi	r2,r2,65535
    c658:	10d1383a 	mul	r8,r2,r3
    c65c:	28c7383a 	mul	r3,r5,r3
    c660:	1185383a 	mul	r2,r2,r6
    c664:	4008d43a 	srli	r4,r8,16
    c668:	298b383a 	mul	r5,r5,r6
    c66c:	10c5883a 	add	r2,r2,r3
    c670:	2089883a 	add	r4,r4,r2
    c674:	20c0022e 	bgeu	r4,r3,c680 <__umoddi3+0x494>
    c678:	00800074 	movhi	r2,1
    c67c:	288b883a 	add	r5,r5,r2
    c680:	2004d43a 	srli	r2,r4,16
    c684:	2008943a 	slli	r4,r4,16
    c688:	40ffffcc 	andi	r3,r8,65535
    c68c:	288b883a 	add	r5,r5,r2
    c690:	20c9883a 	add	r4,r4,r3
    c694:	39400b36 	bltu	r7,r5,c6c4 <__umoddi3+0x4d8>
    c698:	39403d26 	beq	r7,r5,c790 <__umoddi3+0x5a4>
    c69c:	394bc83a 	sub	r5,r7,r5
    c6a0:	00000f06 	br	c6e0 <__umoddi3+0x4f4>
    c6a4:	30c5c83a 	sub	r2,r6,r3
    c6a8:	1839883a 	mov	fp,r3
    c6ac:	b084d83a 	srl	r2,r22,r2
    c6b0:	a0c6983a 	sll	r3,r20,r3
    c6b4:	8720983a 	sll	r16,r16,fp
    c6b8:	b72c983a 	sll	r22,r22,fp
    c6bc:	18a8b03a 	or	r20,r3,r2
    c6c0:	003f3a06 	br	c3ac <__umoddi3+0x1c0>
    c6c4:	d8c00017 	ldw	r3,0(sp)
    c6c8:	20c5c83a 	sub	r2,r4,r3
    c6cc:	2089803a 	cmpltu	r4,r4,r2
    c6d0:	2dc7c83a 	sub	r3,r5,r23
    c6d4:	1907c83a 	sub	r3,r3,r4
    c6d8:	38cbc83a 	sub	r5,r7,r3
    c6dc:	1009883a 	mov	r4,r2
    c6e0:	b105c83a 	sub	r2,r22,r4
    c6e4:	b087803a 	cmpltu	r3,r22,r2
    c6e8:	28c7c83a 	sub	r3,r5,r3
    c6ec:	d9400317 	ldw	r5,12(sp)
    c6f0:	1544d83a 	srl	r2,r2,r21
    c6f4:	1948983a 	sll	r4,r3,r5
    c6f8:	1d46d83a 	srl	r3,r3,r21
    c6fc:	20a4b03a 	or	r18,r4,r2
    c700:	9011883a 	mov	r8,r18
    c704:	1813883a 	mov	r9,r3
    c708:	003ef606 	br	c2e4 <__umoddi3+0xf8>
    c70c:	01400604 	movi	r5,24
    c710:	2805883a 	mov	r2,r5
    c714:	003ecc06 	br	c248 <__umoddi3+0x5c>
    c718:	01400204 	movi	r5,8
    c71c:	2805883a 	mov	r2,r5
    c720:	003ec906 	br	c248 <__umoddi3+0x5c>
    c724:	01400204 	movi	r5,8
    c728:	2805883a 	mov	r2,r5
    c72c:	003f0106 	br	c334 <__umoddi3+0x148>
    c730:	01400204 	movi	r5,8
    c734:	2805883a 	mov	r2,r5
    c738:	003f1206 	br	c384 <__umoddi3+0x198>
    c73c:	01400604 	movi	r5,24
    c740:	2805883a 	mov	r2,r5
    c744:	003f0f06 	br	c384 <__umoddi3+0x198>
    c748:	01400604 	movi	r5,24
    c74c:	2805883a 	mov	r2,r5
    c750:	003ef806 	br	c334 <__umoddi3+0x148>
    c754:	3c7fb82e 	bgeu	r7,r17,c638 <__umoddi3+0x44c>
    c758:	843fffc4 	addi	r16,r16,-1
    c75c:	3dcf883a 	add	r7,r7,r23
    c760:	003fb506 	br	c638 <__umoddi3+0x44c>
    c764:	147fa22e 	bgeu	r2,r17,c5f0 <__umoddi3+0x404>
    c768:	e73fffc4 	addi	fp,fp,-1
    c76c:	15c5883a 	add	r2,r2,r23
    c770:	003f9f06 	br	c5f0 <__umoddi3+0x404>
    c774:	147f692e 	bgeu	r2,r17,c51c <__umoddi3+0x330>
    c778:	1405883a 	add	r2,r2,r16
    c77c:	003f6706 	br	c51c <__umoddi3+0x330>
    c780:	1405883a 	add	r2,r2,r16
    c784:	003f1906 	br	c3ec <__umoddi3+0x200>
    c788:	1405883a 	add	r2,r2,r16
    c78c:	003ec906 	br	c2b4 <__umoddi3+0xc8>
    c790:	b13fcc36 	bltu	r22,r4,c6c4 <__umoddi3+0x4d8>
    c794:	000b883a 	mov	r5,zero
    c798:	003fd106 	br	c6e0 <__umoddi3+0x4f4>

0000c79c <__nedf2>:
    c79c:	deffef04 	addi	sp,sp,-68
    c7a0:	dc400f15 	stw	r17,60(sp)
    c7a4:	dc400404 	addi	r17,sp,16
    c7a8:	2005883a 	mov	r2,r4
    c7ac:	2807883a 	mov	r3,r5
    c7b0:	dc000e15 	stw	r16,56(sp)
    c7b4:	d809883a 	mov	r4,sp
    c7b8:	880b883a 	mov	r5,r17
    c7bc:	dc000904 	addi	r16,sp,36
    c7c0:	d8c00115 	stw	r3,4(sp)
    c7c4:	d8800015 	stw	r2,0(sp)
    c7c8:	d9800215 	stw	r6,8(sp)
    c7cc:	dfc01015 	stw	ra,64(sp)
    c7d0:	d9c00315 	stw	r7,12(sp)
    c7d4:	00045840 	call	4584 <__unpack_d>
    c7d8:	d9000204 	addi	r4,sp,8
    c7dc:	800b883a 	mov	r5,r16
    c7e0:	00045840 	call	4584 <__unpack_d>
    c7e4:	d8800417 	ldw	r2,16(sp)
    c7e8:	00c00044 	movi	r3,1
    c7ec:	180d883a 	mov	r6,r3
    c7f0:	1880062e 	bgeu	r3,r2,c80c <__nedf2+0x70>
    c7f4:	d8800917 	ldw	r2,36(sp)
    c7f8:	8809883a 	mov	r4,r17
    c7fc:	800b883a 	mov	r5,r16
    c800:	1880022e 	bgeu	r3,r2,c80c <__nedf2+0x70>
    c804:	00046bc0 	call	46bc <__fpcmp_parts_d>
    c808:	100d883a 	mov	r6,r2
    c80c:	3005883a 	mov	r2,r6
    c810:	dfc01017 	ldw	ra,64(sp)
    c814:	dc400f17 	ldw	r17,60(sp)
    c818:	dc000e17 	ldw	r16,56(sp)
    c81c:	dec01104 	addi	sp,sp,68
    c820:	f800283a 	ret

0000c824 <__fixdfsi>:
    c824:	defff804 	addi	sp,sp,-32
    c828:	2005883a 	mov	r2,r4
    c82c:	2807883a 	mov	r3,r5
    c830:	d809883a 	mov	r4,sp
    c834:	d9400204 	addi	r5,sp,8
    c838:	d8c00115 	stw	r3,4(sp)
    c83c:	d8800015 	stw	r2,0(sp)
    c840:	dfc00715 	stw	ra,28(sp)
    c844:	00045840 	call	4584 <__unpack_d>
    c848:	d8c00217 	ldw	r3,8(sp)
    c84c:	00800084 	movi	r2,2
    c850:	1880051e 	bne	r3,r2,c868 <__fixdfsi+0x44>
    c854:	0007883a 	mov	r3,zero
    c858:	1805883a 	mov	r2,r3
    c85c:	dfc00717 	ldw	ra,28(sp)
    c860:	dec00804 	addi	sp,sp,32
    c864:	f800283a 	ret
    c868:	00800044 	movi	r2,1
    c86c:	10fff92e 	bgeu	r2,r3,c854 <__fixdfsi+0x30>
    c870:	00800104 	movi	r2,4
    c874:	18800426 	beq	r3,r2,c888 <__fixdfsi+0x64>
    c878:	d8c00417 	ldw	r3,16(sp)
    c87c:	183ff516 	blt	r3,zero,c854 <__fixdfsi+0x30>
    c880:	00800784 	movi	r2,30
    c884:	10c0080e 	bge	r2,r3,c8a8 <__fixdfsi+0x84>
    c888:	d8800317 	ldw	r2,12(sp)
    c88c:	1000121e 	bne	r2,zero,c8d8 <__fixdfsi+0xb4>
    c890:	00e00034 	movhi	r3,32768
    c894:	18ffffc4 	addi	r3,r3,-1
    c898:	1805883a 	mov	r2,r3
    c89c:	dfc00717 	ldw	ra,28(sp)
    c8a0:	dec00804 	addi	sp,sp,32
    c8a4:	f800283a 	ret
    c8a8:	00800f04 	movi	r2,60
    c8ac:	10d1c83a 	sub	r8,r2,r3
    c8b0:	40bff804 	addi	r2,r8,-32
    c8b4:	d9800517 	ldw	r6,20(sp)
    c8b8:	d9c00617 	ldw	r7,24(sp)
    c8bc:	10000816 	blt	r2,zero,c8e0 <__fixdfsi+0xbc>
    c8c0:	3888d83a 	srl	r4,r7,r2
    c8c4:	d8800317 	ldw	r2,12(sp)
    c8c8:	2007883a 	mov	r3,r4
    c8cc:	103fe226 	beq	r2,zero,c858 <__fixdfsi+0x34>
    c8d0:	0107c83a 	sub	r3,zero,r4
    c8d4:	003fe006 	br	c858 <__fixdfsi+0x34>
    c8d8:	00e00034 	movhi	r3,32768
    c8dc:	003fde06 	br	c858 <__fixdfsi+0x34>
    c8e0:	39c7883a 	add	r3,r7,r7
    c8e4:	008007c4 	movi	r2,31
    c8e8:	1205c83a 	sub	r2,r2,r8
    c8ec:	1886983a 	sll	r3,r3,r2
    c8f0:	3208d83a 	srl	r4,r6,r8
    c8f4:	1908b03a 	or	r4,r3,r4
    c8f8:	003ff206 	br	c8c4 <__fixdfsi+0xa0>

0000c8fc <__floatunsidf>:
    c8fc:	defff204 	addi	sp,sp,-56
    c900:	dfc00d15 	stw	ra,52(sp)
    c904:	ddc00c15 	stw	r23,48(sp)
    c908:	dd800b15 	stw	r22,44(sp)
    c90c:	dd400a15 	stw	r21,40(sp)
    c910:	dd000915 	stw	r20,36(sp)
    c914:	dcc00815 	stw	r19,32(sp)
    c918:	dc800715 	stw	r18,28(sp)
    c91c:	dc400615 	stw	r17,24(sp)
    c920:	dc000515 	stw	r16,20(sp)
    c924:	d8000115 	stw	zero,4(sp)
    c928:	20000f1e 	bne	r4,zero,c968 <__floatunsidf+0x6c>
    c92c:	00800084 	movi	r2,2
    c930:	d8800015 	stw	r2,0(sp)
    c934:	d809883a 	mov	r4,sp
    c938:	00042700 	call	4270 <__pack_d>
    c93c:	dfc00d17 	ldw	ra,52(sp)
    c940:	ddc00c17 	ldw	r23,48(sp)
    c944:	dd800b17 	ldw	r22,44(sp)
    c948:	dd400a17 	ldw	r21,40(sp)
    c94c:	dd000917 	ldw	r20,36(sp)
    c950:	dcc00817 	ldw	r19,32(sp)
    c954:	dc800717 	ldw	r18,28(sp)
    c958:	dc400617 	ldw	r17,24(sp)
    c95c:	dc000517 	ldw	r16,20(sp)
    c960:	dec00e04 	addi	sp,sp,56
    c964:	f800283a 	ret
    c968:	008000c4 	movi	r2,3
    c96c:	00c00f04 	movi	r3,60
    c970:	002f883a 	mov	r23,zero
    c974:	202d883a 	mov	r22,r4
    c978:	d8800015 	stw	r2,0(sp)
    c97c:	d8c00215 	stw	r3,8(sp)
    c980:	d9000315 	stw	r4,12(sp)
    c984:	ddc00415 	stw	r23,16(sp)
    c988:	00041280 	call	4128 <__clzsi2>
    c98c:	12400744 	addi	r9,r2,29
    c990:	48000b16 	blt	r9,zero,c9c0 <__floatunsidf+0xc4>
    c994:	483fe726 	beq	r9,zero,c934 <__floatunsidf+0x38>
    c998:	10bfff44 	addi	r2,r2,-3
    c99c:	10002e16 	blt	r2,zero,ca58 <__floatunsidf+0x15c>
    c9a0:	b0a2983a 	sll	r17,r22,r2
    c9a4:	0021883a 	mov	r16,zero
    c9a8:	d8800217 	ldw	r2,8(sp)
    c9ac:	dc400415 	stw	r17,16(sp)
    c9b0:	dc000315 	stw	r16,12(sp)
    c9b4:	1245c83a 	sub	r2,r2,r9
    c9b8:	d8800215 	stw	r2,8(sp)
    c9bc:	003fdd06 	br	c934 <__floatunsidf+0x38>
    c9c0:	0255c83a 	sub	r10,zero,r9
    c9c4:	51bff804 	addi	r6,r10,-32
    c9c8:	30001b16 	blt	r6,zero,ca38 <__floatunsidf+0x13c>
    c9cc:	b9a8d83a 	srl	r20,r23,r6
    c9d0:	002b883a 	mov	r21,zero
    c9d4:	000f883a 	mov	r7,zero
    c9d8:	01000044 	movi	r4,1
    c9dc:	0011883a 	mov	r8,zero
    c9e0:	30002516 	blt	r6,zero,ca78 <__floatunsidf+0x17c>
    c9e4:	21a6983a 	sll	r19,r4,r6
    c9e8:	0025883a 	mov	r18,zero
    c9ec:	00bfffc4 	movi	r2,-1
    c9f0:	9089883a 	add	r4,r18,r2
    c9f4:	988b883a 	add	r5,r19,r2
    c9f8:	248d803a 	cmpltu	r6,r4,r18
    c9fc:	314b883a 	add	r5,r6,r5
    ca00:	b104703a 	and	r2,r22,r4
    ca04:	b946703a 	and	r3,r23,r5
    ca08:	10c4b03a 	or	r2,r2,r3
    ca0c:	10000226 	beq	r2,zero,ca18 <__floatunsidf+0x11c>
    ca10:	01c00044 	movi	r7,1
    ca14:	0011883a 	mov	r8,zero
    ca18:	d9000217 	ldw	r4,8(sp)
    ca1c:	a1c4b03a 	or	r2,r20,r7
    ca20:	aa06b03a 	or	r3,r21,r8
    ca24:	2249c83a 	sub	r4,r4,r9
    ca28:	d8c00415 	stw	r3,16(sp)
    ca2c:	d9000215 	stw	r4,8(sp)
    ca30:	d8800315 	stw	r2,12(sp)
    ca34:	003fbf06 	br	c934 <__floatunsidf+0x38>
    ca38:	bdc7883a 	add	r3,r23,r23
    ca3c:	008007c4 	movi	r2,31
    ca40:	1285c83a 	sub	r2,r2,r10
    ca44:	1886983a 	sll	r3,r3,r2
    ca48:	b2a8d83a 	srl	r20,r22,r10
    ca4c:	baaad83a 	srl	r21,r23,r10
    ca50:	1d28b03a 	or	r20,r3,r20
    ca54:	003fdf06 	br	c9d4 <__floatunsidf+0xd8>
    ca58:	b006d07a 	srli	r3,r22,1
    ca5c:	008007c4 	movi	r2,31
    ca60:	1245c83a 	sub	r2,r2,r9
    ca64:	1886d83a 	srl	r3,r3,r2
    ca68:	ba62983a 	sll	r17,r23,r9
    ca6c:	b260983a 	sll	r16,r22,r9
    ca70:	1c62b03a 	or	r17,r3,r17
    ca74:	003fcc06 	br	c9a8 <__floatunsidf+0xac>
    ca78:	2006d07a 	srli	r3,r4,1
    ca7c:	008007c4 	movi	r2,31
    ca80:	1285c83a 	sub	r2,r2,r10
    ca84:	18a6d83a 	srl	r19,r3,r2
    ca88:	22a4983a 	sll	r18,r4,r10
    ca8c:	003fd706 	br	c9ec <__floatunsidf+0xf0>

0000ca90 <udivmodsi4>:
    ca90:	29001b2e 	bgeu	r5,r4,cb00 <udivmodsi4+0x70>
    ca94:	28001a16 	blt	r5,zero,cb00 <udivmodsi4+0x70>
    ca98:	00800044 	movi	r2,1
    ca9c:	0007883a 	mov	r3,zero
    caa0:	01c007c4 	movi	r7,31
    caa4:	00000306 	br	cab4 <udivmodsi4+0x24>
    caa8:	19c01326 	beq	r3,r7,caf8 <udivmodsi4+0x68>
    caac:	18c00044 	addi	r3,r3,1
    cab0:	28000416 	blt	r5,zero,cac4 <udivmodsi4+0x34>
    cab4:	294b883a 	add	r5,r5,r5
    cab8:	1085883a 	add	r2,r2,r2
    cabc:	293ffa36 	bltu	r5,r4,caa8 <udivmodsi4+0x18>
    cac0:	10000d26 	beq	r2,zero,caf8 <udivmodsi4+0x68>
    cac4:	0007883a 	mov	r3,zero
    cac8:	21400236 	bltu	r4,r5,cad4 <udivmodsi4+0x44>
    cacc:	2149c83a 	sub	r4,r4,r5
    cad0:	1886b03a 	or	r3,r3,r2
    cad4:	1004d07a 	srli	r2,r2,1
    cad8:	280ad07a 	srli	r5,r5,1
    cadc:	103ffa1e 	bne	r2,zero,cac8 <udivmodsi4+0x38>
    cae0:	30000226 	beq	r6,zero,caec <udivmodsi4+0x5c>
    cae4:	2005883a 	mov	r2,r4
    cae8:	f800283a 	ret
    caec:	1809883a 	mov	r4,r3
    caf0:	2005883a 	mov	r2,r4
    caf4:	f800283a 	ret
    caf8:	0007883a 	mov	r3,zero
    cafc:	003ff806 	br	cae0 <udivmodsi4+0x50>
    cb00:	00800044 	movi	r2,1
    cb04:	0007883a 	mov	r3,zero
    cb08:	003fef06 	br	cac8 <udivmodsi4+0x38>

0000cb0c <__divsi3>:
    cb0c:	defffe04 	addi	sp,sp,-8
    cb10:	dc000015 	stw	r16,0(sp)
    cb14:	dfc00115 	stw	ra,4(sp)
    cb18:	0021883a 	mov	r16,zero
    cb1c:	20000c16 	blt	r4,zero,cb50 <__divsi3+0x44>
    cb20:	000d883a 	mov	r6,zero
    cb24:	28000e16 	blt	r5,zero,cb60 <__divsi3+0x54>
    cb28:	000ca900 	call	ca90 <udivmodsi4>
    cb2c:	1007883a 	mov	r3,r2
    cb30:	8005003a 	cmpeq	r2,r16,zero
    cb34:	1000011e 	bne	r2,zero,cb3c <__divsi3+0x30>
    cb38:	00c7c83a 	sub	r3,zero,r3
    cb3c:	1805883a 	mov	r2,r3
    cb40:	dfc00117 	ldw	ra,4(sp)
    cb44:	dc000017 	ldw	r16,0(sp)
    cb48:	dec00204 	addi	sp,sp,8
    cb4c:	f800283a 	ret
    cb50:	0109c83a 	sub	r4,zero,r4
    cb54:	04000044 	movi	r16,1
    cb58:	000d883a 	mov	r6,zero
    cb5c:	283ff20e 	bge	r5,zero,cb28 <__divsi3+0x1c>
    cb60:	014bc83a 	sub	r5,zero,r5
    cb64:	8021003a 	cmpeq	r16,r16,zero
    cb68:	003fef06 	br	cb28 <__divsi3+0x1c>

0000cb6c <__modsi3>:
    cb6c:	deffff04 	addi	sp,sp,-4
    cb70:	dfc00015 	stw	ra,0(sp)
    cb74:	01800044 	movi	r6,1
    cb78:	2807883a 	mov	r3,r5
    cb7c:	20000416 	blt	r4,zero,cb90 <__modsi3+0x24>
    cb80:	28000c16 	blt	r5,zero,cbb4 <__modsi3+0x48>
    cb84:	dfc00017 	ldw	ra,0(sp)
    cb88:	dec00104 	addi	sp,sp,4
    cb8c:	000ca901 	jmpi	ca90 <udivmodsi4>
    cb90:	0109c83a 	sub	r4,zero,r4
    cb94:	28000b16 	blt	r5,zero,cbc4 <__modsi3+0x58>
    cb98:	180b883a 	mov	r5,r3
    cb9c:	01800044 	movi	r6,1
    cba0:	000ca900 	call	ca90 <udivmodsi4>
    cba4:	0085c83a 	sub	r2,zero,r2
    cba8:	dfc00017 	ldw	ra,0(sp)
    cbac:	dec00104 	addi	sp,sp,4
    cbb0:	f800283a 	ret
    cbb4:	014bc83a 	sub	r5,zero,r5
    cbb8:	dfc00017 	ldw	ra,0(sp)
    cbbc:	dec00104 	addi	sp,sp,4
    cbc0:	000ca901 	jmpi	ca90 <udivmodsi4>
    cbc4:	0147c83a 	sub	r3,zero,r5
    cbc8:	003ff306 	br	cb98 <__modsi3+0x2c>

0000cbcc <__udivsi3>:
    cbcc:	000d883a 	mov	r6,zero
    cbd0:	000ca901 	jmpi	ca90 <udivmodsi4>

0000cbd4 <__umodsi3>:
    cbd4:	01800044 	movi	r6,1
    cbd8:	000ca901 	jmpi	ca90 <udivmodsi4>

0000cbdc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cbdc:	defffd04 	addi	sp,sp,-12
    cbe0:	dfc00215 	stw	ra,8(sp)
    cbe4:	dc400115 	stw	r17,4(sp)
    cbe8:	dc000015 	stw	r16,0(sp)
    cbec:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cbf0:	20001c16 	blt	r4,zero,cc64 <close+0x88>
    cbf4:	20c00324 	muli	r3,r4,12
    cbf8:	008000b4 	movhi	r2,2
    cbfc:	10a14604 	addi	r2,r2,-31464
    cc00:	1889883a 	add	r4,r3,r2

  if (fd)
    cc04:	20001726 	beq	r4,zero,cc64 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cc08:	20800017 	ldw	r2,0(r4)
    cc0c:	10800417 	ldw	r2,16(r2)
    cc10:	10002126 	beq	r2,zero,cc98 <close+0xbc>
    cc14:	103ee83a 	callr	r2
    cc18:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cc1c:	8009883a 	mov	r4,r16
    cc20:	000d1300 	call	d130 <alt_release_fd>
    if (rval < 0)
    cc24:	88000216 	blt	r17,zero,cc30 <close+0x54>
    cc28:	0005883a 	mov	r2,zero
    cc2c:	00001d06 	br	cca4 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    cc30:	008000b4 	movhi	r2,2
    cc34:	10a6f004 	addi	r2,r2,-25664
    cc38:	10800017 	ldw	r2,0(r2)
    cc3c:	1000031e 	bne	r2,zero,cc4c <close+0x70>
    cc40:	00c000b4 	movhi	r3,2
    cc44:	18cecd04 	addi	r3,r3,15156
    cc48:	00000206 	br	cc54 <close+0x78>
    cc4c:	103ee83a 	callr	r2
    cc50:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    cc54:	0445c83a 	sub	r2,zero,r17
    cc58:	18800015 	stw	r2,0(r3)
    cc5c:	00bfffc4 	movi	r2,-1
    cc60:	00001006 	br	cca4 <close+0xc8>
    cc64:	008000b4 	movhi	r2,2
    cc68:	10a6f004 	addi	r2,r2,-25664
    cc6c:	10800017 	ldw	r2,0(r2)
    cc70:	1000031e 	bne	r2,zero,cc80 <close+0xa4>
    cc74:	00c000b4 	movhi	r3,2
    cc78:	18cecd04 	addi	r3,r3,15156
    cc7c:	00000206 	br	cc88 <close+0xac>
    cc80:	103ee83a 	callr	r2
    cc84:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cc88:	00801444 	movi	r2,81
    cc8c:	18800015 	stw	r2,0(r3)
    cc90:	00bfffc4 	movi	r2,-1
    cc94:	00000306 	br	cca4 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cc98:	8009883a 	mov	r4,r16
    cc9c:	000d1300 	call	d130 <alt_release_fd>
    cca0:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    cca4:	dfc00217 	ldw	ra,8(sp)
    cca8:	dc400117 	ldw	r17,4(sp)
    ccac:	dc000017 	ldw	r16,0(sp)
    ccb0:	dec00304 	addi	sp,sp,12
    ccb4:	f800283a 	ret

0000ccb8 <alt_dcache_flush>:
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ccb8:	f800283a 	ret

0000ccbc <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    ccbc:	3005883a 	mov	r2,r6
    ccc0:	f800283a 	ret

0000ccc4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ccc4:	deffff04 	addi	sp,sp,-4
    ccc8:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cccc:	20000e16 	blt	r4,zero,cd08 <fstat+0x44>
    ccd0:	20c00324 	muli	r3,r4,12
    ccd4:	008000b4 	movhi	r2,2
    ccd8:	10a14604 	addi	r2,r2,-31464
    ccdc:	1889883a 	add	r4,r3,r2
  
  if (fd)
    cce0:	20000926 	beq	r4,zero,cd08 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    cce4:	20800017 	ldw	r2,0(r4)
    cce8:	10800817 	ldw	r2,32(r2)
    ccec:	10000226 	beq	r2,zero,ccf8 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    ccf0:	103ee83a 	callr	r2
    ccf4:	00001006 	br	cd38 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ccf8:	00880004 	movi	r2,8192
    ccfc:	28800115 	stw	r2,4(r5)
    cd00:	0005883a 	mov	r2,zero
    cd04:	00000c06 	br	cd38 <fstat+0x74>
    cd08:	008000b4 	movhi	r2,2
    cd0c:	10a6f004 	addi	r2,r2,-25664
    cd10:	10800017 	ldw	r2,0(r2)
    cd14:	1000031e 	bne	r2,zero,cd24 <fstat+0x60>
    cd18:	00c000b4 	movhi	r3,2
    cd1c:	18cecd04 	addi	r3,r3,15156
    cd20:	00000206 	br	cd2c <fstat+0x68>
    cd24:	103ee83a 	callr	r2
    cd28:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cd2c:	00801444 	movi	r2,81
    cd30:	18800015 	stw	r2,0(r3)
    cd34:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    cd38:	dfc00017 	ldw	ra,0(sp)
    cd3c:	dec00104 	addi	sp,sp,4
    cd40:	f800283a 	ret

0000cd44 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    cd44:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    cd48:	008007c4 	movi	r2,31
    cd4c:	1100022e 	bgeu	r2,r4,cd58 <alt_irq_register+0x14>
    cd50:	00bffa84 	movi	r2,-22
    cd54:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cd58:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cd5c:	013fff84 	movi	r4,-2
    cd60:	4104703a 	and	r2,r8,r4
    cd64:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    cd68:	380490fa 	slli	r2,r7,3
    cd6c:	00c002b4 	movhi	r3,10
    cd70:	18dd4504 	addi	r3,r3,29972
    cd74:	10c5883a 	add	r2,r2,r3
    cd78:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    cd7c:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    cd80:	30000e26 	beq	r6,zero,cdbc <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cd84:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cd88:	2904703a 	and	r2,r5,r4
    cd8c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    cd90:	00c000b4 	movhi	r3,2
    cd94:	18ced104 	addi	r3,r3,15172
    cd98:	19000017 	ldw	r4,0(r3)
    cd9c:	00800044 	movi	r2,1
    cda0:	11c4983a 	sll	r2,r2,r7
    cda4:	1104b03a 	or	r2,r2,r4
    cda8:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cdac:	18800017 	ldw	r2,0(r3)
    cdb0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cdb4:	2801703a 	wrctl	status,r5
    cdb8:	00000e06 	br	cdf4 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cdbc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cdc0:	00bfff84 	movi	r2,-2
    cdc4:	2884703a 	and	r2,r5,r2
    cdc8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    cdcc:	00c000b4 	movhi	r3,2
    cdd0:	18ced104 	addi	r3,r3,15172
    cdd4:	19000017 	ldw	r4,0(r3)
    cdd8:	00bfff84 	movi	r2,-2
    cddc:	11c4183a 	rol	r2,r2,r7
    cde0:	1104703a 	and	r2,r2,r4
    cde4:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cde8:	18800017 	ldw	r2,0(r3)
    cdec:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cdf0:	2801703a 	wrctl	status,r5
    cdf4:	4001703a 	wrctl	status,r8
    cdf8:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    cdfc:	f800283a 	ret

0000ce00 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ce00:	defff004 	addi	sp,sp,-64
    ce04:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ce08:	20000f16 	blt	r4,zero,ce48 <isatty+0x48>
    ce0c:	20c00324 	muli	r3,r4,12
    ce10:	008000b4 	movhi	r2,2
    ce14:	10a14604 	addi	r2,r2,-31464
    ce18:	1885883a 	add	r2,r3,r2
  
  if (fd)
    ce1c:	10000a26 	beq	r2,zero,ce48 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ce20:	10800017 	ldw	r2,0(r2)
    ce24:	10800817 	ldw	r2,32(r2)
    ce28:	1000021e 	bne	r2,zero,ce34 <isatty+0x34>
    ce2c:	00800044 	movi	r2,1
    ce30:	00001106 	br	ce78 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ce34:	d80b883a 	mov	r5,sp
    ce38:	000ccc40 	call	ccc4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ce3c:	d8800117 	ldw	r2,4(sp)
    ce40:	10880020 	cmpeqi	r2,r2,8192
    ce44:	00000c06 	br	ce78 <isatty+0x78>
    ce48:	008000b4 	movhi	r2,2
    ce4c:	10a6f004 	addi	r2,r2,-25664
    ce50:	10800017 	ldw	r2,0(r2)
    ce54:	1000031e 	bne	r2,zero,ce64 <isatty+0x64>
    ce58:	00c000b4 	movhi	r3,2
    ce5c:	18cecd04 	addi	r3,r3,15156
    ce60:	00000206 	br	ce6c <isatty+0x6c>
    ce64:	103ee83a 	callr	r2
    ce68:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ce6c:	00801444 	movi	r2,81
    ce70:	18800015 	stw	r2,0(r3)
    ce74:	0005883a 	mov	r2,zero
    return 0;
  }
}
    ce78:	dfc00f17 	ldw	ra,60(sp)
    ce7c:	dec01004 	addi	sp,sp,64
    ce80:	f800283a 	ret

0000ce84 <alt_load>:
    ce84:	deffff04 	addi	sp,sp,-4
    ce88:	dfc00015 	stw	ra,0(sp)
    ce8c:	010000b4 	movhi	r4,2
    ce90:	2126f704 	addi	r4,r4,-25636
    ce94:	00c00074 	movhi	r3,1
    ce98:	18ff2b04 	addi	r3,r3,-852
    ce9c:	20c00926 	beq	r4,r3,cec4 <alt_load+0x40>
    cea0:	018000b4 	movhi	r6,2
    cea4:	31a6f704 	addi	r6,r6,-25636
    cea8:	19800626 	beq	r3,r6,cec4 <alt_load+0x40>
    ceac:	01400104 	movi	r5,4
    ceb0:	20800017 	ldw	r2,0(r4)
    ceb4:	18800015 	stw	r2,0(r3)
    ceb8:	1947883a 	add	r3,r3,r5
    cebc:	2149883a 	add	r4,r4,r5
    cec0:	30fffb1e 	bne	r6,r3,ceb0 <alt_load+0x2c>
    cec4:	01000034 	movhi	r4,0
    cec8:	21000804 	addi	r4,r4,32
    cecc:	00c00034 	movhi	r3,0
    ced0:	18c00804 	addi	r3,r3,32
    ced4:	20c00926 	beq	r4,r3,cefc <alt_load+0x78>
    ced8:	01800034 	movhi	r6,0
    cedc:	31805a04 	addi	r6,r6,360
    cee0:	19800626 	beq	r3,r6,cefc <alt_load+0x78>
    cee4:	01400104 	movi	r5,4
    cee8:	20800017 	ldw	r2,0(r4)
    ceec:	18800015 	stw	r2,0(r3)
    cef0:	1947883a 	add	r3,r3,r5
    cef4:	2149883a 	add	r4,r4,r5
    cef8:	30fffb1e 	bne	r6,r3,cee8 <alt_load+0x64>
    cefc:	01000074 	movhi	r4,1
    cf00:	213dc704 	addi	r4,r4,-2276
    cf04:	00c00074 	movhi	r3,1
    cf08:	18fdc704 	addi	r3,r3,-2276
    cf0c:	20c00926 	beq	r4,r3,cf34 <alt_load+0xb0>
    cf10:	01800074 	movhi	r6,1
    cf14:	31bf2b04 	addi	r6,r6,-852
    cf18:	19800626 	beq	r3,r6,cf34 <alt_load+0xb0>
    cf1c:	01400104 	movi	r5,4
    cf20:	20800017 	ldw	r2,0(r4)
    cf24:	18800015 	stw	r2,0(r3)
    cf28:	1947883a 	add	r3,r3,r5
    cf2c:	2149883a 	add	r4,r4,r5
    cf30:	30fffb1e 	bne	r6,r3,cf20 <alt_load+0x9c>
    cf34:	000eeb40 	call	eeb4 <alt_dcache_flush_all>
    cf38:	000ef980 	call	ef98 <alt_icache_flush_all>
    cf3c:	dfc00017 	ldw	ra,0(sp)
    cf40:	dec00104 	addi	sp,sp,4
    cf44:	f800283a 	ret

0000cf48 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    cf48:	defffe04 	addi	sp,sp,-8
    cf4c:	dfc00115 	stw	ra,4(sp)
    cf50:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cf54:	2000020e 	bge	r4,zero,cf60 <lseek+0x18>
    cf58:	043febc4 	movi	r16,-81
    cf5c:	00000d06 	br	cf94 <lseek+0x4c>
    cf60:	20c00324 	muli	r3,r4,12
    cf64:	008000b4 	movhi	r2,2
    cf68:	10a14604 	addi	r2,r2,-31464
    cf6c:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    cf70:	20001526 	beq	r4,zero,cfc8 <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    cf74:	20800017 	ldw	r2,0(r4)
    cf78:	10800717 	ldw	r2,28(r2)
    cf7c:	1000021e 	bne	r2,zero,cf88 <lseek+0x40>
    cf80:	043fde84 	movi	r16,-134
    cf84:	00000306 	br	cf94 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    cf88:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    cf8c:	1000100e 	bge	r2,zero,cfd0 <lseek+0x88>
    cf90:	1021883a 	mov	r16,r2
    cf94:	008000b4 	movhi	r2,2
    cf98:	10a6f004 	addi	r2,r2,-25664
    cf9c:	10800017 	ldw	r2,0(r2)
    cfa0:	1000031e 	bne	r2,zero,cfb0 <lseek+0x68>
    cfa4:	00c000b4 	movhi	r3,2
    cfa8:	18cecd04 	addi	r3,r3,15156
    cfac:	00000206 	br	cfb8 <lseek+0x70>
    cfb0:	103ee83a 	callr	r2
    cfb4:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    cfb8:	0405c83a 	sub	r2,zero,r16
    cfbc:	18800015 	stw	r2,0(r3)
    cfc0:	00bfffc4 	movi	r2,-1
    cfc4:	00000206 	br	cfd0 <lseek+0x88>
    cfc8:	043febc4 	movi	r16,-81
    cfcc:	003ff106 	br	cf94 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    cfd0:	dfc00117 	ldw	ra,4(sp)
    cfd4:	dc000017 	ldw	r16,0(sp)
    cfd8:	dec00204 	addi	sp,sp,8
    cfdc:	f800283a 	ret

0000cfe0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    cfe0:	defffe04 	addi	sp,sp,-8
    cfe4:	dfc00115 	stw	ra,4(sp)
    cfe8:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    cfec:	0009883a 	mov	r4,zero
    cff0:	000d2980 	call	d298 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    cff4:	000d2b80 	call	d2b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    cff8:	01800074 	movhi	r6,1
    cffc:	31beb904 	addi	r6,r6,-1308
    d000:	3009883a 	mov	r4,r6
    d004:	300b883a 	mov	r5,r6
    d008:	000f01c0 	call	f01c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d00c:	d1080717 	ldw	r4,8220(gp)
    d010:	d1480817 	ldw	r5,8224(gp)
    d014:	d1880917 	ldw	r6,8228(gp)
    d018:	0001b580 	call	1b58 <main>
    d01c:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    d020:	01000044 	movi	r4,1
    d024:	000cbdc0 	call	cbdc <close>
  exit (result);
    d028:	8009883a 	mov	r4,r16
    d02c:	000f4a40 	call	f4a4 <exit>

0000d030 <__malloc_lock>:
    d030:	f800283a 	ret

0000d034 <__malloc_unlock>:
    d034:	f800283a 	ret

0000d038 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d038:	defffe04 	addi	sp,sp,-8
    d03c:	dfc00115 	stw	ra,4(sp)
    d040:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d044:	20002916 	blt	r4,zero,d0ec <read+0xb4>
    d048:	20c00324 	muli	r3,r4,12
    d04c:	008000b4 	movhi	r2,2
    d050:	10a14604 	addi	r2,r2,-31464
    d054:	1889883a 	add	r4,r3,r2
  
  if (fd)
    d058:	20002426 	beq	r4,zero,d0ec <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d05c:	20800217 	ldw	r2,8(r4)
    d060:	108000cc 	andi	r2,r2,3
    d064:	00c00044 	movi	r3,1
    d068:	10c01326 	beq	r2,r3,d0b8 <read+0x80>
    d06c:	20800017 	ldw	r2,0(r4)
    d070:	10800517 	ldw	r2,20(r2)
    d074:	10001026 	beq	r2,zero,d0b8 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d078:	103ee83a 	callr	r2
    d07c:	1021883a 	mov	r16,r2
    d080:	1000260e 	bge	r2,zero,d11c <read+0xe4>
    d084:	008000b4 	movhi	r2,2
    d088:	10a6f004 	addi	r2,r2,-25664
    d08c:	10800017 	ldw	r2,0(r2)
    d090:	1000031e 	bne	r2,zero,d0a0 <read+0x68>
    d094:	00c000b4 	movhi	r3,2
    d098:	18cecd04 	addi	r3,r3,15156
    d09c:	00000206 	br	d0a8 <read+0x70>
    d0a0:	103ee83a 	callr	r2
    d0a4:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    d0a8:	0405c83a 	sub	r2,zero,r16
    d0ac:	18800015 	stw	r2,0(r3)
    d0b0:	043fffc4 	movi	r16,-1
    d0b4:	00001906 	br	d11c <read+0xe4>
    d0b8:	008000b4 	movhi	r2,2
    d0bc:	10a6f004 	addi	r2,r2,-25664
    d0c0:	10800017 	ldw	r2,0(r2)
    d0c4:	1000031e 	bne	r2,zero,d0d4 <read+0x9c>
    d0c8:	00c000b4 	movhi	r3,2
    d0cc:	18cecd04 	addi	r3,r3,15156
    d0d0:	00000206 	br	d0dc <read+0xa4>
    d0d4:	103ee83a 	callr	r2
    d0d8:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    d0dc:	00800344 	movi	r2,13
    d0e0:	18800015 	stw	r2,0(r3)
    d0e4:	043fffc4 	movi	r16,-1
    d0e8:	00000c06 	br	d11c <read+0xe4>
    d0ec:	008000b4 	movhi	r2,2
    d0f0:	10a6f004 	addi	r2,r2,-25664
    d0f4:	10800017 	ldw	r2,0(r2)
    d0f8:	1000031e 	bne	r2,zero,d108 <read+0xd0>
    d0fc:	00c000b4 	movhi	r3,2
    d100:	18cecd04 	addi	r3,r3,15156
    d104:	00000206 	br	d110 <read+0xd8>
    d108:	103ee83a 	callr	r2
    d10c:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d110:	00801444 	movi	r2,81
    d114:	18800015 	stw	r2,0(r3)
    d118:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    d11c:	8005883a 	mov	r2,r16
    d120:	dfc00117 	ldw	ra,4(sp)
    d124:	dc000017 	ldw	r16,0(sp)
    d128:	dec00204 	addi	sp,sp,8
    d12c:	f800283a 	ret

0000d130 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    d130:	00800084 	movi	r2,2
    d134:	1100060e 	bge	r2,r4,d150 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    d138:	20800324 	muli	r2,r4,12
    d13c:	00c000b4 	movhi	r3,2
    d140:	18e14604 	addi	r3,r3,-31464
    d144:	10c5883a 	add	r2,r2,r3
    d148:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    d14c:	10000015 	stw	zero,0(r2)
    d150:	f800283a 	ret

0000d154 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d154:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d158:	00bfff84 	movi	r2,-2
    d15c:	2884703a 	and	r2,r5,r2
    d160:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d164:	d0a02717 	ldw	r2,-32612(gp)
    d168:	108000c4 	addi	r2,r2,3
    d16c:	00ffff04 	movi	r3,-4
    d170:	10c6703a 	and	r3,r2,r3
    d174:	d0e02715 	stw	r3,-32612(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d178:	1909883a 	add	r4,r3,r4
    d17c:	00820034 	movhi	r2,2048
    d180:	10800004 	addi	r2,r2,0
    d184:	1100032e 	bgeu	r2,r4,d194 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d188:	2801703a 	wrctl	status,r5
    d18c:	00ffffc4 	movi	r3,-1
    d190:	00000206 	br	d19c <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    d194:	d1202715 	stw	r4,-32612(gp)
    d198:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    d19c:	1805883a 	mov	r2,r3
    d1a0:	f800283a 	ret

0000d1a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d1a4:	defffe04 	addi	sp,sp,-8
    d1a8:	dfc00115 	stw	ra,4(sp)
    d1ac:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d1b0:	20002816 	blt	r4,zero,d254 <write+0xb0>
    d1b4:	20c00324 	muli	r3,r4,12
    d1b8:	008000b4 	movhi	r2,2
    d1bc:	10a14604 	addi	r2,r2,-31464
    d1c0:	1889883a 	add	r4,r3,r2
  
  if (fd)
    d1c4:	20002326 	beq	r4,zero,d254 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d1c8:	20800217 	ldw	r2,8(r4)
    d1cc:	108000cc 	andi	r2,r2,3
    d1d0:	10001326 	beq	r2,zero,d220 <write+0x7c>
    d1d4:	20800017 	ldw	r2,0(r4)
    d1d8:	10800617 	ldw	r2,24(r2)
    d1dc:	10001026 	beq	r2,zero,d220 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d1e0:	103ee83a 	callr	r2
    d1e4:	1021883a 	mov	r16,r2
    d1e8:	1000260e 	bge	r2,zero,d284 <write+0xe0>
    d1ec:	008000b4 	movhi	r2,2
    d1f0:	10a6f004 	addi	r2,r2,-25664
    d1f4:	10800017 	ldw	r2,0(r2)
    d1f8:	1000031e 	bne	r2,zero,d208 <write+0x64>
    d1fc:	00c000b4 	movhi	r3,2
    d200:	18cecd04 	addi	r3,r3,15156
    d204:	00000206 	br	d210 <write+0x6c>
    d208:	103ee83a 	callr	r2
    d20c:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    d210:	0405c83a 	sub	r2,zero,r16
    d214:	18800015 	stw	r2,0(r3)
    d218:	043fffc4 	movi	r16,-1
    d21c:	00001906 	br	d284 <write+0xe0>
    d220:	008000b4 	movhi	r2,2
    d224:	10a6f004 	addi	r2,r2,-25664
    d228:	10800017 	ldw	r2,0(r2)
    d22c:	1000031e 	bne	r2,zero,d23c <write+0x98>
    d230:	00c000b4 	movhi	r3,2
    d234:	18cecd04 	addi	r3,r3,15156
    d238:	00000206 	br	d244 <write+0xa0>
    d23c:	103ee83a 	callr	r2
    d240:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    d244:	00800344 	movi	r2,13
    d248:	18800015 	stw	r2,0(r3)
    d24c:	043fffc4 	movi	r16,-1
    d250:	00000c06 	br	d284 <write+0xe0>
    d254:	008000b4 	movhi	r2,2
    d258:	10a6f004 	addi	r2,r2,-25664
    d25c:	10800017 	ldw	r2,0(r2)
    d260:	1000031e 	bne	r2,zero,d270 <write+0xcc>
    d264:	00c000b4 	movhi	r3,2
    d268:	18cecd04 	addi	r3,r3,15156
    d26c:	00000206 	br	d278 <write+0xd4>
    d270:	103ee83a 	callr	r2
    d274:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d278:	00801444 	movi	r2,81
    d27c:	18800015 	stw	r2,0(r3)
    d280:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    d284:	8005883a 	mov	r2,r16
    d288:	dfc00117 	ldw	ra,4(sp)
    d28c:	dc000017 	ldw	r16,0(sp)
    d290:	dec00204 	addi	sp,sp,8
    d294:	f800283a 	ret

0000d298 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d298:	deffff04 	addi	sp,sp,-4
    d29c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    d2a0:	000f3380 	call	f338 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d2a4:	00800044 	movi	r2,1
    d2a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d2ac:	dfc00017 	ldw	ra,0(sp)
    d2b0:	dec00104 	addi	sp,sp,4
    d2b4:	f800283a 	ret

0000d2b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d2b8:	defffc04 	addi	sp,sp,-16
    d2bc:	dfc00315 	stw	ra,12(sp)
    d2c0:	dc800215 	stw	r18,8(sp)
    d2c4:	dc400115 	stw	r17,4(sp)
    d2c8:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    d2cc:	04000204 	movi	r16,8
    d2d0:	01040034 	movhi	r4,4096
    d2d4:	21080004 	addi	r4,r4,8192
    d2d8:	000b883a 	mov	r5,zero
    d2dc:	000d883a 	mov	r6,zero
    d2e0:	800f883a 	mov	r7,r16
    d2e4:	000e1e00 	call	e1e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    d2e8:	044000b4 	movhi	r17,2
    d2ec:	8c61b004 	addi	r17,r17,-31040
    d2f0:	8809883a 	mov	r4,r17
    d2f4:	000b883a 	mov	r5,zero
    d2f8:	800d883a 	mov	r6,r16
    d2fc:	000d6ac0 	call	d6ac <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d300:	040000b4 	movhi	r16,2
    d304:	8426ed04 	addi	r16,r16,-25676
    d308:	893ff604 	addi	r4,r17,-40
    d30c:	800b883a 	mov	r5,r16
    d310:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
    d314:	010000b4 	movhi	r4,2
    d318:	2125be04 	addi	r4,r4,-26888
    d31c:	000b883a 	mov	r5,zero
    d320:	018000c4 	movi	r6,3
    d324:	000dbc00 	call	dbc0 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
    d328:	04800104 	movi	r18,4
    d32c:	010000b4 	movhi	r4,2
    d330:	2125ca04 	addi	r4,r4,-26840
    d334:	000b883a 	mov	r5,zero
    d338:	900d883a 	mov	r6,r18
    d33c:	000dbc00 	call	dbc0 <alt_avalon_sgdma_init>
    d340:	010000b4 	movhi	r4,2
    d344:	2125d604 	addi	r4,r4,-26792
    d348:	800b883a 	mov	r5,r16
    d34c:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d350:	010000b4 	movhi	r4,2
    d354:	2125e104 	addi	r4,r4,-26748
    d358:	800b883a 	mov	r5,r16
    d35c:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d360:	010000b4 	movhi	r4,2
    d364:	2125ed04 	addi	r4,r4,-26700
    d368:	800b883a 	mov	r5,r16
    d36c:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d370:	010000b4 	movhi	r4,2
    d374:	2125f904 	addi	r4,r4,-26652
    d378:	800b883a 	mov	r5,r16
    d37c:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    ALTERA_ETH_TSE_INIT ( ENET, enet);
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER, Accelerometer);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( CAMERA_CONFIG, Camera_Config);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( ONBOARD_AV, OnBoard_AV);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    d380:	044000b4 	movhi	r17,2
    d384:	8c660504 	addi	r17,r17,-26604
    d388:	8809883a 	mov	r4,r17
    d38c:	000e3140 	call	e314 <alt_up_character_lcd_init>
    d390:	8809883a 	mov	r4,r17
    d394:	800b883a 	mov	r5,r16
    d398:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d39c:	010000b4 	movhi	r4,2
    d3a0:	21261004 	addi	r4,r4,-26560
    d3a4:	800b883a 	mov	r5,r16
    d3a8:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d3ac:	010000b4 	movhi	r4,2
    d3b0:	21261b04 	addi	r4,r4,-26516
    d3b4:	800b883a 	mov	r5,r16
    d3b8:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d3bc:	010000b4 	movhi	r4,2
    d3c0:	21262604 	addi	r4,r4,-26472
    d3c4:	800b883a 	mov	r5,r16
    d3c8:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d3cc:	010000b4 	movhi	r4,2
    d3d0:	21263104 	addi	r4,r4,-26428
    d3d4:	800b883a 	mov	r5,r16
    d3d8:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d3dc:	010000b4 	movhi	r4,2
    d3e0:	21263c04 	addi	r4,r4,-26384
    d3e4:	800b883a 	mov	r5,r16
    d3e8:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d3ec:	010000b4 	movhi	r4,2
    d3f0:	21264704 	addi	r4,r4,-26340
    d3f4:	800b883a 	mov	r5,r16
    d3f8:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d3fc:	010000b4 	movhi	r4,2
    d400:	21265204 	addi	r4,r4,-26296
    d404:	800b883a 	mov	r5,r16
    d408:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d40c:	010000b4 	movhi	r4,2
    d410:	21265d04 	addi	r4,r4,-26252
    d414:	800b883a 	mov	r5,r16
    d418:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    d41c:	044000b4 	movhi	r17,2
    d420:	8c666804 	addi	r17,r17,-26208
    d424:	8809883a 	mov	r4,r17
    d428:	000ea180 	call	ea18 <alt_up_ps2_init>
    d42c:	8809883a 	mov	r4,r17
    d430:	800b883a 	mov	r5,r16
    d434:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    d438:	044000b4 	movhi	r17,2
    d43c:	8c667604 	addi	r17,r17,-26152
    d440:	8809883a 	mov	r4,r17
    d444:	000ea180 	call	ea18 <alt_up_ps2_init>
    d448:	8809883a 	mov	r4,r17
    d44c:	800b883a 	mov	r5,r16
    d450:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d454:	010000b4 	movhi	r4,2
    d458:	21268404 	addi	r4,r4,-26096
    d45c:	800b883a 	mov	r5,r16
    d460:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d464:	010000b4 	movhi	r4,2
    d468:	21268f04 	addi	r4,r4,-26052
    d46c:	800b883a 	mov	r5,r16
    d470:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( LCD_CHAR_BUFFER, LCD_Char_Buffer);
    d474:	010000b4 	movhi	r4,2
    d478:	21269c04 	addi	r4,r4,-26000
    d47c:	20800a17 	ldw	r2,40(r4)
    d480:	1485883a 	add	r2,r2,r18
    d484:	10c0000b 	ldhu	r3,0(r2)
    d488:	20c00c15 	stw	r3,48(r4)
    d48c:	10800017 	ldw	r2,0(r2)
    d490:	100ad43a 	srli	r5,r2,16
    d494:	21400d15 	stw	r5,52(r4)
    d498:	00801004 	movi	r2,64
    d49c:	10c00436 	bltu	r2,r3,d4b0 <alt_sys_init+0x1f8>
    d4a0:	00800fc4 	movi	r2,63
    d4a4:	20800f15 	stw	r2,60(r4)
    d4a8:	00800184 	movi	r2,6
    d4ac:	20801015 	stw	r2,64(r4)
    d4b0:	00800804 	movi	r2,32
    d4b4:	11400436 	bltu	r2,r5,d4c8 <alt_sys_init+0x210>
    d4b8:	00c007c4 	movi	r3,31
    d4bc:	008000b4 	movhi	r2,2
    d4c0:	10a69c04 	addi	r2,r2,-26000
    d4c4:	10c01115 	stw	r3,68(r2)
    d4c8:	040000b4 	movhi	r16,2
    d4cc:	84269c04 	addi	r16,r16,-26000
    d4d0:	8009883a 	mov	r4,r16
    d4d4:	000edd00 	call	edd0 <alt_up_char_buffer_init>
    d4d8:	8009883a 	mov	r4,r16
    d4dc:	014000b4 	movhi	r5,2
    d4e0:	2966ed04 	addi	r5,r5,-25676
    d4e4:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    d4e8:	010000b4 	movhi	r4,2
    d4ec:	2126ae04 	addi	r4,r4,-25928
    d4f0:	20800a17 	ldw	r2,40(r4)
    d4f4:	10800104 	addi	r2,r2,4
    d4f8:	10c0000b 	ldhu	r3,0(r2)
    d4fc:	20c00c15 	stw	r3,48(r4)
    d500:	10800017 	ldw	r2,0(r2)
    d504:	100ad43a 	srli	r5,r2,16
    d508:	21400d15 	stw	r5,52(r4)
    d50c:	00801004 	movi	r2,64
    d510:	10c00436 	bltu	r2,r3,d524 <alt_sys_init+0x26c>
    d514:	00800fc4 	movi	r2,63
    d518:	20800f15 	stw	r2,60(r4)
    d51c:	00800184 	movi	r2,6
    d520:	20801015 	stw	r2,64(r4)
    d524:	00800804 	movi	r2,32
    d528:	11400436 	bltu	r2,r5,d53c <alt_sys_init+0x284>
    d52c:	00c007c4 	movi	r3,31
    d530:	008000b4 	movhi	r2,2
    d534:	10a6ae04 	addi	r2,r2,-25928
    d538:	10c01115 	stw	r3,68(r2)
    d53c:	040000b4 	movhi	r16,2
    d540:	8426ae04 	addi	r16,r16,-25928
    d544:	8009883a 	mov	r4,r16
    d548:	000edd00 	call	edd0 <alt_up_char_buffer_init>
    d54c:	044000b4 	movhi	r17,2
    d550:	8c66ed04 	addi	r17,r17,-25676
    d554:	8009883a 	mov	r4,r16
    d558:	880b883a 	mov	r5,r17
    d55c:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    d560:	010000b4 	movhi	r4,2
    d564:	2126c004 	addi	r4,r4,-25856
    d568:	880b883a 	mov	r5,r17
    d56c:	000eeb80 	call	eeb8 <alt_dev_llist_insert>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
}
    d570:	dfc00317 	ldw	ra,12(sp)
    d574:	dc800217 	ldw	r18,8(sp)
    d578:	dc400117 	ldw	r17,4(sp)
    d57c:	dc000017 	ldw	r16,0(sp)
    d580:	dec00404 	addi	sp,sp,16
    d584:	f800283a 	ret

0000d588 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d588:	deffff04 	addi	sp,sp,-4
    d58c:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d590:	21000017 	ldw	r4,0(r4)
    d594:	21000a04 	addi	r4,r4,40
    d598:	000d8580 	call	d858 <altera_avalon_jtag_uart_ioctl>
}
    d59c:	dfc00017 	ldw	ra,0(sp)
    d5a0:	dec00104 	addi	sp,sp,4
    d5a4:	f800283a 	ret

0000d5a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    d5a8:	deffff04 	addi	sp,sp,-4
    d5ac:	dfc00015 	stw	ra,0(sp)
    d5b0:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    d5b4:	21000017 	ldw	r4,0(r4)
    d5b8:	21000a04 	addi	r4,r4,40
    d5bc:	11400217 	ldw	r5,8(r2)
    d5c0:	000d6200 	call	d620 <altera_avalon_jtag_uart_close>
}
    d5c4:	dfc00017 	ldw	ra,0(sp)
    d5c8:	dec00104 	addi	sp,sp,4
    d5cc:	f800283a 	ret

0000d5d0 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d5d0:	deffff04 	addi	sp,sp,-4
    d5d4:	dfc00015 	stw	ra,0(sp)
    d5d8:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d5dc:	21000017 	ldw	r4,0(r4)
    d5e0:	21000a04 	addi	r4,r4,40
    d5e4:	11c00217 	ldw	r7,8(r2)
    d5e8:	000da340 	call	da34 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d5ec:	dfc00017 	ldw	ra,0(sp)
    d5f0:	dec00104 	addi	sp,sp,4
    d5f4:	f800283a 	ret

0000d5f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d5f8:	deffff04 	addi	sp,sp,-4
    d5fc:	dfc00015 	stw	ra,0(sp)
    d600:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d604:	21000017 	ldw	r4,0(r4)
    d608:	21000a04 	addi	r4,r4,40
    d60c:	11c00217 	ldw	r7,8(r2)
    d610:	000d8cc0 	call	d8cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d614:	dfc00017 	ldw	ra,0(sp)
    d618:	dec00104 	addi	sp,sp,4
    d61c:	f800283a 	ret

0000d620 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    d620:	21800c17 	ldw	r6,48(r4)
    d624:	2950000c 	andi	r5,r5,16384
    d628:	280b003a 	cmpeq	r5,r5,zero
    d62c:	00000306 	br	d63c <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    d630:	2800021e 	bne	r5,zero,d63c <altera_avalon_jtag_uart_close+0x1c>
    d634:	00bffd44 	movi	r2,-11
    d638:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    d63c:	20800d17 	ldw	r2,52(r4)
    d640:	11800326 	beq	r2,r6,d650 <altera_avalon_jtag_uart_close+0x30>
    d644:	20c00917 	ldw	r3,36(r4)
    d648:	20800117 	ldw	r2,4(r4)
    d64c:	18bff836 	bltu	r3,r2,d630 <altera_avalon_jtag_uart_close+0x10>
    d650:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    d654:	f800283a 	ret

0000d658 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    d658:	20800017 	ldw	r2,0(r4)
    d65c:	10c00104 	addi	r3,r2,4
    d660:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    d664:	01410004 	movi	r5,1024
    d668:	1144703a 	and	r2,r2,r5
    d66c:	10000526 	beq	r2,zero,d684 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    d670:	20800817 	ldw	r2,32(r4)
    d674:	1144b03a 	or	r2,r2,r5
    d678:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    d67c:	20000915 	stw	zero,36(r4)
    d680:	00000606 	br	d69c <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    d684:	20c00917 	ldw	r3,36(r4)
    d688:	00a00034 	movhi	r2,32768
    d68c:	10bfff04 	addi	r2,r2,-4
    d690:	10c00236 	bltu	r2,r3,d69c <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    d694:	18800044 	addi	r2,r3,1
    d698:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    d69c:	008000b4 	movhi	r2,2
    d6a0:	108ed504 	addi	r2,r2,15188
    d6a4:	10800017 	ldw	r2,0(r2)
    d6a8:	f800283a 	ret

0000d6ac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    d6ac:	defffe04 	addi	sp,sp,-8
    d6b0:	dfc00115 	stw	ra,4(sp)
    d6b4:	dc000015 	stw	r16,0(sp)
    d6b8:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d6bc:	00c00044 	movi	r3,1
    d6c0:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    d6c4:	20800017 	ldw	r2,0(r4)
    d6c8:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    d6cc:	3009883a 	mov	r4,r6
    d6d0:	800b883a 	mov	r5,r16
    d6d4:	01800074 	movhi	r6,1
    d6d8:	31b5c904 	addi	r6,r6,-10460
    d6dc:	000cd440 	call	cd44 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    d6e0:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    d6e4:	81000204 	addi	r4,r16,8
    d6e8:	008000b4 	movhi	r2,2
    d6ec:	108ed504 	addi	r2,r2,15188
    d6f0:	11400017 	ldw	r5,0(r2)
    d6f4:	01800074 	movhi	r6,1
    d6f8:	31b59604 	addi	r6,r6,-10664
    d6fc:	800f883a 	mov	r7,r16
    d700:	000ee200 	call	ee20 <alt_alarm_start>
    d704:	1000030e 	bge	r2,zero,d714 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    d708:	00a00034 	movhi	r2,32768
    d70c:	10bfffc4 	addi	r2,r2,-1
    d710:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    d714:	dfc00117 	ldw	ra,4(sp)
    d718:	dc000017 	ldw	r16,0(sp)
    d71c:	dec00204 	addi	sp,sp,8
    d720:	f800283a 	ret

0000d724 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    d724:	22000017 	ldw	r8,0(r4)
    d728:	03800104 	movi	r14,4
    d72c:	4399883a 	add	r12,r8,r14
    d730:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d734:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    d738:	5880c00c 	andi	r2,r11,768
    d73c:	10004526 	beq	r2,zero,d854 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    d740:	5880400c 	andi	r2,r11,256
    d744:	10002126 	beq	r2,zero,d7cc <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d748:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    d74c:	10800044 	addi	r2,r2,1
    d750:	1081ffcc 	andi	r2,r2,2047
    d754:	20c00b17 	ldw	r3,44(r4)
    d758:	10c01626 	beq	r2,r3,d7b4 <altera_avalon_jtag_uart_irq+0x90>
    d75c:	02a00014 	movui	r10,32768
    d760:	02400e04 	movi	r9,56
    d764:	01c00044 	movi	r7,1
    d768:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    d76c:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    d770:	2a84703a 	and	r2,r5,r10
    d774:	10000d26 	beq	r2,zero,d7ac <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    d778:	20800a17 	ldw	r2,40(r4)
    d77c:	1105883a 	add	r2,r2,r4
    d780:	1245883a 	add	r2,r2,r9
    d784:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d788:	20800a17 	ldw	r2,40(r4)
    d78c:	11c5883a 	add	r2,r2,r7
    d790:	1184703a 	and	r2,r2,r6
    d794:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d798:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    d79c:	11c5883a 	add	r2,r2,r7
    d7a0:	1184703a 	and	r2,r2,r6
    d7a4:	20c00b17 	ldw	r3,44(r4)
    d7a8:	10fff01e 	bne	r2,r3,d76c <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    d7ac:	2b44703a 	and	r2,r5,r13
    d7b0:	10000626 	beq	r2,zero,d7cc <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d7b4:	20800817 	ldw	r2,32(r4)
    d7b8:	00ffff84 	movi	r3,-2
    d7bc:	10c4703a 	and	r2,r2,r3
    d7c0:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    d7c4:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d7c8:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    d7cc:	5880800c 	andi	r2,r11,512
    d7d0:	103fd826 	beq	r2,zero,d734 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    d7d4:	5b44703a 	and	r2,r11,r13
    d7d8:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    d7dc:	283fd526 	beq	r5,zero,d734 <altera_avalon_jtag_uart_irq+0x10>
    d7e0:	20c00d17 	ldw	r3,52(r4)
    d7e4:	20800c17 	ldw	r2,48(r4)
    d7e8:	18801126 	beq	r3,r2,d830 <altera_avalon_jtag_uart_irq+0x10c>
    d7ec:	02420e04 	movi	r9,2104
    d7f0:	01800044 	movi	r6,1
    d7f4:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    d7f8:	20800d17 	ldw	r2,52(r4)
    d7fc:	1105883a 	add	r2,r2,r4
    d800:	1245883a 	add	r2,r2,r9
    d804:	10800007 	ldb	r2,0(r2)
    d808:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d80c:	20800d17 	ldw	r2,52(r4)
    d810:	1185883a 	add	r2,r2,r6
    d814:	11c4703a 	and	r2,r2,r7
    d818:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    d81c:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    d820:	283fc426 	beq	r5,zero,d734 <altera_avalon_jtag_uart_irq+0x10>
    d824:	20c00d17 	ldw	r3,52(r4)
    d828:	20800c17 	ldw	r2,48(r4)
    d82c:	18bff21e 	bne	r3,r2,d7f8 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d830:	20c00817 	ldw	r3,32(r4)
    d834:	00bfff44 	movi	r2,-3
    d838:	1886703a 	and	r3,r3,r2
    d83c:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d840:	20800017 	ldw	r2,0(r4)
    d844:	1385883a 	add	r2,r2,r14
    d848:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d84c:	60800037 	ldwio	r2,0(r12)
    d850:	003fb806 	br	d734 <altera_avalon_jtag_uart_irq+0x10>
    d854:	f800283a 	ret

0000d858 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    d858:	009a8044 	movi	r2,27137
    d85c:	28800326 	beq	r5,r2,d86c <altera_avalon_jtag_uart_ioctl+0x14>
    d860:	009a8084 	movi	r2,27138
    d864:	2880171e 	bne	r5,r2,d8c4 <altera_avalon_jtag_uart_ioctl+0x6c>
    d868:	00000d06 	br	d8a0 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    d86c:	20c00117 	ldw	r3,4(r4)
    d870:	00a00034 	movhi	r2,32768
    d874:	10bfffc4 	addi	r2,r2,-1
    d878:	18801226 	beq	r3,r2,d8c4 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    d87c:	31800017 	ldw	r6,0(r6)
    d880:	30ffff84 	addi	r3,r6,-2
    d884:	10bfff44 	addi	r2,r2,-3
    d888:	10c0022e 	bgeu	r2,r3,d894 <altera_avalon_jtag_uart_ioctl+0x3c>
    d88c:	01a00034 	movhi	r6,32768
    d890:	31bfff84 	addi	r6,r6,-2
    d894:	21800115 	stw	r6,4(r4)
    d898:	0005883a 	mov	r2,zero
    d89c:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    d8a0:	20c00117 	ldw	r3,4(r4)
    d8a4:	00a00034 	movhi	r2,32768
    d8a8:	10bfffc4 	addi	r2,r2,-1
    d8ac:	18800526 	beq	r3,r2,d8c4 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    d8b0:	20800917 	ldw	r2,36(r4)
    d8b4:	10c5803a 	cmpltu	r2,r2,r3
    d8b8:	30800015 	stw	r2,0(r6)
    d8bc:	0005883a 	mov	r2,zero
    d8c0:	f800283a 	ret
    d8c4:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    d8c8:	f800283a 	ret

0000d8cc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    d8cc:	defff604 	addi	sp,sp,-40
    d8d0:	dfc00915 	stw	ra,36(sp)
    d8d4:	df000815 	stw	fp,32(sp)
    d8d8:	ddc00715 	stw	r23,28(sp)
    d8dc:	dd800615 	stw	r22,24(sp)
    d8e0:	dd400515 	stw	r21,20(sp)
    d8e4:	dd000415 	stw	r20,16(sp)
    d8e8:	dcc00315 	stw	r19,12(sp)
    d8ec:	dc800215 	stw	r18,8(sp)
    d8f0:	dc400115 	stw	r17,4(sp)
    d8f4:	dc000015 	stw	r16,0(sp)
    d8f8:	2025883a 	mov	r18,r4
    d8fc:	282f883a 	mov	r23,r5
    d900:	3027883a 	mov	r19,r6
    d904:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    d908:	0180220e 	bge	zero,r6,d994 <altera_avalon_jtag_uart_read+0xc8>
    d90c:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    d910:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    d914:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    d918:	b4400236 	bltu	r22,r17,d924 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    d91c:	b461c83a 	sub	r16,r22,r17
    d920:	00000206 	br	d92c <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    d924:	00820004 	movi	r2,2048
    d928:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    d92c:	80000d26 	beq	r16,zero,d964 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    d930:	9829883a 	mov	r20,r19
    d934:	9c001d36 	bltu	r19,r16,d9ac <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    d938:	91400e04 	addi	r5,r18,56
    d93c:	a809883a 	mov	r4,r21
    d940:	2c4b883a 	add	r5,r5,r17
    d944:	800d883a 	mov	r6,r16
    d948:	0009d340 	call	9d34 <memcpy>
      ptr   += n;
    d94c:	ac2b883a 	add	r21,r21,r16
      space -= n;
    d950:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d954:	8445883a 	add	r2,r16,r17
    d958:	1081ffcc 	andi	r2,r2,2047
    d95c:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    d960:	04ffeb16 	blt	zero,r19,d910 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    d964:	adc01c1e 	bne	r21,r23,d9d8 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    d968:	e090000c 	andi	r2,fp,16384
    d96c:	10000d1e 	bne	r2,zero,d9a4 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    d970:	90800a17 	ldw	r2,40(r18)
    d974:	b080031e 	bne	r22,r2,d984 <altera_avalon_jtag_uart_read+0xb8>
    d978:	90c00917 	ldw	r3,36(r18)
    d97c:	90800117 	ldw	r2,4(r18)
    d980:	18bffb36 	bltu	r3,r2,d970 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    d984:	90800a17 	ldw	r2,40(r18)
    d988:	b0800426 	beq	r22,r2,d99c <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    d98c:	04c0030e 	bge	zero,r19,d99c <altera_avalon_jtag_uart_read+0xd0>
    d990:	003fde06 	br	d90c <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    d994:	3890000c 	andi	r2,r7,16384
    d998:	1000021e 	bne	r2,zero,d9a4 <altera_avalon_jtag_uart_read+0xd8>
    d99c:	00bffec4 	movi	r2,-5
    d9a0:	00001806 	br	da04 <altera_avalon_jtag_uart_read+0x138>
    d9a4:	00bffd44 	movi	r2,-11
    d9a8:	00001606 	br	da04 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    d9ac:	91400e04 	addi	r5,r18,56
    d9b0:	a809883a 	mov	r4,r21
    d9b4:	894b883a 	add	r5,r17,r5
    d9b8:	980d883a 	mov	r6,r19
    d9bc:	0009d340 	call	9d34 <memcpy>
      ptr   += n;
    d9c0:	aceb883a 	add	r21,r21,r19
      space -= n;
    d9c4:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d9c8:	a445883a 	add	r2,r20,r17
    d9cc:	1081ffcc 	andi	r2,r2,2047
    d9d0:	90800b15 	stw	r2,44(r18)
    d9d4:	003fe306 	br	d964 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d9d8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d9dc:	00bfff84 	movi	r2,-2
    d9e0:	2084703a 	and	r2,r4,r2
    d9e4:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d9e8:	90800817 	ldw	r2,32(r18)
    d9ec:	10800054 	ori	r2,r2,1
    d9f0:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d9f4:	90c00017 	ldw	r3,0(r18)
    d9f8:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d9fc:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    da00:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    da04:	dfc00917 	ldw	ra,36(sp)
    da08:	df000817 	ldw	fp,32(sp)
    da0c:	ddc00717 	ldw	r23,28(sp)
    da10:	dd800617 	ldw	r22,24(sp)
    da14:	dd400517 	ldw	r21,20(sp)
    da18:	dd000417 	ldw	r20,16(sp)
    da1c:	dcc00317 	ldw	r19,12(sp)
    da20:	dc800217 	ldw	r18,8(sp)
    da24:	dc400117 	ldw	r17,4(sp)
    da28:	dc000017 	ldw	r16,0(sp)
    da2c:	dec00a04 	addi	sp,sp,40
    da30:	f800283a 	ret

0000da34 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    da34:	defff804 	addi	sp,sp,-32
    da38:	dfc00715 	stw	ra,28(sp)
    da3c:	dd800615 	stw	r22,24(sp)
    da40:	dd400515 	stw	r21,20(sp)
    da44:	dd000415 	stw	r20,16(sp)
    da48:	dcc00315 	stw	r19,12(sp)
    da4c:	dc800215 	stw	r18,8(sp)
    da50:	dc400115 	stw	r17,4(sp)
    da54:	dc000015 	stw	r16,0(sp)
    da58:	2021883a 	mov	r16,r4
    da5c:	282d883a 	mov	r22,r5
    da60:	3011883a 	mov	r8,r6
    da64:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    da68:	01800616 	blt	zero,r6,da84 <altera_avalon_jtag_uart_write+0x50>
    da6c:	2829883a 	mov	r20,r5
    da70:	00002106 	br	daf8 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    da74:	a585c83a 	sub	r2,r20,r22
    da78:	00004306 	br	db88 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    da7c:	00bffd44 	movi	r2,-11
    da80:	00004106 	br	db88 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    da84:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    da88:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    da8c:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    da90:	9140032e 	bgeu	r18,r5,daa0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    da94:	2c85c83a 	sub	r2,r5,r18
    da98:	11bfffc4 	addi	r6,r2,-1
    da9c:	00000606 	br	dab8 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    daa0:	28000326 	beq	r5,zero,dab0 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    daa4:	00820004 	movi	r2,2048
    daa8:	148dc83a 	sub	r6,r2,r18
    daac:	00000206 	br	dab8 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    dab0:	0081ffc4 	movi	r2,2047
    dab4:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    dab8:	30002626 	beq	r6,zero,db54 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    dabc:	4027883a 	mov	r19,r8
    dac0:	3023883a 	mov	r17,r6
    dac4:	4180012e 	bgeu	r8,r6,dacc <altera_avalon_jtag_uart_write+0x98>
    dac8:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    dacc:	81020e04 	addi	r4,r16,2104
    dad0:	2489883a 	add	r4,r4,r18
    dad4:	a00b883a 	mov	r5,r20
    dad8:	880d883a 	mov	r6,r17
    dadc:	0009d340 	call	9d34 <memcpy>
      ptr   += n;
    dae0:	a469883a 	add	r20,r20,r17
      count -= n;
    dae4:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dae8:	9445883a 	add	r2,r18,r17
    daec:	1081ffcc 	andi	r2,r2,2047
    daf0:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    daf4:	023fe416 	blt	zero,r8,da88 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    daf8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dafc:	00bfff84 	movi	r2,-2
    db00:	2084703a 	and	r2,r4,r2
    db04:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    db08:	80800817 	ldw	r2,32(r16)
    db0c:	10800094 	ori	r2,r2,2
    db10:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    db14:	80c00017 	ldw	r3,0(r16)
    db18:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    db1c:	2001703a 	wrctl	status,r4
    db20:	00000706 	br	db40 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    db24:	80800d17 	ldw	r2,52(r16)
    db28:	1140031e 	bne	r2,r5,db38 <altera_avalon_jtag_uart_write+0x104>
    db2c:	80c00917 	ldw	r3,36(r16)
    db30:	80800117 	ldw	r2,4(r16)
    db34:	18bffb36 	bltu	r3,r2,db24 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    db38:	80800d17 	ldw	r2,52(r16)
    db3c:	117fed1e 	bne	r2,r5,daf4 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    db40:	b53fcc1e 	bne	r22,r20,da74 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    db44:	a890000c 	andi	r2,r21,16384
    db48:	103fcc1e 	bne	r2,zero,da7c <altera_avalon_jtag_uart_write+0x48>
    db4c:	00bffec4 	movi	r2,-5
    db50:	00000d06 	br	db88 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db54:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db58:	00bfff84 	movi	r2,-2
    db5c:	2084703a 	and	r2,r4,r2
    db60:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    db64:	80800817 	ldw	r2,32(r16)
    db68:	10800094 	ori	r2,r2,2
    db6c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    db70:	80c00017 	ldw	r3,0(r16)
    db74:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    db78:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    db7c:	a890000c 	andi	r2,r21,16384
    db80:	103fe826 	beq	r2,zero,db24 <altera_avalon_jtag_uart_write+0xf0>
    db84:	003fee06 	br	db40 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    db88:	dfc00717 	ldw	ra,28(sp)
    db8c:	dd800617 	ldw	r22,24(sp)
    db90:	dd400517 	ldw	r21,20(sp)
    db94:	dd000417 	ldw	r20,16(sp)
    db98:	dcc00317 	ldw	r19,12(sp)
    db9c:	dc800217 	ldw	r18,8(sp)
    dba0:	dc400117 	ldw	r17,4(sp)
    dba4:	dc000017 	ldw	r16,0(sp)
    dba8:	dec00804 	addi	sp,sp,32
    dbac:	f800283a 	ret

0000dbb0 <alt_avalon_sgdma_register_callback>:
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
    dbb0:	21400915 	stw	r5,36(r4)
  dev->callback_context = context;
    dbb4:	21c00a15 	stw	r7,40(r4)
  dev->chain_control    = chain_control;
    dbb8:	21800b15 	stw	r6,44(r4)
}
    dbbc:	f800283a 	ret

0000dbc0 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
    dbc0:	defffd04 	addi	sp,sp,-12
    dbc4:	dfc00215 	stw	ra,8(sp)
    dbc8:	dc400115 	stw	r17,4(sp)
    dbcc:	dc000015 	stw	r16,0(sp)
    dbd0:	2021883a 	mov	r16,r4
    dbd4:	3023883a 	mov	r17,r6

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    dbd8:	00c00404 	movi	r3,16
    dbdc:	20800317 	ldw	r2,12(r4)
    dbe0:	10c5883a 	add	r2,r2,r3
    dbe4:	01400074 	movhi	r5,1
    dbe8:	11400035 	stwio	r5,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    dbec:	20800317 	ldw	r2,12(r4)
    dbf0:	10c5883a 	add	r2,r2,r3
    dbf4:	11400035 	stwio	r5,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
    dbf8:	20800317 	ldw	r2,12(r4)
    dbfc:	10c5883a 	add	r2,r2,r3
    dc00:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    dc04:	20c00317 	ldw	r3,12(r4)
    dc08:	00803fc4 	movi	r2,255
    dc0c:	18800035 	stwio	r2,0(r3)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
    dc10:	d1602804 	addi	r5,gp,-32608
    dc14:	000eeb80 	call	eeb8 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
    dc18:	8809883a 	mov	r4,r17
    dc1c:	800b883a 	mov	r5,r16
    dc20:	01800074 	movhi	r6,1
    dc24:	31b77d04 	addi	r6,r6,-8716
    dc28:	000cd440 	call	cd44 <alt_irq_register>
#endif  
}
    dc2c:	dfc00217 	ldw	ra,8(sp)
    dc30:	dc400117 	ldw	r17,4(sp)
    dc34:	dc000017 	ldw	r16,0(sp)
    dc38:	dec00304 	addi	sp,sp,12
    dc3c:	f800283a 	ret

0000dc40 <alt_avalon_sgdma_disable_desc_poll>:
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    dc40:	20800317 	ldw	r2,12(r4)
    dc44:	10800404 	addi	r2,r2,16
    dc48:	10c00037 	ldwio	r3,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    dc4c:	013fff34 	movhi	r4,65532
    dc50:	213fffc4 	addi	r4,r4,-1
    dc54:	1906703a 	and	r3,r3,r4
    dc58:	10c00035 	stwio	r3,0(r2)
  
  return;
}
    dc5c:	f800283a 	ret

0000dc60 <alt_avalon_sgdma_enable_desc_poll>:
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    dc60:	21000317 	ldw	r4,12(r4)
    dc64:	21000404 	addi	r4,r4,16
    dc68:	20c00037 	ldwio	r3,0(r4)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
    dc6c:	00a00434 	movhi	r2,32784
    dc70:	10bfffc4 	addi	r2,r2,-1
    dc74:	1886703a 	and	r3,r3,r2
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    dc78:	280a953a 	slli	r5,r5,20
    dc7c:	295ffc2c 	andhi	r5,r5,32752
    dc80:	29400134 	orhi	r5,r5,4
    dc84:	1946b03a 	or	r3,r3,r5
    dc88:	20c00035 	stwio	r3,0(r4)
  
  return;
}
    dc8c:	f800283a 	ret

0000dc90 <alt_avalon_sgdma_stop>:
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    dc90:	20800317 	ldw	r2,12(r4)
    dc94:	10800404 	addi	r2,r2,16
    dc98:	10c00037 	ldwio	r3,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    dc9c:	013ff7c4 	movi	r4,-33
    dca0:	1906703a 	and	r3,r3,r4
    dca4:	10c00035 	stwio	r3,0(r2)
}
    dca8:	f800283a 	ret

0000dcac <alt_avalon_sgdma_start>:
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    dcac:	20c00317 	ldw	r3,12(r4)
    dcb0:	18c00404 	addi	r3,r3,16
    dcb4:	18800037 	ldwio	r2,0(r3)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    dcb8:	10800814 	ori	r2,r2,32
    dcbc:	18800035 	stwio	r2,0(r3)
}
    dcc0:	f800283a 	ret

0000dcc4 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
    dcc4:	200f883a 	mov	r7,r4
    dcc8:	21000317 	ldw	r4,12(r4)
    dccc:	01800404 	movi	r6,16
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    dcd0:	20800037 	ldwio	r2,0(r4)
    dcd4:	1184703a 	and	r2,r2,r6
    dcd8:	103ffd1e 	bne	r2,zero,dcd0 <alt_avalon_sgdma_do_sync_transfer+0xc>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    dcdc:	2189883a 	add	r4,r4,r6
    dce0:	20800037 	ldwio	r2,0(r4)
    dce4:	00fff7c4 	movi	r3,-33
    dce8:	10c4703a 	and	r2,r2,r3
    dcec:	20800035 	stwio	r2,0(r4)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    dcf0:	38c00317 	ldw	r3,12(r7)
    dcf4:	00803fc4 	movi	r2,255
    dcf8:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
    dcfc:	38800317 	ldw	r2,12(r7)
    dd00:	11400835 	stwio	r5,32(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    dd04:	38c00317 	ldw	r3,12(r7)
    dd08:	1987883a 	add	r3,r3,r6
    dd0c:	18800037 	ldwio	r2,0(r3)
    dd10:	10801814 	ori	r2,r2,96
    dd14:	18800035 	stwio	r2,0(r3)
    dd18:	39000317 	ldw	r4,12(r7)
    dd1c:	00c00404 	movi	r3,16
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    dd20:	20800037 	ldwio	r2,0(r4)
    dd24:	10c4703a 	and	r2,r2,r3
    dd28:	103ffd1e 	bne	r2,zero,dd20 <alt_avalon_sgdma_do_sync_transfer+0x5c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
    dd2c:	20c9883a 	add	r4,r4,r3
    dd30:	20800037 	ldwio	r2,0(r4)
    dd34:	00fff7c4 	movi	r3,-33
    dd38:	10c4703a 	and	r2,r2,r3
    dd3c:	20800035 	stwio	r2,0(r4)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
    dd40:	39000317 	ldw	r4,12(r7)
    dd44:	20800037 	ldwio	r2,0(r4)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    dd48:	00c03fc4 	movi	r3,255
    dd4c:	20c00035 	stwio	r3,0(r4)

  return status;
}
    dd50:	10803fcc 	andi	r2,r2,255
    dd54:	f800283a 	ret

0000dd58 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
    dd58:	200d883a 	mov	r6,r4
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    dd5c:	20800317 	ldw	r2,12(r4)
    dd60:	10800037 	ldwio	r2,0(r2)
    dd64:	1080040c 	andi	r2,r2,16
    dd68:	10000226 	beq	r2,zero,dd74 <alt_avalon_sgdma_do_async_transfer+0x1c>
    dd6c:	00bffc04 	movi	r2,-16
    dd70:	f800283a 	ret
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    dd74:	01c00404 	movi	r7,16
    dd78:	20c00317 	ldw	r3,12(r4)
    dd7c:	19c7883a 	add	r3,r3,r7
    dd80:	18800037 	ldwio	r2,0(r3)
    dd84:	013ff7c4 	movi	r4,-33
    dd88:	1104703a 	and	r2,r2,r4
    dd8c:	18800035 	stwio	r2,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    dd90:	30c00317 	ldw	r3,12(r6)
    dd94:	00803fc4 	movi	r2,255
    dd98:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
    dd9c:	30800317 	ldw	r2,12(r6)
    dda0:	11400835 	stwio	r5,32(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
    dda4:	30800917 	ldw	r2,36(r6)
    dda8:	10000926 	beq	r2,zero,ddd0 <alt_avalon_sgdma_do_async_transfer+0x78>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    ddac:	31000317 	ldw	r4,12(r6)
    ddb0:	21c9883a 	add	r4,r4,r7
    ddb4:	20c00037 	ldwio	r3,0(r4)

    control |= (dev->chain_control                          |
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    ddb8:	30800b17 	ldw	r2,44(r6)
    ddbc:	10801814 	ori	r2,r2,96
    ddc0:	1886b03a 	or	r3,r3,r2
    ddc4:	20c00035 	stwio	r3,0(r4)
    ddc8:	0005883a 	mov	r2,zero
    ddcc:	f800283a 	ret
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    ddd0:	30800317 	ldw	r2,12(r6)
    ddd4:	10800404 	addi	r2,r2,16
    ddd8:	10c00037 	ldwio	r3,0(r2)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
    dddc:	18c01814 	ori	r3,r3,96
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    dde0:	013ffbc4 	movi	r4,-17
    dde4:	1906703a 	and	r3,r3,r4
    dde8:	10c00035 	stwio	r3,0(r2)
    ddec:	0005883a 	mov	r2,zero
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
    ddf0:	f800283a 	ret

0000ddf4 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
    ddf4:	defffe04 	addi	sp,sp,-8
    ddf8:	dfc00115 	stw	ra,4(sp)
    ddfc:	dc000015 	stw	r16,0(sp)
    de00:	200b883a 	mov	r5,r4
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
    de04:	01000404 	movi	r4,16
    de08:	28c00317 	ldw	r3,12(r5)
    de0c:	1907883a 	add	r3,r3,r4
    de10:	18800037 	ldwio	r2,0(r3)
    de14:	10a00034 	orhi	r2,r2,32768
    de18:	18800035 	stwio	r2,0(r3)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    de1c:	28800317 	ldw	r2,12(r5)
    de20:	1105883a 	add	r2,r2,r4
    de24:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
    de28:	28c00917 	ldw	r3,36(r5)
    de2c:	18000726 	beq	r3,zero,de4c <alt_avalon_sgdma_irq+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    de30:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    de34:	00bfff84 	movi	r2,-2
    de38:	8084703a 	and	r2,r16,r2
    de3c:	1001703a 	wrctl	status,r2
    cpu_sr = alt_irq_disable_all();
    (dev->callback)(dev->callback_context);
    de40:	29000a17 	ldw	r4,40(r5)
    de44:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    de48:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
    de4c:	dfc00117 	ldw	ra,4(sp)
    de50:	dc000017 	ldw	r16,0(sp)
    de54:	dec00204 	addi	sp,sp,8
    de58:	f800283a 	ret

0000de5c <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
    de5c:	deffff04 	addi	sp,sp,-4
    de60:	dfc00015 	stw	ra,0(sp)
    de64:	da000703 	ldbu	r8,28(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    de68:	288007c3 	ldbu	r2,31(r5)
    de6c:	10801fcc 	andi	r2,r2,127
    de70:	288007e5 	stbio	r2,31(r5)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
    de74:	21800005 	stb	r6,0(r4)
    de78:	3004d23a 	srli	r2,r6,8
    de7c:	20800045 	stb	r2,1(r4)
    de80:	3004d43a 	srli	r2,r6,16
    de84:	20800085 	stb	r2,2(r4)
    de88:	300cd63a 	srli	r6,r6,24
    de8c:	218000c5 	stb	r6,3(r4)
  desc->write_addr               = write_addr;
    de90:	21c00205 	stb	r7,8(r4)
    de94:	3804d23a 	srli	r2,r7,8
    de98:	20800245 	stb	r2,9(r4)
    de9c:	3804d43a 	srli	r2,r7,16
    dea0:	20800285 	stb	r2,10(r4)
    dea4:	380ed63a 	srli	r7,r7,24
    dea8:	21c002c5 	stb	r7,11(r4)
  desc->next                     = (alt_u32 *) next;
    deac:	21400405 	stb	r5,16(r4)
    deb0:	2804d23a 	srli	r2,r5,8
    deb4:	20800445 	stb	r2,17(r4)
    deb8:	2804d43a 	srli	r2,r5,16
    debc:	20800485 	stb	r2,18(r4)
    dec0:	280ad63a 	srli	r5,r5,24
    dec4:	214004c5 	stb	r5,19(r4)
  desc->read_addr_pad            = 0x0;
    dec8:	20000105 	stb	zero,4(r4)
    decc:	20000145 	stb	zero,5(r4)
    ded0:	20000185 	stb	zero,6(r4)
    ded4:	200001c5 	stb	zero,7(r4)
  desc->write_addr_pad           = 0x0;
    ded8:	20000305 	stb	zero,12(r4)
    dedc:	20000345 	stb	zero,13(r4)
    dee0:	20000385 	stb	zero,14(r4)
    dee4:	200003c5 	stb	zero,15(r4)
  desc->next_pad                 = 0x0;
    dee8:	20000505 	stb	zero,20(r4)
    deec:	20000545 	stb	zero,21(r4)
    def0:	20000585 	stb	zero,22(r4)
    def4:	200005c5 	stb	zero,23(r4)
  desc->bytes_to_transfer        = length_or_eop;
    def8:	d880010b 	ldhu	r2,4(sp)
    defc:	20800605 	stb	r2,24(r4)
    df00:	1004d23a 	srli	r2,r2,8
    df04:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
    df08:	20000705 	stb	zero,28(r4)
    df0c:	20000745 	stb	zero,29(r4)
  desc->status                   = 0x0;
    df10:	20000785 	stb	zero,30(r4)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
    df14:	d8800517 	ldw	r2,20(sp)
    df18:	20800685 	stb	r2,26(r4)
  desc->write_burst              = write_burst;
    df1c:	d8800617 	ldw	r2,24(sp)
    df20:	208006c5 	stb	r2,27(r4)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
    df24:	d8800217 	ldw	r2,8(sp)
    df28:	1005003a 	cmpeq	r2,r2,zero
    df2c:	00ffe044 	movi	r3,-127
    df30:	188fc83a 	sub	r7,r3,r2
    df34:	d8800317 	ldw	r2,12(sp)
    df38:	1004c03a 	cmpne	r2,r2,zero
    df3c:	108d883a 	add	r6,r2,r2
    df40:	d8800417 	ldw	r2,16(sp)
    df44:	1004c03a 	cmpne	r2,r2,zero
    df48:	100a90ba 	slli	r5,r2,2
    df4c:	40803fcc 	andi	r2,r8,255
    df50:	1000021e 	bne	r2,zero,df5c <alt_avalon_sgdma_construct_descriptor_burst+0x100>
    df54:	0007883a 	mov	r3,zero
    df58:	00000206 	br	df64 <alt_avalon_sgdma_construct_descriptor_burst+0x108>
    df5c:	408003cc 	andi	r2,r8,15
    df60:	100690fa 	slli	r3,r2,3
    df64:	3144b03a 	or	r2,r6,r5
    df68:	38c6b03a 	or	r3,r7,r3
    df6c:	10c4b03a 	or	r2,r2,r3
    df70:	208007c5 	stb	r2,31(r4)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
    df74:	01400804 	movi	r5,32
    df78:	000f2300 	call	f230 <alt_remap_uncached>
}
    df7c:	dfc00017 	ldw	ra,0(sp)
    df80:	dec00104 	addi	sp,sp,4
    df84:	f800283a 	ret

0000df88 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
    df88:	defff804 	addi	sp,sp,-32
    df8c:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
    df90:	d880080b 	ldhu	r2,32(sp)
    df94:	d8800015 	stw	r2,0(sp)
    df98:	d8800917 	ldw	r2,36(sp)
    df9c:	d8800115 	stw	r2,4(sp)
    dfa0:	d8800a17 	ldw	r2,40(sp)
    dfa4:	d8800215 	stw	r2,8(sp)
    dfa8:	d8800b17 	ldw	r2,44(sp)
    dfac:	d8800315 	stw	r2,12(sp)
    dfb0:	d8000415 	stw	zero,16(sp)
    dfb4:	d8000515 	stw	zero,20(sp)
    dfb8:	d8800c03 	ldbu	r2,48(sp)
    dfbc:	d8800615 	stw	r2,24(sp)
    dfc0:	000de5c0 	call	de5c <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
    dfc4:	dfc00717 	ldw	ra,28(sp)
    dfc8:	dec00804 	addi	sp,sp,32
    dfcc:	f800283a 	ret

0000dfd0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
    dfd0:	defff804 	addi	sp,sp,-32
    dfd4:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
    dfd8:	39ffffcc 	andi	r7,r7,65535
    dfdc:	d9c00015 	stw	r7,0(sp)
    dfe0:	d8800a17 	ldw	r2,40(sp)
    dfe4:	d8800115 	stw	r2,4(sp)
    dfe8:	d8800817 	ldw	r2,32(sp)
    dfec:	d8800215 	stw	r2,8(sp)
    dff0:	d8800917 	ldw	r2,36(sp)
    dff4:	d8800315 	stw	r2,12(sp)
    dff8:	d8800b17 	ldw	r2,44(sp)
    dffc:	d8800415 	stw	r2,16(sp)
    e000:	d8000515 	stw	zero,20(sp)
    e004:	d8800c03 	ldbu	r2,48(sp)
    e008:	d8800615 	stw	r2,24(sp)
    e00c:	000f883a 	mov	r7,zero
    e010:	000de5c0 	call	de5c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
    e014:	dfc00717 	ldw	ra,28(sp)
    e018:	dec00804 	addi	sp,sp,32
    e01c:	f800283a 	ret

0000e020 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
    e020:	defffa04 	addi	sp,sp,-24
    e024:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
    e028:	d8800617 	ldw	r2,24(sp)
    e02c:	d8800015 	stw	r2,0(sp)
    e030:	d8800717 	ldw	r2,28(sp)
    e034:	d8800115 	stw	r2,4(sp)
    e038:	d8800817 	ldw	r2,32(sp)
    e03c:	d8800215 	stw	r2,8(sp)
    e040:	d8000315 	stw	zero,12(sp)
    e044:	d8800903 	ldbu	r2,36(sp)
    e048:	d8800415 	stw	r2,16(sp)
    e04c:	39ffffcc 	andi	r7,r7,65535
    e050:	000dfd00 	call	dfd0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
    e054:	dfc00517 	ldw	ra,20(sp)
    e058:	dec00604 	addi	sp,sp,24
    e05c:	f800283a 	ret

0000e060 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
    e060:	defff804 	addi	sp,sp,-32
    e064:	dfc00715 	stw	ra,28(sp)
    e068:	3007883a 	mov	r3,r6
  alt_avalon_sgdma_construct_descriptor_burst(
    e06c:	39ffffcc 	andi	r7,r7,65535
    e070:	d9c00015 	stw	r7,0(sp)
    e074:	d8000115 	stw	zero,4(sp)
    e078:	d8000215 	stw	zero,8(sp)
    e07c:	d8800817 	ldw	r2,32(sp)
    e080:	d8800315 	stw	r2,12(sp)
    e084:	d8000415 	stw	zero,16(sp)
    e088:	d8800917 	ldw	r2,36(sp)
    e08c:	d8800515 	stw	r2,20(sp)
    e090:	d8000615 	stw	zero,24(sp)
    e094:	000d883a 	mov	r6,zero
    e098:	180f883a 	mov	r7,r3
    e09c:	000de5c0 	call	de5c <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
    e0a0:	dfc00717 	ldw	ra,28(sp)
    e0a4:	dec00804 	addi	sp,sp,32
    e0a8:	f800283a 	ret

0000e0ac <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
    e0ac:	defffd04 	addi	sp,sp,-12
    e0b0:	dfc00215 	stw	ra,8(sp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
    e0b4:	d8800317 	ldw	r2,12(sp)
    e0b8:	d8800015 	stw	r2,0(sp)
    e0bc:	d8000115 	stw	zero,4(sp)
    e0c0:	39ffffcc 	andi	r7,r7,65535
    e0c4:	000e0600 	call	e060 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
    e0c8:	dfc00217 	ldw	ra,8(sp)
    e0cc:	dec00304 	addi	sp,sp,12
    e0d0:	f800283a 	ret

0000e0d4 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
    e0d4:	defff804 	addi	sp,sp,-32
    e0d8:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
    e0dc:	d880080b 	ldhu	r2,32(sp)
    e0e0:	d8800015 	stw	r2,0(sp)
    e0e4:	d8000115 	stw	zero,4(sp)
    e0e8:	d8800917 	ldw	r2,36(sp)
    e0ec:	d8800215 	stw	r2,8(sp)
    e0f0:	d8800a17 	ldw	r2,40(sp)
    e0f4:	d8800315 	stw	r2,12(sp)
    e0f8:	d8800b17 	ldw	r2,44(sp)
    e0fc:	d8800415 	stw	r2,16(sp)
    e100:	d8800c17 	ldw	r2,48(sp)
    e104:	d8800515 	stw	r2,20(sp)
    e108:	d8000615 	stw	zero,24(sp)
    e10c:	000de5c0 	call	de5c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
    e110:	dfc00717 	ldw	ra,28(sp)
    e114:	dec00804 	addi	sp,sp,32
    e118:	f800283a 	ret

0000e11c <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
    e11c:	defffa04 	addi	sp,sp,-24
    e120:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
    e124:	d880060b 	ldhu	r2,24(sp)
    e128:	d8800015 	stw	r2,0(sp)
    e12c:	d8800717 	ldw	r2,28(sp)
    e130:	d8800115 	stw	r2,4(sp)
    e134:	d8800817 	ldw	r2,32(sp)
    e138:	d8800215 	stw	r2,8(sp)
    e13c:	d8000315 	stw	zero,12(sp)
    e140:	d8000415 	stw	zero,16(sp)
    e144:	000e0d40 	call	e0d4 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
    e148:	dfc00517 	ldw	ra,20(sp)
    e14c:	dec00604 	addi	sp,sp,24
    e150:	f800283a 	ret

0000e154 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
    e154:	defffe04 	addi	sp,sp,-8
    e158:	dfc00115 	stw	ra,4(sp)
    e15c:	dc000015 	stw	r16,0(sp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
    e160:	d1602804 	addi	r5,gp,-32608
    e164:	000ef280 	call	ef28 <alt_find_dev>
    e168:	1021883a 	mov	r16,r2

  if (NULL == dev) {
    e16c:	10000b1e 	bne	r2,zero,e19c <alt_avalon_sgdma_open+0x48>
    e170:	008000b4 	movhi	r2,2
    e174:	10a6f004 	addi	r2,r2,-25664
    e178:	10800017 	ldw	r2,0(r2)
    e17c:	1000031e 	bne	r2,zero,e18c <alt_avalon_sgdma_open+0x38>
    e180:	00c000b4 	movhi	r3,2
    e184:	18cecd04 	addi	r3,r3,15156
    e188:	00000206 	br	e194 <alt_avalon_sgdma_open+0x40>
    e18c:	103ee83a 	callr	r2
    e190:	1007883a 	mov	r3,r2
    ALT_ERRNO = ENODEV;
    e194:	008004c4 	movi	r2,19
    e198:	18800015 	stw	r2,0(r3)
  }

  return dev;
}
    e19c:	8005883a 	mov	r2,r16
    e1a0:	dfc00117 	ldw	ra,4(sp)
    e1a4:	dc000017 	ldw	r16,0(sp)
    e1a8:	dec00204 	addi	sp,sp,8
    e1ac:	f800283a 	ret

0000e1b0 <alt_avalon_sgdma_check_descriptor_status>:
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
    e1b0:	208007a3 	ldbuio	r2,30(r4)
    e1b4:	10801fcc 	andi	r2,r2,127
    e1b8:	10000226 	beq	r2,zero,e1c4 <alt_avalon_sgdma_check_descriptor_status+0x14>
    e1bc:	00bffec4 	movi	r2,-5
    e1c0:	f800283a 	ret
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
    e1c4:	208007e3 	ldbuio	r2,31(r4)
    e1c8:	1080200c 	andi	r2,r2,128
    e1cc:	10000226 	beq	r2,zero,e1d8 <alt_avalon_sgdma_check_descriptor_status+0x28>
    e1d0:	00bfe244 	movi	r2,-119
    e1d4:	f800283a 	ret
    e1d8:	0005883a 	mov	r2,zero
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
  }

    return 0;
}
    e1dc:	f800283a 	ret

0000e1e0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e1e0:	deffff04 	addi	sp,sp,-4
    e1e4:	dfc00015 	stw	ra,0(sp)
    e1e8:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e1ec:	00c000b4 	movhi	r3,2
    e1f0:	18ced504 	addi	r3,r3,15188
    e1f4:	18800017 	ldw	r2,0(r3)
    e1f8:	1000011e 	bne	r2,zero,e200 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    e1fc:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e200:	008001c4 	movi	r2,7
    e204:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    e208:	3009883a 	mov	r4,r6
    e20c:	01800074 	movhi	r6,1
    e210:	31b88904 	addi	r6,r6,-7644
    e214:	000cd440 	call	cd44 <alt_irq_register>
#endif  
}
    e218:	dfc00017 	ldw	ra,0(sp)
    e21c:	dec00104 	addi	sp,sp,4
    e220:	f800283a 	ret

0000e224 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e224:	defffe04 	addi	sp,sp,-8
    e228:	dfc00115 	stw	ra,4(sp)
    e22c:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e230:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e234:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e238:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e23c:	00bfff84 	movi	r2,-2
    e240:	8084703a 	and	r2,r16,r2
    e244:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    e248:	000f28c0 	call	f28c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e24c:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    e250:	dfc00117 	ldw	ra,4(sp)
    e254:	dc000017 	ldw	r16,0(sp)
    e258:	dec00204 	addi	sp,sp,8
    e25c:	f800283a 	ret

0000e260 <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    e260:	2800021e 	bne	r5,zero,e26c <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
    e264:	2005883a 	mov	r2,r4
    e268:	00000106 	br	e270 <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    e26c:	20801014 	ori	r2,r4,64
    e270:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    e274:	10802014 	ori	r2,r2,128
    e278:	f800283a 	ret

0000e27c <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    e27c:	28c00003 	ldbu	r3,0(r5)
    e280:	18803fcc 	andi	r2,r3,255
    e284:	1080201c 	xori	r2,r2,128
    e288:	10bfe004 	addi	r2,r2,-128
    e28c:	10000d26 	beq	r2,zero,e2c4 <alt_up_character_lcd_string+0x48>
    e290:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    e294:	20800a17 	ldw	r2,40(r4)
    e298:	1185883a 	add	r2,r2,r6
    e29c:	18c03fcc 	andi	r3,r3,255
    e2a0:	18c0201c 	xori	r3,r3,128
    e2a4:	18ffe004 	addi	r3,r3,-128
    e2a8:	10c00025 	stbio	r3,0(r2)
		++ptr;
    e2ac:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    e2b0:	28c00003 	ldbu	r3,0(r5)
    e2b4:	18803fcc 	andi	r2,r3,255
    e2b8:	1080201c 	xori	r2,r2,128
    e2bc:	10bfe004 	addi	r2,r2,-128
    e2c0:	103ff41e 	bne	r2,zero,e294 <alt_up_character_lcd_string+0x18>
    e2c4:	f800283a 	ret

0000e2c8 <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    e2c8:	30000926 	beq	r6,zero,e2f0 <alt_up_character_lcd_write+0x28>
    e2cc:	000f883a 	mov	r7,zero
    e2d0:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    e2d4:	20800a17 	ldw	r2,40(r4)
    e2d8:	1205883a 	add	r2,r2,r8
    e2dc:	3947883a 	add	r3,r7,r5
    e2e0:	18c00007 	ldb	r3,0(r3)
    e2e4:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    e2e8:	3a0f883a 	add	r7,r7,r8
    e2ec:	31fff91e 	bne	r6,r7,e2d4 <alt_up_character_lcd_write+0xc>
    e2f0:	f800283a 	ret

0000e2f4 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    e2f4:	deffff04 	addi	sp,sp,-4
    e2f8:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    e2fc:	21000017 	ldw	r4,0(r4)
    e300:	000e2c80 	call	e2c8 <alt_up_character_lcd_write>
	return 0;
}
    e304:	0005883a 	mov	r2,zero
    e308:	dfc00017 	ldw	ra,0(sp)
    e30c:	dec00104 	addi	sp,sp,4
    e310:	f800283a 	ret

0000e314 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    e314:	20c00a17 	ldw	r3,40(r4)
    e318:	00800044 	movi	r2,1
    e31c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    e320:	f800283a 	ret

0000e324 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    e324:	20800a17 	ldw	r2,40(r4)
    e328:	29403fcc 	andi	r5,r5,255
    e32c:	11400025 	stbio	r5,0(r2)
}
    e330:	f800283a 	ret

0000e334 <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    e334:	deffff04 	addi	sp,sp,-4
    e338:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    e33c:	014003c4 	movi	r5,15
    e340:	000e3240 	call	e324 <alt_up_character_lcd_send_cmd>
}
    e344:	dfc00017 	ldw	ra,0(sp)
    e348:	dec00104 	addi	sp,sp,4
    e34c:	f800283a 	ret

0000e350 <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    e350:	deffff04 	addi	sp,sp,-4
    e354:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    e358:	01400304 	movi	r5,12
    e35c:	000e3240 	call	e324 <alt_up_character_lcd_send_cmd>
}
    e360:	dfc00017 	ldw	ra,0(sp)
    e364:	dec00104 	addi	sp,sp,4
    e368:	f800283a 	ret

0000e36c <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    e36c:	defffd04 	addi	sp,sp,-12
    e370:	dfc00215 	stw	ra,8(sp)
    e374:	dc400115 	stw	r17,4(sp)
    e378:	dc000015 	stw	r16,0(sp)
    e37c:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    e380:	008009c4 	movi	r2,39
    e384:	11400e36 	bltu	r2,r5,e3c0 <alt_up_character_lcd_erase_pos+0x54>
    e388:	04400044 	movi	r17,1
    e38c:	89800c36 	bltu	r17,r6,e3c0 <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    e390:	2809883a 	mov	r4,r5
    e394:	300b883a 	mov	r5,r6
    e398:	000e2600 	call	e260 <get_DDRAM_addr>
    e39c:	8009883a 	mov	r4,r16
    e3a0:	11403fcc 	andi	r5,r2,255
    e3a4:	000e3240 	call	e324 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    e3a8:	80800a17 	ldw	r2,40(r16)
    e3ac:	1445883a 	add	r2,r2,r17
    e3b0:	00c00084 	movi	r3,2
    e3b4:	10c00025 	stbio	r3,0(r2)
    e3b8:	0005883a 	mov	r2,zero
    e3bc:	00000106 	br	e3c4 <alt_up_character_lcd_erase_pos+0x58>
	return 0;
    e3c0:	00bfffc4 	movi	r2,-1
}
    e3c4:	dfc00217 	ldw	ra,8(sp)
    e3c8:	dc400117 	ldw	r17,4(sp)
    e3cc:	dc000017 	ldw	r16,0(sp)
    e3d0:	dec00304 	addi	sp,sp,12
    e3d4:	f800283a 	ret

0000e3d8 <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    e3d8:	defffa04 	addi	sp,sp,-24
    e3dc:	dfc00515 	stw	ra,20(sp)
    e3e0:	dd000415 	stw	r20,16(sp)
    e3e4:	dcc00315 	stw	r19,12(sp)
    e3e8:	dc800215 	stw	r18,8(sp)
    e3ec:	dc400115 	stw	r17,4(sp)
    e3f0:	dc000015 	stw	r16,0(sp)
    e3f4:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    e3f8:	28001326 	beq	r5,zero,e448 <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    e3fc:	0140020e 	bge	zero,r5,e408 <alt_up_character_lcd_shift_display+0x30>
    e400:	05000704 	movi	r20,28
    e404:	00000106 	br	e40c <alt_up_character_lcd_shift_display+0x34>
    e408:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    e40c:	2800010e 	bge	r5,zero,e414 <alt_up_character_lcd_shift_display+0x3c>
    e410:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    e414:	00bfffc4 	movi	r2,-1
    e418:	28a1883a 	add	r16,r5,r2
    e41c:	80c03fcc 	andi	r3,r16,255
    e420:	10803fcc 	andi	r2,r2,255
    e424:	18800826 	beq	r3,r2,e448 <alt_up_character_lcd_shift_display+0x70>
    e428:	04bfffc4 	movi	r18,-1
    e42c:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    e430:	9809883a 	mov	r4,r19
    e434:	a1403fcc 	andi	r5,r20,255
    e438:	000e3240 	call	e324 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e43c:	84a1883a 	add	r16,r16,r18
    e440:	80803fcc 	andi	r2,r16,255
    e444:	147ffa1e 	bne	r2,r17,e430 <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    e448:	dfc00517 	ldw	ra,20(sp)
    e44c:	dd000417 	ldw	r20,16(sp)
    e450:	dcc00317 	ldw	r19,12(sp)
    e454:	dc800217 	ldw	r18,8(sp)
    e458:	dc400117 	ldw	r17,4(sp)
    e45c:	dc000017 	ldw	r16,0(sp)
    e460:	dec00604 	addi	sp,sp,24
    e464:	f800283a 	ret

0000e468 <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    e468:	defffa04 	addi	sp,sp,-24
    e46c:	dfc00515 	stw	ra,20(sp)
    e470:	dd000415 	stw	r20,16(sp)
    e474:	dcc00315 	stw	r19,12(sp)
    e478:	dc800215 	stw	r18,8(sp)
    e47c:	dc400115 	stw	r17,4(sp)
    e480:	dc000015 	stw	r16,0(sp)
    e484:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    e488:	28001326 	beq	r5,zero,e4d8 <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    e48c:	0140020e 	bge	zero,r5,e498 <alt_up_character_lcd_shift_cursor+0x30>
    e490:	05000504 	movi	r20,20
    e494:	00000106 	br	e49c <alt_up_character_lcd_shift_cursor+0x34>
    e498:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    e49c:	2800010e 	bge	r5,zero,e4a4 <alt_up_character_lcd_shift_cursor+0x3c>
    e4a0:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    e4a4:	00bfffc4 	movi	r2,-1
    e4a8:	28a1883a 	add	r16,r5,r2
    e4ac:	80c03fcc 	andi	r3,r16,255
    e4b0:	10803fcc 	andi	r2,r2,255
    e4b4:	18800826 	beq	r3,r2,e4d8 <alt_up_character_lcd_shift_cursor+0x70>
    e4b8:	04bfffc4 	movi	r18,-1
    e4bc:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    e4c0:	9809883a 	mov	r4,r19
    e4c4:	a1403fcc 	andi	r5,r20,255
    e4c8:	000e3240 	call	e324 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e4cc:	84a1883a 	add	r16,r16,r18
    e4d0:	80803fcc 	andi	r2,r16,255
    e4d4:	147ffa1e 	bne	r2,r17,e4c0 <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    e4d8:	dfc00517 	ldw	ra,20(sp)
    e4dc:	dd000417 	ldw	r20,16(sp)
    e4e0:	dcc00317 	ldw	r19,12(sp)
    e4e4:	dc800217 	ldw	r18,8(sp)
    e4e8:	dc400117 	ldw	r17,4(sp)
    e4ec:	dc000017 	ldw	r16,0(sp)
    e4f0:	dec00604 	addi	sp,sp,24
    e4f4:	f800283a 	ret

0000e4f8 <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    e4f8:	defffe04 	addi	sp,sp,-8
    e4fc:	dfc00115 	stw	ra,4(sp)
    e500:	dc000015 	stw	r16,0(sp)
    e504:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    e508:	008009c4 	movi	r2,39
    e50c:	11400a36 	bltu	r2,r5,e538 <alt_up_character_lcd_set_cursor_pos+0x40>
    e510:	00800044 	movi	r2,1
    e514:	11800836 	bltu	r2,r6,e538 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    e518:	2809883a 	mov	r4,r5
    e51c:	300b883a 	mov	r5,r6
    e520:	000e2600 	call	e260 <get_DDRAM_addr>
    e524:	8009883a 	mov	r4,r16
    e528:	11403fcc 	andi	r5,r2,255
    e52c:	000e3240 	call	e324 <alt_up_character_lcd_send_cmd>
    e530:	0005883a 	mov	r2,zero
    e534:	00000106 	br	e53c <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    e538:	00bfffc4 	movi	r2,-1
}
    e53c:	dfc00117 	ldw	ra,4(sp)
    e540:	dc000017 	ldw	r16,0(sp)
    e544:	dec00204 	addi	sp,sp,8
    e548:	f800283a 	ret

0000e54c <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    e54c:	deffff04 	addi	sp,sp,-4
    e550:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    e554:	014000b4 	movhi	r5,2
    e558:	2966ed04 	addi	r5,r5,-25676
    e55c:	000ef280 	call	ef28 <alt_find_dev>

  return dev;
}
    e560:	dfc00017 	ldw	ra,0(sp)
    e564:	dec00104 	addi	sp,sp,4
    e568:	f800283a 	ret

0000e56c <alt_up_irda_check_parity>:
}

int alt_up_irda_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    e56c:	200495ba 	slli	r2,r4,22
}
    e570:	1005d7fa 	srai	r2,r2,31
    e574:	f800283a 	ret

0000e578 <alt_up_irda_open_dev>:
	}
	return count;
}

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    e578:	deffff04 	addi	sp,sp,-4
    e57c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    e580:	014000b4 	movhi	r5,2
    e584:	2966ed04 	addi	r5,r5,-25676
    e588:	000ef280 	call	ef28 <alt_find_dev>

  return dev;
}
    e58c:	dfc00017 	ldw	ra,0(sp)
    e590:	dec00104 	addi	sp,sp,4
    e594:	f800283a 	ret

0000e598 <alt_up_irda_read_data>:
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
	return 0;
}

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    e598:	defffd04 	addi	sp,sp,-12
    e59c:	dfc00215 	stw	ra,8(sp)
    e5a0:	dc400115 	stw	r17,4(sp)
    e5a4:	dc000015 	stw	r16,0(sp)
    e5a8:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    e5ac:	20800a17 	ldw	r2,40(r4)
    e5b0:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    e5b4:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_irda_check_parity(data_reg);
    e5b8:	8009883a 	mov	r4,r16
    e5bc:	000e56c0 	call	e56c <alt_up_irda_check_parity>
    e5c0:	88800005 	stb	r2,0(r17)
    e5c4:	8420000c 	andi	r16,r16,32768
    e5c8:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
}
    e5cc:	80bfffc4 	addi	r2,r16,-1
    e5d0:	dfc00217 	ldw	ra,8(sp)
    e5d4:	dc400117 	ldw	r17,4(sp)
    e5d8:	dc000017 	ldw	r16,0(sp)
    e5dc:	dec00304 	addi	sp,sp,12
    e5e0:	f800283a 	ret

0000e5e4 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    e5e4:	defff904 	addi	sp,sp,-28
    e5e8:	dfc00615 	stw	ra,24(sp)
    e5ec:	dd000515 	stw	r20,20(sp)
    e5f0:	dcc00415 	stw	r19,16(sp)
    e5f4:	dc800315 	stw	r18,12(sp)
    e5f8:	dc400215 	stw	r17,8(sp)
    e5fc:	dc000115 	stw	r16,4(sp)
    e600:	2821883a 	mov	r16,r5
    e604:	3029883a 	mov	r20,r6
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    e608:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    e60c:	3000021e 	bne	r6,zero,e618 <alt_up_irda_read_fd+0x34>
    e610:	0025883a 	mov	r18,zero
    e614:	00000a06 	br	e640 <alt_up_irda_read_fd+0x5c>
    e618:	0025883a 	mov	r18,zero
    e61c:	04400044 	movi	r17,1
    e620:	800b883a 	mov	r5,r16
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    e624:	8461883a 	add	r16,r16,r17
    e628:	9809883a 	mov	r4,r19
    e62c:	d80d883a 	mov	r6,sp
    e630:	000e5980 	call	e598 <alt_up_irda_read_data>
    e634:	1000021e 	bne	r2,zero,e640 <alt_up_irda_read_fd+0x5c>
			count++;
    e638:	9465883a 	add	r18,r18,r17
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    e63c:	a4bff81e 	bne	r20,r18,e620 <alt_up_irda_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    e640:	9005883a 	mov	r2,r18
    e644:	dfc00617 	ldw	ra,24(sp)
    e648:	dd000517 	ldw	r20,20(sp)
    e64c:	dcc00417 	ldw	r19,16(sp)
    e650:	dc800317 	ldw	r18,12(sp)
    e654:	dc400217 	ldw	r17,8(sp)
    e658:	dc000117 	ldw	r16,4(sp)
    e65c:	dec00704 	addi	sp,sp,28
    e660:	f800283a 	ret

0000e664 <alt_up_irda_get_available_space_in_write_FIFO>:
}

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e664:	20800a17 	ldw	r2,40(r4)
    e668:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
}
    e66c:	1004d43a 	srli	r2,r2,16
    e670:	f800283a 	ret

0000e674 <alt_up_irda_write_data>:
}

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    e674:	20800a17 	ldw	r2,40(r4)
    e678:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    e67c:	29403fcc 	andi	r5,r5,255
    e680:	11400035 	stwio	r5,0(r2)
	return 0;
}
    e684:	0005883a 	mov	r2,zero
    e688:	f800283a 	ret

0000e68c <alt_up_irda_write_fd>:
	}
	return count;
}

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e68c:	defffa04 	addi	sp,sp,-24
    e690:	dfc00515 	stw	ra,20(sp)
    e694:	dd000415 	stw	r20,16(sp)
    e698:	dcc00315 	stw	r19,12(sp)
    e69c:	dc800215 	stw	r18,8(sp)
    e6a0:	dc400115 	stw	r17,4(sp)
    e6a4:	dc000015 	stw	r16,0(sp)
    e6a8:	3029883a 	mov	r20,r6
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    e6ac:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	while(len--)
    e6b0:	3000021e 	bne	r6,zero,e6bc <alt_up_irda_write_fd+0x30>
    e6b4:	0025883a 	mov	r18,zero
    e6b8:	00000a06 	br	e6e4 <alt_up_irda_write_fd+0x58>
    e6bc:	2821883a 	mov	r16,r5
    e6c0:	0025883a 	mov	r18,zero
    e6c4:	04400044 	movi	r17,1
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    e6c8:	9809883a 	mov	r4,r19
    e6cc:	81403fcc 	andi	r5,r16,255
    e6d0:	000e6740 	call	e674 <alt_up_irda_write_data>
    e6d4:	1000031e 	bne	r2,zero,e6e4 <alt_up_irda_write_fd+0x58>
			count++;
    e6d8:	9465883a 	add	r18,r18,r17
    e6dc:	8c21883a 	add	r16,r17,r16

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    e6e0:	a4bff91e 	bne	r20,r18,e6c8 <alt_up_irda_write_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    e6e4:	9005883a 	mov	r2,r18
    e6e8:	dfc00517 	ldw	ra,20(sp)
    e6ec:	dd000417 	ldw	r20,16(sp)
    e6f0:	dcc00317 	ldw	r19,12(sp)
    e6f4:	dc800217 	ldw	r18,8(sp)
    e6f8:	dc400117 	ldw	r17,4(sp)
    e6fc:	dc000017 	ldw	r16,0(sp)
    e700:	dec00604 	addi	sp,sp,24
    e704:	f800283a 	ret

0000e708 <alt_up_irda_disable_read_interrupt>:
}

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e708:	20800a17 	ldw	r2,40(r4)
    e70c:	10800104 	addi	r2,r2,4
    e710:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    e714:	013fff84 	movi	r4,-2
    e718:	1906703a 	and	r3,r3,r4
    e71c:	10c00035 	stwio	r3,0(r2)
}
    e720:	f800283a 	ret

0000e724 <alt_up_irda_enable_read_interrupt>:


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e724:	20c00a17 	ldw	r3,40(r4)
    e728:	18c00104 	addi	r3,r3,4
    e72c:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    e730:	10800054 	ori	r2,r2,1
    e734:	18800035 	stwio	r2,0(r3)
}
    e738:	f800283a 	ret

0000e73c <alt_up_irda_get_used_space_in_read_FIFO>:
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    e73c:	20800a17 	ldw	r2,40(r4)
    e740:	108000ab 	ldhuio	r2,2(r2)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
}
    e744:	10bfffcc 	andi	r2,r2,65535
    e748:	f800283a 	ret

0000e74c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    e74c:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    e750:	1004c03a 	cmpne	r2,r2,zero
    e754:	f800283a 	ret

0000e758 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    e758:	2080004c 	andi	r2,r4,1
    e75c:	f800283a 	ret

0000e760 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    e760:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    e764:	1004c03a 	cmpne	r2,r2,zero
    e768:	f800283a 	ret

0000e76c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    e76c:	2004d43a 	srli	r2,r4,16
    e770:	f800283a 	ret

0000e774 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    e774:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    e778:	1004c03a 	cmpne	r2,r2,zero
    e77c:	f800283a 	ret

0000e780 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    e780:	20803fcc 	andi	r2,r4,255
    e784:	f800283a 	ret

0000e788 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    e788:	deffff04 	addi	sp,sp,-4
    e78c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    e790:	014000b4 	movhi	r5,2
    e794:	2966ed04 	addi	r5,r5,-25676
    e798:	000ef280 	call	ef28 <alt_find_dev>

  return dev;
}
    e79c:	dfc00017 	ldw	ra,0(sp)
    e7a0:	dec00104 	addi	sp,sp,4
    e7a4:	f800283a 	ret

0000e7a8 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    e7a8:	defffe04 	addi	sp,sp,-8
    e7ac:	dfc00115 	stw	ra,4(sp)
    e7b0:	dc000015 	stw	r16,0(sp)
    e7b4:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    e7b8:	81000037 	ldwio	r4,0(r16)
    e7bc:	000e76c0 	call	e76c <read_num_bytes_available>
    e7c0:	10bfffcc 	andi	r2,r2,65535
    e7c4:	103ffc1e 	bne	r2,zero,e7b8 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    e7c8:	dfc00117 	ldw	ra,4(sp)
    e7cc:	dc000017 	ldw	r16,0(sp)
    e7d0:	dec00204 	addi	sp,sp,8
    e7d4:	f800283a 	ret

0000e7d8 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    e7d8:	defffd04 	addi	sp,sp,-12
    e7dc:	dfc00215 	stw	ra,8(sp)
    e7e0:	dc400115 	stw	r17,4(sp)
    e7e4:	dc000015 	stw	r16,0(sp)
    e7e8:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    e7ec:	20800a17 	ldw	r2,40(r4)
    e7f0:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    e7f4:	8009883a 	mov	r4,r16
    e7f8:	000e7740 	call	e774 <read_data_valid>
    e7fc:	10803fcc 	andi	r2,r2,255
    e800:	1000021e 	bne	r2,zero,e80c <alt_up_ps2_read_data_byte+0x34>
    e804:	00bfffc4 	movi	r2,-1
    e808:	00000406 	br	e81c <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    e80c:	8009883a 	mov	r4,r16
    e810:	000e7800 	call	e780 <read_data_byte>
    e814:	88800005 	stb	r2,0(r17)
    e818:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    e81c:	dfc00217 	ldw	ra,8(sp)
    e820:	dc400117 	ldw	r17,4(sp)
    e824:	dc000017 	ldw	r16,0(sp)
    e828:	dec00304 	addi	sp,sp,12
    e82c:	f800283a 	ret

0000e830 <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    e830:	defffb04 	addi	sp,sp,-20
    e834:	dfc00415 	stw	ra,16(sp)
    e838:	dcc00315 	stw	r19,12(sp)
    e83c:	dc800215 	stw	r18,8(sp)
    e840:	dc400115 	stw	r17,4(sp)
    e844:	dc000015 	stw	r16,0(sp)
    e848:	2025883a 	mov	r18,r4
    e84c:	2827883a 	mov	r19,r5
    e850:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    e854:	90800a17 	ldw	r2,40(r18)
    e858:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    e85c:	8009883a 	mov	r4,r16
    e860:	000e7740 	call	e774 <read_data_valid>
    e864:	10803fcc 	andi	r2,r2,255
    e868:	10000526 	beq	r2,zero,e880 <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    e86c:	8009883a 	mov	r4,r16
    e870:	000e7800 	call	e780 <read_data_byte>
    e874:	98800005 	stb	r2,0(r19)
    e878:	0005883a 	mov	r2,zero
    e87c:	00000506 	br	e894 <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    e880:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    e884:	90800c17 	ldw	r2,48(r18)
    e888:	103ff226 	beq	r2,zero,e854 <alt_up_ps2_read_data_byte_timeout+0x24>
    e88c:	147ff12e 	bgeu	r2,r17,e854 <alt_up_ps2_read_data_byte_timeout+0x24>
    e890:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    e894:	dfc00417 	ldw	ra,16(sp)
    e898:	dcc00317 	ldw	r19,12(sp)
    e89c:	dc800217 	ldw	r18,8(sp)
    e8a0:	dc400117 	ldw	r17,4(sp)
    e8a4:	dc000017 	ldw	r16,0(sp)
    e8a8:	dec00504 	addi	sp,sp,20
    e8ac:	f800283a 	ret

0000e8b0 <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    e8b0:	deffff04 	addi	sp,sp,-4
    e8b4:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    e8b8:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    e8bc:	0180010e 	bge	zero,r6,e8c4 <alt_up_ps2_read_fd+0x14>
    e8c0:	003fff06 	br	e8c0 <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    e8c4:	000e8300 	call	e830 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    e8c8:	1005003a 	cmpeq	r2,r2,zero
    e8cc:	dfc00017 	ldw	ra,0(sp)
    e8d0:	dec00104 	addi	sp,sp,4
    e8d4:	f800283a 	ret

0000e8d8 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    e8d8:	defffc04 	addi	sp,sp,-16
    e8dc:	dfc00315 	stw	ra,12(sp)
    e8e0:	dc400215 	stw	r17,8(sp)
    e8e4:	dc000115 	stw	r16,4(sp)
    e8e8:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    e8ec:	d8000005 	stb	zero,0(sp)
    e8f0:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    e8f4:	8009883a 	mov	r4,r16
    e8f8:	d80b883a 	mov	r5,sp
    e8fc:	000e8300 	call	e830 <alt_up_ps2_read_data_byte_timeout>
    e900:	1007883a 	mov	r3,r2
		if ( status == 0)
    e904:	10803fcc 	andi	r2,r2,255
    e908:	1000041e 	bne	r2,zero,e91c <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    e90c:	d8800003 	ldbu	r2,0(sp)
    e910:	147ff81e 	bne	r2,r17,e8f4 <alt_up_ps2_wait_for_ack+0x1c>
    e914:	0005883a 	mov	r2,zero
    e918:	00000106 	br	e920 <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    e91c:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    e920:	dfc00317 	ldw	ra,12(sp)
    e924:	dc400217 	ldw	r17,8(sp)
    e928:	dc000117 	ldw	r16,4(sp)
    e92c:	dec00404 	addi	sp,sp,16
    e930:	f800283a 	ret

0000e934 <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    e934:	deffff04 	addi	sp,sp,-4
    e938:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    e93c:	20800a17 	ldw	r2,40(r4)
    e940:	29403fcc 	andi	r5,r5,255
    e944:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    e948:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    e94c:	11000137 	ldwio	r4,4(r2)
    e950:	000e7600 	call	e760 <read_CE_bit>
    e954:	10803fcc 	andi	r2,r2,255
    e958:	10000226 	beq	r2,zero,e964 <alt_up_ps2_write_data_byte+0x30>
    e95c:	00bffec4 	movi	r2,-5
    e960:	00000106 	br	e968 <alt_up_ps2_write_data_byte+0x34>
    e964:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    e968:	dfc00017 	ldw	ra,0(sp)
    e96c:	dec00104 	addi	sp,sp,4
    e970:	f800283a 	ret

0000e974 <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e974:	defffb04 	addi	sp,sp,-20
    e978:	dfc00415 	stw	ra,16(sp)
    e97c:	dcc00315 	stw	r19,12(sp)
    e980:	dc800215 	stw	r18,8(sp)
    e984:	dc400115 	stw	r17,4(sp)
    e988:	dc000015 	stw	r16,0(sp)
    e98c:	2827883a 	mov	r19,r5
    e990:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    e994:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    e998:	01800216 	blt	zero,r6,e9a4 <alt_up_ps2_write_fd+0x30>
    e99c:	0021883a 	mov	r16,zero
    e9a0:	00000806 	br	e9c4 <alt_up_ps2_write_fd+0x50>
    e9a4:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    e9a8:	9c05883a 	add	r2,r19,r16
    e9ac:	8809883a 	mov	r4,r17
    e9b0:	11400003 	ldbu	r5,0(r2)
    e9b4:	000e9340 	call	e934 <alt_up_ps2_write_data_byte>
		if (status!=0)
    e9b8:	1000021e 	bne	r2,zero,e9c4 <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    e9bc:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    e9c0:	943ff91e 	bne	r18,r16,e9a8 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    e9c4:	8005883a 	mov	r2,r16
    e9c8:	dfc00417 	ldw	ra,16(sp)
    e9cc:	dcc00317 	ldw	r19,12(sp)
    e9d0:	dc800217 	ldw	r18,8(sp)
    e9d4:	dc400117 	ldw	r17,4(sp)
    e9d8:	dc000017 	ldw	r16,0(sp)
    e9dc:	dec00504 	addi	sp,sp,20
    e9e0:	f800283a 	ret

0000e9e4 <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    e9e4:	defffe04 	addi	sp,sp,-8
    e9e8:	dfc00115 	stw	ra,4(sp)
    e9ec:	dc000015 	stw	r16,0(sp)
    e9f0:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    e9f4:	29403fcc 	andi	r5,r5,255
    e9f8:	000e9340 	call	e934 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    e9fc:	1000021e 	bne	r2,zero,ea08 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    ea00:	8009883a 	mov	r4,r16
    ea04:	000e8d80 	call	e8d8 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    ea08:	dfc00117 	ldw	ra,4(sp)
    ea0c:	dc000017 	ldw	r16,0(sp)
    ea10:	dec00204 	addi	sp,sp,8
    ea14:	f800283a 	ret

0000ea18 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    ea18:	defffd04 	addi	sp,sp,-12
    ea1c:	dfc00215 	stw	ra,8(sp)
    ea20:	dc000115 	stw	r16,4(sp)
    ea24:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    ea28:	01403fc4 	movi	r5,255
    ea2c:	000e9e40 	call	e9e4 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    ea30:	1000171e 	bne	r2,zero,ea90 <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    ea34:	8009883a 	mov	r4,r16
    ea38:	d80b883a 	mov	r5,sp
    ea3c:	000e8300 	call	e830 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    ea40:	1000131e 	bne	r2,zero,ea90 <alt_up_ps2_init+0x78>
    ea44:	d8c00003 	ldbu	r3,0(sp)
    ea48:	00802a84 	movi	r2,170
    ea4c:	1880101e 	bne	r3,r2,ea90 <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    ea50:	8009883a 	mov	r4,r16
    ea54:	d80b883a 	mov	r5,sp
    ea58:	000e8300 	call	e830 <alt_up_ps2_read_data_byte_timeout>
    ea5c:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    ea60:	00bfe304 	movi	r2,-116
    ea64:	1880031e 	bne	r3,r2,ea74 <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    ea68:	00800044 	movi	r2,1
    ea6c:	80800d15 	stw	r2,52(r16)
    ea70:	00000706 	br	ea90 <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    ea74:	1800061e 	bne	r3,zero,ea90 <alt_up_ps2_init+0x78>
    ea78:	d8800003 	ldbu	r2,0(sp)
    ea7c:	1000041e 	bne	r2,zero,ea90 <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    ea80:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    ea84:	8009883a 	mov	r4,r16
    ea88:	01403d04 	movi	r5,244
    ea8c:	000e9340 	call	e934 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    ea90:	dfc00217 	ldw	ra,8(sp)
    ea94:	dc000117 	ldw	r16,4(sp)
    ea98:	dec00304 	addi	sp,sp,12
    ea9c:	f800283a 	ret

0000eaa0 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    eaa0:	20800a17 	ldw	r2,40(r4)
    eaa4:	10800104 	addi	r2,r2,4
    eaa8:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    eaac:	013fff84 	movi	r4,-2
    eab0:	1906703a 	and	r3,r3,r4
    eab4:	10c00035 	stwio	r3,0(r2)
}
    eab8:	f800283a 	ret

0000eabc <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    eabc:	20c00a17 	ldw	r3,40(r4)
    eac0:	18c00104 	addi	r3,r3,4
    eac4:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    eac8:	10800054 	ori	r2,r2,1
    eacc:	18800035 	stwio	r2,0(r3)
}
    ead0:	f800283a 	ret

0000ead4 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    ead4:	200495ba 	slli	r2,r4,22
}
    ead8:	1005d7fa 	srai	r2,r2,31
    eadc:	f800283a 	ret

0000eae0 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    eae0:	deffff04 	addi	sp,sp,-4
    eae4:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    eae8:	014000b4 	movhi	r5,2
    eaec:	2966ed04 	addi	r5,r5,-25676
    eaf0:	000ef280 	call	ef28 <alt_find_dev>

  return dev;
}
    eaf4:	dfc00017 	ldw	ra,0(sp)
    eaf8:	dec00104 	addi	sp,sp,4
    eafc:	f800283a 	ret

0000eb00 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    eb00:	defffd04 	addi	sp,sp,-12
    eb04:	dfc00215 	stw	ra,8(sp)
    eb08:	dc400115 	stw	r17,4(sp)
    eb0c:	dc000015 	stw	r16,0(sp)
    eb10:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    eb14:	20800a17 	ldw	r2,40(r4)
    eb18:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    eb1c:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    eb20:	8009883a 	mov	r4,r16
    eb24:	000ead40 	call	ead4 <alt_up_rs232_check_parity>
    eb28:	88800005 	stb	r2,0(r17)
    eb2c:	8420000c 	andi	r16,r16,32768
    eb30:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    eb34:	80bfffc4 	addi	r2,r16,-1
    eb38:	dfc00217 	ldw	ra,8(sp)
    eb3c:	dc400117 	ldw	r17,4(sp)
    eb40:	dc000017 	ldw	r16,0(sp)
    eb44:	dec00304 	addi	sp,sp,12
    eb48:	f800283a 	ret

0000eb4c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    eb4c:	defff904 	addi	sp,sp,-28
    eb50:	dfc00615 	stw	ra,24(sp)
    eb54:	dd000515 	stw	r20,20(sp)
    eb58:	dcc00415 	stw	r19,16(sp)
    eb5c:	dc800315 	stw	r18,12(sp)
    eb60:	dc400215 	stw	r17,8(sp)
    eb64:	dc000115 	stw	r16,4(sp)
    eb68:	2821883a 	mov	r16,r5
    eb6c:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    eb70:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    eb74:	3000021e 	bne	r6,zero,eb80 <alt_up_rs232_read_fd+0x34>
    eb78:	0025883a 	mov	r18,zero
    eb7c:	00000a06 	br	eba8 <alt_up_rs232_read_fd+0x5c>
    eb80:	0025883a 	mov	r18,zero
    eb84:	04400044 	movi	r17,1
    eb88:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    eb8c:	8461883a 	add	r16,r16,r17
    eb90:	9809883a 	mov	r4,r19
    eb94:	d80d883a 	mov	r6,sp
    eb98:	000eb000 	call	eb00 <alt_up_rs232_read_data>
    eb9c:	1000021e 	bne	r2,zero,eba8 <alt_up_rs232_read_fd+0x5c>
			count++;
    eba0:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    eba4:	a4bff81e 	bne	r20,r18,eb88 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    eba8:	9005883a 	mov	r2,r18
    ebac:	dfc00617 	ldw	ra,24(sp)
    ebb0:	dd000517 	ldw	r20,20(sp)
    ebb4:	dcc00417 	ldw	r19,16(sp)
    ebb8:	dc800317 	ldw	r18,12(sp)
    ebbc:	dc400217 	ldw	r17,8(sp)
    ebc0:	dc000117 	ldw	r16,4(sp)
    ebc4:	dec00704 	addi	sp,sp,28
    ebc8:	f800283a 	ret

0000ebcc <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ebcc:	20800a17 	ldw	r2,40(r4)
    ebd0:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    ebd4:	1004d43a 	srli	r2,r2,16
    ebd8:	f800283a 	ret

0000ebdc <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    ebdc:	20800a17 	ldw	r2,40(r4)
    ebe0:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    ebe4:	29403fcc 	andi	r5,r5,255
    ebe8:	11400035 	stwio	r5,0(r2)
	return 0;
}
    ebec:	0005883a 	mov	r2,zero
    ebf0:	f800283a 	ret

0000ebf4 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    ebf4:	defffb04 	addi	sp,sp,-20
    ebf8:	dfc00415 	stw	ra,16(sp)
    ebfc:	dcc00315 	stw	r19,12(sp)
    ec00:	dc800215 	stw	r18,8(sp)
    ec04:	dc400115 	stw	r17,4(sp)
    ec08:	dc000015 	stw	r16,0(sp)
    ec0c:	2827883a 	mov	r19,r5
    ec10:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    ec14:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    ec18:	3000021e 	bne	r6,zero,ec24 <alt_up_rs232_write_fd+0x30>
    ec1c:	0021883a 	mov	r16,zero
    ec20:	00000806 	br	ec44 <alt_up_rs232_write_fd+0x50>
    ec24:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    ec28:	84c5883a 	add	r2,r16,r19
    ec2c:	8809883a 	mov	r4,r17
    ec30:	11400003 	ldbu	r5,0(r2)
    ec34:	000ebdc0 	call	ebdc <alt_up_rs232_write_data>
    ec38:	1000021e 	bne	r2,zero,ec44 <alt_up_rs232_write_fd+0x50>
		{
			count++;
    ec3c:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    ec40:	943ff91e 	bne	r18,r16,ec28 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    ec44:	8005883a 	mov	r2,r16
    ec48:	dfc00417 	ldw	ra,16(sp)
    ec4c:	dcc00317 	ldw	r19,12(sp)
    ec50:	dc800217 	ldw	r18,8(sp)
    ec54:	dc400117 	ldw	r17,4(sp)
    ec58:	dc000017 	ldw	r16,0(sp)
    ec5c:	dec00504 	addi	sp,sp,20
    ec60:	f800283a 	ret

0000ec64 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ec64:	20800a17 	ldw	r2,40(r4)
    ec68:	10800104 	addi	r2,r2,4
    ec6c:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    ec70:	013fff84 	movi	r4,-2
    ec74:	1906703a 	and	r3,r3,r4
    ec78:	10c00035 	stwio	r3,0(r2)
}
    ec7c:	f800283a 	ret

0000ec80 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ec80:	20c00a17 	ldw	r3,40(r4)
    ec84:	18c00104 	addi	r3,r3,4
    ec88:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    ec8c:	10800054 	ori	r2,r2,1
    ec90:	18800035 	stwio	r2,0(r3)
}
    ec94:	f800283a 	ret

0000ec98 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    ec98:	20800a17 	ldw	r2,40(r4)
    ec9c:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    eca0:	10bfffcc 	andi	r2,r2,65535
    eca4:	f800283a 	ret

0000eca8 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    eca8:	20800c17 	ldw	r2,48(r4)
    ecac:	30801c2e 	bgeu	r6,r2,ed20 <alt_up_char_buffer_string+0x78>
    ecb0:	20800d17 	ldw	r2,52(r4)
    ecb4:	38801a2e 	bgeu	r7,r2,ed20 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    ecb8:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    ecbc:	28c00003 	ldbu	r3,0(r5)
    ecc0:	18803fcc 	andi	r2,r3,255
    ecc4:	1080201c 	xori	r2,r2,128
    ecc8:	10bfe004 	addi	r2,r2,-128
    eccc:	10001626 	beq	r2,zero,ed28 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    ecd0:	3a04983a 	sll	r2,r7,r8
    ecd4:	308f883a 	add	r7,r6,r2
    ecd8:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    ecdc:	20800b17 	ldw	r2,44(r4)
    ece0:	3885883a 	add	r2,r7,r2
    ece4:	18c03fcc 	andi	r3,r3,255
    ece8:	18c0201c 	xori	r3,r3,128
    ecec:	18ffe004 	addi	r3,r3,-128
    ecf0:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    ecf4:	320d883a 	add	r6,r6,r8
    ecf8:	20800c17 	ldw	r2,48(r4)
    ecfc:	3080082e 	bgeu	r6,r2,ed20 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    ed00:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    ed04:	28c00003 	ldbu	r3,0(r5)
    ed08:	18803fcc 	andi	r2,r3,255
    ed0c:	1080201c 	xori	r2,r2,128
    ed10:	10bfe004 	addi	r2,r2,-128
    ed14:	10000426 	beq	r2,zero,ed28 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    ed18:	3a0f883a 	add	r7,r7,r8
    ed1c:	003fef06 	br	ecdc <alt_up_char_buffer_string+0x34>
    ed20:	00bfffc4 	movi	r2,-1
    ed24:	f800283a 	ret
    ed28:	0005883a 	mov	r2,zero
	}
	return 0;
}
    ed2c:	f800283a 	ret

0000ed30 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    ed30:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    ed34:	20800c17 	ldw	r2,48(r4)
    ed38:	3080112e 	bgeu	r6,r2,ed80 <alt_up_char_buffer_draw+0x50>
    ed3c:	20800d17 	ldw	r2,52(r4)
    ed40:	38800f2e 	bgeu	r7,r2,ed80 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    ed44:	20c00f17 	ldw	r3,60(r4)
    ed48:	30c6703a 	and	r3,r6,r3
    ed4c:	20800e17 	ldw	r2,56(r4)
    ed50:	1886983a 	sll	r3,r3,r2
    ed54:	20801117 	ldw	r2,68(r4)
    ed58:	3884703a 	and	r2,r7,r2
    ed5c:	21001017 	ldw	r4,64(r4)
    ed60:	1104983a 	sll	r2,r2,r4
    ed64:	1886b03a 	or	r3,r3,r2
    ed68:	40800b17 	ldw	r2,44(r8)
    ed6c:	1887883a 	add	r3,r3,r2
    ed70:	28803fcc 	andi	r2,r5,255
    ed74:	18800025 	stbio	r2,0(r3)
    ed78:	0005883a 	mov	r2,zero
    ed7c:	f800283a 	ret

	return 0;
    ed80:	00bfffc4 	movi	r2,-1
}
    ed84:	f800283a 	ret

0000ed88 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    ed88:	20c00a17 	ldw	r3,40(r4)
    ed8c:	00800044 	movi	r2,1
    ed90:	188000a5 	stbio	r2,2(r3)
    ed94:	20800a17 	ldw	r2,40(r4)
    ed98:	10c00084 	addi	r3,r2,2
    ed9c:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    eda0:	18800023 	ldbuio	r2,0(r3)
    eda4:	1104703a 	and	r2,r2,r4
    eda8:	103ffd1e 	bne	r2,zero,eda0 <alt_up_char_buffer_clear+0x18>
	return 0;
}
    edac:	f800283a 	ret

0000edb0 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    edb0:	deffff04 	addi	sp,sp,-4
    edb4:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    edb8:	014000b4 	movhi	r5,2
    edbc:	2966ed04 	addi	r5,r5,-25676
    edc0:	000ef280 	call	ef28 <alt_find_dev>

  return dev;
}
    edc4:	dfc00017 	ldw	ra,0(sp)
    edc8:	dec00104 	addi	sp,sp,4
    edcc:	f800283a 	ret

0000edd0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    edd0:	defffe04 	addi	sp,sp,-8
    edd4:	dfc00115 	stw	ra,4(sp)
    edd8:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    eddc:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    ede0:	80800007 	ldb	r2,0(r16)
    ede4:	10000a26 	beq	r2,zero,ee10 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    ede8:	8009883a 	mov	r4,r16
    edec:	01400074 	movhi	r5,1
    edf0:	297f2004 	addi	r5,r5,-896
    edf4:	000b6c00 	call	b6c0 <strcmp>
    edf8:	1000021e 	bne	r2,zero,ee04 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    edfc:	80000005 	stb	zero,0(r16)
    ee00:	00000306 	br	ee10 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    ee04:	84000044 	addi	r16,r16,1
    ee08:	80800007 	ldb	r2,0(r16)
    ee0c:	103ff61e 	bne	r2,zero,ede8 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    ee10:	dfc00117 	ldw	ra,4(sp)
    ee14:	dc000017 	ldw	r16,0(sp)
    ee18:	dec00204 	addi	sp,sp,8
    ee1c:	f800283a 	ret

0000ee20 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    ee20:	008000b4 	movhi	r2,2
    ee24:	108ed504 	addi	r2,r2,15188
    ee28:	10800017 	ldw	r2,0(r2)
    ee2c:	1000021e 	bne	r2,zero,ee38 <alt_alarm_start+0x18>
    ee30:	00bfde84 	movi	r2,-134
    ee34:	f800283a 	ret
  {
    if (alarm)
    ee38:	2000021e 	bne	r4,zero,ee44 <alt_alarm_start+0x24>
    ee3c:	00bffa84 	movi	r2,-22
    ee40:	f800283a 	ret
    {
      alarm->callback = callback;
    ee44:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    ee48:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee4c:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee50:	00bfff84 	movi	r2,-2
    ee54:	3884703a 	and	r2,r7,r2
    ee58:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ee5c:	008000b4 	movhi	r2,2
    ee60:	108ed604 	addi	r2,r2,15192
    ee64:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    ee68:	01800044 	movi	r6,1
    ee6c:	1985883a 	add	r2,r3,r6
    ee70:	2885883a 	add	r2,r5,r2
    ee74:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    ee78:	10c0022e 	bgeu	r2,r3,ee84 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    ee7c:	21800405 	stb	r6,16(r4)
    ee80:	00000106 	br	ee88 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    ee84:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ee88:	008000b4 	movhi	r2,2
    ee8c:	10a6f504 	addi	r2,r2,-25644
    ee90:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    ee94:	10c00017 	ldw	r3,0(r2)
    ee98:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    ee9c:	10c00017 	ldw	r3,0(r2)
    eea0:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    eea4:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eea8:	3801703a 	wrctl	status,r7
    eeac:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    eeb0:	f800283a 	ret

0000eeb4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    eeb4:	f800283a 	ret

0000eeb8 <alt_dev_llist_insert>:
    eeb8:	deffff04 	addi	sp,sp,-4
    eebc:	dfc00015 	stw	ra,0(sp)
    eec0:	20000226 	beq	r4,zero,eecc <alt_dev_llist_insert+0x14>
    eec4:	20800217 	ldw	r2,8(r4)
    eec8:	10000d1e 	bne	r2,zero,ef00 <alt_dev_llist_insert+0x48>
    eecc:	008000b4 	movhi	r2,2
    eed0:	10a6f004 	addi	r2,r2,-25664
    eed4:	10800017 	ldw	r2,0(r2)
    eed8:	1000031e 	bne	r2,zero,eee8 <alt_dev_llist_insert+0x30>
    eedc:	00c000b4 	movhi	r3,2
    eee0:	18cecd04 	addi	r3,r3,15156
    eee4:	00000206 	br	eef0 <alt_dev_llist_insert+0x38>
    eee8:	103ee83a 	callr	r2
    eeec:	1007883a 	mov	r3,r2
    eef0:	00800584 	movi	r2,22
    eef4:	18800015 	stw	r2,0(r3)
    eef8:	00bffa84 	movi	r2,-22
    eefc:	00000706 	br	ef1c <alt_dev_llist_insert+0x64>
    ef00:	21400115 	stw	r5,4(r4)
    ef04:	28800017 	ldw	r2,0(r5)
    ef08:	20800015 	stw	r2,0(r4)
    ef0c:	28800017 	ldw	r2,0(r5)
    ef10:	11000115 	stw	r4,4(r2)
    ef14:	29000015 	stw	r4,0(r5)
    ef18:	0005883a 	mov	r2,zero
    ef1c:	dfc00017 	ldw	ra,0(sp)
    ef20:	dec00104 	addi	sp,sp,4
    ef24:	f800283a 	ret

0000ef28 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    ef28:	defffb04 	addi	sp,sp,-20
    ef2c:	dfc00415 	stw	ra,16(sp)
    ef30:	dcc00315 	stw	r19,12(sp)
    ef34:	dc800215 	stw	r18,8(sp)
    ef38:	dc400115 	stw	r17,4(sp)
    ef3c:	dc000015 	stw	r16,0(sp)
    ef40:	2027883a 	mov	r19,r4
    ef44:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    ef48:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    ef4c:	00052080 	call	5208 <strlen>
    ef50:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ef54:	8c000726 	beq	r17,r16,ef74 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ef58:	89000217 	ldw	r4,8(r17)
    ef5c:	980b883a 	mov	r5,r19
    ef60:	900d883a 	mov	r6,r18
    ef64:	000f4dc0 	call	f4dc <memcmp>
    ef68:	10000326 	beq	r2,zero,ef78 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    ef6c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ef70:	847ff91e 	bne	r16,r17,ef58 <alt_find_dev+0x30>
    ef74:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    ef78:	8805883a 	mov	r2,r17
    ef7c:	dfc00417 	ldw	ra,16(sp)
    ef80:	dcc00317 	ldw	r19,12(sp)
    ef84:	dc800217 	ldw	r18,8(sp)
    ef88:	dc400117 	ldw	r17,4(sp)
    ef8c:	dc000017 	ldw	r16,0(sp)
    ef90:	dec00504 	addi	sp,sp,20
    ef94:	f800283a 	ret

0000ef98 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ef98:	deffff04 	addi	sp,sp,-4
    ef9c:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    efa0:	0009883a 	mov	r4,zero
    efa4:	01440004 	movi	r5,4096
    efa8:	000f4680 	call	f468 <alt_icache_flush>
#endif
}
    efac:	dfc00017 	ldw	ra,0(sp)
    efb0:	dec00104 	addi	sp,sp,4
    efb4:	f800283a 	ret

0000efb8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    efb8:	defffe04 	addi	sp,sp,-8
    efbc:	dfc00115 	stw	ra,4(sp)
    efc0:	dc000015 	stw	r16,0(sp)
    efc4:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    efc8:	2809883a 	mov	r4,r5
    efcc:	300b883a 	mov	r5,r6
    efd0:	380d883a 	mov	r6,r7
    efd4:	000f0b40 	call	f0b4 <open>
    efd8:	1009883a 	mov	r4,r2

  if (old >= 0)
    efdc:	10000b16 	blt	r2,zero,f00c <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    efe0:	10c00324 	muli	r3,r2,12
    efe4:	008000b4 	movhi	r2,2
    efe8:	10a14604 	addi	r2,r2,-31464
    efec:	1887883a 	add	r3,r3,r2
    eff0:	18800017 	ldw	r2,0(r3)
    eff4:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    eff8:	18800117 	ldw	r2,4(r3)
    effc:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f000:	18800217 	ldw	r2,8(r3)
    f004:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    f008:	000d1300 	call	d130 <alt_release_fd>
  }
} 
    f00c:	dfc00117 	ldw	ra,4(sp)
    f010:	dc000017 	ldw	r16,0(sp)
    f014:	dec00204 	addi	sp,sp,8
    f018:	f800283a 	ret

0000f01c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f01c:	defffa04 	addi	sp,sp,-24
    f020:	dfc00515 	stw	ra,20(sp)
    f024:	dd000415 	stw	r20,16(sp)
    f028:	dcc00315 	stw	r19,12(sp)
    f02c:	dc800215 	stw	r18,8(sp)
    f030:	dc400115 	stw	r17,4(sp)
    f034:	dc000015 	stw	r16,0(sp)
    f038:	2005883a 	mov	r2,r4
    f03c:	2827883a 	mov	r19,r5
    f040:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f044:	040000b4 	movhi	r16,2
    f048:	84214904 	addi	r16,r16,-31452
    f04c:	04800044 	movi	r18,1
    f050:	04407fc4 	movi	r17,511
    f054:	8009883a 	mov	r4,r16
    f058:	100b883a 	mov	r5,r2
    f05c:	900d883a 	mov	r6,r18
    f060:	880f883a 	mov	r7,r17
    f064:	000efb80 	call	efb8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f068:	843ffd04 	addi	r16,r16,-12
    f06c:	8009883a 	mov	r4,r16
    f070:	980b883a 	mov	r5,r19
    f074:	000d883a 	mov	r6,zero
    f078:	880f883a 	mov	r7,r17
    f07c:	000efb80 	call	efb8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f080:	81000604 	addi	r4,r16,24
    f084:	a00b883a 	mov	r5,r20
    f088:	900d883a 	mov	r6,r18
    f08c:	880f883a 	mov	r7,r17
    f090:	000efb80 	call	efb8 <alt_open_fd>
}  
    f094:	dfc00517 	ldw	ra,20(sp)
    f098:	dd000417 	ldw	r20,16(sp)
    f09c:	dcc00317 	ldw	r19,12(sp)
    f0a0:	dc800217 	ldw	r18,8(sp)
    f0a4:	dc400117 	ldw	r17,4(sp)
    f0a8:	dc000017 	ldw	r16,0(sp)
    f0ac:	dec00604 	addi	sp,sp,24
    f0b0:	f800283a 	ret

0000f0b4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f0b4:	defff904 	addi	sp,sp,-28
    f0b8:	dfc00615 	stw	ra,24(sp)
    f0bc:	dd400515 	stw	r21,20(sp)
    f0c0:	dd000415 	stw	r20,16(sp)
    f0c4:	dcc00315 	stw	r19,12(sp)
    f0c8:	dc800215 	stw	r18,8(sp)
    f0cc:	dc400115 	stw	r17,4(sp)
    f0d0:	dc000015 	stw	r16,0(sp)
    f0d4:	2029883a 	mov	r20,r4
    f0d8:	2827883a 	mov	r19,r5
    f0dc:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f0e0:	014000b4 	movhi	r5,2
    f0e4:	2966ed04 	addi	r5,r5,-25676
    f0e8:	000ef280 	call	ef28 <alt_find_dev>
    f0ec:	1021883a 	mov	r16,r2
    f0f0:	10000226 	beq	r2,zero,f0fc <open+0x48>
    f0f4:	0025883a 	mov	r18,zero
    f0f8:	00000a06 	br	f124 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f0fc:	a009883a 	mov	r4,r20
    f100:	000f3400 	call	f340 <alt_find_file>
    f104:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f108:	1000051e 	bne	r2,zero,f120 <open+0x6c>
    f10c:	047fffc4 	movi	r17,-1
    f110:	043ffb44 	movi	r16,-19
    f114:	00002b06 	br	f1c4 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f118:	043ffcc4 	movi	r16,-13
    f11c:	00002906 	br	f1c4 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f120:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    f124:	8009883a 	mov	r4,r16
    f128:	000f3fc0 	call	f3fc <alt_get_fd>
    f12c:	1023883a 	mov	r17,r2
    f130:	10003316 	blt	r2,zero,f200 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f134:	10800324 	muli	r2,r2,12
    f138:	020000b4 	movhi	r8,2
    f13c:	42214604 	addi	r8,r8,-31464
    f140:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f144:	00900034 	movhi	r2,16384
    f148:	10bfffc4 	addi	r2,r2,-1
    f14c:	9886703a 	and	r3,r19,r2
    f150:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f154:	9004c03a 	cmpne	r2,r18,zero
    f158:	1000121e 	bne	r2,zero,f1a4 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f15c:	18900034 	orhi	r2,r3,16384
    f160:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f164:	008000b4 	movhi	r2,2
    f168:	10a6ef04 	addi	r2,r2,-25668
    f16c:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f170:	21800017 	ldw	r6,0(r4)
    f174:	000b883a 	mov	r5,zero
    f178:	4007883a 	mov	r3,r8
    f17c:	02400044 	movi	r9,1
    f180:	02000304 	movi	r8,12
    f184:	18800017 	ldw	r2,0(r3)
    f188:	1180031e 	bne	r2,r6,f198 <open+0xe4>
    f18c:	18800217 	ldw	r2,8(r3)
    f190:	1000010e 	bge	r2,zero,f198 <open+0xe4>
    f194:	193fe01e 	bne	r3,r4,f118 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f198:	2a4b883a 	add	r5,r5,r9
    f19c:	1a07883a 	add	r3,r3,r8
    f1a0:	397ff82e 	bgeu	r7,r5,f184 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f1a4:	80800317 	ldw	r2,12(r16)
    f1a8:	10001726 	beq	r2,zero,f208 <open+0x154>
    f1ac:	a00b883a 	mov	r5,r20
    f1b0:	980d883a 	mov	r6,r19
    f1b4:	a80f883a 	mov	r7,r21
    f1b8:	103ee83a 	callr	r2
    f1bc:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f1c0:	1000110e 	bge	r2,zero,f208 <open+0x154>
  {
    alt_release_fd (index);  
    f1c4:	8809883a 	mov	r4,r17
    f1c8:	000d1300 	call	d130 <alt_release_fd>
    f1cc:	008000b4 	movhi	r2,2
    f1d0:	10a6f004 	addi	r2,r2,-25664
    f1d4:	10800017 	ldw	r2,0(r2)
    f1d8:	1000031e 	bne	r2,zero,f1e8 <open+0x134>
    f1dc:	00c000b4 	movhi	r3,2
    f1e0:	18cecd04 	addi	r3,r3,15156
    f1e4:	00000206 	br	f1f0 <open+0x13c>
    f1e8:	103ee83a 	callr	r2
    f1ec:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    f1f0:	0405c83a 	sub	r2,zero,r16
    f1f4:	18800015 	stw	r2,0(r3)
    f1f8:	047fffc4 	movi	r17,-1
    f1fc:	00000206 	br	f208 <open+0x154>
    f200:	1021883a 	mov	r16,r2
    f204:	003fef06 	br	f1c4 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    f208:	8805883a 	mov	r2,r17
    f20c:	dfc00617 	ldw	ra,24(sp)
    f210:	dd400517 	ldw	r21,20(sp)
    f214:	dd000417 	ldw	r20,16(sp)
    f218:	dcc00317 	ldw	r19,12(sp)
    f21c:	dc800217 	ldw	r18,8(sp)
    f220:	dc400117 	ldw	r17,4(sp)
    f224:	dc000017 	ldw	r16,0(sp)
    f228:	dec00704 	addi	sp,sp,28
    f22c:	f800283a 	ret

0000f230 <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
    f230:	defffe04 	addi	sp,sp,-8
    f234:	dfc00115 	stw	ra,4(sp)
    f238:	dc000015 	stw	r16,0(sp)
    f23c:	2021883a 	mov	r16,r4
  alt_dcache_flush (ptr, len);
    f240:	000ccb80 	call	ccb8 <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
}
    f244:	80a00034 	orhi	r2,r16,32768
    f248:	dfc00117 	ldw	ra,4(sp)
    f24c:	dc000017 	ldw	r16,0(sp)
    f250:	dec00204 	addi	sp,sp,8
    f254:	f800283a 	ret

0000f258 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f258:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f25c:	00bfff84 	movi	r2,-2
    f260:	2884703a 	and	r2,r5,r2
    f264:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f268:	20c00017 	ldw	r3,0(r4)
    f26c:	20800117 	ldw	r2,4(r4)
    f270:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    f274:	20800117 	ldw	r2,4(r4)
    f278:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f27c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    f280:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f284:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    f288:	f800283a 	ret

0000f28c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f28c:	defffd04 	addi	sp,sp,-12
    f290:	dfc00215 	stw	ra,8(sp)
    f294:	dc400115 	stw	r17,4(sp)
    f298:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f29c:	d4202a17 	ldw	r16,-32600(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f2a0:	d0880b17 	ldw	r2,8236(gp)
    f2a4:	10800044 	addi	r2,r2,1
    f2a8:	d0880b15 	stw	r2,8236(gp)
    f2ac:	00001b06 	br	f31c <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    f2b0:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f2b4:	80800403 	ldbu	r2,16(r16)
    f2b8:	10000326 	beq	r2,zero,f2c8 <alt_tick+0x3c>
    f2bc:	d0880b17 	ldw	r2,8236(gp)
    f2c0:	1000011e 	bne	r2,zero,f2c8 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    f2c4:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f2c8:	d0c80b17 	ldw	r3,8236(gp)
    f2cc:	80800217 	ldw	r2,8(r16)
    f2d0:	18801136 	bltu	r3,r2,f318 <alt_tick+0x8c>
    f2d4:	80800403 	ldbu	r2,16(r16)
    f2d8:	10000f1e 	bne	r2,zero,f318 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    f2dc:	80800317 	ldw	r2,12(r16)
    f2e0:	81000517 	ldw	r4,20(r16)
    f2e4:	103ee83a 	callr	r2
    f2e8:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f2ec:	1000031e 	bne	r2,zero,f2fc <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    f2f0:	8009883a 	mov	r4,r16
    f2f4:	000f2580 	call	f258 <alt_alarm_stop>
    f2f8:	00000706 	br	f318 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    f2fc:	80800217 	ldw	r2,8(r16)
    f300:	1885883a 	add	r2,r3,r2
    f304:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f308:	d0c80b17 	ldw	r3,8236(gp)
    f30c:	10c0022e 	bgeu	r2,r3,f318 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    f310:	00800044 	movi	r2,1
    f314:	80800405 	stb	r2,16(r16)
    f318:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f31c:	d0a02a04 	addi	r2,gp,-32600
    f320:	80bfe31e 	bne	r16,r2,f2b0 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    f324:	dfc00217 	ldw	ra,8(sp)
    f328:	dc400117 	ldw	r17,4(sp)
    f32c:	dc000017 	ldw	r16,0(sp)
    f330:	dec00304 	addi	sp,sp,12
    f334:	f800283a 	ret

0000f338 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    f338:	000170fa 	wrctl	ienable,zero
}
    f33c:	f800283a 	ret

0000f340 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f340:	defff904 	addi	sp,sp,-28
    f344:	dfc00615 	stw	ra,24(sp)
    f348:	dd400515 	stw	r21,20(sp)
    f34c:	dd000415 	stw	r20,16(sp)
    f350:	dcc00315 	stw	r19,12(sp)
    f354:	dc800215 	stw	r18,8(sp)
    f358:	dc400115 	stw	r17,4(sp)
    f35c:	dc000015 	stw	r16,0(sp)
    f360:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f364:	008000b4 	movhi	r2,2
    f368:	10a6eb04 	addi	r2,r2,-25684
    f36c:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f370:	102b883a 	mov	r21,r2
    f374:	88801626 	beq	r17,r2,f3d0 <alt_find_file+0x90>
    f378:	053fffc4 	movi	r20,-1
    f37c:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    f380:	8c000217 	ldw	r16,8(r17)
    f384:	8009883a 	mov	r4,r16
    f388:	00052080 	call	5208 <strlen>
    f38c:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    f390:	8085883a 	add	r2,r16,r2
    f394:	1505883a 	add	r2,r2,r20
    f398:	10800007 	ldb	r2,0(r2)
    f39c:	14c0011e 	bne	r2,r19,f3a4 <alt_find_file+0x64>
    {
      len -= 1;
    f3a0:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f3a4:	1c85883a 	add	r2,r3,r18
    f3a8:	10800007 	ldb	r2,0(r2)
    f3ac:	14c00126 	beq	r2,r19,f3b4 <alt_find_file+0x74>
    f3b0:	1000051e 	bne	r2,zero,f3c8 <alt_find_file+0x88>
    f3b4:	8009883a 	mov	r4,r16
    f3b8:	900b883a 	mov	r5,r18
    f3bc:	180d883a 	mov	r6,r3
    f3c0:	000f4dc0 	call	f4dc <memcmp>
    f3c4:	10000326 	beq	r2,zero,f3d4 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    f3c8:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f3cc:	8d7fec1e 	bne	r17,r21,f380 <alt_find_file+0x40>
    f3d0:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    f3d4:	8805883a 	mov	r2,r17
    f3d8:	dfc00617 	ldw	ra,24(sp)
    f3dc:	dd400517 	ldw	r21,20(sp)
    f3e0:	dd000417 	ldw	r20,16(sp)
    f3e4:	dcc00317 	ldw	r19,12(sp)
    f3e8:	dc800217 	ldw	r18,8(sp)
    f3ec:	dc400117 	ldw	r17,4(sp)
    f3f0:	dc000017 	ldw	r16,0(sp)
    f3f4:	dec00704 	addi	sp,sp,28
    f3f8:	f800283a 	ret

0000f3fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f3fc:	000b883a 	mov	r5,zero
    f400:	00c000b4 	movhi	r3,2
    f404:	18e14604 	addi	r3,r3,-31464
    f408:	02000304 	movi	r8,12
    f40c:	024000b4 	movhi	r9,2
    f410:	4a66ef04 	addi	r9,r9,-25668
    f414:	01c00044 	movi	r7,1
    f418:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    f41c:	18800017 	ldw	r2,0(r3)
    f420:	10000c1e 	bne	r2,zero,f454 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    f424:	2a05383a 	mul	r2,r5,r8
    f428:	00c000b4 	movhi	r3,2
    f42c:	18e14604 	addi	r3,r3,-31464
    f430:	10c5883a 	add	r2,r2,r3
    f434:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    f438:	48800017 	ldw	r2,0(r9)
    f43c:	11400216 	blt	r2,r5,f448 <alt_get_fd+0x4c>
    f440:	2805883a 	mov	r2,r5
    f444:	f800283a 	ret
      {
        alt_max_fd = i;
    f448:	49400015 	stw	r5,0(r9)
    f44c:	2805883a 	mov	r2,r5
    f450:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f454:	29cb883a 	add	r5,r5,r7
    f458:	1a07883a 	add	r3,r3,r8
    f45c:	29bfef1e 	bne	r5,r6,f41c <alt_get_fd+0x20>
    f460:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    f464:	f800283a 	ret

0000f468 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    f468:	2007883a 	mov	r3,r4
    f46c:	00840004 	movi	r2,4096
    f470:	1140012e 	bgeu	r2,r5,f478 <alt_icache_flush+0x10>
    f474:	100b883a 	mov	r5,r2
    f478:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f47c:	1940042e 	bgeu	r3,r5,f490 <alt_icache_flush+0x28>
    f480:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f484:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f488:	1887883a 	add	r3,r3,r2
    f48c:	197ffd36 	bltu	r3,r5,f484 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f490:	208007cc 	andi	r2,r4,31
    f494:	10000126 	beq	r2,zero,f49c <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f498:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f49c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f4a0:	f800283a 	ret

0000f4a4 <exit>:
    f4a4:	defffe04 	addi	sp,sp,-8
    f4a8:	000b883a 	mov	r5,zero
    f4ac:	dc000015 	stw	r16,0(sp)
    f4b0:	dfc00115 	stw	ra,4(sp)
    f4b4:	2021883a 	mov	r16,r4
    f4b8:	000f5540 	call	f554 <__call_exitprocs>
    f4bc:	008000b4 	movhi	r2,2
    f4c0:	10a6e604 	addi	r2,r2,-25704
    f4c4:	11000017 	ldw	r4,0(r2)
    f4c8:	20800f17 	ldw	r2,60(r4)
    f4cc:	10000126 	beq	r2,zero,f4d4 <exit+0x30>
    f4d0:	103ee83a 	callr	r2
    f4d4:	8009883a 	mov	r4,r16
    f4d8:	000f7040 	call	f704 <_exit>

0000f4dc <memcmp>:
    f4dc:	00c000c4 	movi	r3,3
    f4e0:	1980032e 	bgeu	r3,r6,f4f0 <memcmp+0x14>
    f4e4:	2144b03a 	or	r2,r4,r5
    f4e8:	10c4703a 	and	r2,r2,r3
    f4ec:	10000f26 	beq	r2,zero,f52c <memcmp+0x50>
    f4f0:	31ffffc4 	addi	r7,r6,-1
    f4f4:	3000061e 	bne	r6,zero,f510 <memcmp+0x34>
    f4f8:	00000a06 	br	f524 <memcmp+0x48>
    f4fc:	39ffffc4 	addi	r7,r7,-1
    f500:	00bfffc4 	movi	r2,-1
    f504:	21000044 	addi	r4,r4,1
    f508:	29400044 	addi	r5,r5,1
    f50c:	38800526 	beq	r7,r2,f524 <memcmp+0x48>
    f510:	20c00003 	ldbu	r3,0(r4)
    f514:	28800003 	ldbu	r2,0(r5)
    f518:	18bff826 	beq	r3,r2,f4fc <memcmp+0x20>
    f51c:	1885c83a 	sub	r2,r3,r2
    f520:	f800283a 	ret
    f524:	0005883a 	mov	r2,zero
    f528:	f800283a 	ret
    f52c:	180f883a 	mov	r7,r3
    f530:	20c00017 	ldw	r3,0(r4)
    f534:	28800017 	ldw	r2,0(r5)
    f538:	18bfed1e 	bne	r3,r2,f4f0 <memcmp+0x14>
    f53c:	31bfff04 	addi	r6,r6,-4
    f540:	21000104 	addi	r4,r4,4
    f544:	29400104 	addi	r5,r5,4
    f548:	39bff936 	bltu	r7,r6,f530 <memcmp+0x54>
    f54c:	003fe806 	br	f4f0 <memcmp+0x14>

0000f550 <register_fini>:
    f550:	f800283a 	ret

0000f554 <__call_exitprocs>:
    f554:	008000b4 	movhi	r2,2
    f558:	10a6e604 	addi	r2,r2,-25704
    f55c:	10800017 	ldw	r2,0(r2)
    f560:	defff304 	addi	sp,sp,-52
    f564:	df000b15 	stw	fp,44(sp)
    f568:	d8800115 	stw	r2,4(sp)
    f56c:	00800034 	movhi	r2,0
    f570:	1091e504 	addi	r2,r2,18324
    f574:	1005003a 	cmpeq	r2,r2,zero
    f578:	d8800215 	stw	r2,8(sp)
    f57c:	d8800117 	ldw	r2,4(sp)
    f580:	dd400815 	stw	r21,32(sp)
    f584:	dd000715 	stw	r20,28(sp)
    f588:	10805204 	addi	r2,r2,328
    f58c:	dfc00c15 	stw	ra,48(sp)
    f590:	ddc00a15 	stw	r23,40(sp)
    f594:	dd800915 	stw	r22,36(sp)
    f598:	dcc00615 	stw	r19,24(sp)
    f59c:	dc800515 	stw	r18,20(sp)
    f5a0:	dc400415 	stw	r17,16(sp)
    f5a4:	dc000315 	stw	r16,12(sp)
    f5a8:	282b883a 	mov	r21,r5
    f5ac:	2039883a 	mov	fp,r4
    f5b0:	d8800015 	stw	r2,0(sp)
    f5b4:	2829003a 	cmpeq	r20,r5,zero
    f5b8:	d8800117 	ldw	r2,4(sp)
    f5bc:	14405217 	ldw	r17,328(r2)
    f5c0:	88001026 	beq	r17,zero,f604 <__call_exitprocs+0xb0>
    f5c4:	ddc00017 	ldw	r23,0(sp)
    f5c8:	88800117 	ldw	r2,4(r17)
    f5cc:	8c802204 	addi	r18,r17,136
    f5d0:	143fffc4 	addi	r16,r2,-1
    f5d4:	80000916 	blt	r16,zero,f5fc <__call_exitprocs+0xa8>
    f5d8:	05bfffc4 	movi	r22,-1
    f5dc:	a000151e 	bne	r20,zero,f634 <__call_exitprocs+0xe0>
    f5e0:	8409883a 	add	r4,r16,r16
    f5e4:	2105883a 	add	r2,r4,r4
    f5e8:	1485883a 	add	r2,r2,r18
    f5ec:	10c02017 	ldw	r3,128(r2)
    f5f0:	a8c01126 	beq	r21,r3,f638 <__call_exitprocs+0xe4>
    f5f4:	843fffc4 	addi	r16,r16,-1
    f5f8:	85bff81e 	bne	r16,r22,f5dc <__call_exitprocs+0x88>
    f5fc:	d8800217 	ldw	r2,8(sp)
    f600:	10003126 	beq	r2,zero,f6c8 <__call_exitprocs+0x174>
    f604:	dfc00c17 	ldw	ra,48(sp)
    f608:	df000b17 	ldw	fp,44(sp)
    f60c:	ddc00a17 	ldw	r23,40(sp)
    f610:	dd800917 	ldw	r22,36(sp)
    f614:	dd400817 	ldw	r21,32(sp)
    f618:	dd000717 	ldw	r20,28(sp)
    f61c:	dcc00617 	ldw	r19,24(sp)
    f620:	dc800517 	ldw	r18,20(sp)
    f624:	dc400417 	ldw	r17,16(sp)
    f628:	dc000317 	ldw	r16,12(sp)
    f62c:	dec00d04 	addi	sp,sp,52
    f630:	f800283a 	ret
    f634:	8409883a 	add	r4,r16,r16
    f638:	88c00117 	ldw	r3,4(r17)
    f63c:	2105883a 	add	r2,r4,r4
    f640:	1445883a 	add	r2,r2,r17
    f644:	18ffffc4 	addi	r3,r3,-1
    f648:	11800217 	ldw	r6,8(r2)
    f64c:	1c001526 	beq	r3,r16,f6a4 <__call_exitprocs+0x150>
    f650:	10000215 	stw	zero,8(r2)
    f654:	303fe726 	beq	r6,zero,f5f4 <__call_exitprocs+0xa0>
    f658:	00c00044 	movi	r3,1
    f65c:	1c06983a 	sll	r3,r3,r16
    f660:	90804017 	ldw	r2,256(r18)
    f664:	8cc00117 	ldw	r19,4(r17)
    f668:	1884703a 	and	r2,r3,r2
    f66c:	10001426 	beq	r2,zero,f6c0 <__call_exitprocs+0x16c>
    f670:	90804117 	ldw	r2,260(r18)
    f674:	1884703a 	and	r2,r3,r2
    f678:	10000c1e 	bne	r2,zero,f6ac <__call_exitprocs+0x158>
    f67c:	2105883a 	add	r2,r4,r4
    f680:	1485883a 	add	r2,r2,r18
    f684:	11400017 	ldw	r5,0(r2)
    f688:	e009883a 	mov	r4,fp
    f68c:	303ee83a 	callr	r6
    f690:	88800117 	ldw	r2,4(r17)
    f694:	98bfc81e 	bne	r19,r2,f5b8 <__call_exitprocs+0x64>
    f698:	b8800017 	ldw	r2,0(r23)
    f69c:	147fd526 	beq	r2,r17,f5f4 <__call_exitprocs+0xa0>
    f6a0:	003fc506 	br	f5b8 <__call_exitprocs+0x64>
    f6a4:	8c000115 	stw	r16,4(r17)
    f6a8:	003fea06 	br	f654 <__call_exitprocs+0x100>
    f6ac:	2105883a 	add	r2,r4,r4
    f6b0:	1485883a 	add	r2,r2,r18
    f6b4:	11000017 	ldw	r4,0(r2)
    f6b8:	303ee83a 	callr	r6
    f6bc:	003ff406 	br	f690 <__call_exitprocs+0x13c>
    f6c0:	303ee83a 	callr	r6
    f6c4:	003ff206 	br	f690 <__call_exitprocs+0x13c>
    f6c8:	88800117 	ldw	r2,4(r17)
    f6cc:	1000081e 	bne	r2,zero,f6f0 <__call_exitprocs+0x19c>
    f6d0:	89000017 	ldw	r4,0(r17)
    f6d4:	20000726 	beq	r4,zero,f6f4 <__call_exitprocs+0x1a0>
    f6d8:	b9000015 	stw	r4,0(r23)
    f6dc:	8809883a 	mov	r4,r17
    f6e0:	00047940 	call	4794 <free>
    f6e4:	bc400017 	ldw	r17,0(r23)
    f6e8:	883fb71e 	bne	r17,zero,f5c8 <__call_exitprocs+0x74>
    f6ec:	003fc506 	br	f604 <__call_exitprocs+0xb0>
    f6f0:	89000017 	ldw	r4,0(r17)
    f6f4:	882f883a 	mov	r23,r17
    f6f8:	2023883a 	mov	r17,r4
    f6fc:	883fb21e 	bne	r17,zero,f5c8 <__call_exitprocs+0x74>
    f700:	003fc006 	br	f604 <__call_exitprocs+0xb0>

0000f704 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f704:	20000226 	beq	r4,zero,f710 <_exit+0xc>
    ALT_SIM_FAIL();
    f708:	002af070 	cmpltui	zero,zero,43969
    f70c:	00000106 	br	f714 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    f710:	002af0b0 	cmpltui	zero,zero,43970
    f714:	003fff06 	br	f714 <_exit+0x10>
    f718:	0000f550 	cmplti	zero,zero,981
