
C:/Users/pavmeh/Desktop/fpga-music-visualizer-master/software/ethernet_isr.elf:     file format elf32-littlenios2
C:/Users/pavmeh/Desktop/fpga-music-visualizer-master/software/ethernet_isr.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000ee24 memsz 0x0000ee24 flags r-x
    LOAD off    0x0000fe44 vaddr 0x0000ee44 paddr 0x00010d70 align 2**12
         filesz 0x00001f2c memsz 0x00001f2c flags rw-
    LOAD off    0x00012c9c vaddr 0x00012c9c paddr 0x00012c9c align 2**12
         filesz 0x00000000 memsz 0x0007078c flags rw-
    LOAD off    0x00012000 vaddr 0x08200000 paddr 0x00083428 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-
    LOAD off    0x00013000 vaddr 0x08201000 paddr 0x000834a8 align 2**12
         filesz 0x00001000 memsz 0x00001000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e68c  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000650  0000e7f4  0000e7f4  0000f7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f2c  0000ee44  00010d70  0000fe44  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000709fc  00012c9c  00012c9c  00012c9c  2**2
                  ALLOC, SMALL_DATA
  6 .descriptor_memory 00000080  08200000  00083428  00012000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .packet_memory 00001000  08201000  000834a8  00013000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .comment      00000026  00000000  00000000  00014000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ff8  00000000  00000000  00014028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 0000270b  00000000  00000000  00015020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00027e8d  00000000  00000000  0001772b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009f5e  00000000  00000000  0003f5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018fa3  00000000  00000000  00049516  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002490  00000000  00000000  000624bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004dc1  00000000  00000000  0006494c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000f06b  00000000  00000000  0006970d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000020  00000000  00000000  00078778  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000af0  00000000  00000000  00078798  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0007e579  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  0007e57c  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0007e57f  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0007e580  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0007e581  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0007e585  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0007e589  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  0007e58d  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  0007e596  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  0007e59f  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000b  00000000  00000000  0007e5a8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00195c3c  00000000  00000000  0007e5b3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
0000e7f4 l    d  .rodata	00000000 .rodata
0000ee44 l    d  .rwdata	00000000 .rwdata
00012c9c l    d  .bss	00000000 .bss
08200000 l    d  .descriptor_memory	00000000 .descriptor_memory
08201000 l    d  .packet_memory	00000000 .packet_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 audio_isr.c
00012d10 l     O .bss	00000200 left_buffer
00012f10 l     O .bss	00000200 right_buffer
00012c9c l     O .bss	00000004 startVal
00000000 l    df *ABS*	00000000 kiss_fft.c
00000000 l    df *ABS*	00000000 audio.c
00010ca0 l     O .rwdata	00000004 audio_ptr
00010c9c l     O .rwdata	00000004 fifospace_ptr
00010c94 l     O .rwdata	00000004 leftdata_ptr
00010c98 l     O .rwdata	00000004 rightdata_ptr
00012ca0 l     O .bss	00000004 audio_isr
00000000 l    df *ABS*	00000000 char_lcd.c
00000000 l    df *ABS*	00000000 ethernet.c
00012ca8 l     O .bss	00000004 tx_frame
00012ca4 l     O .bss	00000004 rx_frame
08200040 l     O .descriptor_memory	00000020 tx_descriptor
08200060 l     O .descriptor_memory	00000020 tx_descriptor_end
08201800 l     O .packet_memory	00000800 tx_buff
00012cb0 l     O .bss	00000004 sgdma_tx_dev
00012cac l     O .bss	00000004 sgdma_rx_dev
000009a8 l     F .text	0000006c ethernet_rx
08200000 l     O .descriptor_memory	00000020 rx_descriptor
08200020 l     O .descriptor_memory	00000020 rx_descriptor_end
08201000 l     O .packet_memory	00000800 rx_buff
00012cb4 l     O .bss	00000004 rx_isr
00000000 l    df *ABS*	00000000 green_leds.c
00010cac l     O .rwdata	00000004 data_reg
00000000 l    df *ABS*	00000000 hex.c
00010cb4 l     O .rwdata	00000004 hex_3to0
00010cb0 l     O .rwdata	00000004 hex_7to4
00000a84 l     F .text	00000074 lookup_16
0000e8e2 l     O .rodata	00000010 table
00000af8 l     F .text	00000098 lookup_10
00000000 l    df *ABS*	00000000 lcd.c
00010cc4 l     O .rwdata	00000004 status_reg
00010cb8 l     O .rwdata	00000004 back_buff_reg
00010cc0 l     O .rwdata	00000004 front_buff_reg
00010cbc l     O .rwdata	00000004 char_buff_base
00000000 l    df *ABS*	00000000 pushbuttons.c
00010cd0 l     O .rwdata	00000004 data_reg
00010ccc l     O .rwdata	00000004 interrupt_mask_reg
00010cc8 l     O .rwdata	00000004 edge_capture_reg
00000000 l    df *ABS*	00000000 red_leds.c
00010cd4 l     O .rwdata	00000004 data_reg
00000000 l    df *ABS*	00000000 switches.c
00010ce0 l     O .rwdata	00000004 data_reg
00010cdc l     O .rwdata	00000004 interrupt_mask_reg
00010cd8 l     O .rwdata	00000004 edge_capture_reg
00000000 l    df *ABS*	00000000 vga.c
00010cec l     O .rwdata	00000004 status_reg
00010cf0 l     O .rwdata	00000004 back_buff_reg
00010ce8 l     O .rwdata	00000004 front_buff_reg
00010ce4 l     O .rwdata	00000004 char_buff_base
00000000 l    df *ABS*	00000000 ethernet_isr.c
00000000 l    df *ABS*	00000000 main.c
00013110 l     O .bss	00020000 yesBuffer
00053110 l     O .bss	00020000 sampleBuffer
00033110 l     O .bss	00020000 noBuffer
00001824 l     F .text	00000078 clearLCDChar
00000000 l    df *ABS*	00000000 pushbuttons_isr.c
00000000 l    df *ABS*	00000000 switches_isr.c
00000000 l    df *ABS*	00000000 system_globals.c
00000000 l    df *ABS*	00000000 tlda.c
00010d08 l     O .rwdata	00000004 dl_xy0
00010d0c l     O .rwdata	00000004 dl_xy1
00010d10 l     O .rwdata	00000004 dl_color
00010d14 l     O .rwdata	00000004 dl_thickness
00010d04 l     O .rwdata	00000004 drawing_buffer
00010d18 l     O .rwdata	00000004 dl_base_addr
00010d1c l     O .rwdata	00000004 dl_go
00010d20 l     O .rwdata	00000004 dl_status
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000202c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0000ee44 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00003f08 l     F .text	00000058 __sprint_r
0000eb0a l     O .rodata	00000010 blanks.3452
0000eafa l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005f6c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007968 l     F .text	00000058 std
00007a74 l     F .text	00000008 __fp_lock
00007a7c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00010d3c l     O .rwdata	00000004 charset
0000eb3c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000ec84 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000b62c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000b858 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00010d5c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f800 l     O .rwdata	00001060 JTAG_UART
00010860 l     O .rwdata	00000030 sgdma_rx
00010890 l     O .rwdata	00000030 sgdma_tx
000108c0 l     O .rwdata	0000002c Accelerometer
000108ec l     O .rwdata	00000030 Camera_Config
0001091c l     O .rwdata	00000030 OnBoard_AV
0001094c l     O .rwdata	00000030 Audio
0001097c l     O .rwdata	0000002c Char_LCD_16x2
000109a8 l     O .rwdata	0000002c IrDA
000109d4 l     O .rwdata	0000002c Expansion_JP5
00010a00 l     O .rwdata	0000002c Green_LEDs
00010a2c l     O .rwdata	0000002c HEX3_HEX0
00010a58 l     O .rwdata	0000002c HEX7_HEX4
00010a84 l     O .rwdata	0000002c Pushbuttons
00010ab0 l     O .rwdata	0000002c Red_LEDs
00010adc l     O .rwdata	0000002c Slider_Switches
00010b08 l     O .rwdata	00000038 PS2_Port
00010b40 l     O .rwdata	00000038 PS2_Port_Dual
00010b78 l     O .rwdata	0000002c Serial_Port
00010ba4 l     O .rwdata	00000034 USB
00010bd8 l     O .rwdata	00000048 LCD_Char_Buffer
00010c20 l     O .rwdata	00000048 VGA_Char_Buffer
00010c68 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c3f8 l     F .text	00000054 altera_avalon_jtag_uart_timeout
0000c4c4 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0000cb94 l     F .text	00000068 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000cfc4 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000dd58 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000e628 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000006d0 g     F .text	00000010 char_lcd_cursor_off
00008f44 g     F .text	00000094 _mprec_log10
0000067c g     F .text	0000002c char_lcd_move_cursor
00000fd4 g     F .text	00000018 vga_set_front_buffer
00009030 g     F .text	00000088 __any_on
0000a69c g     F .text	00000070 _isatty_r
0000ec5c g     O .rodata	00000028 __mprec_tinytens
0000bb7c g     F .text	00000050 alt_main
00003d70 g     F .text	000000a0 _puts_r
0000d840 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
00083328 g     O .bss	00000100 alt_irq
0000a70c g     F .text	00000078 _lseek_r
00001bfc g     F .text	00000130 sqrt
00010d70 g       *ABS*	00000000 __flash_rwdata_start
0000d0c4 g     F .text	00000010 alt_up_character_lcd_send_cmd
0000b388 g     F .text	00000088 __eqdf2
000006f0 g     F .text	00000010 char_lcd_shift_right
00083428 g       *ABS*	00000000 __alt_heap_start
00003cf8 g     F .text	00000044 printf
00000db4 g     F .text	00000060 lcd_draw_rectangle_back
0000ca64 g     F .text	00000094 alt_avalon_sgdma_do_sync_transfer
0000a168 g     F .text	00000068 __sseek
000079d0 g     F .text	000000a4 __sinit
0000e4dc g     F .text	00000130 __swbuf_r
0000da48 g     F .text	00000088 alt_up_char_buffer_string
0000d500 g     F .text	0000000c read_CE_bit
000086a8 g     F .text	00000084 _setlocale_r
00007ad0 g     F .text	00000068 __sfmoreglue
0000bbd0 g     F .text	00000004 __malloc_unlock
0000d5d0 g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
00000d1c g     F .text	00000038 lcd_write
0000d8ec g     F .text	00000080 alt_up_rs232_read_fd
00073328 g     O .bss	00010000 samples_for_fft
00000bd4 g     F .text	00000044 hex_write_3to0
00000ee0 g     F .text	0000000c red_leds_set
0000dad0 g     F .text	00000058 alt_up_char_buffer_draw
0000cbfc g     F .text	0000012c alt_avalon_sgdma_construct_descriptor_burst
00000cf0 g     F .text	0000000c lcd_set_back_buffer
000089c0 g     F .text	000000e0 memmove
00007ac0 g     F .text	00000010 _cleanup
000090b8 g     F .text	000000bc _Balloc
00012cb8 g     O .bss	00000001 audio_ready
00000d54 g     F .text	00000060 lcd_draw_rectangle
00002b4c g     F .text	00000088 __gtdf2
000034e0 g     F .text	00000010 __errno
0000d000 g     F .text	0000001c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000a20 g     F .text	00000014 green_leds_update
0000ce00 g     F .text	0000004c alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000a628 g     F .text	00000074 _fstat_r
00012ce8 g     O .bss	00000004 errno
00000644 g     F .text	00000038 audio_init
000010b0 g     F .text	00000048 vga_char_buffer_clear
00012cd0 g     O .bss	00000004 numRead
00000e5c g     F .text	0000000c lcd_get_backbuffer_addr
00012d00 g     O .bss	00000004 alt_argv
00018c94 g       *ABS*	00000000 _gp
00000cd8 g     F .text	00000018 lcd_set_front_buffer
00010cf5 g     O .rwdata	00000006 srcAddr
00012ccc g     O .bss	00000001 samples_for_fft_requested
00000cfc g     F .text	00000020 lcd_swap_buffers
0000f680 g     O .rwdata	00000180 alt_fd_list
00001250 g     F .text	00000024 swap_buffers
00001230 g     F .text	0000000c signal_audio_ready
0000dcc8 g     F .text	00000070 alt_find_dev
00003c58 g     F .text	000000a0 memcpy
0000d094 g     F .text	00000020 alt_up_character_lcd_write_fd
00000e68 g     F .text	0000000c pushbuttons_get_data
0000db28 g     F .text	00000028 alt_up_char_buffer_clear
00007ab4 g     F .text	0000000c _cleanup_r
00002ce4 g     F .text	000000f8 __floatsidf
0000ddbc g     F .text	00000098 alt_io_redirect
00002c5c g     F .text	00000088 __ltdf2
0000d42c g     F .text	0000007c alt_up_irda_write_fd
0000d8a0 g     F .text	0000004c alt_up_rs232_read_data
00003e10 g     F .text	00000014 puts
00008e94 g     F .text	000000b0 __ratio
000010fc g     F .text	00000134 mapd
0000cd70 g     F .text	00000050 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0000d4dc g     F .text	00000010 alt_up_irda_get_used_space_in_read_FIFO
0000c66c g     F .text	00000168 altera_avalon_jtag_uart_read
00003504 g     F .text	00000014 malloc
00003d3c g     F .text	00000034 _printf_r
0000b768 g     F .text	00000008 __udivsi3
0000b99c g     F .text	00000084 isatty
0000eb6c g     O .rodata	000000c8 __mprec_tens
00012cc0 g     O .bss	00000004 fft_cfg
00008684 g     F .text	00000008 __locale_charset
00000f54 g     F .text	00000010 switches_clear_edge_capture
0000d4a8 g     F .text	0000001c alt_up_irda_disable_read_interrupt
0000e208 g     F .text	0000003c alt_icache_flush
00012cdc g     O .bss	00000004 __malloc_top_pad
00000e8c g     F .text	0000000c pushbuttons_get_edge_capture
00001050 g     F .text	00000060 vga_draw_rectangle
00010d38 g     O .rwdata	00000004 __mb_cur_max
0000868c g     F .text	0000000c _localeconv_r
000097b0 g     F .text	0000003c __i2b
00008068 g     F .text	0000049c __sfvwrite_r
0000ca30 g     F .text	0000001c alt_avalon_sgdma_stop
00003e24 g     F .text	00000070 _sbrk_r
00000c18 g     F .text	0000008c hex_write
0000a784 g     F .text	00000078 _read_r
0000b854 g     F .text	00000004 alt_dcache_flush
0000f64c g     O .rwdata	0000000c __lc_ctype
00010d50 g     O .rwdata	00000004 alt_max_fd
0000d874 g     F .text	0000000c alt_up_rs232_check_parity
000032e0 g     F .text	00000138 __unpack_d
0000a504 g     F .text	00000110 _fclose_r
00000788 g     F .text	00000080 ethernet_tx
0000d50c g     F .text	00000008 read_num_bytes_available
00007934 g     F .text	00000034 fflush
00000434 g     F .text	000000d0 kiss_fft_alloc_twiddles
00012ce0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b8e0 g     F .text	000000bc alt_irq_register
0000d4ec g     F .text	0000000c read_RI_bit
000024bc g     F .text	00000074 __adddf3
00012cd8 g     O .bss	00000001 working
00008d74 g     F .text	00000120 __b2d
0000add8 g     F .text	000005b0 __umoddi3
0000bae4 g     F .text	00000098 lseek
00010d24 g     O .rwdata	00000004 __fdlib_version
00010d2c g     O .rwdata	00000004 _global_impure_ptr
00009b2c g     F .text	000005f4 _realloc_r
00083428 g       *ABS*	00000000 __bss_end
00000f30 g     F .text	0000000c switches_set_interrupt_mask
0000caf8 g     F .text	0000009c alt_avalon_sgdma_do_async_transfer
000001b4 g     F .text	00000154 audio_isr
0000e02c g     F .text	000000ac alt_tick
0000a7fc g     F .text	000005dc __udivdi3
00000540 g     F .text	00000024 audio_clear_write_fifo
0000ec34 g     O .rodata	00000028 __mprec_bigtens
00009a0c g     F .text	00000120 __s2b
0000b498 g     F .text	00000194 __floatunsidf
00008c94 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000d520 g     F .text	00000008 read_data_byte
00000700 g     F .text	00000008 ethernet_get_tx_frame
00007a9c g     F .text	00000018 __fp_lock_all
00073138 g     O .bss	000000f8 power_history
0000dff8 g     F .text	00000034 alt_alarm_stop
0000d4f8 g     F .text	00000008 read_RE_bit
08200000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00012cf8 g     O .bss	00000004 alt_irq_active
00000708 g     F .text	00000008 ethernet_get_rx_frame
00012cc4 g     O .bss	00000004 tx_frame
0000d404 g     F .text	00000010 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	0000007c alt_irq_handler
0000f658 g     O .rwdata	00000028 alt_dev_null
00000564 g     F .text	00000070 audio_read
0000d0d4 g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
0000cf50 g     F .text	00000030 alt_avalon_sgdma_check_descriptor_status
0000d6d4 g     F .text	00000040 alt_up_ps2_write_data_byte
0000dc54 g     F .text	00000004 alt_dcache_flush_all
00008b60 g     F .text	00000070 __hi0bits
00000f24 g     F .text	0000000c switches_get_positions
00002ddc g     F .text	000000d8 __fixdfsi
00000a14 g     F .text	0000000c green_leds_set
00000ff8 g     F .text	00000020 vga_swap_buffers
00010d70 g       *ABS*	00000000 __ram_rwdata_end
00010d48 g     O .rwdata	00000008 alt_dev_list
0000bf44 g     F .text	000000f4 write
0000ca00 g     F .text	00000030 alt_avalon_sgdma_enable_desc_poll
0000e3f4 g     F .text	000000e8 _putc_r
0000ee44 g       *ABS*	00000000 __ram_rodata_end
0000b860 g     F .text	00000080 fstat
0000d994 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00001018 g     F .text	00000038 vga_write
000098ec g     F .text	00000120 __pow5mult
00012cec g     O .bss	00000004 __nlocale_changed
0000b770 g     F .text	00000008 __umodsi3
00000770 g     F .text	00000018 ntohl
0000cdc0 g     F .text	00000040 alt_avalon_sgdma_construct_mem_to_stream_desc
00001b90 g     F .text	00000004 switches_isr
0000c950 g     F .text	00000010 alt_avalon_sgdma_register_callback
00083428 g       *ABS*	00000000 end
0000d714 g     F .text	00000070 alt_up_ps2_write_fd
00000e98 g     F .text	00000010 pushbuttons_clear_edge_capture
0000d30c g     F .text	0000000c alt_up_irda_check_parity
0000db70 g     F .text	00000050 alt_up_char_buffer_init
00000f3c g     F .text	0000000c switches_get_interrupt_mask
0000c44c g     F .text	00000078 altera_avalon_jtag_uart_init
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000c9e0 g     F .text	00000020 alt_avalon_sgdma_disable_desc_poll
0000cf80 g     F .text	00000044 alt_avalon_timer_sc_init
00002f4c g     F .text	00000080 __clzsi2
0000c7d4 g     F .text	0000017c altera_avalon_jtag_uart_write
0000cebc g     F .text	00000038 alt_avalon_sgdma_construct_mem_to_mem_desc
0000030c g     F .text	0000010c kiss_fft_stride
000079c0 g     F .text	00000004 __sfp_lock_acquire
000088dc g     F .text	000000e4 memchr
00000418 g     F .text	0000001c kiss_fft
0000d068 g     F .text	0000002c alt_up_character_lcd_write
00003f60 g     F .text	00001eac ___vfprintf_internal_r
0000ce4c g     F .text	00000028 alt_avalon_sgdma_construct_stream_to_mem_desc
00007d54 g     F .text	00000314 _free_r
0000bbd4 g     F .text	000001dc alt_printf
0000e62c g     F .text	000001b0 __call_exitprocs
00000a34 g     F .text	00000018 green_leds_clear
00012cf0 g     O .bss	00000004 __mlocale_changed
00000f18 g     F .text	0000000c red_leds_clear_all
00010d34 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
00010ca8 g     O .rwdata	00000004 data_ptr
00012d08 g     O .bss	00000004 _alt_tick_rate
0000cef4 g     F .text	0000005c alt_avalon_sgdma_open
0000947c g     F .text	0000014c __lshift
00012d0c g     O .bss	00000004 _alt_nticks
0000bdd8 g     F .text	000000f8 read
0000c058 g     F .text	000002d0 alt_sys_init
0000d178 g     F .text	00000090 alt_up_character_lcd_shift_display
00000808 g     F .text	000001a0 ethernet_init
0000d548 g     F .text	00000030 alt_up_ps2_clear_fifo
0000d96c g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
0000dfd0 g     F .text	00000028 alt_remap_uncached
000095c8 g     F .text	000001e8 __multiply
0000d10c g     F .text	0000006c alt_up_character_lcd_erase_pos
0000c3c0 g     F .text	00000038 altera_avalon_jtag_uart_close
0000ee44 g       *ABS*	00000000 __ram_rwdata_start
0000e7f4 g       *ABS*	00000000 __ram_rodata_start
00073110 g     O .bss	00000028 __malloc_current_mallinfo
00009174 g     F .text	0000017c __d2b
00000748 g     F .text	00000028 htonl
00073230 g     O .bss	000000f8 average_power_spectrum
08201000 g       *ABS*	00000000 __alt_mem_packet_memory
0000c398 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
0000e19c g     F .text	0000006c alt_get_fd
00003418 g     F .text	000000c8 __fpcmp_parts_d
0000a494 g     F .text	00000070 _close_r
0000123c g     F .text	00000014 toggle_hardware_rendering
0000e27c g     F .text	00000074 memcmp
0000c348 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00083428 g       *ABS*	00000000 __alt_stack_base
0000c328 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
0000d4c4 g     F .text	00000018 alt_up_irda_enable_read_interrupt
00005e30 g     F .text	0000013c __swsetup_r
000028f4 g     F .text	00000258 __divdf3
00007b38 g     F .text	000000f0 __sfp
00008fd8 g     F .text	00000058 __copybits
0000f244 g     O .rwdata	00000408 __malloc_av_
000079cc g     F .text	00000004 __sinit_lock_release
00002530 g     F .text	000003c4 __muldf3
0000a24c g     F .text	00000060 __sread
0000da04 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
0000e0e0 g     F .text	000000bc alt_find_file
0000dc58 g     F .text	00000070 alt_dev_llist_insert
0000bbcc g     F .text	00000004 __malloc_lock
0000bef4 g     F .text	00000050 sbrk
0000ca4c g     F .text	00000018 alt_avalon_sgdma_start
00007738 g     F .text	000001fc _fflush_r
00000fec g     F .text	0000000c vga_set_back_buffer
0000a3e0 g     F .text	000000b4 _calloc_r
00010cf4 g     O .rwdata	00000001 use_hardware_rendering
00001380 g     F .text	0000022c compareAndPrint
00012c9c g       *ABS*	00000000 __bss_start
00008aa0 g     F .text	00000098 memset
0000189c g     F .text	000002a8 main
00000f64 g     F .text	0000003c switches_enable_interrupts
00012d04 g     O .bss	00000004 alt_envp
00012ce4 g     O .bss	00000004 __malloc_max_total_mem
0000db50 g     F .text	00000020 alt_up_char_buffer_open_dev
0000c370 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
0000e60c g     F .text	0000001c __swbuf
00001274 g     F .text	0000010c draw_fft
00010d60 g     O .rwdata	00000008 alt_sgdma_list
0000d208 g     F .text	00000090 alt_up_character_lcd_shift_cursor
0000a160 g     F .text	00000008 __sclose
00002024 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
00000a6c g     F .text	0000000c hex_clear_3to0
0000a614 g     F .text	00000014 fclose
0000d578 g     F .text	00000058 alt_up_ps2_read_data_byte
00000728 g     F .text	00000020 ntohs
00006184 g     F .text	000015b4 _dtoa_r
00003518 g     F .text	00000740 _malloc_r
00010d54 g     O .rwdata	00000004 alt_errno
00012cc8 g     O .bss	00000004 rx_frame
00001bf4 g     F .text	00000008 tlda_set_drawing_buffer
000085cc g     F .text	000000b8 _fwalk
0000d414 g     F .text	00000018 alt_up_irda_write_data
0000d528 g     F .text	00000020 alt_up_ps2_open_dev
00012cd4 g     O .bss	00000004 curState
0000e2f0 g     F .text	00000104 putc
0000b6a8 g     F .text	00000060 __divsi3
0000e984 g     O .rodata	00000014 __thenan_df
0000d2ec g     F .text	00000020 alt_up_character_lcd_open_dev
00007c28 g     F .text	0000012c _malloc_trim_r
0000d85c g     F .text	00000018 alt_up_ps2_enable_read_interrupt
00000a58 g     F .text	00000014 hex_clear
0000d0b4 g     F .text	00000010 alt_up_character_lcd_init
0000a2ac g     F .text	000000bc strcmp
0000e7f4 g       *ABS*	00000000 __flash_rodata_start
00000f48 g     F .text	0000000c switches_get_edge_capture
0000d880 g     F .text	00000020 alt_up_rs232_open_dev
0000b410 g     F .text	00000088 __nedf2
0000c038 g     F .text	00000020 alt_irq_init
0000bed0 g     F .text	00000024 alt_release_fd
0000d514 g     F .text	0000000c read_data_valid
0000d0f0 g     F .text	0000001c alt_up_character_lcd_cursor_off
0000e998 g     O .rodata	00000100 __clz_tab
00012cf4 g     O .bss	00000004 _PathLocale
00012cbc g     O .bss	00000004 current_power_history_index
000005d4 g     F .text	00000070 audio_write
0000d784 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
00000e80 g     F .text	0000000c pushbuttons_get_interrupt_mask
0000a368 g     F .text	00000078 _write_r
0000872c g     F .text	0000001c setlocale
00000e14 g     F .text	00000048 lcd_char_buffer_clear
00000eec g     F .text	00000014 red_leds_update
000015ac g     F .text	000000b8 sendData
00010d28 g     O .rwdata	00000004 _impure_ptr
00012cfc g     O .bss	00000004 alt_argc
00000fa0 g     F .text	00000034 vga_enable_dma
00000020 g       .exceptions	00000000 alt_irq_entry
00008cf4 g     F .text	00000080 __ulp
0000a120 g     F .text	00000040 __isinfd
00007a84 g     F .text	00000018 __fp_unlock_all
00001664 g     F .text	000001c0 fft
00010d40 g     O .rwdata	00000008 alt_fs_list
0000da20 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
0000d97c g     F .text	00000018 alt_up_rs232_write_data
00000a4c g     F .text	0000000c green_leds_clear_all
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008698 g     F .text	00000010 localeconv
00001d2c g     F .text	000002c8 __ieee754_sqrt
00001b94 g     F .text	00000060 tlda_draw
00000a78 g     F .text	0000000c hex_clear_7to4
00010d70 g       *ABS*	00000000 _edata
00000f00 g     F .text	00000018 red_leds_clear
00083428 g       *ABS*	00000000 _end
00001b44 g     F .text	0000004c pushbuttons_isr
00000710 g     F .text	00000018 htons
00000168 g       *ABS*	00000000 __ram_exceptions_end
0000c5f8 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
0000cd28 g     F .text	00000048 alt_avalon_sgdma_construct_descriptor
0000a1d0 g     F .text	0000007c __swrite
00010d30 g     O .rwdata	00000004 __malloc_trim_threshold
0000e0d8 g     F .text	00000008 altera_nios2_qsys_irq_init
0000e244 g     F .text	00000038 exit
0000d338 g     F .text	0000004c alt_up_irda_read_data
00008504 g     F .text	000000c8 _fwalk_reent
0000d7b8 g     F .text	00000088 alt_up_ps2_init
000092f0 g     F .text	0000018c __mdiff
00000308 g     F .text	00000004 kiss_fft_cleanup
00010cfb g     O .rwdata	00000006 destAddr
0000b708 g     F .text	00000060 __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000079c4 g     F .text	00000004 __sfp_lock_release
00000e74 g     F .text	0000000c pushbuttons_set_interrupt_mask
00000ea8 g     F .text	00000038 pushbuttons_enable_interrupts
0000d01c g     F .text	0000004c alt_up_character_lcd_string
0000d318 g     F .text	00000020 alt_up_irda_open_dev
000001a4 g     F .text	00000010 clamp
000006e0 g     F .text	00000010 char_lcd_shift_left
0000e7dc g     F .text	00000014 _exit
00001ff4 g     F .text	00000030 __isnand
0000dbc0 g     F .text	00000094 alt_alarm_start
00002eb4 g     F .text	00000098 __muldi3
00008748 g     F .text	00000194 __smakebuf_r
0000d678 g     F .text	0000005c alt_up_ps2_wait_for_ack
00003e94 g     F .text	00000074 strlen
0000de54 g     F .text	0000017c open
000010f8 g     F .text	00000004 ethernet_rx_isr
00002bd4 g     F .text	00000088 __gedf2
0000bdb0 g     F .text	00000028 alt_putchar
0000dd38 g     F .text	00000020 alt_icache_flush_all
00000b90 g     F .text	00000044 hex_write_7to4
0000d298 g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
00010d58 g     O .rwdata	00000004 alt_priority_mask
00005e0c g     F .text	00000024 __vfprintf_internal
0000d650 g     F .text	00000028 alt_up_ps2_read_fd
00000504 g     F .text	00000018 kiss_fft_alloc
0000ce74 g     F .text	00000048 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0000243c g     F .text	00000080 __subdf3
0000d384 g     F .text	00000080 alt_up_irda_read_fd
00010ca4 g     O .rwdata	00000004 instruction_ptr
00008bd0 g     F .text	000000c4 __lo0bits
00010d68 g     O .rwdata	00000008 alt_alarm_list
00000ca4 g     F .text	00000034 lcd_enable_dma
0000da38 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
0000b778 g     F .text	000000dc close
0000ba20 g     F .text	000000c4 alt_load
00002fcc g     F .text	00000314 __pack_d
0000051c g     F .text	00000024 audio_clear_read_fifo
0000c960 g     F .text	00000080 alt_avalon_sgdma_init
000034f0 g     F .text	00000014 free
000079c8 g     F .text	00000004 __sinit_lock_acquire
000097ec g     F .text	00000100 __multadd
00008b38 g     F .text	00000028 _Bfree
000006a8 g     F .text	00000028 char_lcd_write



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000234 	movhi	r16,8
 100:	840cca04 	addi	r16,r16,13096
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     174:	d6a32514 	ori	gp,gp,35988
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     17c:	108b2714 	ori	r2,r2,11420

    movhi r3, %hi(__bss_end)
     180:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
     184:	18cd0a14 	ori	r3,r3,13352

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	000ba200 	call	ba20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	000bb7c0 	call	bb7c <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <clamp>:
void draw_fft ();
void signal_audio_ready ();

int clamp (int value, int ceiling)
{
  if (value < ceiling) return 0;
     1a4:	2140010e 	bge	r4,r5,1ac <clamp+0x8>
     1a8:	0009883a 	mov	r4,zero
  else return value;
}
     1ac:	2005883a 	mov	r2,r4
     1b0:	f800283a 	ret

000001b4 <audio_isr>:

void audio_isr (void *context, unsigned int id) {
     1b4:	defffc04 	addi	sp,sp,-16
     1b8:	dfc00315 	stw	ra,12(sp)
     1bc:	dc800215 	stw	r18,8(sp)
     1c0:	dc400115 	stw	r17,4(sp)
     1c4:	dc000015 	stw	r16,0(sp)
  uint32_t numToRead = (samples_for_fft_requested) ? (NUM_SAMPLES - numRead) : AUDIO_BUF_SIZE;
     1c8:	00800074 	movhi	r2,1
     1cc:	108b3304 	addi	r2,r2,11468
     1d0:	10800003 	ldbu	r2,0(r2)
     1d4:	10803fcc 	andi	r2,r2,255
     1d8:	1000021e 	bne	r2,zero,1e4 <audio_isr+0x30>
     1dc:	00802004 	movi	r2,128
     1e0:	00000506 	br	1f8 <audio_isr+0x44>
     1e4:	00800074 	movhi	r2,1
     1e8:	108b3404 	addi	r2,r2,11472
     1ec:	10c00017 	ldw	r3,0(r2)
     1f0:	00880004 	movi	r2,8192
     1f4:	10c5c83a 	sub	r2,r2,r3
  // Want to read step
  size_t count = audio_read (left_buffer, right_buffer, STEP_SIZE*numToRead);
     1f8:	04000074 	movhi	r16,1
     1fc:	840b4404 	addi	r16,r16,11536
     200:	04400074 	movhi	r17,1
     204:	8c4bc404 	addi	r17,r17,12048
     208:	108d883a 	add	r6,r2,r2
     20c:	8009883a 	mov	r4,r16
     210:	880b883a 	mov	r5,r17
     214:	318d883a 	add	r6,r6,r6
     218:	00005640 	call	564 <audio_read>
     21c:	1025883a 	mov	r18,r2
  audio_write (left_buffer, right_buffer, count);
     220:	8009883a 	mov	r4,r16
     224:	880b883a 	mov	r5,r17
     228:	100d883a 	mov	r6,r2
     22c:	00005d40 	call	5d4 <audio_write>
  if (samples_for_fft_requested) {
     230:	04000074 	movhi	r16,1
     234:	840b3304 	addi	r16,r16,11468
     238:	80800003 	ldbu	r2,0(r16)
     23c:	10803fcc 	andi	r2,r2,255
     240:	10002b26 	beq	r2,zero,2f0 <audio_isr+0x13c>
      size_t i;
      red_leds_set (0xFF);
     244:	01003fc4 	movi	r4,255
     248:	0000ee00 	call	ee0 <red_leds_set>
      //modify count by STEP_SIZE since only count/STEP_SIZE samples actually copied
      size_t numSamples = count/STEP_SIZE;
     24c:	9022d0ba 	srli	r17,r18,2
      if (numRead + numSamples >= NUM_SAMPLES) {
     250:	01000074 	movhi	r4,1
     254:	210b3404 	addi	r4,r4,11472
     258:	20800017 	ldw	r2,0(r4)
     25c:	8885883a 	add	r2,r17,r2
     260:	00c7ffc4 	movi	r3,8191
     264:	1880042e 	bgeu	r3,r2,278 <audio_isr+0xc4>
        numRead = 0;
     268:	20000015 	stw	zero,0(r4)
        samples_for_fft_requested = false;
     26c:	80000005 	stb	zero,0(r16)
        signal_audio_ready();
     270:	00012300 	call	1230 <signal_audio_ready>
        startVal = 0;
     274:	d0280215 	stw	zero,-24568(gp)
      }
      for (i = startVal; i < count; i+= STEP_SIZE) {
     278:	d1280217 	ldw	r4,-24568(gp)
     27c:	2480132e 	bgeu	r4,r18,2cc <audio_isr+0x118>
     280:	02000074 	movhi	r8,1
     284:	420b3404 	addi	r8,r8,11472
     288:	01c00074 	movhi	r7,1
     28c:	39cb4404 	addi	r7,r7,11536
     290:	018001f4 	movhi	r6,7
     294:	318cca04 	addi	r6,r6,13096
     298:	01400104 	movi	r5,4
        samples_for_fft[i/STEP_SIZE + numRead].r = left_buffer[i];
     29c:	40800017 	ldw	r2,0(r8)
     2a0:	2006d0ba 	srli	r3,r4,2
     2a4:	1887883a 	add	r3,r3,r2
     2a8:	2105883a 	add	r2,r4,r4
     2ac:	1085883a 	add	r2,r2,r2
     2b0:	11c5883a 	add	r2,r2,r7
     2b4:	10800017 	ldw	r2,0(r2)
     2b8:	180690fa 	slli	r3,r3,3
     2bc:	1987883a 	add	r3,r3,r6
     2c0:	18800015 	stw	r2,0(r3)
        numRead = 0;
        samples_for_fft_requested = false;
        signal_audio_ready();
        startVal = 0;
      }
      for (i = startVal; i < count; i+= STEP_SIZE) {
     2c4:	2149883a 	add	r4,r4,r5
     2c8:	24bff436 	bltu	r4,r18,29c <audio_isr+0xe8>
        samples_for_fft[i/STEP_SIZE + numRead].r = left_buffer[i];
      }
      numRead += numSamples;
     2cc:	00800074 	movhi	r2,1
     2d0:	108b3404 	addi	r2,r2,11472
     2d4:	10c00017 	ldw	r3,0(r2)
     2d8:	88c7883a 	add	r3,r17,r3
     2dc:	10c00015 	stw	r3,0(r2)
      //maintian proper spacing on next set of samples when next interrupt received
      startVal = count%STEP_SIZE;
     2e0:	908000cc 	andi	r2,r18,3
     2e4:	d0a80215 	stw	r2,-24568(gp)
      red_leds_clear (0xFF);
     2e8:	01003fc4 	movi	r4,255
     2ec:	0000f000 	call	f00 <red_leds_clear>
    }
}
     2f0:	dfc00317 	ldw	ra,12(sp)
     2f4:	dc800217 	ldw	r18,8(sp)
     2f8:	dc400117 	ldw	r17,4(sp)
     2fc:	dc000017 	ldw	r16,0(sp)
     300:	dec00404 	addi	sp,sp,16
     304:	f800283a 	ret

00000308 <kiss_fft_cleanup>:
/*
 * Empty function, nothing to clean up
 */
void kiss_fft_cleanup (void)
{
}
     308:	f800283a 	ret

0000030c <kiss_fft_stride>:
    return kiss_fft_alloc_twiddles (nfft, inverse_fft, mem, lenmem);
}


void kiss_fft_stride (const kiss_fft_cfg cfg, kiss_fft_cpx *fin, kiss_fft_cpx *fout, int in_stride)
{
     30c:	defffd04 	addi	sp,sp,-12
     310:	dfc00215 	stw	ra,8(sp)
     314:	dc400115 	stw	r17,4(sp)
     318:	dc000015 	stw	r16,0(sp)
     31c:	2021883a 	mov	r16,r4
     320:	2819883a 	mov	r12,r5
     324:	3023883a 	mov	r17,r6

  /*
   * Set the size, source and destination address
   */

  belFftPtr->N.N = cfg->nfft;
     328:	20800017 	ldw	r2,0(r4)
     32c:	00e20834 	movhi	r3,34848
     330:	18cc0004 	addi	r3,r3,12288
     334:	1880020d 	sth	r2,8(r3)
  belFftPtr->Finadr = fin;
     338:	19400315 	stw	r5,12(r3)
  belFftPtr->Foutadr = fout;
     33c:	19800415 	stw	r6,16(r3)

  /*
   * Copy the precalculated factors.
   */

  facbuf = cfg->factors;
     340:	21000204 	addi	r4,r4,8
  i = 0;
  while (1) {
      belFftPtr->Factors[i].P = *facbuf++;
     344:	2080000b 	ldhu	r2,0(r4)
     348:	1880058d 	sth	r2,22(r3)
     34c:	01400084 	movi	r5,2
     350:	2149883a 	add	r4,r4,r5
      belFftPtr->Factors[i].M = *facbuf;
     354:	2080000b 	ldhu	r2,0(r4)
     358:	1880050d 	sth	r2,20(r3)
      if (*facbuf++ == 1) {
     35c:	20c0000f 	ldh	r3,0(r4)
     360:	00800044 	movi	r2,1
     364:	18801526 	beq	r3,r2,3bc <kiss_fft_stride+0xb0>
     368:	214b883a 	add	r5,r4,r5
     36c:	000d883a 	mov	r6,zero
     370:	100f883a 	mov	r7,r2
     374:	02e20834 	movhi	r11,34848
     378:	5acc0004 	addi	r11,r11,12288
     37c:	02800504 	movi	r10,20
     380:	02400084 	movi	r9,2
     384:	02000104 	movi	r8,4
          break;
      }
      i++;
     388:	31cd883a 	add	r6,r6,r7
   */

  facbuf = cfg->factors;
  i = 0;
  while (1) {
      belFftPtr->Factors[i].P = *facbuf++;
     38c:	28c0000b 	ldhu	r3,0(r5)
     390:	3185883a 	add	r2,r6,r6
     394:	1085883a 	add	r2,r2,r2
     398:	12c5883a 	add	r2,r2,r11
     39c:	1285883a 	add	r2,r2,r10
     3a0:	10c0008d 	sth	r3,2(r2)
     3a4:	2a49883a 	add	r4,r5,r9
      belFftPtr->Factors[i].M = *facbuf;
     3a8:	20c0000b 	ldhu	r3,0(r4)
     3ac:	10c0000d 	sth	r3,0(r2)
      if (*facbuf++ == 1) {
     3b0:	2a0b883a 	add	r5,r5,r8
     3b4:	2080000f 	ldh	r2,0(r4)
     3b8:	11fff31e 	bne	r2,r7,388 <kiss_fft_stride+0x7c>

  /*
   * Flush the data cache for the source and destination region
   */

  alt_dcache_flush (fin, cfg->nfft * sizeof (kiss_fft_cpx));
     3bc:	81400017 	ldw	r5,0(r16)
     3c0:	6009883a 	mov	r4,r12
     3c4:	280a90fa 	slli	r5,r5,3
     3c8:	000b8540 	call	b854 <alt_dcache_flush>
  alt_dcache_flush (fout, cfg->nfft * sizeof (kiss_fft_cpx));
     3cc:	81400017 	ldw	r5,0(r16)
     3d0:	8809883a 	mov	r4,r17
     3d4:	280a90fa 	slli	r5,r5,3
     3d8:	000b8540 	call	b854 <alt_dcache_flush>

  /*
   * Start the FFT
   */

  belFftPtr->Control.Start = 1;
     3dc:	00e20834 	movhi	r3,34848
     3e0:	18cc0004 	addi	r3,r3,12288
     3e4:	18800017 	ldw	r2,0(r3)
     3e8:	10800054 	ori	r2,r2,1
     3ec:	18800015 	stw	r2,0(r3)
     3f0:	1809883a 	mov	r4,r3
     3f4:	00c00104 	movi	r3,4
  /*
   * We poll the status register until the FFT is ready. Other implementations
   * like generation an interrupt are possible.
   */

  while (! belFftPtr->Status.Int);
     3f8:	20800117 	ldw	r2,4(r4)
     3fc:	10c4703a 	and	r2,r2,r3
     400:	103ffd26 	beq	r2,zero,3f8 <kiss_fft_stride+0xec>
}
     404:	dfc00217 	ldw	ra,8(sp)
     408:	dc400117 	ldw	r17,4(sp)
     40c:	dc000017 	ldw	r16,0(sp)
     410:	dec00304 	addi	sp,sp,12
     414:	f800283a 	ret

00000418 <kiss_fft>:


void kiss_fft (kiss_fft_cfg cfg, kiss_fft_cpx *fin, kiss_fft_cpx *fout)
{
     418:	deffff04 	addi	sp,sp,-4
     41c:	dfc00015 	stw	ra,0(sp)
    kiss_fft_stride (cfg, fin, fout, 1);
     420:	01c00044 	movi	r7,1
     424:	000030c0 	call	30c <kiss_fft_stride>
}
     428:	dfc00017 	ldw	ra,0(sp)
     42c:	dec00104 	addi	sp,sp,4
     430:	f800283a 	ret

00000434 <kiss_fft_alloc_twiddles>:
 *
 * The parameters inverse_fft, mem, and lenmem are not used.
 */

kiss_fft_cfg kiss_fft_alloc_twiddles (int nfft, int inverse_fft, void *mem, size_t *lenmem)
{
     434:	defffe04 	addi	sp,sp,-8
     438:	dfc00115 	stw	ra,4(sp)
     43c:	dc000015 	stw	r16,0(sp)
     440:	2021883a 	mov	r16,r4
    kiss_fft_cfg cfg;

    cfg = (kiss_fft_cfg) malloc (sizeof (struct kiss_fft_state));
     444:	01002304 	movi	r4,140
     448:	00035040 	call	3504 <malloc>
     44c:	100d883a 	mov	r6,r2
    if (cfg) {
     450:	10002726 	beq	r2,zero,4f0 <kiss_fft_alloc_twiddles+0xbc>
        cfg->nfft = nfft;
     454:	14000015 	stw	r16,0(r2)

        cfg->belFftPtr = (struct bel_fft *) FFT_BASE;
     458:	00820834 	movhi	r2,2080
     45c:	108c0004 	addi	r2,r2,12288
     460:	30802215 	stw	r2,136(r6)
     464:	31400204 	addi	r5,r6,8
     468:	01000104 	movi	r4,4
     46c:	01c00144 	movi	r7,5
     470:	02000044 	movi	r8,1
     474:	2015883a 	mov	r10,r4
     478:	02c00084 	movi	r11,2
     47c:	025f4004 	movi	r9,32000
     480:	00000c06 	br	4b4 <kiss_fft_alloc_twiddles+0x80>
    int p = 4;

    /* factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
            switch (p) {
     484:	00800084 	movi	r2,2
     488:	20800326 	beq	r4,r2,498 <kiss_fft_alloc_twiddles+0x64>
     48c:	2280041e 	bne	r4,r10,4a0 <kiss_fft_alloc_twiddles+0x6c>
     490:	1009883a 	mov	r4,r2
     494:	00000406 	br	4a8 <kiss_fft_alloc_twiddles+0x74>
     498:	010000c4 	movi	r4,3
     49c:	00000106 	br	4a4 <kiss_fft_alloc_twiddles+0x70>
                case 4: p = 2; break;
                case 2: p = 3; break;
                default: p += 2; break;
     4a0:	22c9883a 	add	r4,r4,r11
            }
            if (p > 32000 || (int) p *(int) p > n) {
     4a4:	49000216 	blt	r9,r4,4b0 <kiss_fft_alloc_twiddles+0x7c>
     4a8:	2105383a 	mul	r2,r4,r4
     4ac:	8080010e 	bge	r16,r2,4b4 <kiss_fft_alloc_twiddles+0x80>
     4b0:	8009883a 	mov	r4,r16
{
    int p = 4;

    /* factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
     4b4:	8107283a 	div	r3,r16,r4
     4b8:	1905383a 	mul	r2,r3,r4
     4bc:	80bff11e 	bne	r16,r2,484 <kiss_fft_alloc_twiddles+0x50>
            if (p > 32000 || (int) p *(int) p > n) {
                p = n;          /* no more factors, skip to end */
            }
        }
        n /= p;
        if (p>5) {
     4c0:	39000816 	blt	r7,r4,4e4 <kiss_fft_alloc_twiddles+0xb0>
            }
            if (p > 32000 || (int) p *(int) p > n) {
                p = n;          /* no more factors, skip to end */
            }
        }
        n /= p;
     4c4:	1821883a 	mov	r16,r3
        if (p>5) {
            return 0;
        }
        *facbuf++ = (short int) p;
     4c8:	2900000d 	sth	r4,0(r5)
     4cc:	00c00084 	movi	r3,2
     4d0:	28c5883a 	add	r2,r5,r3
        *facbuf++ = (short int) n;
     4d4:	1400000d 	sth	r16,0(r2)
    } while (n > 1);
     4d8:	4400050e 	bge	r8,r16,4f0 <kiss_fft_alloc_twiddles+0xbc>
        n /= p;
        if (p>5) {
            return 0;
        }
        *facbuf++ = (short int) p;
        *facbuf++ = (short int) n;
     4dc:	10cb883a 	add	r5,r2,r3
     4e0:	003ff406 	br	4b4 <kiss_fft_alloc_twiddles+0x80>
    if (cfg) {
        cfg->nfft = nfft;

        cfg->belFftPtr = (struct bel_fft *) FFT_BASE;
        if (! kf_factor (nfft, cfg->factors)) {
            free (cfg);
     4e4:	3009883a 	mov	r4,r6
     4e8:	00034f00 	call	34f0 <free>
     4ec:	000d883a 	mov	r6,zero
            return NULL;
        }
    }
    return cfg;
}
     4f0:	3005883a 	mov	r2,r6
     4f4:	dfc00117 	ldw	ra,4(sp)
     4f8:	dc000017 	ldw	r16,0(sp)
     4fc:	dec00204 	addi	sp,sp,8
     500:	f800283a 	ret

00000504 <kiss_fft_alloc>:


kiss_fft_cfg kiss_fft_alloc (int nfft, int inverse_fft, void * mem, size_t * lenmem)
{
     504:	deffff04 	addi	sp,sp,-4
     508:	dfc00015 	stw	ra,0(sp)
    return kiss_fft_alloc_twiddles (nfft, inverse_fft, mem, lenmem);
     50c:	00004340 	call	434 <kiss_fft_alloc_twiddles>
}
     510:	dfc00017 	ldw	ra,0(sp)
     514:	dec00104 	addi	sp,sp,4
     518:	f800283a 	ret

0000051c <audio_clear_read_fifo>:
  *audio_ptr |= AUDIO_RE_MASK;
}

void audio_clear_read_fifo ()
{
  *audio_ptr |= AUDIO_CR_MASK;
     51c:	d1200317 	ldw	r4,-32756(gp)
     520:	20800017 	ldw	r2,0(r4)
     524:	10800114 	ori	r2,r2,4
     528:	20800015 	stw	r2,0(r4)
  *audio_ptr &= ~AUDIO_CR_MASK;
     52c:	20800017 	ldw	r2,0(r4)
     530:	00fffec4 	movi	r3,-5
     534:	10c4703a 	and	r2,r2,r3
     538:	20800015 	stw	r2,0(r4)
}
     53c:	f800283a 	ret

00000540 <audio_clear_write_fifo>:

void audio_clear_write_fifo ()
{
  *audio_ptr |= AUDIO_CW_MASK;
     540:	d1200317 	ldw	r4,-32756(gp)
     544:	20800017 	ldw	r2,0(r4)
     548:	10800214 	ori	r2,r2,8
     54c:	20800015 	stw	r2,0(r4)
  *audio_ptr &= ~AUDIO_CW_MASK;
     550:	20800017 	ldw	r2,0(r4)
     554:	00fffdc4 	movi	r3,-9
     558:	10c4703a 	and	r2,r2,r3
     55c:	20800015 	stw	r2,0(r4)
}
     560:	f800283a 	ret

00000564 <audio_read>:

uint32_t audio_read (int *left_buffer, int *right_buffer, uint32_t count)
{
  size_t read_buffer_index = 0;
  while ((*fifospace_ptr & AUDIO_RARC_MASK) && (read_buffer_index < count))
     564:	d3a00217 	ldw	r14,-32760(gp)
     568:	70800017 	ldw	r2,0(r14)
     56c:	10803fcc 	andi	r2,r2,255
     570:	10001526 	beq	r2,zero,5c8 <audio_read+0x64>
     574:	30001426 	beq	r6,zero,5c8 <audio_read+0x64>
    {
      left_buffer[read_buffer_index]  = *leftdata_ptr;
     578:	d3600017 	ldw	r13,-32768(gp)
      right_buffer[read_buffer_index] = *rightdata_ptr;
     57c:	d3200117 	ldw	r12,-32764(gp)
     580:	0011883a 	mov	r8,zero
     584:	000f883a 	mov	r7,zero
     588:	02c00044 	movi	r11,1
     58c:	02803fc4 	movi	r10,255
     590:	02400104 	movi	r9,4
  *audio_ptr |= AUDIO_CW_MASK;
  *audio_ptr &= ~AUDIO_CW_MASK;
}

uint32_t audio_read (int *left_buffer, int *right_buffer, uint32_t count)
{
     594:	3907883a 	add	r3,r7,r4
  size_t read_buffer_index = 0;
  while ((*fifospace_ptr & AUDIO_RARC_MASK) && (read_buffer_index < count))
    {
      left_buffer[read_buffer_index]  = *leftdata_ptr;
     598:	68800017 	ldw	r2,0(r13)
     59c:	18800015 	stw	r2,0(r3)
     5a0:	3947883a 	add	r3,r7,r5
      right_buffer[read_buffer_index] = *rightdata_ptr;
     5a4:	60800017 	ldw	r2,0(r12)
     5a8:	18800015 	stw	r2,0(r3)
      read_buffer_index++;
     5ac:	42d1883a 	add	r8,r8,r11
}

uint32_t audio_read (int *left_buffer, int *right_buffer, uint32_t count)
{
  size_t read_buffer_index = 0;
  while ((*fifospace_ptr & AUDIO_RARC_MASK) && (read_buffer_index < count))
     5b0:	70800017 	ldw	r2,0(r14)
     5b4:	1284703a 	and	r2,r2,r10
     5b8:	10000426 	beq	r2,zero,5cc <audio_read+0x68>
     5bc:	3a4f883a 	add	r7,r7,r9
     5c0:	32000226 	beq	r6,r8,5cc <audio_read+0x68>
     5c4:	003ff306 	br	594 <audio_read+0x30>
     5c8:	0011883a 	mov	r8,zero
      left_buffer[read_buffer_index]  = *leftdata_ptr;
      right_buffer[read_buffer_index] = *rightdata_ptr;
      read_buffer_index++;
    }
  return read_buffer_index;
}
     5cc:	4005883a 	mov	r2,r8
     5d0:	f800283a 	ret

000005d4 <audio_write>:

uint32_t audio_write (int *left_buffer, int *right_buffer, uint32_t count)
{
  size_t write_buffer_index = 0;
  while ((*fifospace_ptr & AUDIO_WSRC_MASK) && (write_buffer_index < count))
     5d4:	d3600217 	ldw	r13,-32760(gp)
     5d8:	68800017 	ldw	r2,0(r13)
     5dc:	10803fec 	andhi	r2,r2,255
     5e0:	10001526 	beq	r2,zero,638 <audio_write+0x64>
     5e4:	30001426 	beq	r6,zero,638 <audio_write+0x64>
    {
      *leftdata_ptr = left_buffer[write_buffer_index];
     5e8:	d3200017 	ldw	r12,-32768(gp)
      *rightdata_ptr = right_buffer[write_buffer_index];
     5ec:	d2e00117 	ldw	r11,-32764(gp)
     5f0:	000f883a 	mov	r7,zero
     5f4:	0007883a 	mov	r3,zero
     5f8:	02800044 	movi	r10,1
     5fc:	02403ff4 	movhi	r9,255
     600:	02000104 	movi	r8,4
    }
  return read_buffer_index;
}

uint32_t audio_write (int *left_buffer, int *right_buffer, uint32_t count)
{
     604:	1905883a 	add	r2,r3,r4
  size_t write_buffer_index = 0;
  while ((*fifospace_ptr & AUDIO_WSRC_MASK) && (write_buffer_index < count))
    {
      *leftdata_ptr = left_buffer[write_buffer_index];
     608:	10800017 	ldw	r2,0(r2)
     60c:	60800015 	stw	r2,0(r12)
     610:	1945883a 	add	r2,r3,r5
      *rightdata_ptr = right_buffer[write_buffer_index];
     614:	10800017 	ldw	r2,0(r2)
     618:	58800015 	stw	r2,0(r11)
      write_buffer_index++;
     61c:	3a8f883a 	add	r7,r7,r10
}

uint32_t audio_write (int *left_buffer, int *right_buffer, uint32_t count)
{
  size_t write_buffer_index = 0;
  while ((*fifospace_ptr & AUDIO_WSRC_MASK) && (write_buffer_index < count))
     620:	68800017 	ldw	r2,0(r13)
     624:	1244703a 	and	r2,r2,r9
     628:	10000426 	beq	r2,zero,63c <audio_write+0x68>
     62c:	1a07883a 	add	r3,r3,r8
     630:	31c00226 	beq	r6,r7,63c <audio_write+0x68>
     634:	003ff306 	br	604 <audio_write+0x30>
     638:	000f883a 	mov	r7,zero
      *leftdata_ptr = left_buffer[write_buffer_index];
      *rightdata_ptr = right_buffer[write_buffer_index];
      write_buffer_index++;
    }
  return write_buffer_index;
}
     63c:	3805883a 	mov	r2,r7
     640:	f800283a 	ret

00000644 <audio_init>:
/***************************************
 ****  PUBLIC FUNCTION DEFINITIONS  ****
 ***************************************/

void audio_init (void *isr)
{
     644:	deffff04 	addi	sp,sp,-4
     648:	dfc00015 	stw	ra,0(sp)
     64c:	200d883a 	mov	r6,r4
  audio_isr = isr;
     650:	d1280315 	stw	r4,-24564(gp)

  // Register internal interrupt handler
  alt_irq_register (AUDIO_IRQ, NULL, (alt_isr_func) audio_isr);
     654:	01000184 	movi	r4,6
     658:	000b883a 	mov	r5,zero
     65c:	000b8e00 	call	b8e0 <alt_irq_register>

  // Enable interrupts from audio module
  *audio_ptr |= AUDIO_RE_MASK;
     660:	d0e00317 	ldw	r3,-32756(gp)
     664:	18800017 	ldw	r2,0(r3)
     668:	10800054 	ori	r2,r2,1
     66c:	18800015 	stw	r2,0(r3)
}
     670:	dfc00017 	ldw	ra,0(sp)
     674:	dec00104 	addi	sp,sp,4
     678:	f800283a 	ret

0000067c <char_lcd_move_cursor>:
void char_lcd_move_cursor (int x, int y)
{
  char address = 0;
  
  address |= (x < LCD_X_MAX) ? x : LCD_X_MAX;
  address |= (y == 0) ? LCD_TOP_ROW : LCD_BOTTOM_ROW;  
     67c:	280ac03a 	cmpne	r5,r5,zero
     680:	280a91ba 	slli	r5,r5,6
  
  // write to the LCD instruction register
  *(instruction_ptr) = LCD_SET_CURSOR | address;		
     684:	d0e00417 	ldw	r3,-32752(gp)
     688:	008009c4 	movi	r2,39
     68c:	1100010e 	bge	r2,r4,694 <char_lcd_move_cursor+0x18>
     690:	1009883a 	mov	r4,r2
     694:	00bfe004 	movi	r2,-128
     698:	2084b03a 	or	r2,r4,r2
     69c:	1144b03a 	or	r2,r2,r5
     6a0:	18800005 	stb	r2,0(r3)
}
     6a4:	f800283a 	ret

000006a8 <char_lcd_write>:
/******************************************************************************
 * Subroutine to send a string of text to the LCD 
******************************************************************************/
void char_lcd_write (char *text)
{
	while (*(text))
     6a8:	20800007 	ldb	r2,0(r4)
     6ac:	10000726 	beq	r2,zero,6cc <char_lcd_write+0x24>
     6b0:	01400044 	movi	r5,1
	{
		*(data_ptr) = *(text);	// write to the LCD data register
     6b4:	20800003 	ldbu	r2,0(r4)
     6b8:	d0e00517 	ldw	r3,-32748(gp)
     6bc:	18800005 	stb	r2,0(r3)
	  text++;
     6c0:	2149883a 	add	r4,r4,r5
/******************************************************************************
 * Subroutine to send a string of text to the LCD 
******************************************************************************/
void char_lcd_write (char *text)
{
	while (*(text))
     6c4:	20800007 	ldb	r2,0(r4)
     6c8:	103ffa1e 	bne	r2,zero,6b4 <char_lcd_write+0xc>
     6cc:	f800283a 	ret

000006d0 <char_lcd_cursor_off>:
/******************************************************************************
 * Subroutine to turn off the LCD cursor
******************************************************************************/
void char_lcd_cursor_off (void)
{
	*(instruction_ptr) = LCD_CURSOR_OFF;	 // turn off the LCD cursor
     6d0:	00c00304 	movi	r3,12
     6d4:	d0a00417 	ldw	r2,-32752(gp)
     6d8:	10c00005 	stb	r3,0(r2)
}
     6dc:	f800283a 	ret

000006e0 <char_lcd_shift_left>:
/******************************************************************************
 * Subroutine to shift the LCD cursor one pixel to the left.
******************************************************************************/
void char_lcd_shift_left (void)
{
	*(instruction_ptr) = LCD_SHIFT_LEFT;	 // shift display to the left
     6e0:	00c00604 	movi	r3,24
     6e4:	d0a00417 	ldw	r2,-32752(gp)
     6e8:	10c00005 	stb	r3,0(r2)
}
     6ec:	f800283a 	ret

000006f0 <char_lcd_shift_right>:
/******************************************************************************
 * Subroutine to shift the LCD cursor one pixel to the right.
******************************************************************************/
void char_lcd_shift_right (void)
{
	*(instruction_ptr) = LCD_SHIFT_RIGHT;	 // shift display to the right
     6f0:	00c00704 	movi	r3,28
     6f4:	d0a00417 	ldw	r2,-32752(gp)
     6f8:	10c00005 	stb	r3,0(r2)
}
     6fc:	f800283a 	ret

00000700 <ethernet_get_tx_frame>:
 * the frame's fields are all properly set before calling ethernet_tx(). 
 */
struct ethernet_frame *ethernet_get_tx_frame (void)
{
  return tx_frame;
}
     700:	d0a80517 	ldw	r2,-24556(gp)
     704:	f800283a 	ret

00000708 <ethernet_get_rx_frame>:
 * be updated each time a new frame is received.
 */
struct ethernet_frame *ethernet_get_rx_frame (void)
{
  return rx_frame;
}
     708:	d0a80417 	ldw	r2,-24560(gp)
     70c:	f800283a 	ret

00000710 <htons>:
 * Takes a uint16_t in host byte order and converts it to network 
 * byte order.
 */
uint16_t htons(uint16_t n)
{
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
     710:	213fffcc 	andi	r4,r4,65535
     714:	20803fcc 	andi	r2,r4,255
     718:	1004923a 	slli	r2,r2,8
     71c:	2008d23a 	srli	r4,r4,8
}
     720:	1104b03a 	or	r2,r2,r4
     724:	f800283a 	ret

00000728 <ntohs>:
/**
 * Takes a uint16_t in network byte order and converts it to host 
 * byte order.
 */
uint16_t ntohs(uint16_t n)
{
     728:	deffff04 	addi	sp,sp,-4
     72c:	dfc00015 	stw	ra,0(sp)
  return htons(n);
     730:	213fffcc 	andi	r4,r4,65535
     734:	00007100 	call	710 <htons>
}
     738:	10bfffcc 	andi	r2,r2,65535
     73c:	dfc00017 	ldw	ra,0(sp)
     740:	dec00104 	addi	sp,sp,4
     744:	f800283a 	ret

00000748 <htonl>:
/**
 * Takes a uint32_t in host byte order and converts it to network 
 * byte order.
 */
uint32_t htonl (uint32_t n)
{
     748:	2006963a 	slli	r3,r4,24
     74c:	20bfc00c 	andi	r2,r4,65280
     750:	1004923a 	slli	r2,r2,8
     754:	1886b03a 	or	r3,r3,r2
     758:	20803fec 	andhi	r2,r4,255
     75c:	1004d23a 	srli	r2,r2,8
     760:	2008d63a 	srli	r4,r4,24
     764:	1104b03a 	or	r2,r2,r4
  return ((n & 0xff        ) << 24) |
         ((n & 0xff00      ) <<  8) |
         ((n & 0xff0000UL  ) >>  8) |
         ((n & 0xff000000UL) >> 24);
}
     768:	1884b03a 	or	r2,r3,r2
     76c:	f800283a 	ret

00000770 <ntohl>:
/**
 * Takes a uint32_t in network byte order and converts it to host 
 * byte order.
 */
uint32_t ntohl (uint32_t n)
{
     770:	deffff04 	addi	sp,sp,-4
     774:	dfc00015 	stw	ra,0(sp)
  return htonl(n);
     778:	00007480 	call	748 <htonl>
}
     77c:	dfc00017 	ldw	ra,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <ethernet_tx>:
 * Transmits the contents of the tx buffer as an ethernet frame. It is
 * assumed that the user has properly set all of the tx frame's fields 
 * prior to calling this function.
 */
void ethernet_tx (void)
{
     788:	defffa04 	addi	sp,sp,-24
     78c:	dfc00515 	stw	ra,20(sp)
     790:	dc000415 	stw	r16,16(sp)
  /* Get the frame data length in host byte order. */
  uint16_t length = ntohs (tx_frame->length);
  
  /* Create transmit SGDMA descriptor. */
  uint32_t total_size = ENET_FRAME_HEADER_SIZE + length;
  alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, tx_buff, total_size, 0, 1, 1, 0);
     794:	04020834 	movhi	r16,2080
     798:	84001004 	addi	r16,r16,64
 * prior to calling this function.
 */
void ethernet_tx (void)
{
  /* Get the frame data length in host byte order. */
  uint16_t length = ntohs (tx_frame->length);
     79c:	d0a80517 	ldw	r2,-24556(gp)
     7a0:	1100030b 	ldhu	r4,12(r2)
     7a4:	00007280 	call	728 <ntohs>
     7a8:	10800404 	addi	r2,r2,16
     7ac:	d8000015 	stw	zero,0(sp)
     7b0:	00c00044 	movi	r3,1
     7b4:	d8c00115 	stw	r3,4(sp)
     7b8:	d8c00215 	stw	r3,8(sp)
     7bc:	d8000315 	stw	zero,12(sp)
     7c0:	8009883a 	mov	r4,r16
     7c4:	01420834 	movhi	r5,2080
     7c8:	29401804 	addi	r5,r5,96
     7cc:	01820834 	movhi	r6,2080
     7d0:	31860004 	addi	r6,r6,6144
     7d4:	11ffffcc 	andi	r7,r2,65535
     7d8:	000cdc00 	call	cdc0 <alt_avalon_sgdma_construct_mem_to_stream_desc>
  /* Create transmit SGDMA descriptor. */
  uint32_t total_size = ENET_FRAME_HEADER_SIZE + length;
  alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, tx_buff, total_size, 0, 1, 1, 0);
  
  /* Set up non-blocking transfer of SGDMA transmit descriptor. */
  alt_avalon_sgdma_do_async_transfer (sgdma_tx_dev, &tx_descriptor);
     7dc:	d1280717 	ldw	r4,-24548(gp)
     7e0:	800b883a 	mov	r5,r16
     7e4:	000caf80 	call	caf8 <alt_avalon_sgdma_do_async_transfer>
  
  /* Wait until transmit descriptor transfer is complete. */
  while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
     7e8:	01020834 	movhi	r4,2080
     7ec:	21001004 	addi	r4,r4,64
     7f0:	000cf500 	call	cf50 <alt_avalon_sgdma_check_descriptor_status>
     7f4:	103ffc1e 	bne	r2,zero,7e8 <ethernet_tx+0x60>
}
     7f8:	dfc00517 	ldw	ra,20(sp)
     7fc:	dc000417 	ldw	r16,16(sp)
     800:	dec00604 	addi	sp,sp,24
     804:	f800283a 	ret

00000808 <ethernet_init>:
 *     called each time a new frame arrives in the rx buffer. 
 *
 *  3. Mapping ethernet_frame structures onto the the rx/tx buffers.
 */
void ethernet_init (void *src_mac, void *receive_isr)
{
     808:	defffb04 	addi	sp,sp,-20
     80c:	dfc00415 	stw	ra,16(sp)
     810:	dc800315 	stw	r18,12(sp)
     814:	dc400215 	stw	r17,8(sp)
     818:	dc000115 	stw	r16,4(sp)
     81c:	2023883a 	mov	r17,r4
     820:	2825883a 	mov	r18,r5
 *
 */
static void init_sgdma (void)
{
  /* Open the SGDMA transmit device. */
  sgdma_tx_dev = alt_avalon_sgdma_open(SGDMA_TX_NAME);
     824:	01000074 	movhi	r4,1
     828:	2139fd04 	addi	r4,r4,-6156
     82c:	000cef40 	call	cef4 <alt_avalon_sgdma_open>
     830:	d0a80715 	stw	r2,-24548(gp)
  if (sgdma_tx_dev == NULL) {
     834:	1000041e 	bne	r2,zero,848 <ethernet_init+0x40>
    alt_printf ("Error: could not open scatter-gather DMA transmit device\n");
     838:	01000074 	movhi	r4,1
     83c:	213a0104 	addi	r4,r4,-6140
     840:	000bbd40 	call	bbd4 <alt_printf>
     844:	00002206 	br	8d0 <ethernet_init+0xc8>
    return;
  } 
  else alt_printf("Opened scatter-gather DMA transmit device\n");
     848:	01000074 	movhi	r4,1
     84c:	213a1004 	addi	r4,r4,-6080
     850:	000bbd40 	call	bbd4 <alt_printf>
  
  /* Open the SGDMA receive device. */
  sgdma_rx_dev = alt_avalon_sgdma_open (SGDMA_RX_NAME);
     854:	01000074 	movhi	r4,1
     858:	213a1b04 	addi	r4,r4,-6036
     85c:	000cef40 	call	cef4 <alt_avalon_sgdma_open>
     860:	d0a80615 	stw	r2,-24552(gp)
  if (sgdma_rx_dev == NULL) {
     864:	1000041e 	bne	r2,zero,878 <ethernet_init+0x70>
    alt_printf ("Error: could not open scatter-gather DMA receive device\n");
     868:	01000074 	movhi	r4,1
     86c:	213a1f04 	addi	r4,r4,-6020
     870:	000bbd40 	call	bbd4 <alt_printf>
     874:	00001606 	br	8d0 <ethernet_init+0xc8>
    return;
  } 
  else alt_printf("Opened scatter-gather DMA receive device\n");
     878:	01000074 	movhi	r4,1
     87c:	213a2e04 	addi	r4,r4,-5960
     880:	000bbd40 	call	bbd4 <alt_printf>
  
  /* Configure interrupts for the SGDMA receive device. */
  uint16_t chain_control = IE_DESCRIPTOR_COMPLETED | IE_GLOBAL;
  alt_avalon_sgdma_register_callback (sgdma_rx_dev, (alt_avalon_sgdma_callback) ethernet_rx, chain_control, NULL);
     884:	d1280617 	ldw	r4,-24552(gp)
     888:	01400034 	movhi	r5,0
     88c:	29426a04 	addi	r5,r5,2472
     890:	01800504 	movi	r6,20
     894:	000f883a 	mov	r7,zero
     898:	000c9500 	call	c950 <alt_avalon_sgdma_register_callback>
 
  /* Create SGDMA receive descriptor. */
  alt_avalon_sgdma_construct_stream_to_mem_desc(&rx_descriptor, &rx_descriptor_end, rx_buff, 0, 0);
     89c:	04020834 	movhi	r16,2080
     8a0:	84000004 	addi	r16,r16,0
     8a4:	d8000015 	stw	zero,0(sp)
     8a8:	8009883a 	mov	r4,r16
     8ac:	01420834 	movhi	r5,2080
     8b0:	29400804 	addi	r5,r5,32
     8b4:	01820834 	movhi	r6,2080
     8b8:	31840004 	addi	r6,r6,4096
     8bc:	000f883a 	mov	r7,zero
     8c0:	000ce4c0 	call	ce4c <alt_avalon_sgdma_construct_stream_to_mem_desc>
  
  /* Set up non-blocking transfer of first SGDMA receive descriptor. */
  alt_avalon_sgdma_do_async_transfer(sgdma_rx_dev, &rx_descriptor);
     8c4:	d1280617 	ldw	r4,-24552(gp)
     8c8:	800b883a 	mov	r5,r16
     8cc:	000caf80 	call	caf8 <alt_avalon_sgdma_do_async_transfer>
{
  /* Triple-speed ethernet device base address. */
  volatile int *enet = (int *) ENET_BASE;  
  
  /* Write the source MAC address. */ 
  *(enet + 3) = *(int *)  src_mac; 
     8d0:	88c00017 	ldw	r3,0(r17)
     8d4:	00820834 	movhi	r2,2080
     8d8:	10880304 	addi	r2,r2,8204
     8dc:	10c00015 	stw	r3,0(r2)
  *(enet + 4) = *(int *) (src_mac + 4); 
     8e0:	88c00117 	ldw	r3,4(r17)
     8e4:	10800104 	addi	r2,r2,4
     8e8:	10c00015 	stw	r3,0(r2)

  /* Specify the addresses of the PHY devices to be accessed through MDIO interface. */
  *(enet + 0x10) = 0x11;  // MDIO Address 1
     8ec:	00c00444 	movi	r3,17
     8f0:	10800c04 	addi	r2,r2,48
     8f4:	10c00015 	stw	r3,0(r2)
  
  /* Write to register 16 of the PHY chip for ethernet port 1 to enable automatic crossover for all modes. */
  *(enet + 0xB0) = *(enet + 0xB0) | 0x0060;
     8f8:	00c20834 	movhi	r3,2080
     8fc:	18c8b004 	addi	r3,r3,8896
     900:	18800017 	ldw	r2,0(r3)
     904:	10801814 	ori	r2,r2,96
     908:	18800015 	stw	r2,0(r3)
  
  /* Write to register 20 of the PHY chip for ethernet port 1 to set up delay for input/output clk. */
  *(enet + 0xB4) = *(enet + 0xB4) | 0x0082;
     90c:	18c00404 	addi	r3,r3,16
     910:	18800017 	ldw	r2,0(r3)
     914:	10802094 	ori	r2,r2,130
     918:	18800015 	stw	r2,0(r3)
  
  /* Enable line loopback with ethernet port 0. */
  *(enet + 0x0F) = 0x10; // MDIO Address 0
     91c:	00c00404 	movi	r3,16
     920:	00820834 	movhi	r2,2080
     924:	10880f04 	addi	r2,r2,8252
     928:	10c00015 	stw	r3,0(r2)
  *(enet + 0x94) = 0x4000; 
     92c:	00d00004 	movi	r3,16384
     930:	10808504 	addi	r2,r2,532
     934:	10c00015 	stw	r3,0(r2)
  
  /* Software reset the ethernet 1 PHY chip and wait. */
  *(enet + 0xA0) = *(enet + 0xA0) | 0x8000;
     938:	00c20834 	movhi	r3,2080
     93c:	18c8a004 	addi	r3,r3,8832
     940:	18800017 	ldw	r2,0(r3)
     944:	10a00014 	ori	r2,r2,32768
     948:	18800015 	stw	r2,0(r3)
     94c:	1809883a 	mov	r4,r3
     950:	00e00014 	movui	r3,32768
  while (*(enet + 0xA0) & 0x8000);   
     954:	20800017 	ldw	r2,0(r4)
     958:	10c4703a 	and	r2,r2,r3
     95c:	103ffd1e 	bne	r2,zero,954 <ethernet_init+0x14c>
  // bit  1: rx enable
  // bit  3: gigabit ethernet enable
  // bit  4: promiscuous mode enable
  // bit  6: CRC forwarding on receive
  // bit 15: local loopback enable
  *(enet + 2) = *(enet + 2) | 0x0000004B;
     960:	00c20834 	movhi	r3,2080
     964:	18c80204 	addi	r3,r3,8200
     968:	18800017 	ldw	r2,0(r3)
     96c:	108012d4 	ori	r2,r2,75
     970:	18800015 	stw	r2,0(r3)
 */
void ethernet_init (void *src_mac, void *receive_isr)
{
  init_sgdma ();
  init_device (src_mac); 
  rx_isr = receive_isr;
     974:	d4a80815 	stw	r18,-24544(gp)
  rx_frame = rx_buff + ENET_HEADER_WORD_ALIGNMENT_SIZE;
     978:	00820834 	movhi	r2,2080
     97c:	10840084 	addi	r2,r2,4098
     980:	d0a80415 	stw	r2,-24560(gp)
  tx_frame = tx_buff + ENET_HEADER_WORD_ALIGNMENT_SIZE;
     984:	00820834 	movhi	r2,2080
     988:	10860084 	addi	r2,r2,6146
     98c:	d0a80515 	stw	r2,-24556(gp)
}
     990:	dfc00417 	ldw	ra,16(sp)
     994:	dc800317 	ldw	r18,12(sp)
     998:	dc400217 	ldw	r17,8(sp)
     99c:	dc000117 	ldw	r16,4(sp)
     9a0:	dec00504 	addi	sp,sp,20
     9a4:	f800283a 	ret

000009a8 <ethernet_rx>:
/**
 *
 *
 */
static void ethernet_rx (void *context)
{
     9a8:	defffd04 	addi	sp,sp,-12
     9ac:	dfc00215 	stw	ra,8(sp)
     9b0:	dc000115 	stw	r16,4(sp)
     9b4:	04020834 	movhi	r16,2080
     9b8:	84000004 	addi	r16,r16,0
  /* Wait until receive descriptor transfer is complete. */
  while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0);
     9bc:	8009883a 	mov	r4,r16
     9c0:	000cf500 	call	cf50 <alt_avalon_sgdma_check_descriptor_status>
     9c4:	103ffd1e 	bne	r2,zero,9bc <ethernet_rx+0x14>
  
  /* Process frame with user-specified interrupt service routine. */
  rx_isr (NULL, SGDMA_RX_IRQ);
     9c8:	0009883a 	mov	r4,zero
     9cc:	014000c4 	movi	r5,3
     9d0:	d0a80817 	ldw	r2,-24544(gp)
     9d4:	103ee83a 	callr	r2
  
  /* Create SGDMA receive descriptor */
  alt_avalon_sgdma_construct_stream_to_mem_desc(&rx_descriptor, &rx_descriptor_end, rx_buff, 0, 0);
     9d8:	d8000015 	stw	zero,0(sp)
     9dc:	8009883a 	mov	r4,r16
     9e0:	01420834 	movhi	r5,2080
     9e4:	29400804 	addi	r5,r5,32
     9e8:	01820834 	movhi	r6,2080
     9ec:	31840004 	addi	r6,r6,4096
     9f0:	000f883a 	mov	r7,zero
     9f4:	000ce4c0 	call	ce4c <alt_avalon_sgdma_construct_stream_to_mem_desc>
  
  /* Set up non-blocking transfer of SGDMA receive descriptor */
  alt_avalon_sgdma_do_async_transfer(sgdma_rx_dev, &rx_descriptor);
     9f8:	d1280617 	ldw	r4,-24552(gp)
     9fc:	800b883a 	mov	r5,r16
     a00:	000caf80 	call	caf8 <alt_avalon_sgdma_do_async_transfer>
}
     a04:	dfc00217 	ldw	ra,8(sp)
     a08:	dc000117 	ldw	r16,4(sp)
     a0c:	dec00304 	addi	sp,sp,12
     a10:	f800283a 	ret

00000a14 <green_leds_set>:
static volatile int *data_reg = (int*) GREEN_LEDS_BASE;


void green_leds_set (uint32_t mask)
{
  *data_reg = mask;
     a14:	d0a00617 	ldw	r2,-32744(gp)
     a18:	11000015 	stw	r4,0(r2)
}
     a1c:	f800283a 	ret

00000a20 <green_leds_update>:

void green_leds_update (uint32_t mask)
{
  *data_reg |= mask;
     a20:	d0e00617 	ldw	r3,-32744(gp)
     a24:	18800017 	ldw	r2,0(r3)
     a28:	1104b03a 	or	r2,r2,r4
     a2c:	18800015 	stw	r2,0(r3)
}
     a30:	f800283a 	ret

00000a34 <green_leds_clear>:

void green_leds_clear (uint32_t mask)
{
  *data_reg &= ~mask;
     a34:	d0a00617 	ldw	r2,-32744(gp)
     a38:	10c00017 	ldw	r3,0(r2)
     a3c:	0108303a 	nor	r4,zero,r4
     a40:	1906703a 	and	r3,r3,r4
     a44:	10c00015 	stw	r3,0(r2)
}
     a48:	f800283a 	ret

00000a4c <green_leds_clear_all>:

void green_leds_clear_all (void)
{
  *data_reg = 0;
     a4c:	d0a00617 	ldw	r2,-32744(gp)
     a50:	10000015 	stw	zero,0(r2)
     a54:	f800283a 	ret

00000a58 <hex_clear>:
}


void hex_clear (void)
{
  *hex_3to0 = 0;
     a58:	d0a00817 	ldw	r2,-32736(gp)
     a5c:	10000015 	stw	zero,0(r2)
  *hex_7to4 = 0;
     a60:	d0a00717 	ldw	r2,-32740(gp)
     a64:	10000015 	stw	zero,0(r2)
}
     a68:	f800283a 	ret

00000a6c <hex_clear_3to0>:

void hex_clear_3to0 (void)
{
  *hex_3to0 = 0;
     a6c:	d0a00817 	ldw	r2,-32736(gp)
     a70:	10000015 	stw	zero,0(r2)
}
     a74:	f800283a 	ret

00000a78 <hex_clear_7to4>:

void hex_clear_7to4 (void)
{
  *hex_7to4 = 0;
     a78:	d0a00717 	ldw	r2,-32740(gp)
     a7c:	10000015 	stw	zero,0(r2)
}
     a80:	f800283a 	ret

00000a84 <lookup_16>:



static uint32_t lookup_16 (uint32_t value)
{
     a84:	200f883a 	mov	r7,r4
  if (value > 0xFFFF) 
     a88:	00bfffd4 	movui	r2,65535
     a8c:	1100012e 	bgeu	r2,r4,a94 <lookup_16+0x10>
    value %= 0x10000;
     a90:	208e703a 	and	r7,r4,r2
     a94:	01400074 	movhi	r5,1
     a98:	297a3884 	addi	r5,r5,-5918
     a9c:	3804d13a 	srli	r2,r7,4
     aa0:	010003c4 	movi	r4,15
     aa4:	1104703a 	and	r2,r2,r4
     aa8:	1145883a 	add	r2,r2,r5
     aac:	11800003 	ldbu	r6,0(r2)
     ab0:	300c923a 	slli	r6,r6,8
     ab4:	3804d33a 	srli	r2,r7,12
     ab8:	1104703a 	and	r2,r2,r4
     abc:	1145883a 	add	r2,r2,r5
     ac0:	10800003 	ldbu	r2,0(r2)
     ac4:	1004963a 	slli	r2,r2,24
     ac8:	3806d23a 	srli	r3,r7,8
     acc:	1906703a 	and	r3,r3,r4
     ad0:	1947883a 	add	r3,r3,r5
     ad4:	18c00003 	ldbu	r3,0(r3)
     ad8:	1806943a 	slli	r3,r3,16
     adc:	10c4b03a 	or	r2,r2,r3
     ae0:	3908703a 	and	r4,r7,r4
     ae4:	2149883a 	add	r4,r4,r5
     ae8:	20c00003 	ldbu	r3,0(r4)
     aec:	10c4b03a 	or	r2,r2,r3
    
  return (table[(value >>12) & 0xF] << 24 |  // lookup segments for nibble 3
          table[(value >> 8) & 0xF] << 16 |  // lookup segments for nibble 2 
          table[(value >> 4) & 0xF] <<  8 |  // lookup segments for nibble 1
          table[ value & 0xF      ]);        // lookup segments for nibble 0
}
     af0:	3084b03a 	or	r2,r6,r2
     af4:	f800283a 	ret

00000af8 <lookup_10>:

static uint32_t lookup_10 (uint32_t value)
{
     af8:	2013883a 	mov	r9,r4
  if (value > 9999) 
     afc:	0089c3c4 	movi	r2,9999
     b00:	1100042e 	bgeu	r2,r4,b14 <lookup_10+0x1c>
    value %= 10000;
     b04:	00c9c404 	movi	r3,10000
     b08:	20c5203a 	divu	r2,r4,r3
     b0c:	10c5383a 	mul	r2,r2,r3
     b10:	2093c83a 	sub	r9,r4,r2
     b14:	01c00074 	movhi	r7,1
     b18:	39fa3884 	addi	r7,r7,-5918
     b1c:	01401904 	movi	r5,100
     b20:	4945203a 	divu	r2,r9,r5
     b24:	1145383a 	mul	r2,r2,r5
     b28:	4885c83a 	sub	r2,r9,r2
     b2c:	01800284 	movi	r6,10
     b30:	1185203a 	divu	r2,r2,r6
     b34:	11c5883a 	add	r2,r2,r7
     b38:	12000003 	ldbu	r8,0(r2)
     b3c:	4010923a 	slli	r8,r8,8
     b40:	0100fa04 	movi	r4,1000
     b44:	4907203a 	divu	r3,r9,r4
     b48:	19c5883a 	add	r2,r3,r7
     b4c:	10800003 	ldbu	r2,0(r2)
     b50:	1004963a 	slli	r2,r2,24
     b54:	1907383a 	mul	r3,r3,r4
     b58:	48c7c83a 	sub	r3,r9,r3
     b5c:	1947203a 	divu	r3,r3,r5
     b60:	19c7883a 	add	r3,r3,r7
     b64:	18c00003 	ldbu	r3,0(r3)
     b68:	1806943a 	slli	r3,r3,16
     b6c:	10c4b03a 	or	r2,r2,r3
     b70:	4987203a 	divu	r3,r9,r6
     b74:	1987383a 	mul	r3,r3,r6
     b78:	48c7c83a 	sub	r3,r9,r3
     b7c:	19c7883a 	add	r3,r3,r7
     b80:	18c00003 	ldbu	r3,0(r3)
     b84:	10c4b03a 	or	r2,r2,r3
    
  return (table[ value / 1000       ] << 24 |  // lookup segments for thousands digit
          table[(value % 1000) / 100] << 16 |  // lookup segments for hundreds digit
          table[(value % 100)  /  10] <<  8 |  // lookup segments for tens digit
          table[ value % 10         ]);        // lookup segments for ones digit 
}
     b88:	4084b03a 	or	r2,r8,r2
     b8c:	f800283a 	ret

00000b90 <hex_write_7to4>:
      break;
  }
}

void hex_write_7to4 (uint32_t value, enum number_base base)
{
     b90:	deffff04 	addi	sp,sp,-4
     b94:	dfc00015 	stw	ra,0(sp)
  /* Lookup hex segments for bits 15-0 of value. */
  switch (base)
     b98:	00800084 	movi	r2,2
     b9c:	28800326 	beq	r5,r2,bac <hex_write_7to4+0x1c>
     ba0:	008000c4 	movi	r2,3
     ba4:	2880081e 	bne	r5,r2,bc8 <hex_write_7to4+0x38>
     ba8:	00000406 	br	bbc <hex_write_7to4+0x2c>
  {
    case NUM_BASE_10: 
      *hex_7to4 = lookup_10 (value);
     bac:	0000af80 	call	af8 <lookup_10>
     bb0:	d0e00717 	ldw	r3,-32740(gp)
     bb4:	18800015 	stw	r2,0(r3)
     bb8:	00000306 	br	bc8 <hex_write_7to4+0x38>
      break;
    case NUM_BASE_16:
      *hex_7to4 = lookup_16 (value);
     bbc:	0000a840 	call	a84 <lookup_16>
     bc0:	d0e00717 	ldw	r3,-32740(gp)
     bc4:	18800015 	stw	r2,0(r3)
      break;
  }
}
     bc8:	dfc00017 	ldw	ra,0(sp)
     bcc:	dec00104 	addi	sp,sp,4
     bd0:	f800283a 	ret

00000bd4 <hex_write_3to0>:
      break;
  }
}

void hex_write_3to0 (uint32_t value, enum number_base base)
{
     bd4:	deffff04 	addi	sp,sp,-4
     bd8:	dfc00015 	stw	ra,0(sp)
  /* Lookup hex segments for bits 15-0 of value. */
  switch (base)
     bdc:	00800084 	movi	r2,2
     be0:	28800326 	beq	r5,r2,bf0 <hex_write_3to0+0x1c>
     be4:	008000c4 	movi	r2,3
     be8:	2880081e 	bne	r5,r2,c0c <hex_write_3to0+0x38>
     bec:	00000406 	br	c00 <hex_write_3to0+0x2c>
  {
    case NUM_BASE_10: 
      *hex_3to0 = lookup_10 (value);
     bf0:	0000af80 	call	af8 <lookup_10>
     bf4:	d0e00817 	ldw	r3,-32736(gp)
     bf8:	18800015 	stw	r2,0(r3)
     bfc:	00000306 	br	c0c <hex_write_3to0+0x38>
      break;
    case NUM_BASE_16:
      *hex_3to0 = lookup_16 (value);
     c00:	0000a840 	call	a84 <lookup_16>
     c04:	d0e00817 	ldw	r3,-32736(gp)
     c08:	18800015 	stw	r2,0(r3)
      break;
  }
}
     c0c:	dfc00017 	ldw	ra,0(sp)
     c10:	dec00104 	addi	sp,sp,4
     c14:	f800283a 	ret

00000c18 <hex_write>:
static uint32_t lookup_10 (uint32_t value);
static uint32_t lookup_16 (uint32_t value);


void hex_write (uint32_t value, enum number_base base)
{
     c18:	defffd04 	addi	sp,sp,-12
     c1c:	dfc00215 	stw	ra,8(sp)
     c20:	dc400115 	stw	r17,4(sp)
     c24:	dc000015 	stw	r16,0(sp)
     c28:	2023883a 	mov	r17,r4
  /* Lookup hex segments for bits 15-0 of value. */
  switch (base)
     c2c:	00800084 	movi	r2,2
     c30:	28800326 	beq	r5,r2,c40 <hex_write+0x28>
     c34:	008000c4 	movi	r2,3
     c38:	2880151e 	bne	r5,r2,c90 <hex_write+0x78>
     c3c:	00000c06 	br	c70 <hex_write+0x58>
  {
    case NUM_BASE_10: 
      *hex_3to0 = lookup_10 (value % 10000);
     c40:	0109c404 	movi	r4,10000
     c44:	8921203a 	divu	r16,r17,r4
     c48:	8109383a 	mul	r4,r16,r4
     c4c:	8909c83a 	sub	r4,r17,r4
     c50:	0000af80 	call	af8 <lookup_10>
     c54:	d0e00817 	ldw	r3,-32736(gp)
     c58:	18800015 	stw	r2,0(r3)
      *hex_7to4 = lookup_10 (value / 10000);
     c5c:	8009883a 	mov	r4,r16
     c60:	0000af80 	call	af8 <lookup_10>
     c64:	d0e00717 	ldw	r3,-32740(gp)
     c68:	18800015 	stw	r2,0(r3)
     c6c:	00000806 	br	c90 <hex_write+0x78>
      break;
    case NUM_BASE_16:
      *hex_3to0 = lookup_16 (value & 0x0000FFFF);
     c70:	213fffcc 	andi	r4,r4,65535
     c74:	0000a840 	call	a84 <lookup_16>
     c78:	d0e00817 	ldw	r3,-32736(gp)
     c7c:	18800015 	stw	r2,0(r3)
      *hex_7to4 = lookup_16 (value >> 16);
     c80:	8808d43a 	srli	r4,r17,16
     c84:	0000a840 	call	a84 <lookup_16>
     c88:	d0e00717 	ldw	r3,-32740(gp)
     c8c:	18800015 	stw	r2,0(r3)
      break;
  }
}
     c90:	dfc00217 	ldw	ra,8(sp)
     c94:	dc400117 	ldw	r17,4(sp)
     c98:	dc000017 	ldw	r16,0(sp)
     c9c:	dec00304 	addi	sp,sp,12
     ca0:	f800283a 	ret

00000ca4 <lcd_enable_dma>:
/*****************************************************************************
 * Enables DMA transfer of video data from memory to LCD.                    *
******************************************************************************/
void lcd_enable_dma (bool enable)
{
  if (enable)
     ca4:	21003fcc 	andi	r4,r4,255
     ca8:	20000526 	beq	r4,zero,cc0 <lcd_enable_dma+0x1c>
    *status_reg |= DMA_STATUS_ENABLE_MASK;
     cac:	d0e00c17 	ldw	r3,-32720(gp)
     cb0:	18800017 	ldw	r2,0(r3)
     cb4:	10800114 	ori	r2,r2,4
     cb8:	18800015 	stw	r2,0(r3)
     cbc:	f800283a 	ret
  else
    *status_reg &= ~DMA_STATUS_ENABLE_MASK;
     cc0:	d0a00c17 	ldw	r2,-32720(gp)
     cc4:	10c00017 	ldw	r3,0(r2)
     cc8:	013ffec4 	movi	r4,-5
     ccc:	1906703a 	and	r3,r3,r4
     cd0:	10c00015 	stw	r3,0(r2)
     cd4:	f800283a 	ret

00000cd8 <lcd_set_front_buffer>:
/*****************************************************************************
 * Sets the front buffer base address.                                       *
******************************************************************************/
void lcd_set_front_buffer (int *buff)
{
  *back_buff_reg = buff;
     cd8:	d0a00917 	ldw	r2,-32732(gp)
     cdc:	11000015 	stw	r4,0(r2)
  *front_buff_reg = 1;
     ce0:	00c00044 	movi	r3,1
     ce4:	d0a00b17 	ldw	r2,-32724(gp)
     ce8:	10c00015 	stw	r3,0(r2)
}
     cec:	f800283a 	ret

00000cf0 <lcd_set_back_buffer>:
/*****************************************************************************
 * Sets the back buffer base address.                                        *
******************************************************************************/
void lcd_set_back_buffer (int *buff)
{
  *back_buff_reg = buff;
     cf0:	d0a00917 	ldw	r2,-32732(gp)
     cf4:	11000015 	stw	r4,0(r2)
}
     cf8:	f800283a 	ret

00000cfc <lcd_swap_buffers>:
 * Swaps the front and back buffer base addresses.                           *
******************************************************************************/
void lcd_swap_buffers(void)
{
	/* Request a buffer swap */
	*front_buff_reg = 1;
     cfc:	00c00044 	movi	r3,1
     d00:	d0a00b17 	ldw	r2,-32724(gp)
     d04:	10c00015 	stw	r3,0(r2)

	/* Wait for vertical synchronization */
	while ((*status_reg & 0x01) != 0);
     d08:	d1200c17 	ldw	r4,-32720(gp)
     d0c:	20800017 	ldw	r2,0(r4)
     d10:	10c4703a 	and	r2,r2,r3
     d14:	103ffd1e 	bne	r2,zero,d0c <lcd_swap_buffers+0x10>
}
     d18:	f800283a 	ret

00000d1c <lcd_write>:
  int char_x = x * 8;
  int char_y = y * 8;

  /* assume that the text string fits on one line */
  offset = (y << 6) + x;
  while ( *(text) )
     d1c:	30800007 	ldb	r2,0(r6)
     d20:	10000b26 	beq	r2,zero,d50 <lcd_write+0x34>
     d24:	280491ba 	slli	r2,r5,6
     d28:	2085883a 	add	r2,r4,r2
     d2c:	d0e00a17 	ldw	r3,-32728(gp)
     d30:	10c9883a 	add	r4,r2,r3
     d34:	00c00044 	movi	r3,1
  {
    *(char_buff_base + offset) = *(text);  // write to the character buffer
     d38:	30800003 	ldbu	r2,0(r6)
     d3c:	20800005 	stb	r2,0(r4)
    text++;
     d40:	30cd883a 	add	r6,r6,r3
  int char_x = x * 8;
  int char_y = y * 8;

  /* assume that the text string fits on one line */
  offset = (y << 6) + x;
  while ( *(text) )
     d44:	20c9883a 	add	r4,r4,r3
     d48:	30800007 	ldb	r2,0(r6)
     d4c:	103ffa1e 	bne	r2,zero,d38 <lcd_write+0x1c>
     d50:	f800283a 	ret

00000d54 <lcd_draw_rectangle>:

/*****************************************************************************
 * Draws a filled rectangle on the LCD.                                      *
******************************************************************************/
void lcd_draw_rectangle(int x, int y, int width, int height, short color)
{
     d54:	da80000b 	ldhu	r10,0(sp)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);
     d58:	d0a00b17 	ldw	r2,-32724(gp)
     d5c:	12400017 	ldw	r9,0(r2)

  for(i = x; i <= (x + width - 1); i++)
     d60:	218d883a 	add	r6,r4,r6
     d64:	31bfffc4 	addi	r6,r6,-1
     d68:	31001116 	blt	r6,r4,db0 <lcd_draw_rectangle+0x5c>
     d6c:	29c5883a 	add	r2,r5,r7
     d70:	11ffffc4 	addi	r7,r2,-1
     d74:	02c00044 	movi	r11,1
     d78:	00000b06 	br	da8 <lcd_draw_rectangle+0x54>
     d7c:	2807883a 	mov	r3,r5
     d80:	02000044 	movi	r8,1
  {
    for(j = y; j <= (y + height -1); j++)
    {
      offset = (j << 9) + i;
      *(pixel_buffer + offset) = color;
     d84:	1804927a 	slli	r2,r3,9
     d88:	1105883a 	add	r2,r2,r4
     d8c:	1085883a 	add	r2,r2,r2
     d90:	4885883a 	add	r2,r9,r2
     d94:	1280000d 	sth	r10,0(r2)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);

  for(i = x; i <= (x + width - 1); i++)
  {
    for(j = y; j <= (y + height -1); j++)
     d98:	1a07883a 	add	r3,r3,r8
     d9c:	38fff90e 	bge	r7,r3,d84 <lcd_draw_rectangle+0x30>
void lcd_draw_rectangle(int x, int y, int width, int height, short color)
{
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);

  for(i = x; i <= (x + width - 1); i++)
     da0:	22c9883a 	add	r4,r4,r11
     da4:	31000216 	blt	r6,r4,db0 <lcd_draw_rectangle+0x5c>
  {
    for(j = y; j <= (y + height -1); j++)
     da8:	397ff40e 	bge	r7,r5,d7c <lcd_draw_rectangle+0x28>
     dac:	003ffc06 	br	da0 <lcd_draw_rectangle+0x4c>
     db0:	f800283a 	ret

00000db4 <lcd_draw_rectangle_back>:
    }
  }
}

void lcd_draw_rectangle_back(int x, int y, int width, int height, short color)
{
     db4:	da80000b 	ldhu	r10,0(sp)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*back_buff_reg);
     db8:	d0a00917 	ldw	r2,-32732(gp)
     dbc:	12400017 	ldw	r9,0(r2)

  for(i = x; i <= (x + width - 1); i++)
     dc0:	218d883a 	add	r6,r4,r6
     dc4:	31bfffc4 	addi	r6,r6,-1
     dc8:	31001116 	blt	r6,r4,e10 <lcd_draw_rectangle_back+0x5c>
     dcc:	29c5883a 	add	r2,r5,r7
     dd0:	11ffffc4 	addi	r7,r2,-1
     dd4:	02c00044 	movi	r11,1
     dd8:	00000b06 	br	e08 <lcd_draw_rectangle_back+0x54>
     ddc:	2807883a 	mov	r3,r5
     de0:	02000044 	movi	r8,1
  {
    for(j = y; j <= (y + height -1); j++)
    {
      offset = (j << 9) + i;
      *(pixel_buffer + offset) = color;
     de4:	1804927a 	slli	r2,r3,9
     de8:	1105883a 	add	r2,r2,r4
     dec:	1085883a 	add	r2,r2,r2
     df0:	4885883a 	add	r2,r9,r2
     df4:	1280000d 	sth	r10,0(r2)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*back_buff_reg);

  for(i = x; i <= (x + width - 1); i++)
  {
    for(j = y; j <= (y + height -1); j++)
     df8:	1a07883a 	add	r3,r3,r8
     dfc:	38fff90e 	bge	r7,r3,de4 <lcd_draw_rectangle_back+0x30>
void lcd_draw_rectangle_back(int x, int y, int width, int height, short color)
{
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*back_buff_reg);

  for(i = x; i <= (x + width - 1); i++)
     e00:	22c9883a 	add	r4,r4,r11
     e04:	31000216 	blt	r6,r4,e10 <lcd_draw_rectangle_back+0x5c>
  {
    for(j = y; j <= (y + height -1); j++)
     e08:	397ff40e 	bge	r7,r5,ddc <lcd_draw_rectangle_back+0x28>
     e0c:	003ffc06 	br	e00 <lcd_draw_rectangle_back+0x4c>
     e10:	f800283a 	ret

00000e14 <lcd_char_buffer_clear>:
  int i, j, offset;
  for (i = 0; i < LCD_CHAR_BUFF_RES_X; i++)
    for (j = 0; j < LCD_CHAR_BUFF_RES_Y; j++)
      {
        offset = (j << 6) + i;
        *(char_buff_base + offset) = ' ';  // write to the character buffer
     e14:	d1a00a17 	ldw	r6,-32728(gp)
     e18:	000b883a 	mov	r5,zero
     e1c:	00000c06 	br	e50 <lcd_char_buffer_clear+0x3c>
     e20:	200491ba 	slli	r2,r4,6
     e24:	1145883a 	add	r2,r2,r5
     e28:	3085883a 	add	r2,r6,r2
     e2c:	00c00804 	movi	r3,32
     e30:	10c00005 	stb	r3,0(r2)
  int char_x = 0;
  int char_y = 0;

  int i, j, offset;
  for (i = 0; i < LCD_CHAR_BUFF_RES_X; i++)
    for (j = 0; j < LCD_CHAR_BUFF_RES_Y; j++)
     e34:	00c00044 	movi	r3,1
     e38:	20c9883a 	add	r4,r4,r3
     e3c:	00800784 	movi	r2,30
     e40:	20bff71e 	bne	r4,r2,e20 <lcd_char_buffer_clear+0xc>
{
  int char_x = 0;
  int char_y = 0;

  int i, j, offset;
  for (i = 0; i < LCD_CHAR_BUFF_RES_X; i++)
     e44:	28cb883a 	add	r5,r5,r3
     e48:	00800c84 	movi	r2,50
     e4c:	28800226 	beq	r5,r2,e58 <lcd_char_buffer_clear+0x44>
    for (j = 0; j < LCD_CHAR_BUFF_RES_Y; j++)
      {
        offset = (j << 6) + i;
        *(char_buff_base + offset) = ' ';  // write to the character buffer
      }
}
     e50:	0009883a 	mov	r4,zero
     e54:	003ff206 	br	e20 <lcd_char_buffer_clear+0xc>
     e58:	f800283a 	ret

00000e5c <lcd_get_backbuffer_addr>:

void *lcd_get_backbuffer_addr (void)
{
  return *back_buff_reg;
     e5c:	d0a00917 	ldw	r2,-32732(gp)
     e60:	10800017 	ldw	r2,0(r2)
}
     e64:	f800283a 	ret

00000e68 <pushbuttons_get_data>:
  alt_irq_register (PUSHBUTTONS_IRQ, NULL, isr);
}

uint32_t pushbuttons_get_data (void)
{
  return *data_reg;
     e68:	d0a00f17 	ldw	r2,-32708(gp)
     e6c:	10800017 	ldw	r2,0(r2)
}
     e70:	f800283a 	ret

00000e74 <pushbuttons_set_interrupt_mask>:

void pushbuttons_set_interrupt_mask (uint32_t mask)
{
  *interrupt_mask_reg = mask;
     e74:	d0a00e17 	ldw	r2,-32712(gp)
     e78:	11000015 	stw	r4,0(r2)
}
     e7c:	f800283a 	ret

00000e80 <pushbuttons_get_interrupt_mask>:

uint32_t pushbuttons_get_interrupt_mask (void)
{
  return *interrupt_mask_reg;
     e80:	d0a00e17 	ldw	r2,-32712(gp)
     e84:	10800017 	ldw	r2,0(r2)
}
     e88:	f800283a 	ret

00000e8c <pushbuttons_get_edge_capture>:

uint32_t pushbuttons_get_edge_capture (void)
{
  return *edge_capture_reg;
     e8c:	d0a00d17 	ldw	r2,-32716(gp)
     e90:	10800017 	ldw	r2,0(r2)
}
     e94:	f800283a 	ret

00000e98 <pushbuttons_clear_edge_capture>:

void pushbuttons_clear_edge_capture (void)
{
  *edge_capture_reg = 1;
     e98:	00c00044 	movi	r3,1
     e9c:	d0a00d17 	ldw	r2,-32716(gp)
     ea0:	10c00015 	stw	r3,0(r2)
}
     ea4:	f800283a 	ret

00000ea8 <pushbuttons_enable_interrupts>:
static volatile int *interrupt_mask_reg = (int*) (PUSHBUTTONS_BASE +  8);
static volatile int *edge_capture_reg   = (int*) (PUSHBUTTONS_BASE + 12);


void pushbuttons_enable_interrupts (void *isr)
{
     ea8:	defffe04 	addi	sp,sp,-8
     eac:	dfc00115 	stw	ra,4(sp)
     eb0:	dc000015 	stw	r16,0(sp)
     eb4:	2021883a 	mov	r16,r4
  pushbuttons_set_interrupt_mask (DEFAULT_INTERRUPT_MASK);
     eb8:	01000384 	movi	r4,14
     ebc:	0000e740 	call	e74 <pushbuttons_set_interrupt_mask>
  alt_irq_register (PUSHBUTTONS_IRQ, NULL, isr);
     ec0:	01000044 	movi	r4,1
     ec4:	000b883a 	mov	r5,zero
     ec8:	800d883a 	mov	r6,r16
     ecc:	000b8e00 	call	b8e0 <alt_irq_register>
}
     ed0:	dfc00117 	ldw	ra,4(sp)
     ed4:	dc000017 	ldw	r16,0(sp)
     ed8:	dec00204 	addi	sp,sp,8
     edc:	f800283a 	ret

00000ee0 <red_leds_set>:
static volatile int *data_reg = (int*) RED_LEDS_BASE;


void red_leds_set (uint32_t mask)
{
  *data_reg = mask;
     ee0:	d0a01017 	ldw	r2,-32704(gp)
     ee4:	11000015 	stw	r4,0(r2)
}
     ee8:	f800283a 	ret

00000eec <red_leds_update>:

void red_leds_update (uint32_t mask)
{
  *data_reg |= mask;
     eec:	d0e01017 	ldw	r3,-32704(gp)
     ef0:	18800017 	ldw	r2,0(r3)
     ef4:	1104b03a 	or	r2,r2,r4
     ef8:	18800015 	stw	r2,0(r3)
}
     efc:	f800283a 	ret

00000f00 <red_leds_clear>:

void red_leds_clear (uint32_t mask)
{
  *data_reg &= ~mask;
     f00:	d0a01017 	ldw	r2,-32704(gp)
     f04:	10c00017 	ldw	r3,0(r2)
     f08:	0108303a 	nor	r4,zero,r4
     f0c:	1906703a 	and	r3,r3,r4
     f10:	10c00015 	stw	r3,0(r2)
}
     f14:	f800283a 	ret

00000f18 <red_leds_clear_all>:

void red_leds_clear_all (void)
{
  *data_reg = 0;
     f18:	d0a01017 	ldw	r2,-32704(gp)
     f1c:	10000015 	stw	zero,0(r2)
}
     f20:	f800283a 	ret

00000f24 <switches_get_positions>:
  alt_irq_register (SLIDER_SWITCHES_IRQ, NULL, isr);
}

uint32_t switches_get_positions (void)
{
  return *data_reg;
     f24:	d0a01317 	ldw	r2,-32692(gp)
     f28:	10800017 	ldw	r2,0(r2)
}
     f2c:	f800283a 	ret

00000f30 <switches_set_interrupt_mask>:

void switches_set_interrupt_mask (uint32_t mask)
{
  *interrupt_mask_reg = mask;
     f30:	d0a01217 	ldw	r2,-32696(gp)
     f34:	11000015 	stw	r4,0(r2)
}
     f38:	f800283a 	ret

00000f3c <switches_get_interrupt_mask>:

uint32_t switches_get_interrupt_mask (void)
{
  return *interrupt_mask_reg;
     f3c:	d0a01217 	ldw	r2,-32696(gp)
     f40:	10800017 	ldw	r2,0(r2)
}
     f44:	f800283a 	ret

00000f48 <switches_get_edge_capture>:

uint32_t switches_get_edge_capture (void)
{
  return *edge_capture_reg;
     f48:	d0a01117 	ldw	r2,-32700(gp)
     f4c:	10800017 	ldw	r2,0(r2)
}
     f50:	f800283a 	ret

00000f54 <switches_clear_edge_capture>:

void switches_clear_edge_capture (void)
{
  *edge_capture_reg = 1;
     f54:	00c00044 	movi	r3,1
     f58:	d0a01117 	ldw	r2,-32700(gp)
     f5c:	10c00015 	stw	r3,0(r2)
}
     f60:	f800283a 	ret

00000f64 <switches_enable_interrupts>:
static volatile int *interrupt_mask_reg = (int*) (SLIDER_SWITCHES_BASE +  8);
static volatile int *edge_capture_reg   = (int*) (SLIDER_SWITCHES_BASE + 12);


void switches_enable_interrupts (void *isr)
{
     f64:	defffe04 	addi	sp,sp,-8
     f68:	dfc00115 	stw	ra,4(sp)
     f6c:	dc000015 	stw	r16,0(sp)
     f70:	2021883a 	mov	r16,r4
  switches_set_interrupt_mask (DEFAULT_INTERRUPT_MASK);
     f74:	01000134 	movhi	r4,4
     f78:	213fffc4 	addi	r4,r4,-1
     f7c:	0000f300 	call	f30 <switches_set_interrupt_mask>
  alt_irq_register (SLIDER_SWITCHES_IRQ, NULL, isr);
     f80:	01000144 	movi	r4,5
     f84:	000b883a 	mov	r5,zero
     f88:	800d883a 	mov	r6,r16
     f8c:	000b8e00 	call	b8e0 <alt_irq_register>
}
     f90:	dfc00117 	ldw	ra,4(sp)
     f94:	dc000017 	ldw	r16,0(sp)
     f98:	dec00204 	addi	sp,sp,8
     f9c:	f800283a 	ret

00000fa0 <vga_enable_dma>:
static volatile char *char_buff_base = (char*) VGA_CHAR_BUFFER_AVALON_CHAR_BUFFER_SLAVE_BASE;


void vga_enable_dma (bool enable)
{
  if (enable)
     fa0:	21003fcc 	andi	r4,r4,255
     fa4:	20000526 	beq	r4,zero,fbc <vga_enable_dma+0x1c>
    *status_reg |= DMA_STATUS_ENABLE_MASK;
     fa8:	d0e01617 	ldw	r3,-32680(gp)
     fac:	18800017 	ldw	r2,0(r3)
     fb0:	10800114 	ori	r2,r2,4
     fb4:	18800015 	stw	r2,0(r3)
     fb8:	f800283a 	ret
  else
    *status_reg &= ~DMA_STATUS_ENABLE_MASK;
     fbc:	d0a01617 	ldw	r2,-32680(gp)
     fc0:	10c00017 	ldw	r3,0(r2)
     fc4:	013ffec4 	movi	r4,-5
     fc8:	1906703a 	and	r3,r3,r4
     fcc:	10c00015 	stw	r3,0(r2)
     fd0:	f800283a 	ret

00000fd4 <vga_set_front_buffer>:
/******************************************************************************
 * Subroutine to set the back buffer base address.
******************************************************************************/
void vga_set_front_buffer (int *buff)
{
  *back_buff_reg = buff;
     fd4:	d0a01717 	ldw	r2,-32676(gp)
     fd8:	11000015 	stw	r4,0(r2)
  *front_buff_reg = 1;
     fdc:	00c00044 	movi	r3,1
     fe0:	d0a01517 	ldw	r2,-32684(gp)
     fe4:	10c00015 	stw	r3,0(r2)
}
     fe8:	f800283a 	ret

00000fec <vga_set_back_buffer>:

void vga_set_back_buffer (int *buff)
{
  *back_buff_reg = buff;
     fec:	d0a01717 	ldw	r2,-32676(gp)
     ff0:	11000015 	stw	r4,0(r2)
}
     ff4:	f800283a 	ret

00000ff8 <vga_swap_buffers>:

void vga_swap_buffers(void)
{
	// Request a buffer swap
	*front_buff_reg = 1;
     ff8:	00c00044 	movi	r3,1
     ffc:	d0a01517 	ldw	r2,-32684(gp)
    1000:	10c00015 	stw	r3,0(r2)

	// Wait for vertical synchronization.
	while ((*status_reg & 0x01) != 0);
    1004:	d1201617 	ldw	r4,-32680(gp)
    1008:	20800017 	ldw	r2,0(r4)
    100c:	10c4703a 	and	r2,r2,r3
    1010:	103ffd1e 	bne	r2,zero,1008 <vga_swap_buffers+0x10>
}
    1014:	f800283a 	ret

00001018 <vga_write>:
  int char_x = x * 4;
  int char_y = y * 4;

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
  while ( *(text) )
    1018:	30800007 	ldb	r2,0(r6)
    101c:	10000b26 	beq	r2,zero,104c <vga_write+0x34>
    1020:	280491fa 	slli	r2,r5,7
    1024:	2085883a 	add	r2,r4,r2
    1028:	d0e01417 	ldw	r3,-32688(gp)
    102c:	10c9883a 	add	r4,r2,r3
    1030:	00c00044 	movi	r3,1
  {
    *(char_buff_base + offset) = *(text);  // write to the character buffer
    1034:	30800003 	ldbu	r2,0(r6)
    1038:	20800005 	stb	r2,0(r4)
    text++;
    103c:	30cd883a 	add	r6,r6,r3
  int char_x = x * 4;
  int char_y = y * 4;

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
  while ( *(text) )
    1040:	20c9883a 	add	r4,r4,r3
    1044:	30800007 	ldb	r2,0(r6)
    1048:	103ffa1e 	bne	r2,zero,1034 <vga_write+0x1c>
    104c:	f800283a 	ret

00001050 <vga_draw_rectangle>:

/*****************************************************************************
 * Draw a filled rectangle on the VGA.
******************************************************************************/
void vga_draw_rectangle(int x, int y, int width, int height, short color)
{
    1050:	da80000b 	ldhu	r10,0(sp)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);
    1054:	d0a01517 	ldw	r2,-32684(gp)
    1058:	12400017 	ldw	r9,0(r2)

  for(i = x; i <= (x + width - 1); i++)
    105c:	218d883a 	add	r6,r4,r6
    1060:	31bfffc4 	addi	r6,r6,-1
    1064:	31001116 	blt	r6,r4,10ac <vga_draw_rectangle+0x5c>
    1068:	29c5883a 	add	r2,r5,r7
    106c:	11ffffc4 	addi	r7,r2,-1
    1070:	02c00044 	movi	r11,1
    1074:	00000b06 	br	10a4 <vga_draw_rectangle+0x54>
    1078:	2807883a 	mov	r3,r5
    107c:	02000044 	movi	r8,1
  {
    for(j = y; j <= (y + height -1); j++)
    {
      offset = (j << 9) + i;
      *(pixel_buffer + offset) = color;
    1080:	1804927a 	slli	r2,r3,9
    1084:	1105883a 	add	r2,r2,r4
    1088:	1085883a 	add	r2,r2,r2
    108c:	4885883a 	add	r2,r9,r2
    1090:	1280000d 	sth	r10,0(r2)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);

  for(i = x; i <= (x + width - 1); i++)
  {
    for(j = y; j <= (y + height -1); j++)
    1094:	1a07883a 	add	r3,r3,r8
    1098:	38fff90e 	bge	r7,r3,1080 <vga_draw_rectangle+0x30>
void vga_draw_rectangle(int x, int y, int width, int height, short color)
{
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);

  for(i = x; i <= (x + width - 1); i++)
    109c:	22c9883a 	add	r4,r4,r11
    10a0:	31000216 	blt	r6,r4,10ac <vga_draw_rectangle+0x5c>
  {
    for(j = y; j <= (y + height -1); j++)
    10a4:	397ff40e 	bge	r7,r5,1078 <vga_draw_rectangle+0x28>
    10a8:	003ffc06 	br	109c <vga_draw_rectangle+0x4c>
    10ac:	f800283a 	ret

000010b0 <vga_char_buffer_clear>:
  int i, j, offset;
  for (i = 0; i < VGA_CHAR_BUFF_RES_X; i++)
    for (j = 0; j < VGA_CHAR_BUFF_RES_Y; j++)
      {
        offset = (j << 6) + i;
        *(char_buff_base + offset) = ' ';  // write to the character buffer
    10b0:	d1a01417 	ldw	r6,-32688(gp)
    10b4:	000b883a 	mov	r5,zero
    10b8:	00000c06 	br	10ec <vga_char_buffer_clear+0x3c>
    10bc:	200491ba 	slli	r2,r4,6
    10c0:	1145883a 	add	r2,r2,r5
    10c4:	3085883a 	add	r2,r6,r2
    10c8:	00c00804 	movi	r3,32
    10cc:	10c00005 	stb	r3,0(r2)
  int char_x = 0;
  int char_y = 0;

  int i, j, offset;
  for (i = 0; i < VGA_CHAR_BUFF_RES_X; i++)
    for (j = 0; j < VGA_CHAR_BUFF_RES_Y; j++)
    10d0:	00c00044 	movi	r3,1
    10d4:	20c9883a 	add	r4,r4,r3
    10d8:	00800f04 	movi	r2,60
    10dc:	20bff71e 	bne	r4,r2,10bc <vga_char_buffer_clear+0xc>
{
  int char_x = 0;
  int char_y = 0;

  int i, j, offset;
  for (i = 0; i < VGA_CHAR_BUFF_RES_X; i++)
    10e0:	28cb883a 	add	r5,r5,r3
    10e4:	00801404 	movi	r2,80
    10e8:	28800226 	beq	r5,r2,10f4 <vga_char_buffer_clear+0x44>
    for (j = 0; j < VGA_CHAR_BUFF_RES_Y; j++)
      {
        offset = (j << 6) + i;
        *(char_buff_base + offset) = ' ';  // write to the character buffer
      }
}
    10ec:	0009883a 	mov	r4,zero
    10f0:	003ff206 	br	10bc <vga_char_buffer_clear+0xc>
    10f4:	f800283a 	ret

000010f8 <ethernet_rx_isr>:
 *
 */
void ethernet_rx_isr (void *context, unsigned int id)
{
  /* Process data in ethernet receive frame. */
}
    10f8:	f800283a 	ret

000010fc <mapd>:
}

/* Map a double whose domain spans from d0 to d1 onto the range given by
 * r0 to r1. */
double mapd (double value, double d0, double d1, double r0, double r1)
{
    10fc:	defff504 	addi	sp,sp,-44
    1100:	dfc00a15 	stw	ra,40(sp)
    1104:	ddc00915 	stw	r23,36(sp)
    1108:	dd800815 	stw	r22,32(sp)
    110c:	dd400715 	stw	r21,28(sp)
    1110:	dd000615 	stw	r20,24(sp)
    1114:	dcc00515 	stw	r19,20(sp)
    1118:	dc800415 	stw	r18,16(sp)
    111c:	dc400315 	stw	r17,12(sp)
    1120:	dc000215 	stw	r16,8(sp)
    1124:	2021883a 	mov	r16,r4
    1128:	2823883a 	mov	r17,r5
    112c:	d9800015 	stw	r6,0(sp)
    1130:	d9c00115 	stw	r7,4(sp)
    1134:	dd800b17 	ldw	r22,44(sp)
    1138:	ddc00c17 	ldw	r23,48(sp)
    113c:	dd000d17 	ldw	r20,52(sp)
    1140:	dd400e17 	ldw	r21,56(sp)
    1144:	dc800f17 	ldw	r18,60(sp)
    1148:	dcc01017 	ldw	r19,64(sp)
  if (value > d1) return r1;
    114c:	b00d883a 	mov	r6,r22
    1150:	b80f883a 	mov	r7,r23
    1154:	0002b4c0 	call	2b4c <__gtdf2>
    1158:	00802816 	blt	zero,r2,11fc <mapd+0x100>
  if (value < d0) return r0;
    115c:	8009883a 	mov	r4,r16
    1160:	880b883a 	mov	r5,r17
    1164:	d9800017 	ldw	r6,0(sp)
    1168:	d9c00117 	ldw	r7,4(sp)
    116c:	0002c5c0 	call	2c5c <__ltdf2>
    1170:	1000030e 	bge	r2,zero,1180 <mapd+0x84>
    1174:	a025883a 	mov	r18,r20
    1178:	a827883a 	mov	r19,r21
    117c:	00001f06 	br	11fc <mapd+0x100>
  double new = (value - d0) * (r1 - r0) / (d1 - d0);
    1180:	8009883a 	mov	r4,r16
    1184:	880b883a 	mov	r5,r17
    1188:	d9800017 	ldw	r6,0(sp)
    118c:	d9c00117 	ldw	r7,4(sp)
    1190:	000243c0 	call	243c <__subdf3>
    1194:	1021883a 	mov	r16,r2
    1198:	1823883a 	mov	r17,r3
    119c:	9009883a 	mov	r4,r18
    11a0:	980b883a 	mov	r5,r19
    11a4:	a00d883a 	mov	r6,r20
    11a8:	a80f883a 	mov	r7,r21
    11ac:	000243c0 	call	243c <__subdf3>
    11b0:	8009883a 	mov	r4,r16
    11b4:	880b883a 	mov	r5,r17
    11b8:	100d883a 	mov	r6,r2
    11bc:	180f883a 	mov	r7,r3
    11c0:	00025300 	call	2530 <__muldf3>
    11c4:	1021883a 	mov	r16,r2
    11c8:	1823883a 	mov	r17,r3
    11cc:	b009883a 	mov	r4,r22
    11d0:	b80b883a 	mov	r5,r23
    11d4:	d9800017 	ldw	r6,0(sp)
    11d8:	d9c00117 	ldw	r7,4(sp)
    11dc:	000243c0 	call	243c <__subdf3>
    11e0:	8009883a 	mov	r4,r16
    11e4:	880b883a 	mov	r5,r17
    11e8:	100d883a 	mov	r6,r2
    11ec:	180f883a 	mov	r7,r3
    11f0:	00028f40 	call	28f4 <__divdf3>
    11f4:	1025883a 	mov	r18,r2
    11f8:	1827883a 	mov	r19,r3
    11fc:	9005883a 	mov	r2,r18
    1200:	9807883a 	mov	r3,r19
  return new;
}
    1204:	dfc00a17 	ldw	ra,40(sp)
    1208:	ddc00917 	ldw	r23,36(sp)
    120c:	dd800817 	ldw	r22,32(sp)
    1210:	dd400717 	ldw	r21,28(sp)
    1214:	dd000617 	ldw	r20,24(sp)
    1218:	dcc00517 	ldw	r19,20(sp)
    121c:	dc800417 	ldw	r18,16(sp)
    1220:	dc400317 	ldw	r17,12(sp)
    1224:	dc000217 	ldw	r16,8(sp)
    1228:	dec00b04 	addi	sp,sp,44
    122c:	f800283a 	ret

00001230 <signal_audio_ready>:

/* Called by the audio ISR to signal the main loop that samples are ready
 * for the FFT. */
inline void signal_audio_ready ()
{
  audio_ready = true;
    1230:	00800044 	movi	r2,1
    1234:	d0a80905 	stb	r2,-24540(gp)
}
    1238:	f800283a 	ret

0000123c <toggle_hardware_rendering>:

/* Turn hardware rendering on or off. */
void toggle_hardware_rendering ()
{
  use_hardware_rendering = !use_hardware_rendering;
    123c:	d0a01803 	ldbu	r2,-32672(gp)
    1240:	10803fcc 	andi	r2,r2,255
    1244:	1080005c 	xori	r2,r2,1
    1248:	d0a01805 	stb	r2,-32672(gp)
}
    124c:	f800283a 	ret

00001250 <swap_buffers>:
//   return r1*r2 + i1*i2;
// }

/* Swap the LCD buffers and pass the new backbuffer address to the TLDA. */
void swap_buffers ()
{
    1250:	deffff04 	addi	sp,sp,-4
    1254:	dfc00015 	stw	ra,0(sp)
  lcd_swap_buffers ();
    1258:	0000cfc0 	call	cfc <lcd_swap_buffers>
  tlda_set_drawing_buffer (lcd_get_backbuffer_addr ());
    125c:	0000e5c0 	call	e5c <lcd_get_backbuffer_addr>
    1260:	1009883a 	mov	r4,r2
    1264:	0001bf40 	call	1bf4 <tlda_set_drawing_buffer>
}
    1268:	dfc00017 	ldw	ra,0(sp)
    126c:	dec00104 	addi	sp,sp,4
    1270:	f800283a 	ret

00001274 <draw_fft>:

/* Draw the visualizer pattern using the FFT output. */
void draw_fft ()
{
    1274:	defff904 	addi	sp,sp,-28
    1278:	dfc00615 	stw	ra,24(sp)
    127c:	dcc00515 	stw	r19,20(sp)
    1280:	dc800415 	stw	r18,16(sp)
    1284:	dc400315 	stw	r17,12(sp)
    1288:	dc000215 	stw	r16,8(sp)
  lcd_draw_rectangle_back (0, 0, LCD_RES_X, LCD_RES_Y, BLACK);
    128c:	d8000015 	stw	zero,0(sp)
    1290:	0009883a 	mov	r4,zero
    1294:	000b883a 	mov	r5,zero
    1298:	01806404 	movi	r6,400
    129c:	01c03c04 	movi	r7,240
    12a0:	0000db40 	call	db4 <lcd_draw_rectangle_back>
    12a4:	044001f4 	movhi	r17,7
    12a8:	8c4c8c04 	addi	r17,r17,12848
    12ac:	0021883a 	mov	r16,zero
    12b0:	04803c04 	movi	r18,240
    12b4:	04e00074 	movhi	r19,32769
    12b8:	9cffffc4 	addi	r19,r19,-1
  const size_t bar_width = 13;

  int i;
  for (i = 0; i < DRAWING_BINS; i++)
    {
      int value = (int) average_power_spectrum[i];
    12bc:	89000017 	ldw	r4,0(r17)
    12c0:	89400117 	ldw	r5,4(r17)
    12c4:	0002ddc0 	call	2ddc <__fixdfsi>
    12c8:	1007883a 	mov	r3,r2
      if (use_hardware_rendering)
    12cc:	d0a01803 	ldbu	r2,-32672(gp)
    12d0:	10803fcc 	andi	r2,r2,255
    12d4:	10000f26 	beq	r2,zero,1314 <draw_fft+0xa0>
        {
          tlda_draw (bar_width * i,
    12d8:	90cbc83a 	sub	r5,r18,r3
    12dc:	900f883a 	mov	r7,r18
    12e0:	1880fa04 	addi	r2,r3,1000
    12e4:	14c4703a 	and	r2,r2,r19
    12e8:	1000030e 	bge	r2,zero,12f8 <draw_fft+0x84>
    12ec:	10bfffc4 	addi	r2,r2,-1
    12f0:	10bffff4 	orhi	r2,r2,65535
    12f4:	10800044 	addi	r2,r2,1
    12f8:	d8800015 	stw	r2,0(sp)
    12fc:	008002c4 	movi	r2,11
    1300:	d8800115 	stw	r2,4(sp)
    1304:	8009883a 	mov	r4,r16
    1308:	800d883a 	mov	r6,r16
    130c:	0001b940 	call	1b94 <tlda_draw>
    1310:	00000f06 	br	1350 <draw_fft+0xdc>
                    (value + 1000) % 0x10000,
                    bar_width - 2);
        }
      else
        {
          lcd_draw_rectangle_back (bar_width * i,
    1314:	90cbc83a 	sub	r5,r18,r3
    1318:	1880fa04 	addi	r2,r3,1000
    131c:	14c4703a 	and	r2,r2,r19
    1320:	1000030e 	bge	r2,zero,1330 <draw_fft+0xbc>
    1324:	10bfffc4 	addi	r2,r2,-1
    1328:	10bffff4 	orhi	r2,r2,65535
    132c:	10800044 	addi	r2,r2,1
    1330:	10bfffcc 	andi	r2,r2,65535
    1334:	10a0001c 	xori	r2,r2,32768
    1338:	10a00004 	addi	r2,r2,-32768
    133c:	d8800015 	stw	r2,0(sp)
    1340:	8009883a 	mov	r4,r16
    1344:	01800304 	movi	r6,12
    1348:	180f883a 	mov	r7,r3
    134c:	0000db40 	call	db4 <lcd_draw_rectangle_back>
    1350:	8c400204 	addi	r17,r17,8
    1354:	84000344 	addi	r16,r16,13
{
  lcd_draw_rectangle_back (0, 0, LCD_RES_X, LCD_RES_Y, BLACK);
  const size_t bar_width = 13;

  int i;
  for (i = 0; i < DRAWING_BINS; i++)
    1358:	008064c4 	movi	r2,403
    135c:	80bfd71e 	bne	r16,r2,12bc <draw_fft+0x48>
                                    bar_width - 1,
                                    value,
                                    (value + 1000) % 0x10000);
        }
    }
  swap_buffers ();
    1360:	00012500 	call	1250 <swap_buffers>
}
    1364:	dfc00617 	ldw	ra,24(sp)
    1368:	dcc00517 	ldw	r19,20(sp)
    136c:	dc800417 	ldw	r18,16(sp)
    1370:	dc400317 	ldw	r17,12(sp)
    1374:	dc000217 	ldw	r16,8(sp)
    1378:	dec00704 	addi	sp,sp,28
    137c:	f800283a 	ret

00001380 <compareAndPrint>:

  return 0;
}

void compareAndPrint()
{
    1380:	defff304 	addi	sp,sp,-52
    1384:	dfc00c15 	stw	ra,48(sp)
    1388:	df000b15 	stw	fp,44(sp)
    138c:	ddc00a15 	stw	r23,40(sp)
    1390:	dd800915 	stw	r22,36(sp)
    1394:	dd400815 	stw	r21,32(sp)
    1398:	dd000715 	stw	r20,28(sp)
    139c:	dcc00615 	stw	r19,24(sp)
    13a0:	dc800515 	stw	r18,20(sp)
    13a4:	dc400415 	stw	r17,16(sp)
    13a8:	dc000315 	stw	r16,12(sp)
    13ac:	0039883a 	mov	fp,zero
    13b0:	0029883a 	mov	r20,zero
    13b4:	002b883a 	mov	r21,zero
    13b8:	002d883a 	mov	r22,zero
    13bc:	002f883a 	mov	r23,zero
  {
    dot_yes = 0;
    dot_no = 0;
    for (i = 0; i < NUM_SAMPLES*2; i++)
     {
      offset_index = (i + j) % (2*NUM_SAMPLES);
    13c0:	00a00034 	movhi	r2,32768
    13c4:	108fffc4 	addi	r2,r2,16383
    13c8:	e0a0703a 	and	r16,fp,r2
    13cc:	8000040e 	bge	r16,zero,13e0 <compareAndPrint+0x60>
    13d0:	843fffc4 	addi	r16,r16,-1
    13d4:	00b00004 	movi	r2,-16384
    13d8:	80a0b03a 	or	r16,r16,r2
    13dc:	84000044 	addi	r16,r16,1
      dot_yes += yesBuffer[i]*sampleBuffer[offset_index];
    13e0:	e02290fa 	slli	r17,fp,3
    13e4:	00800074 	movhi	r2,1
    13e8:	108c4404 	addi	r2,r2,12560
    13ec:	8885883a 	add	r2,r17,r2
    13f0:	11400017 	ldw	r5,0(r2)
    13f4:	11800117 	ldw	r6,4(r2)
    13f8:	802090fa 	slli	r16,r16,3
    13fc:	00800174 	movhi	r2,5
    1400:	108c4404 	addi	r2,r2,12560
    1404:	80a1883a 	add	r16,r16,r2
    1408:	80800017 	ldw	r2,0(r16)
    140c:	80c00117 	ldw	r3,4(r16)
    1410:	2809883a 	mov	r4,r5
    1414:	300b883a 	mov	r5,r6
    1418:	100d883a 	mov	r6,r2
    141c:	180f883a 	mov	r7,r3
    1420:	00025300 	call	2530 <__muldf3>
    1424:	a009883a 	mov	r4,r20
    1428:	a80b883a 	mov	r5,r21
    142c:	100d883a 	mov	r6,r2
    1430:	180f883a 	mov	r7,r3
    1434:	00024bc0 	call	24bc <__adddf3>
    1438:	1025883a 	mov	r18,r2
    143c:	1827883a 	mov	r19,r3
    1440:	1029883a 	mov	r20,r2
    1444:	182b883a 	mov	r21,r3
      dot_no += noBuffer[i]*sampleBuffer[offset_index];
    1448:	008000f4 	movhi	r2,3
    144c:	108c4404 	addi	r2,r2,12560
    1450:	88a3883a 	add	r17,r17,r2
    1454:	89400017 	ldw	r5,0(r17)
    1458:	89800117 	ldw	r6,4(r17)
    145c:	80800017 	ldw	r2,0(r16)
    1460:	80c00117 	ldw	r3,4(r16)
    1464:	2809883a 	mov	r4,r5
    1468:	300b883a 	mov	r5,r6
    146c:	100d883a 	mov	r6,r2
    1470:	180f883a 	mov	r7,r3
    1474:	00025300 	call	2530 <__muldf3>
    1478:	b009883a 	mov	r4,r22
    147c:	b80b883a 	mov	r5,r23
    1480:	100d883a 	mov	r6,r2
    1484:	180f883a 	mov	r7,r3
    1488:	00024bc0 	call	24bc <__adddf3>
    148c:	100d883a 	mov	r6,r2
    1490:	102d883a 	mov	r22,r2
    1494:	182f883a 	mov	r23,r3
  int nFFTs = NUM_SAMPLES / FFT_LEN;
  for (j = 0; j < 2*nFFTs; j+= 2*FFT_LEN)
  {
    dot_yes = 0;
    dot_no = 0;
    for (i = 0; i < NUM_SAMPLES*2; i++)
    1498:	e7000044 	addi	fp,fp,1
    149c:	00900004 	movi	r2,16384
    14a0:	e0bfc71e 	bne	fp,r2,13c0 <compareAndPrint+0x40>
    14a4:	9009883a 	mov	r4,r18
    14a8:	980b883a 	mov	r5,r19
    14ac:	3021883a 	mov	r16,r6
    14b0:	1823883a 	mov	r17,r3
     {
      offset_index = (i + j) % (2*NUM_SAMPLES);
      dot_yes += yesBuffer[i]*sampleBuffer[offset_index];
      dot_no += noBuffer[i]*sampleBuffer[offset_index];
     }
    if (dot_yes > dot_yes_max) dot_yes_max = dot_yes;
    14b4:	00bff034 	movhi	r2,65472
    14b8:	00f07834 	movhi	r3,49632
    14bc:	18ffffc4 	addi	r3,r3,-1
    14c0:	100d883a 	mov	r6,r2
    14c4:	180f883a 	mov	r7,r3
    14c8:	0002b4c0 	call	2b4c <__gtdf2>
    14cc:	0080030e 	bge	zero,r2,14dc <compareAndPrint+0x15c>
    14d0:	dc800115 	stw	r18,4(sp)
    14d4:	dcc00215 	stw	r19,8(sp)
    14d8:	00000506 	br	14f0 <compareAndPrint+0x170>
    14dc:	00bff034 	movhi	r2,65472
    14e0:	d8800115 	stw	r2,4(sp)
    14e4:	00b07834 	movhi	r2,49632
    14e8:	10bfffc4 	addi	r2,r2,-1
    14ec:	d8800215 	stw	r2,8(sp)
    if (dot_no > dot_no_max) dot_no_max = dot_no;
    14f0:	00bff034 	movhi	r2,65472
    14f4:	00f07834 	movhi	r3,49632
    14f8:	18ffffc4 	addi	r3,r3,-1
    14fc:	8009883a 	mov	r4,r16
    1500:	880b883a 	mov	r5,r17
    1504:	100d883a 	mov	r6,r2
    1508:	180f883a 	mov	r7,r3
    150c:	0002b4c0 	call	2b4c <__gtdf2>
    1510:	0080030e 	bge	zero,r2,1520 <compareAndPrint+0x1a0>
    1514:	b021883a 	mov	r16,r22
    1518:	b823883a 	mov	r17,r23
    151c:	00000306 	br	152c <compareAndPrint+0x1ac>
    1520:	043ff034 	movhi	r16,65472
    1524:	04707834 	movhi	r17,49632
    1528:	8c7fffc4 	addi	r17,r17,-1
  }
  printf("%lf, %lf\n", dot_yes_max, dot_no_max);
    152c:	dc400015 	stw	r17,0(sp)
    1530:	800f883a 	mov	r7,r16
    1534:	01000074 	movhi	r4,1
    1538:	213a3d04 	addi	r4,r4,-5900
    153c:	d9400117 	ldw	r5,4(sp)
    1540:	d9800217 	ldw	r6,8(sp)
    1544:	0003cf80 	call	3cf8 <printf>
  if (dot_yes_max >= dot_no_max) printf("Yes");
    1548:	d9000117 	ldw	r4,4(sp)
    154c:	d9400217 	ldw	r5,8(sp)
    1550:	800d883a 	mov	r6,r16
    1554:	880f883a 	mov	r7,r17
    1558:	0002bd40 	call	2bd4 <__gedf2>
    155c:	10000416 	blt	r2,zero,1570 <compareAndPrint+0x1f0>
    1560:	01000074 	movhi	r4,1
    1564:	213a5e04 	addi	r4,r4,-5768
    1568:	0003cf80 	call	3cf8 <printf>
    156c:	00000306 	br	157c <compareAndPrint+0x1fc>
  else printf("No\n");
    1570:	01000074 	movhi	r4,1
    1574:	213a5804 	addi	r4,r4,-5792
    1578:	0003e100 	call	3e10 <puts>
}
    157c:	dfc00c17 	ldw	ra,48(sp)
    1580:	df000b17 	ldw	fp,44(sp)
    1584:	ddc00a17 	ldw	r23,40(sp)
    1588:	dd800917 	ldw	r22,36(sp)
    158c:	dd400817 	ldw	r21,32(sp)
    1590:	dd000717 	ldw	r20,28(sp)
    1594:	dcc00617 	ldw	r19,24(sp)
    1598:	dc800517 	ldw	r18,20(sp)
    159c:	dc400417 	ldw	r17,16(sp)
    15a0:	dc000317 	ldw	r16,12(sp)
    15a4:	dec00d04 	addi	sp,sp,52
    15a8:	f800283a 	ret

000015ac <sendData>:
    working = false;
  }
}

//remove
void sendData(double *output) {
    15ac:	defff904 	addi	sp,sp,-28
    15b0:	dfc00615 	stw	ra,24(sp)
    15b4:	dd400515 	stw	r21,20(sp)
    15b8:	dd000415 	stw	r20,16(sp)
    15bc:	dcc00315 	stw	r19,12(sp)
    15c0:	dc800215 	stw	r18,8(sp)
    15c4:	dc400115 	stw	r17,4(sp)
    15c8:	dc000015 	stw	r16,0(sp)
    15cc:	2027883a 	mov	r19,r4
    15d0:	0025883a 	mov	r18,zero
    15d4:	0441fc04 	movi	r17,2032
    15d8:	05400384 	movi	r21,14
    15dc:	050000b4 	movhi	r20,2
    15e0:	a53f0004 	addi	r20,r20,-1024
  int i;
  //printf("sending data\n");
  int numToSend = (sizeof(double) * 2 * NUM_SAMPLES)/ENET_FRAME_DATA_SIZE;
  int amtLeft =  (sizeof(double) * 2 * NUM_SAMPLES)%ENET_FRAME_DATA_SIZE;
  for(i = 0; i < numToSend; i++) {
      tx_frame->length = htons(ENET_FRAME_DATA_SIZE);
    15e4:	d4280c17 	ldw	r16,-24528(gp)
    15e8:	8809883a 	mov	r4,r17
    15ec:	00007100 	call	710 <htons>
    15f0:	8080030d 	sth	r2,12(r16)
      memcpy(tx_frame->data, output + i*(ENET_FRAME_DATA_SIZE/sizeof(double)), 
    15f4:	d1280c17 	ldw	r4,-24528(gp)
    15f8:	2549883a 	add	r4,r4,r21
    15fc:	94cb883a 	add	r5,r18,r19
    1600:	880d883a 	mov	r6,r17
    1604:	0003c580 	call	3c58 <memcpy>
                                          ENET_FRAME_DATA_SIZE);
      ethernet_tx();
    1608:	00007880 	call	788 <ethernet_tx>
    160c:	9465883a 	add	r18,r18,r17
void sendData(double *output) {
  int i;
  //printf("sending data\n");
  int numToSend = (sizeof(double) * 2 * NUM_SAMPLES)/ENET_FRAME_DATA_SIZE;
  int amtLeft =  (sizeof(double) * 2 * NUM_SAMPLES)%ENET_FRAME_DATA_SIZE;
  for(i = 0; i < numToSend; i++) {
    1610:	953ff41e 	bne	r18,r20,15e4 <sendData+0x38>
      tx_frame->length = htons(ENET_FRAME_DATA_SIZE);
      memcpy(tx_frame->data, output + i*(ENET_FRAME_DATA_SIZE/sizeof(double)), 
                                          ENET_FRAME_DATA_SIZE);
      ethernet_tx();
  }
    tx_frame->length = htons(amtLeft);
    1614:	d4280c17 	ldw	r16,-24528(gp)
    1618:	04410004 	movi	r17,1024
    161c:	8809883a 	mov	r4,r17
    1620:	00007100 	call	710 <htons>
    1624:	8080030d 	sth	r2,12(r16)
    //i still in scope and has correct value
    memcpy(tx_frame->data, output+ i*(ENET_FRAME_DATA_SIZE/sizeof(double)), 
    1628:	d1280c17 	ldw	r4,-24528(gp)
    162c:	2549883a 	add	r4,r4,r21
    1630:	9c8b883a 	add	r5,r19,r18
    1634:	880d883a 	mov	r6,r17
    1638:	0003c580 	call	3c58 <memcpy>
                                          amtLeft);
    ethernet_tx();
    163c:	00007880 	call	788 <ethernet_tx>
    //printf("done sending\n");
}
    1640:	dfc00617 	ldw	ra,24(sp)
    1644:	dd400517 	ldw	r21,20(sp)
    1648:	dd000417 	ldw	r20,16(sp)
    164c:	dcc00317 	ldw	r19,12(sp)
    1650:	dc800217 	ldw	r18,8(sp)
    1654:	dc400117 	ldw	r17,4(sp)
    1658:	dc000017 	ldw	r16,0(sp)
    165c:	dec00704 	addi	sp,sp,28
    1660:	f800283a 	ret

00001664 <fft>:
 * Perform a hardware FFT on the samples_for_fft array.
 * Also store historical FFT outputs in a ring buffer of length AVERAGING_LENGTH
 * so the animation is smoother.
 */
int fft (double* output)
{
    1664:	defef504 	addi	sp,sp,-1068
    1668:	dfc10a15 	stw	ra,1064(sp)
    166c:	df010915 	stw	fp,1060(sp)
    1670:	ddc10815 	stw	r23,1056(sp)
    1674:	dd810715 	stw	r22,1052(sp)
    1678:	dd410615 	stw	r21,1048(sp)
    167c:	dd010515 	stw	r20,1044(sp)
    1680:	dcc10415 	stw	r19,1040(sp)
    1684:	dc810315 	stw	r18,1036(sp)
    1688:	dc410215 	stw	r17,1032(sp)
    168c:	dc010115 	stw	r16,1028(sp)
    1690:	202f883a 	mov	r23,r4
    1694:	d9010015 	stw	r4,1024(sp)
    1698:	0039883a 	mov	fp,zero
  int i, j;
  kiss_fft_cpx fft_output[FFT_LEN];
  for (j = 0; j < NUM_SAMPLES; j+= FFT_LEN)
  {
    kiss_fft (fft_cfg, samples_for_fft + j, fft_output);
    169c:	d1280b17 	ldw	r4,-24532(gp)
    16a0:	014001f4 	movhi	r5,7
    16a4:	294cca04 	addi	r5,r5,13096
    16a8:	e14b883a 	add	r5,fp,r5
    16ac:	d80d883a 	mov	r6,sp
    16b0:	00004180 	call	418 <kiss_fft>
    16b4:	0029883a 	mov	r20,zero
    16b8:	002b883a 	mov	r21,zero
    16bc:	d82d883a 	mov	r22,sp
    double norm = 0;
    for (i = 0; i < FFT_LEN; i++)
      {
        norm += (double)fft_output[i].r*(double)fft_output[i].r + (double)fft_output[i].i*(double)fft_output[i].i;
    16c0:	b1000017 	ldw	r4,0(r22)
    16c4:	0002ce40 	call	2ce4 <__floatsidf>
    16c8:	1021883a 	mov	r16,r2
    16cc:	1823883a 	mov	r17,r3
    16d0:	b1000117 	ldw	r4,4(r22)
    16d4:	0002ce40 	call	2ce4 <__floatsidf>
    16d8:	1025883a 	mov	r18,r2
    16dc:	1827883a 	mov	r19,r3
    16e0:	8009883a 	mov	r4,r16
    16e4:	880b883a 	mov	r5,r17
    16e8:	800d883a 	mov	r6,r16
    16ec:	880f883a 	mov	r7,r17
    16f0:	00025300 	call	2530 <__muldf3>
    16f4:	1021883a 	mov	r16,r2
    16f8:	1823883a 	mov	r17,r3
    16fc:	9009883a 	mov	r4,r18
    1700:	980b883a 	mov	r5,r19
    1704:	900d883a 	mov	r6,r18
    1708:	980f883a 	mov	r7,r19
    170c:	00025300 	call	2530 <__muldf3>
    1710:	8009883a 	mov	r4,r16
    1714:	880b883a 	mov	r5,r17
    1718:	100d883a 	mov	r6,r2
    171c:	180f883a 	mov	r7,r3
    1720:	00024bc0 	call	24bc <__adddf3>
    1724:	a009883a 	mov	r4,r20
    1728:	a80b883a 	mov	r5,r21
    172c:	100d883a 	mov	r6,r2
    1730:	180f883a 	mov	r7,r3
    1734:	00024bc0 	call	24bc <__adddf3>
    1738:	100b883a 	mov	r5,r2
    173c:	1029883a 	mov	r20,r2
    1740:	182b883a 	mov	r21,r3
    1744:	b5800204 	addi	r22,r22,8
  kiss_fft_cpx fft_output[FFT_LEN];
  for (j = 0; j < NUM_SAMPLES; j+= FFT_LEN)
  {
    kiss_fft (fft_cfg, samples_for_fft + j, fft_output);
    double norm = 0;
    for (i = 0; i < FFT_LEN; i++)
    1748:	d8810004 	addi	r2,sp,1024
    174c:	b0bfdc1e 	bne	r22,r2,16c0 <fft+0x5c>
      {
        norm += (double)fft_output[i].r*(double)fft_output[i].r + (double)fft_output[i].i*(double)fft_output[i].i;
      }
    norm = sqrt(norm);
    1750:	2809883a 	mov	r4,r5
    1754:	180b883a 	mov	r5,r3
    1758:	0001bfc0 	call	1bfc <sqrt>
    175c:	1029883a 	mov	r20,r2
    1760:	182b883a 	mov	r21,r3
    1764:	b825883a 	mov	r18,r23
    1768:	0023883a 	mov	r17,zero

    for (i = 0; i < FFT_LEN*2; i+=2)
      {
        output[i + 2*j] = (double)fft_output[i/2].r / norm;
    176c:	8820d7fa 	srli	r16,r17,31
    1770:	8461883a 	add	r16,r16,r17
    1774:	8021d07a 	srai	r16,r16,1
    1778:	802090fa 	slli	r16,r16,3
    177c:	86e1883a 	add	r16,r16,sp
    1780:	81000017 	ldw	r4,0(r16)
    1784:	0002ce40 	call	2ce4 <__floatsidf>
    1788:	1009883a 	mov	r4,r2
    178c:	180b883a 	mov	r5,r3
    1790:	a00d883a 	mov	r6,r20
    1794:	a80f883a 	mov	r7,r21
    1798:	00028f40 	call	28f4 <__divdf3>
    179c:	90800015 	stw	r2,0(r18)
    17a0:	90c00115 	stw	r3,4(r18)
        output[i + 2*j + 1] = (double)fft_output[i/2].i / norm;
    17a4:	81000117 	ldw	r4,4(r16)
    17a8:	0002ce40 	call	2ce4 <__floatsidf>
    17ac:	1009883a 	mov	r4,r2
    17b0:	180b883a 	mov	r5,r3
    17b4:	a00d883a 	mov	r6,r20
    17b8:	a80f883a 	mov	r7,r21
    17bc:	00028f40 	call	28f4 <__divdf3>
    17c0:	90800215 	stw	r2,8(r18)
    17c4:	90c00315 	stw	r3,12(r18)
      {
        norm += (double)fft_output[i].r*(double)fft_output[i].r + (double)fft_output[i].i*(double)fft_output[i].i;
      }
    norm = sqrt(norm);

    for (i = 0; i < FFT_LEN*2; i+=2)
    17c8:	8c400084 	addi	r17,r17,2
    17cc:	94800404 	addi	r18,r18,16
    17d0:	00804004 	movi	r2,256
    17d4:	88bfe51e 	bne	r17,r2,176c <fft+0x108>
      {
        output[i + 2*j] = (double)fft_output[i/2].r / norm;
        output[i + 2*j + 1] = (double)fft_output[i/2].i / norm;
      }
    sendData(output);
    17d8:	d9010017 	ldw	r4,1024(sp)
    17dc:	00015ac0 	call	15ac <sendData>
    17e0:	e7010004 	addi	fp,fp,1024
    17e4:	bdc20004 	addi	r23,r23,2048
 */
int fft (double* output)
{
  int i, j;
  kiss_fft_cpx fft_output[FFT_LEN];
  for (j = 0; j < NUM_SAMPLES; j+= FFT_LEN)
    17e8:	00800074 	movhi	r2,1
    17ec:	e0bfab1e 	bne	fp,r2,169c <fft+0x38>
      }
    sendData(output);
  }

  return 0;
}
    17f0:	0005883a 	mov	r2,zero
    17f4:	dfc10a17 	ldw	ra,1064(sp)
    17f8:	df010917 	ldw	fp,1060(sp)
    17fc:	ddc10817 	ldw	r23,1056(sp)
    1800:	dd810717 	ldw	r22,1052(sp)
    1804:	dd410617 	ldw	r21,1048(sp)
    1808:	dd010517 	ldw	r20,1044(sp)
    180c:	dcc10417 	ldw	r19,1040(sp)
    1810:	dc810317 	ldw	r18,1036(sp)
    1814:	dc410217 	ldw	r17,1032(sp)
    1818:	dc010117 	ldw	r16,1028(sp)
    181c:	dec10b04 	addi	sp,sp,1068
    1820:	f800283a 	ret

00001824 <clearLCDChar>:
  memcpy(tx_frame->dest, destAddr, ENET_MAC_ADDR_SIZE);
  memcpy(tx_frame->src, srcAddr, ENET_MAC_ADDR_SIZE);
  tx_frame = ethernet_get_tx_frame();
}

static void clearLCDChar() {
    1824:	defffd04 	addi	sp,sp,-12
    1828:	dfc00215 	stw	ra,8(sp)
    182c:	dc400115 	stw	r17,4(sp)
    1830:	dc000015 	stw	r16,0(sp)
  char_lcd_move_cursor(0,0);
    1834:	0009883a 	mov	r4,zero
    1838:	000b883a 	mov	r5,zero
    183c:	000067c0 	call	67c <char_lcd_move_cursor>
    1840:	0023883a 	mov	r17,zero
    1844:	00001306 	br	1894 <clearLCDChar+0x70>
    for (j = 0; j < LCD_CHAR_DISPLAY_SIZE_Y; j++) {
      char_lcd_write(" ");
      char_lcd_move_cursor(i, j);
    }
  }
  char_lcd_cursor_off();
    1848:	00006d00 	call	6d0 <char_lcd_cursor_off>
}
    184c:	dfc00217 	ldw	ra,8(sp)
    1850:	dc400117 	ldw	r17,4(sp)
    1854:	dc000017 	ldw	r16,0(sp)
    1858:	dec00304 	addi	sp,sp,12
    185c:	f800283a 	ret
  char_lcd_move_cursor(0,0);
  int i;
  for (i = 0; i < LCD_CHAR_DISPLAY_SIZE_X; i++) {
    int j;
    for (j = 0; j < LCD_CHAR_DISPLAY_SIZE_Y; j++) {
      char_lcd_write(" ");
    1860:	01000074 	movhi	r4,1
    1864:	213a4004 	addi	r4,r4,-5888
    1868:	00006a80 	call	6a8 <char_lcd_write>
      char_lcd_move_cursor(i, j);
    186c:	8809883a 	mov	r4,r17
    1870:	800b883a 	mov	r5,r16
    1874:	000067c0 	call	67c <char_lcd_move_cursor>
static void clearLCDChar() {
  char_lcd_move_cursor(0,0);
  int i;
  for (i = 0; i < LCD_CHAR_DISPLAY_SIZE_X; i++) {
    int j;
    for (j = 0; j < LCD_CHAR_DISPLAY_SIZE_Y; j++) {
    1878:	00c00044 	movi	r3,1
    187c:	80e1883a 	add	r16,r16,r3
    1880:	00800084 	movi	r2,2
    1884:	80bff61e 	bne	r16,r2,1860 <clearLCDChar+0x3c>
}

static void clearLCDChar() {
  char_lcd_move_cursor(0,0);
  int i;
  for (i = 0; i < LCD_CHAR_DISPLAY_SIZE_X; i++) {
    1888:	88e3883a 	add	r17,r17,r3
    188c:	00800404 	movi	r2,16
    1890:	88bfed26 	beq	r17,r2,1848 <clearLCDChar+0x24>
      char_lcd_write(" ");
      char_lcd_move_cursor(i, j);
    }
  }
  char_lcd_cursor_off();
}
    1894:	0021883a 	mov	r16,zero
    1898:	003ff106 	br	1860 <clearLCDChar+0x3c>

0000189c <main>:
 * Function: main
 * --------------
 * main simply calls initialize() then run().
 */
int main(void)
{
    189c:	defffd04 	addi	sp,sp,-12
    18a0:	dfc00215 	stw	ra,8(sp)
    18a4:	dc400115 	stw	r17,4(sp)
    18a8:	dc000015 	stw	r16,0(sp)
const uint8_t srcAddr[ENET_MAC_ADDR_SIZE] = {0x01, 0x60, 0x6E, 0x11, 0x02, 0x0A};
const uint8_t destAddr[ENET_MAC_ADDR_SIZE] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
/* Set up audio and pushbutton interrupts. */
static void configure_interrupts ()
{
  audio_init (audio_isr);
    18ac:	01000034 	movhi	r4,0
    18b0:	21006d04 	addi	r4,r4,436
    18b4:	00006440 	call	644 <audio_init>
  pushbuttons_enable_interrupts (pushbuttons_isr);
    18b8:	01000034 	movhi	r4,0
    18bc:	2106d104 	addi	r4,r4,6980
    18c0:	0000ea80 	call	ea8 <pushbuttons_enable_interrupts>
  pushbuttons_set_interrupt_mask (BUTTON2|BUTTON1);
    18c4:	04400184 	movi	r17,6
    18c8:	8809883a 	mov	r4,r17
    18cc:	0000e740 	call	e74 <pushbuttons_set_interrupt_mask>
  //remove when actually processing info
  ethernet_init(srcAddr, ethernet_rx_isr);
    18d0:	d4201844 	addi	r16,gp,-32671
    18d4:	8009883a 	mov	r4,r16
    18d8:	01400034 	movhi	r5,0
    18dc:	29443e04 	addi	r5,r5,4344
    18e0:	00008080 	call	808 <ethernet_init>
  memcpy(tx_frame->dest, destAddr, ENET_MAC_ADDR_SIZE);
    18e4:	d0e80c17 	ldw	r3,-24528(gp)
    18e8:	d12019c4 	addi	r4,gp,-32665
    18ec:	d0a019c3 	ldbu	r2,-32665(gp)
    18f0:	18800005 	stb	r2,0(r3)
    18f4:	20800043 	ldbu	r2,1(r4)
    18f8:	18800045 	stb	r2,1(r3)
    18fc:	20800083 	ldbu	r2,2(r4)
    1900:	18800085 	stb	r2,2(r3)
    1904:	208000c3 	ldbu	r2,3(r4)
    1908:	188000c5 	stb	r2,3(r3)
    190c:	20800103 	ldbu	r2,4(r4)
    1910:	18800105 	stb	r2,4(r3)
    1914:	20800143 	ldbu	r2,5(r4)
    1918:	18800145 	stb	r2,5(r3)
  memcpy(tx_frame->src, srcAddr, ENET_MAC_ADDR_SIZE);
    191c:	d0a80c17 	ldw	r2,-24528(gp)
    1920:	1445883a 	add	r2,r2,r17
    1924:	d0e01843 	ldbu	r3,-32671(gp)
    1928:	10c00005 	stb	r3,0(r2)
    192c:	80c00043 	ldbu	r3,1(r16)
    1930:	10c00045 	stb	r3,1(r2)
    1934:	80c00083 	ldbu	r3,2(r16)
    1938:	10c00085 	stb	r3,2(r2)
    193c:	80c000c3 	ldbu	r3,3(r16)
    1940:	10c000c5 	stb	r3,3(r2)
    1944:	80c00103 	ldbu	r3,4(r16)
    1948:	10c00105 	stb	r3,4(r2)
    194c:	80c00143 	ldbu	r3,5(r16)
    1950:	10c00145 	stb	r3,5(r2)
  tx_frame = ethernet_get_tx_frame();
    1954:	00007000 	call	700 <ethernet_get_tx_frame>
    1958:	d0a80c15 	stw	r2,-24528(gp)
}

/* Allocate the FFT configuration stryct and prepare sample array. */
static int configure_fft ()
{
  fft_cfg = kiss_fft_alloc (FFT_LEN, 0, NULL, 0);
    195c:	01002004 	movi	r4,128
    1960:	000b883a 	mov	r5,zero
    1964:	000d883a 	mov	r6,zero
    1968:	000f883a 	mov	r7,zero
    196c:	00005040 	call	504 <kiss_fft_alloc>
    1970:	d0a80b15 	stw	r2,-24532(gp)
  if (! fft_cfg) {
    1974:	10005d1e 	bne	r2,zero,1aec <main+0x250>
    1978:	00006906 	br	1b20 <main+0x284>
  }
  char_lcd_move_cursor(0,0);
  char_lcd_write("Push BTN1");
  char_lcd_move_cursor(0,1);
  char_lcd_write("And say Yes");
  while(!audio_ready);
    197c:	d0a80903 	ldbu	r2,-24540(gp)
    1980:	10803fcc 	andi	r2,r2,255
    1984:	103ffd26 	beq	r2,zero,197c <main+0xe0>
  clearLCDChar();
    1988:	00018240 	call	1824 <clearLCDChar>
  char_lcd_move_cursor(0,0);
    198c:	0009883a 	mov	r4,zero
    1990:	000b883a 	mov	r5,zero
    1994:	000067c0 	call	67c <char_lcd_move_cursor>
  char_lcd_write("Processing");
    1998:	01000074 	movhi	r4,1
    199c:	213a5004 	addi	r4,r4,-5824
    19a0:	00006a80 	call	6a8 <char_lcd_write>
  fft(yesBuffer);
    19a4:	01000074 	movhi	r4,1
    19a8:	210c4404 	addi	r4,r4,12560
    19ac:	00016640 	call	1664 <fft>
  audio_ready = false;
    19b0:	d0280905 	stb	zero,-24540(gp)
  working = false;
    19b4:	00800074 	movhi	r2,1
    19b8:	108b3604 	addi	r2,r2,11480
    19bc:	10000005 	stb	zero,0(r2)

  curState = no_training;
    19c0:	04000044 	movi	r16,1
    19c4:	00800074 	movhi	r2,1
    19c8:	108b3504 	addi	r2,r2,11476
    19cc:	14000015 	stw	r16,0(r2)
  clearLCDChar();
    19d0:	00018240 	call	1824 <clearLCDChar>
  char_lcd_move_cursor(0,0);
    19d4:	0009883a 	mov	r4,zero
    19d8:	000b883a 	mov	r5,zero
    19dc:	000067c0 	call	67c <char_lcd_move_cursor>
  char_lcd_write("Push BTN1");
    19e0:	01000074 	movhi	r4,1
    19e4:	213a5304 	addi	r4,r4,-5812
    19e8:	00006a80 	call	6a8 <char_lcd_write>
  char_lcd_move_cursor(0,1);
    19ec:	0009883a 	mov	r4,zero
    19f0:	800b883a 	mov	r5,r16
    19f4:	000067c0 	call	67c <char_lcd_move_cursor>
  char_lcd_write("And say No");
    19f8:	01000074 	movhi	r4,1
    19fc:	213a5604 	addi	r4,r4,-5800
    1a00:	00006a80 	call	6a8 <char_lcd_write>
  while(!audio_ready);
    1a04:	d0a80903 	ldbu	r2,-24540(gp)
    1a08:	10803fcc 	andi	r2,r2,255
    1a0c:	103ffd26 	beq	r2,zero,1a04 <main+0x168>
  clearLCDChar();
    1a10:	00018240 	call	1824 <clearLCDChar>
  char_lcd_move_cursor(0,0);
    1a14:	0009883a 	mov	r4,zero
    1a18:	000b883a 	mov	r5,zero
    1a1c:	000067c0 	call	67c <char_lcd_move_cursor>
  char_lcd_write("Processing");
    1a20:	01000074 	movhi	r4,1
    1a24:	213a5004 	addi	r4,r4,-5824
    1a28:	00006a80 	call	6a8 <char_lcd_write>
  fft(noBuffer);
    1a2c:	010000f4 	movhi	r4,3
    1a30:	210c4404 	addi	r4,r4,12560
    1a34:	00016640 	call	1664 <fft>
  audio_ready = false;
    1a38:	d0280905 	stb	zero,-24540(gp)
  working = false;
    1a3c:	00800074 	movhi	r2,1
    1a40:	108b3604 	addi	r2,r2,11480
    1a44:	10000005 	stb	zero,0(r2)
 * Function: run
 * -------------
 * Request audio, then perform an FFT and draw it. Repeat.
 */
void run (void) {
  curState = sampling;
    1a48:	00c00084 	movi	r3,2
    1a4c:	00800074 	movhi	r2,1
    1a50:	108b3504 	addi	r2,r2,11476
    1a54:	10c00015 	stw	r3,0(r2)
    1a58:	04003fc4 	movi	r16,255
  while (true) {
    clearLCDChar();
    1a5c:	00018240 	call	1824 <clearLCDChar>
    char_lcd_move_cursor(0,0);
    1a60:	0009883a 	mov	r4,zero
    1a64:	000b883a 	mov	r5,zero
    1a68:	000067c0 	call	67c <char_lcd_move_cursor>
    char_lcd_write("Push BTN1");
    1a6c:	01000074 	movhi	r4,1
    1a70:	213a5304 	addi	r4,r4,-5812
    1a74:	00006a80 	call	6a8 <char_lcd_write>
    char_lcd_move_cursor(0,1);
    1a78:	0009883a 	mov	r4,zero
    1a7c:	01400044 	movi	r5,1
    1a80:	000067c0 	call	67c <char_lcd_move_cursor>
    char_lcd_write("To Operate");
    1a84:	01000074 	movhi	r4,1
    1a88:	213a5904 	addi	r4,r4,-5788
    1a8c:	00006a80 	call	6a8 <char_lcd_write>
    //samples_for_fft_requested = true; // Request audio
    while (!audio_ready); // Wait for audio
    1a90:	d0a80903 	ldbu	r2,-24540(gp)
    1a94:	10803fcc 	andi	r2,r2,255
    1a98:	103ffd26 	beq	r2,zero,1a90 <main+0x1f4>
    green_leds_set (0xFF);
    1a9c:	8009883a 	mov	r4,r16
    1aa0:	0000a140 	call	a14 <green_leds_set>
    clearLCDChar();
    1aa4:	00018240 	call	1824 <clearLCDChar>
    char_lcd_move_cursor(0,0);
    1aa8:	0009883a 	mov	r4,zero
    1aac:	000b883a 	mov	r5,zero
    1ab0:	000067c0 	call	67c <char_lcd_move_cursor>
    char_lcd_write("Processing");
    1ab4:	01000074 	movhi	r4,1
    1ab8:	213a5004 	addi	r4,r4,-5824
    1abc:	00006a80 	call	6a8 <char_lcd_write>
    fft (sampleBuffer);
    1ac0:	01000174 	movhi	r4,5
    1ac4:	210c4404 	addi	r4,r4,12560
    1ac8:	00016640 	call	1664 <fft>
    //int i;
    // for (i = 0; i < FFT_LEN; i++) {
    //   printf("%d,%d,", fft_output[i].r, fft_output[i].i);
    // } 
    green_leds_clear (0xFF);
    1acc:	8009883a 	mov	r4,r16
    1ad0:	0000a340 	call	a34 <green_leds_clear>
    compareAndPrint();
    1ad4:	00013800 	call	1380 <compareAndPrint>
    audio_ready = false;
    1ad8:	d0280905 	stb	zero,-24540(gp)
    working = false;
    1adc:	00800074 	movhi	r2,1
    1ae0:	108b3604 	addi	r2,r2,11480
    1ae4:	10000005 	stb	zero,0(r2)
    1ae8:	003fdc06 	br	1a5c <main+0x1c0>
  configure_interrupts ();

  if (configure_fft() != 0) {
    return 1;
  }
  char_lcd_move_cursor(0,0);
    1aec:	0009883a 	mov	r4,zero
    1af0:	000b883a 	mov	r5,zero
    1af4:	000067c0 	call	67c <char_lcd_move_cursor>
  char_lcd_write("Push BTN1");
    1af8:	01000074 	movhi	r4,1
    1afc:	213a5304 	addi	r4,r4,-5812
    1b00:	00006a80 	call	6a8 <char_lcd_write>
  char_lcd_move_cursor(0,1);
    1b04:	0009883a 	mov	r4,zero
    1b08:	01400044 	movi	r5,1
    1b0c:	000067c0 	call	67c <char_lcd_move_cursor>
  char_lcd_write("And say Yes");
    1b10:	01000074 	movhi	r4,1
    1b14:	213a5c04 	addi	r4,r4,-5776
    1b18:	00006a80 	call	6a8 <char_lcd_write>
    1b1c:	003f9706 	br	197c <main+0xe0>
/* Allocate the FFT configuration stryct and prepare sample array. */
static int configure_fft ()
{
  fft_cfg = kiss_fft_alloc (FFT_LEN, 0, NULL, 0);
  if (! fft_cfg) {
    printf ("Error: Cannot allocate memory for FFT control structure.\n");
    1b20:	01000074 	movhi	r4,1
    1b24:	213a4104 	addi	r4,r4,-5884
    1b28:	0003e100 	call	3e10 <puts>

  /* Repeatedly checks state and makes updates. */
  run ();

  return 0;
}
    1b2c:	00800044 	movi	r2,1
    1b30:	dfc00217 	ldw	ra,8(sp)
    1b34:	dc400117 	ldw	r17,4(sp)
    1b38:	dc000017 	ldw	r16,0(sp)
    1b3c:	dec00304 	addi	sp,sp,12
    1b40:	f800283a 	ret

00001b44 <pushbuttons_isr>:
 */
 extern volatile bool samples_for_fft_requested;
 extern volatile bool working;
 
void pushbuttons_isr (void *context, unsigned int id)
{
    1b44:	deffff04 	addi	sp,sp,-4
    1b48:	dfc00015 	stw	ra,0(sp)
  uint32_t edges = pushbuttons_get_edge_capture ();
    1b4c:	0000e8c0 	call	e8c <pushbuttons_get_edge_capture>
  if (edges & BUTTON1 && !working)
    1b50:	1080008c 	andi	r2,r2,2
    1b54:	10000a26 	beq	r2,zero,1b80 <pushbuttons_isr+0x3c>
    1b58:	01000074 	movhi	r4,1
    1b5c:	210b3604 	addi	r4,r4,11480
    1b60:	20800003 	ldbu	r2,0(r4)
    1b64:	10803fcc 	andi	r2,r2,255
    1b68:	1000051e 	bne	r2,zero,1b80 <pushbuttons_isr+0x3c>
    {
      samples_for_fft_requested = true;
    1b6c:	00c00044 	movi	r3,1
    1b70:	00800074 	movhi	r2,1
    1b74:	108b3304 	addi	r2,r2,11468
    1b78:	10c00005 	stb	r3,0(r2)
      working = true;
    1b7c:	20c00005 	stb	r3,0(r4)
    }
  pushbuttons_clear_edge_capture ();
    1b80:	0000e980 	call	e98 <pushbuttons_clear_edge_capture>
}
    1b84:	dfc00017 	ldw	ra,0(sp)
    1b88:	dec00104 	addi	sp,sp,4
    1b8c:	f800283a 	ret

00001b90 <switches_isr>:
 *
 */
void switches_isr(void *context, unsigned int id)
{

}
    1b90:	f800283a 	ret

00001b94 <tlda_draw>:
                unsigned int x1,
                unsigned int y1,
                unsigned int color,
                unsigned int thickness)
{
	*dl_xy0 = (y0 << 9) + x0;
    1b94:	280a927a 	slli	r5,r5,9
    1b98:	290b883a 	add	r5,r5,r4
    1b9c:	d0a01d17 	ldw	r2,-32652(gp)
    1ba0:	11400015 	stw	r5,0(r2)
	*dl_xy1 = (y1 << 9) + x1;
    1ba4:	380e927a 	slli	r7,r7,9
    1ba8:	398f883a 	add	r7,r7,r6
    1bac:	d0a01e17 	ldw	r2,-32648(gp)
    1bb0:	11c00015 	stw	r7,0(r2)
	*dl_color = color;
    1bb4:	d8c00017 	ldw	r3,0(sp)
    1bb8:	d0a01f17 	ldw	r2,-32644(gp)
    1bbc:	10c00015 	stw	r3,0(r2)
	*dl_thickness = thickness;
    1bc0:	d8c00117 	ldw	r3,4(sp)
    1bc4:	d0a02017 	ldw	r2,-32640(gp)
    1bc8:	10c00015 	stw	r3,0(r2)
  *dl_base_addr = drawing_buffer;
    1bcc:	d0e01c17 	ldw	r3,-32656(gp)
    1bd0:	d0a02117 	ldw	r2,-32636(gp)
    1bd4:	10c00015 	stw	r3,0(r2)
	*dl_go = 1;
    1bd8:	00c00044 	movi	r3,1
    1bdc:	d0a02217 	ldw	r2,-32632(gp)
    1be0:	10c00015 	stw	r3,0(r2)
	while(*dl_status != 1);
    1be4:	d1202317 	ldw	r4,-32628(gp)
    1be8:	20800017 	ldw	r2,0(r4)
    1bec:	10fffe1e 	bne	r2,r3,1be8 <tlda_draw+0x54>
}
    1bf0:	f800283a 	ret

00001bf4 <tlda_set_drawing_buffer>:

void tlda_set_drawing_buffer (void *buffer)
{
  drawing_buffer = buffer;
    1bf4:	d1201c15 	stw	r4,-32656(gp)
}
    1bf8:	f800283a 	ret

00001bfc <sqrt>:
    1bfc:	defff104 	addi	sp,sp,-60
    1c00:	dd000d15 	stw	r20,52(sp)
    1c04:	05000074 	movhi	r20,1
    1c08:	a5034904 	addi	r20,r20,3364
    1c0c:	dcc00c15 	stw	r19,48(sp)
    1c10:	dc800b15 	stw	r18,44(sp)
    1c14:	dc400a15 	stw	r17,40(sp)
    1c18:	dc000915 	stw	r16,36(sp)
    1c1c:	2025883a 	mov	r18,r4
    1c20:	dfc00e15 	stw	ra,56(sp)
    1c24:	2827883a 	mov	r19,r5
    1c28:	0001d2c0 	call	1d2c <__ieee754_sqrt>
    1c2c:	a1000017 	ldw	r4,0(r20)
    1c30:	1021883a 	mov	r16,r2
    1c34:	00bfffc4 	movi	r2,-1
    1c38:	1823883a 	mov	r17,r3
    1c3c:	20800a26 	beq	r4,r2,1c68 <sqrt+0x6c>
    1c40:	9009883a 	mov	r4,r18
    1c44:	980b883a 	mov	r5,r19
    1c48:	0001ff40 	call	1ff4 <__isnand>
    1c4c:	1000061e 	bne	r2,zero,1c68 <sqrt+0x6c>
    1c50:	000d883a 	mov	r6,zero
    1c54:	000f883a 	mov	r7,zero
    1c58:	9009883a 	mov	r4,r18
    1c5c:	980b883a 	mov	r5,r19
    1c60:	0002c5c0 	call	2c5c <__ltdf2>
    1c64:	10000a16 	blt	r2,zero,1c90 <sqrt+0x94>
    1c68:	8005883a 	mov	r2,r16
    1c6c:	8807883a 	mov	r3,r17
    1c70:	dfc00e17 	ldw	ra,56(sp)
    1c74:	dd000d17 	ldw	r20,52(sp)
    1c78:	dcc00c17 	ldw	r19,48(sp)
    1c7c:	dc800b17 	ldw	r18,44(sp)
    1c80:	dc400a17 	ldw	r17,40(sp)
    1c84:	dc000917 	ldw	r16,36(sp)
    1c88:	dec00f04 	addi	sp,sp,60
    1c8c:	f800283a 	ret
    1c90:	a4000017 	ldw	r16,0(r20)
    1c94:	00800044 	movi	r2,1
    1c98:	00c00074 	movhi	r3,1
    1c9c:	18fa5f04 	addi	r3,r3,-5764
    1ca0:	d8800015 	stw	r2,0(sp)
    1ca4:	d8c00115 	stw	r3,4(sp)
    1ca8:	dcc00315 	stw	r19,12(sp)
    1cac:	d8000815 	stw	zero,32(sp)
    1cb0:	dc800415 	stw	r18,16(sp)
    1cb4:	dcc00515 	stw	r19,20(sp)
    1cb8:	dc800215 	stw	r18,8(sp)
    1cbc:	80000a1e 	bne	r16,zero,1ce8 <sqrt+0xec>
    1cc0:	d8000615 	stw	zero,24(sp)
    1cc4:	d8000715 	stw	zero,28(sp)
    1cc8:	d809883a 	mov	r4,sp
    1ccc:	00020240 	call	2024 <matherr>
    1cd0:	10000e26 	beq	r2,zero,1d0c <sqrt+0x110>
    1cd4:	d8800817 	ldw	r2,32(sp)
    1cd8:	1000101e 	bne	r2,zero,1d1c <sqrt+0x120>
    1cdc:	dc000617 	ldw	r16,24(sp)
    1ce0:	dc400717 	ldw	r17,28(sp)
    1ce4:	003fe006 	br	1c68 <sqrt+0x6c>
    1ce8:	0009883a 	mov	r4,zero
    1cec:	000d883a 	mov	r6,zero
    1cf0:	000b883a 	mov	r5,zero
    1cf4:	000f883a 	mov	r7,zero
    1cf8:	00028f40 	call	28f4 <__divdf3>
    1cfc:	d8800615 	stw	r2,24(sp)
    1d00:	00800084 	movi	r2,2
    1d04:	d8c00715 	stw	r3,28(sp)
    1d08:	80bfef1e 	bne	r16,r2,1cc8 <sqrt+0xcc>
    1d0c:	00034e00 	call	34e0 <__errno>
    1d10:	00c00844 	movi	r3,33
    1d14:	10c00015 	stw	r3,0(r2)
    1d18:	003fee06 	br	1cd4 <sqrt+0xd8>
    1d1c:	00034e00 	call	34e0 <__errno>
    1d20:	d8c00817 	ldw	r3,32(sp)
    1d24:	10c00015 	stw	r3,0(r2)
    1d28:	003fec06 	br	1cdc <sqrt+0xe0>

00001d2c <__ieee754_sqrt>:
    1d2c:	defffd04 	addi	sp,sp,-12
    1d30:	dc000015 	stw	r16,0(sp)
    1d34:	009ffc34 	movhi	r2,32752
    1d38:	2021883a 	mov	r16,r4
    1d3c:	291ffc2c 	andhi	r4,r5,32752
    1d40:	dc400115 	stw	r17,4(sp)
    1d44:	dfc00215 	stw	ra,8(sp)
    1d48:	2823883a 	mov	r17,r5
    1d4c:	280f883a 	mov	r7,r5
    1d50:	2807883a 	mov	r3,r5
    1d54:	8011883a 	mov	r8,r16
    1d58:	20807d26 	beq	r4,r2,1f50 <__ieee754_sqrt+0x224>
    1d5c:	01408d0e 	bge	zero,r5,1f94 <__ieee754_sqrt+0x268>
    1d60:	380dd53a 	srai	r6,r7,20
    1d64:	3000131e 	bne	r6,zero,1db4 <__ieee754_sqrt+0x88>
    1d68:	1800041e 	bne	r3,zero,1d7c <__ieee754_sqrt+0x50>
    1d6c:	400ed2fa 	srli	r7,r8,11
    1d70:	31bffac4 	addi	r6,r6,-21
    1d74:	4010957a 	slli	r8,r8,21
    1d78:	383ffc26 	beq	r7,zero,1d6c <__ieee754_sqrt+0x40>
    1d7c:	3880042c 	andhi	r2,r7,16
    1d80:	1000991e 	bne	r2,zero,1fe8 <__ieee754_sqrt+0x2bc>
    1d84:	0009883a 	mov	r4,zero
    1d88:	39cf883a 	add	r7,r7,r7
    1d8c:	3880042c 	andhi	r2,r7,16
    1d90:	21000044 	addi	r4,r4,1
    1d94:	103ffc26 	beq	r2,zero,1d88 <__ieee754_sqrt+0x5c>
    1d98:	00800804 	movi	r2,32
    1d9c:	1105c83a 	sub	r2,r2,r4
    1da0:	4086d83a 	srl	r3,r8,r2
    1da4:	4110983a 	sll	r8,r8,r4
    1da8:	3105c83a 	sub	r2,r6,r4
    1dac:	38ceb03a 	or	r7,r7,r3
    1db0:	11800044 	addi	r6,r2,1
    1db4:	31bf0044 	addi	r6,r6,-1023
    1db8:	30c0004c 	andi	r3,r6,1
    1dbc:	00800434 	movhi	r2,16
    1dc0:	10bfffc4 	addi	r2,r2,-1
    1dc4:	3884703a 	and	r2,r7,r2
    1dc8:	1807003a 	cmpeq	r3,r3,zero
    1dcc:	11000434 	orhi	r4,r2,16
    1dd0:	18005426 	beq	r3,zero,1f24 <__ieee754_sqrt+0x1f8>
    1dd4:	4004d7fa 	srli	r2,r8,31
    1dd8:	4207883a 	add	r3,r8,r8
    1ddc:	02800834 	movhi	r10,32
    1de0:	1105883a 	add	r2,r2,r4
    1de4:	2089883a 	add	r4,r4,r2
    1de8:	0011883a 	mov	r8,zero
    1dec:	000b883a 	mov	r5,zero
    1df0:	0013883a 	mov	r9,zero
    1df4:	02c00584 	movi	r11,22
    1df8:	520f883a 	add	r7,r10,r8
    1dfc:	1804d7fa 	srli	r2,r3,31
    1e00:	4a400044 	addi	r9,r9,1
    1e04:	18c7883a 	add	r3,r3,r3
    1e08:	21c00316 	blt	r4,r7,1e18 <__ieee754_sqrt+0xec>
    1e0c:	21c9c83a 	sub	r4,r4,r7
    1e10:	2a8b883a 	add	r5,r5,r10
    1e14:	51d1883a 	add	r8,r10,r7
    1e18:	1105883a 	add	r2,r2,r4
    1e1c:	5014d07a 	srli	r10,r10,1
    1e20:	2089883a 	add	r4,r4,r2
    1e24:	4afff41e 	bne	r9,r11,1df8 <__ieee754_sqrt+0xcc>
    1e28:	02600034 	movhi	r9,32768
    1e2c:	0017883a 	mov	r11,zero
    1e30:	0019883a 	mov	r12,zero
    1e34:	0015883a 	mov	r10,zero
    1e38:	4821883a 	mov	r16,r9
    1e3c:	03c00804 	movi	r15,32
    1e40:	00000806 	br	1e64 <__ieee754_sqrt+0x138>
    1e44:	22003426 	beq	r4,r8,1f18 <__ieee754_sqrt+0x1ec>
    1e48:	1804d7fa 	srli	r2,r3,31
    1e4c:	52800044 	addi	r10,r10,1
    1e50:	18c7883a 	add	r3,r3,r3
    1e54:	1105883a 	add	r2,r2,r4
    1e58:	2089883a 	add	r4,r4,r2
    1e5c:	4812d07a 	srli	r9,r9,1
    1e60:	53c01326 	beq	r10,r15,1eb0 <__ieee754_sqrt+0x184>
    1e64:	4acf883a 	add	r7,r9,r11
    1e68:	413ff60e 	bge	r8,r4,1e44 <__ieee754_sqrt+0x118>
    1e6c:	38a0002c 	andhi	r2,r7,32768
    1e70:	3a57883a 	add	r11,r7,r9
    1e74:	14002426 	beq	r2,r16,1f08 <__ieee754_sqrt+0x1dc>
    1e78:	4005883a 	mov	r2,r8
    1e7c:	2209c83a 	sub	r4,r4,r8
    1e80:	19c0012e 	bgeu	r3,r7,1e88 <__ieee754_sqrt+0x15c>
    1e84:	213fffc4 	addi	r4,r4,-1
    1e88:	19c7c83a 	sub	r3,r3,r7
    1e8c:	1011883a 	mov	r8,r2
    1e90:	1804d7fa 	srli	r2,r3,31
    1e94:	52800044 	addi	r10,r10,1
    1e98:	6259883a 	add	r12,r12,r9
    1e9c:	1105883a 	add	r2,r2,r4
    1ea0:	18c7883a 	add	r3,r3,r3
    1ea4:	2089883a 	add	r4,r4,r2
    1ea8:	4812d07a 	srli	r9,r9,1
    1eac:	53ffed1e 	bne	r10,r15,1e64 <__ieee754_sqrt+0x138>
    1eb0:	20c4b03a 	or	r2,r4,r3
    1eb4:	1000201e 	bne	r2,zero,1f38 <__ieee754_sqrt+0x20c>
    1eb8:	600ed07a 	srli	r7,r12,1
    1ebc:	2880004c 	andi	r2,r5,1
    1ec0:	1005003a 	cmpeq	r2,r2,zero
    1ec4:	1000011e 	bne	r2,zero,1ecc <__ieee754_sqrt+0x1a0>
    1ec8:	39e00034 	orhi	r7,r7,32768
    1ecc:	300dd07a 	srai	r6,r6,1
    1ed0:	280bd07a 	srai	r5,r5,1
    1ed4:	010ff834 	movhi	r4,16352
    1ed8:	300c953a 	slli	r6,r6,20
    1edc:	290b883a 	add	r5,r5,r4
    1ee0:	3821883a 	mov	r16,r7
    1ee4:	299d883a 	add	r14,r5,r6
    1ee8:	7023883a 	mov	r17,r14
    1eec:	8005883a 	mov	r2,r16
    1ef0:	8807883a 	mov	r3,r17
    1ef4:	dfc00217 	ldw	ra,8(sp)
    1ef8:	dc400117 	ldw	r17,4(sp)
    1efc:	dc000017 	ldw	r16,0(sp)
    1f00:	dec00304 	addi	sp,sp,12
    1f04:	f800283a 	ret
    1f08:	5884703a 	and	r2,r11,r2
    1f0c:	103fda1e 	bne	r2,zero,1e78 <__ieee754_sqrt+0x14c>
    1f10:	40800044 	addi	r2,r8,1
    1f14:	003fd906 	br	1e7c <__ieee754_sqrt+0x150>
    1f18:	19ffd42e 	bgeu	r3,r7,1e6c <__ieee754_sqrt+0x140>
    1f1c:	2011883a 	mov	r8,r4
    1f20:	003fc906 	br	1e48 <__ieee754_sqrt+0x11c>
    1f24:	4004d7fa 	srli	r2,r8,31
    1f28:	4211883a 	add	r8,r8,r8
    1f2c:	1105883a 	add	r2,r2,r4
    1f30:	2089883a 	add	r4,r4,r2
    1f34:	003fa706 	br	1dd4 <__ieee754_sqrt+0xa8>
    1f38:	00bfffc4 	movi	r2,-1
    1f3c:	60802726 	beq	r12,r2,1fdc <__ieee754_sqrt+0x2b0>
    1f40:	6080004c 	andi	r2,r12,1
    1f44:	6085883a 	add	r2,r12,r2
    1f48:	100ed07a 	srli	r7,r2,1
    1f4c:	003fdb06 	br	1ebc <__ieee754_sqrt+0x190>
    1f50:	8009883a 	mov	r4,r16
    1f54:	800d883a 	mov	r6,r16
    1f58:	00025300 	call	2530 <__muldf3>
    1f5c:	180f883a 	mov	r7,r3
    1f60:	880b883a 	mov	r5,r17
    1f64:	8009883a 	mov	r4,r16
    1f68:	100d883a 	mov	r6,r2
    1f6c:	00024bc0 	call	24bc <__adddf3>
    1f70:	1021883a 	mov	r16,r2
    1f74:	1823883a 	mov	r17,r3
    1f78:	8005883a 	mov	r2,r16
    1f7c:	8807883a 	mov	r3,r17
    1f80:	dfc00217 	ldw	ra,8(sp)
    1f84:	dc400117 	ldw	r17,4(sp)
    1f88:	dc000017 	ldw	r16,0(sp)
    1f8c:	dec00304 	addi	sp,sp,12
    1f90:	f800283a 	ret
    1f94:	00a00034 	movhi	r2,32768
    1f98:	10bfffc4 	addi	r2,r2,-1
    1f9c:	2884703a 	and	r2,r5,r2
    1fa0:	8084b03a 	or	r2,r16,r2
    1fa4:	103fd126 	beq	r2,zero,1eec <__ieee754_sqrt+0x1c0>
    1fa8:	283f6d26 	beq	r5,zero,1d60 <__ieee754_sqrt+0x34>
    1fac:	280f883a 	mov	r7,r5
    1fb0:	8009883a 	mov	r4,r16
    1fb4:	800d883a 	mov	r6,r16
    1fb8:	000243c0 	call	243c <__subdf3>
    1fbc:	1009883a 	mov	r4,r2
    1fc0:	180b883a 	mov	r5,r3
    1fc4:	100d883a 	mov	r6,r2
    1fc8:	180f883a 	mov	r7,r3
    1fcc:	00028f40 	call	28f4 <__divdf3>
    1fd0:	1021883a 	mov	r16,r2
    1fd4:	1823883a 	mov	r17,r3
    1fd8:	003fc406 	br	1eec <__ieee754_sqrt+0x1c0>
    1fdc:	29400044 	addi	r5,r5,1
    1fe0:	000f883a 	mov	r7,zero
    1fe4:	003fb506 	br	1ebc <__ieee754_sqrt+0x190>
    1fe8:	0009883a 	mov	r4,zero
    1fec:	00800804 	movi	r2,32
    1ff0:	003f6b06 	br	1da0 <__ieee754_sqrt+0x74>

00001ff4 <__isnand>:
    1ff4:	200d883a 	mov	r6,r4
    1ff8:	0109c83a 	sub	r4,zero,r4
    1ffc:	2188b03a 	or	r4,r4,r6
    2000:	2008d7fa 	srli	r4,r4,31
    2004:	00a00034 	movhi	r2,32768
    2008:	10bfffc4 	addi	r2,r2,-1
    200c:	1144703a 	and	r2,r2,r5
    2010:	2088b03a 	or	r4,r4,r2
    2014:	009ffc34 	movhi	r2,32752
    2018:	1105c83a 	sub	r2,r2,r4
    201c:	1004d7fa 	srli	r2,r2,31
    2020:	f800283a 	ret

00002024 <matherr>:
    2024:	0005883a 	mov	r2,zero
    2028:	f800283a 	ret

0000202c <_fpadd_parts>:
    202c:	defff804 	addi	sp,sp,-32
    2030:	dcc00315 	stw	r19,12(sp)
    2034:	2027883a 	mov	r19,r4
    2038:	21000017 	ldw	r4,0(r4)
    203c:	00c00044 	movi	r3,1
    2040:	dd400515 	stw	r21,20(sp)
    2044:	dd000415 	stw	r20,16(sp)
    2048:	ddc00715 	stw	r23,28(sp)
    204c:	dd800615 	stw	r22,24(sp)
    2050:	dc800215 	stw	r18,8(sp)
    2054:	dc400115 	stw	r17,4(sp)
    2058:	dc000015 	stw	r16,0(sp)
    205c:	282b883a 	mov	r21,r5
    2060:	3029883a 	mov	r20,r6
    2064:	1900632e 	bgeu	r3,r4,21f4 <_fpadd_parts+0x1c8>
    2068:	28800017 	ldw	r2,0(r5)
    206c:	1880812e 	bgeu	r3,r2,2274 <_fpadd_parts+0x248>
    2070:	00c00104 	movi	r3,4
    2074:	20c0dc26 	beq	r4,r3,23e8 <_fpadd_parts+0x3bc>
    2078:	10c07e26 	beq	r2,r3,2274 <_fpadd_parts+0x248>
    207c:	00c00084 	movi	r3,2
    2080:	10c06726 	beq	r2,r3,2220 <_fpadd_parts+0x1f4>
    2084:	20c07b26 	beq	r4,r3,2274 <_fpadd_parts+0x248>
    2088:	9dc00217 	ldw	r23,8(r19)
    208c:	28c00217 	ldw	r3,8(r5)
    2090:	9c400317 	ldw	r17,12(r19)
    2094:	2bc00317 	ldw	r15,12(r5)
    2098:	b8cdc83a 	sub	r6,r23,r3
    209c:	9c800417 	ldw	r18,16(r19)
    20a0:	2c000417 	ldw	r16,16(r5)
    20a4:	3009883a 	mov	r4,r6
    20a8:	30009716 	blt	r6,zero,2308 <_fpadd_parts+0x2dc>
    20ac:	00800fc4 	movi	r2,63
    20b0:	11806b16 	blt	r2,r6,2260 <_fpadd_parts+0x234>
    20b4:	0100a40e 	bge	zero,r4,2348 <_fpadd_parts+0x31c>
    20b8:	35bff804 	addi	r22,r6,-32
    20bc:	b000bc16 	blt	r22,zero,23b0 <_fpadd_parts+0x384>
    20c0:	8596d83a 	srl	r11,r16,r22
    20c4:	0019883a 	mov	r12,zero
    20c8:	0013883a 	mov	r9,zero
    20cc:	01000044 	movi	r4,1
    20d0:	0015883a 	mov	r10,zero
    20d4:	b000be16 	blt	r22,zero,23d0 <_fpadd_parts+0x3a4>
    20d8:	2590983a 	sll	r8,r4,r22
    20dc:	000f883a 	mov	r7,zero
    20e0:	00bfffc4 	movi	r2,-1
    20e4:	3889883a 	add	r4,r7,r2
    20e8:	408b883a 	add	r5,r8,r2
    20ec:	21cd803a 	cmpltu	r6,r4,r7
    20f0:	314b883a 	add	r5,r6,r5
    20f4:	7904703a 	and	r2,r15,r4
    20f8:	8146703a 	and	r3,r16,r5
    20fc:	10c4b03a 	or	r2,r2,r3
    2100:	10000226 	beq	r2,zero,210c <_fpadd_parts+0xe0>
    2104:	02400044 	movi	r9,1
    2108:	0015883a 	mov	r10,zero
    210c:	5a5eb03a 	or	r15,r11,r9
    2110:	62a0b03a 	or	r16,r12,r10
    2114:	99400117 	ldw	r5,4(r19)
    2118:	a8800117 	ldw	r2,4(r21)
    211c:	28806e26 	beq	r5,r2,22d8 <_fpadd_parts+0x2ac>
    2120:	28006626 	beq	r5,zero,22bc <_fpadd_parts+0x290>
    2124:	7c45c83a 	sub	r2,r15,r17
    2128:	7889803a 	cmpltu	r4,r15,r2
    212c:	8487c83a 	sub	r3,r16,r18
    2130:	1909c83a 	sub	r4,r3,r4
    2134:	100d883a 	mov	r6,r2
    2138:	200f883a 	mov	r7,r4
    213c:	38007716 	blt	r7,zero,231c <_fpadd_parts+0x2f0>
    2140:	a5c00215 	stw	r23,8(r20)
    2144:	a1c00415 	stw	r7,16(r20)
    2148:	a0000115 	stw	zero,4(r20)
    214c:	a1800315 	stw	r6,12(r20)
    2150:	a2000317 	ldw	r8,12(r20)
    2154:	a2400417 	ldw	r9,16(r20)
    2158:	00bfffc4 	movi	r2,-1
    215c:	408b883a 	add	r5,r8,r2
    2160:	2a09803a 	cmpltu	r4,r5,r8
    2164:	488d883a 	add	r6,r9,r2
    2168:	01c40034 	movhi	r7,4096
    216c:	39ffffc4 	addi	r7,r7,-1
    2170:	218d883a 	add	r6,r4,r6
    2174:	39801736 	bltu	r7,r6,21d4 <_fpadd_parts+0x1a8>
    2178:	31c06526 	beq	r6,r7,2310 <_fpadd_parts+0x2e4>
    217c:	a3000217 	ldw	r12,8(r20)
    2180:	4209883a 	add	r4,r8,r8
    2184:	00bfffc4 	movi	r2,-1
    2188:	220f803a 	cmpltu	r7,r4,r8
    218c:	4a4b883a 	add	r5,r9,r9
    2190:	394f883a 	add	r7,r7,r5
    2194:	2095883a 	add	r10,r4,r2
    2198:	3897883a 	add	r11,r7,r2
    219c:	510d803a 	cmpltu	r6,r10,r4
    21a0:	6099883a 	add	r12,r12,r2
    21a4:	32d7883a 	add	r11,r6,r11
    21a8:	00840034 	movhi	r2,4096
    21ac:	10bfffc4 	addi	r2,r2,-1
    21b0:	2011883a 	mov	r8,r4
    21b4:	3813883a 	mov	r9,r7
    21b8:	a1000315 	stw	r4,12(r20)
    21bc:	a1c00415 	stw	r7,16(r20)
    21c0:	a3000215 	stw	r12,8(r20)
    21c4:	12c00336 	bltu	r2,r11,21d4 <_fpadd_parts+0x1a8>
    21c8:	58bfed1e 	bne	r11,r2,2180 <_fpadd_parts+0x154>
    21cc:	00bfff84 	movi	r2,-2
    21d0:	12bfeb2e 	bgeu	r2,r10,2180 <_fpadd_parts+0x154>
    21d4:	a2800417 	ldw	r10,16(r20)
    21d8:	008000c4 	movi	r2,3
    21dc:	00c80034 	movhi	r3,8192
    21e0:	18ffffc4 	addi	r3,r3,-1
    21e4:	a2400317 	ldw	r9,12(r20)
    21e8:	a0800015 	stw	r2,0(r20)
    21ec:	1a802336 	bltu	r3,r10,227c <_fpadd_parts+0x250>
    21f0:	a027883a 	mov	r19,r20
    21f4:	9805883a 	mov	r2,r19
    21f8:	ddc00717 	ldw	r23,28(sp)
    21fc:	dd800617 	ldw	r22,24(sp)
    2200:	dd400517 	ldw	r21,20(sp)
    2204:	dd000417 	ldw	r20,16(sp)
    2208:	dcc00317 	ldw	r19,12(sp)
    220c:	dc800217 	ldw	r18,8(sp)
    2210:	dc400117 	ldw	r17,4(sp)
    2214:	dc000017 	ldw	r16,0(sp)
    2218:	dec00804 	addi	sp,sp,32
    221c:	f800283a 	ret
    2220:	20fff41e 	bne	r4,r3,21f4 <_fpadd_parts+0x1c8>
    2224:	31000015 	stw	r4,0(r6)
    2228:	98800117 	ldw	r2,4(r19)
    222c:	30800115 	stw	r2,4(r6)
    2230:	98c00217 	ldw	r3,8(r19)
    2234:	30c00215 	stw	r3,8(r6)
    2238:	98800317 	ldw	r2,12(r19)
    223c:	30800315 	stw	r2,12(r6)
    2240:	98c00417 	ldw	r3,16(r19)
    2244:	30c00415 	stw	r3,16(r6)
    2248:	98800117 	ldw	r2,4(r19)
    224c:	28c00117 	ldw	r3,4(r5)
    2250:	3027883a 	mov	r19,r6
    2254:	10c4703a 	and	r2,r2,r3
    2258:	30800115 	stw	r2,4(r6)
    225c:	003fe506 	br	21f4 <_fpadd_parts+0x1c8>
    2260:	1dc02616 	blt	r3,r23,22fc <_fpadd_parts+0x2d0>
    2264:	0023883a 	mov	r17,zero
    2268:	182f883a 	mov	r23,r3
    226c:	0025883a 	mov	r18,zero
    2270:	003fa806 	br	2114 <_fpadd_parts+0xe8>
    2274:	a827883a 	mov	r19,r21
    2278:	003fde06 	br	21f4 <_fpadd_parts+0x1c8>
    227c:	01800044 	movi	r6,1
    2280:	500497fa 	slli	r2,r10,31
    2284:	4808d07a 	srli	r4,r9,1
    2288:	518ad83a 	srl	r5,r10,r6
    228c:	a2000217 	ldw	r8,8(r20)
    2290:	1108b03a 	or	r4,r2,r4
    2294:	0007883a 	mov	r3,zero
    2298:	4984703a 	and	r2,r9,r6
    229c:	208cb03a 	or	r6,r4,r2
    22a0:	28ceb03a 	or	r7,r5,r3
    22a4:	42000044 	addi	r8,r8,1
    22a8:	a027883a 	mov	r19,r20
    22ac:	a1c00415 	stw	r7,16(r20)
    22b0:	a2000215 	stw	r8,8(r20)
    22b4:	a1800315 	stw	r6,12(r20)
    22b8:	003fce06 	br	21f4 <_fpadd_parts+0x1c8>
    22bc:	8bc5c83a 	sub	r2,r17,r15
    22c0:	8889803a 	cmpltu	r4,r17,r2
    22c4:	9407c83a 	sub	r3,r18,r16
    22c8:	1909c83a 	sub	r4,r3,r4
    22cc:	100d883a 	mov	r6,r2
    22d0:	200f883a 	mov	r7,r4
    22d4:	003f9906 	br	213c <_fpadd_parts+0x110>
    22d8:	7c45883a 	add	r2,r15,r17
    22dc:	13c9803a 	cmpltu	r4,r2,r15
    22e0:	8487883a 	add	r3,r16,r18
    22e4:	20c9883a 	add	r4,r4,r3
    22e8:	a1400115 	stw	r5,4(r20)
    22ec:	a5c00215 	stw	r23,8(r20)
    22f0:	a0800315 	stw	r2,12(r20)
    22f4:	a1000415 	stw	r4,16(r20)
    22f8:	003fb606 	br	21d4 <_fpadd_parts+0x1a8>
    22fc:	001f883a 	mov	r15,zero
    2300:	0021883a 	mov	r16,zero
    2304:	003f8306 	br	2114 <_fpadd_parts+0xe8>
    2308:	018dc83a 	sub	r6,zero,r6
    230c:	003f6706 	br	20ac <_fpadd_parts+0x80>
    2310:	00bfff84 	movi	r2,-2
    2314:	117faf36 	bltu	r2,r5,21d4 <_fpadd_parts+0x1a8>
    2318:	003f9806 	br	217c <_fpadd_parts+0x150>
    231c:	0005883a 	mov	r2,zero
    2320:	1189c83a 	sub	r4,r2,r6
    2324:	1105803a 	cmpltu	r2,r2,r4
    2328:	01cbc83a 	sub	r5,zero,r7
    232c:	2885c83a 	sub	r2,r5,r2
    2330:	01800044 	movi	r6,1
    2334:	a1800115 	stw	r6,4(r20)
    2338:	a5c00215 	stw	r23,8(r20)
    233c:	a1000315 	stw	r4,12(r20)
    2340:	a0800415 	stw	r2,16(r20)
    2344:	003f8206 	br	2150 <_fpadd_parts+0x124>
    2348:	203f7226 	beq	r4,zero,2114 <_fpadd_parts+0xe8>
    234c:	35bff804 	addi	r22,r6,-32
    2350:	b9af883a 	add	r23,r23,r6
    2354:	b0003116 	blt	r22,zero,241c <_fpadd_parts+0x3f0>
    2358:	959ad83a 	srl	r13,r18,r22
    235c:	001d883a 	mov	r14,zero
    2360:	000f883a 	mov	r7,zero
    2364:	01000044 	movi	r4,1
    2368:	0011883a 	mov	r8,zero
    236c:	b0002516 	blt	r22,zero,2404 <_fpadd_parts+0x3d8>
    2370:	2594983a 	sll	r10,r4,r22
    2374:	0013883a 	mov	r9,zero
    2378:	00bfffc4 	movi	r2,-1
    237c:	4889883a 	add	r4,r9,r2
    2380:	508b883a 	add	r5,r10,r2
    2384:	224d803a 	cmpltu	r6,r4,r9
    2388:	314b883a 	add	r5,r6,r5
    238c:	8904703a 	and	r2,r17,r4
    2390:	9146703a 	and	r3,r18,r5
    2394:	10c4b03a 	or	r2,r2,r3
    2398:	10000226 	beq	r2,zero,23a4 <_fpadd_parts+0x378>
    239c:	01c00044 	movi	r7,1
    23a0:	0011883a 	mov	r8,zero
    23a4:	69e2b03a 	or	r17,r13,r7
    23a8:	7224b03a 	or	r18,r14,r8
    23ac:	003f5906 	br	2114 <_fpadd_parts+0xe8>
    23b0:	8407883a 	add	r3,r16,r16
    23b4:	008007c4 	movi	r2,31
    23b8:	1185c83a 	sub	r2,r2,r6
    23bc:	1886983a 	sll	r3,r3,r2
    23c0:	7996d83a 	srl	r11,r15,r6
    23c4:	8198d83a 	srl	r12,r16,r6
    23c8:	1ad6b03a 	or	r11,r3,r11
    23cc:	003f3e06 	br	20c8 <_fpadd_parts+0x9c>
    23d0:	2006d07a 	srli	r3,r4,1
    23d4:	008007c4 	movi	r2,31
    23d8:	1185c83a 	sub	r2,r2,r6
    23dc:	1890d83a 	srl	r8,r3,r2
    23e0:	218e983a 	sll	r7,r4,r6
    23e4:	003f3e06 	br	20e0 <_fpadd_parts+0xb4>
    23e8:	113f821e 	bne	r2,r4,21f4 <_fpadd_parts+0x1c8>
    23ec:	28c00117 	ldw	r3,4(r5)
    23f0:	98800117 	ldw	r2,4(r19)
    23f4:	10ff7f26 	beq	r2,r3,21f4 <_fpadd_parts+0x1c8>
    23f8:	04c00074 	movhi	r19,1
    23fc:	9cfa6104 	addi	r19,r19,-5756
    2400:	003f7c06 	br	21f4 <_fpadd_parts+0x1c8>
    2404:	2006d07a 	srli	r3,r4,1
    2408:	008007c4 	movi	r2,31
    240c:	1185c83a 	sub	r2,r2,r6
    2410:	1894d83a 	srl	r10,r3,r2
    2414:	2192983a 	sll	r9,r4,r6
    2418:	003fd706 	br	2378 <_fpadd_parts+0x34c>
    241c:	9487883a 	add	r3,r18,r18
    2420:	008007c4 	movi	r2,31
    2424:	1185c83a 	sub	r2,r2,r6
    2428:	1886983a 	sll	r3,r3,r2
    242c:	899ad83a 	srl	r13,r17,r6
    2430:	919cd83a 	srl	r14,r18,r6
    2434:	1b5ab03a 	or	r13,r3,r13
    2438:	003fc906 	br	2360 <_fpadd_parts+0x334>

0000243c <__subdf3>:
    243c:	deffea04 	addi	sp,sp,-88
    2440:	dcc01415 	stw	r19,80(sp)
    2444:	dcc00404 	addi	r19,sp,16
    2448:	2011883a 	mov	r8,r4
    244c:	2813883a 	mov	r9,r5
    2450:	dc401315 	stw	r17,76(sp)
    2454:	d809883a 	mov	r4,sp
    2458:	980b883a 	mov	r5,r19
    245c:	dc400904 	addi	r17,sp,36
    2460:	dfc01515 	stw	ra,84(sp)
    2464:	da400115 	stw	r9,4(sp)
    2468:	d9c00315 	stw	r7,12(sp)
    246c:	da000015 	stw	r8,0(sp)
    2470:	d9800215 	stw	r6,8(sp)
    2474:	00032e00 	call	32e0 <__unpack_d>
    2478:	d9000204 	addi	r4,sp,8
    247c:	880b883a 	mov	r5,r17
    2480:	00032e00 	call	32e0 <__unpack_d>
    2484:	d8800a17 	ldw	r2,40(sp)
    2488:	880b883a 	mov	r5,r17
    248c:	9809883a 	mov	r4,r19
    2490:	d9800e04 	addi	r6,sp,56
    2494:	1080005c 	xori	r2,r2,1
    2498:	d8800a15 	stw	r2,40(sp)
    249c:	000202c0 	call	202c <_fpadd_parts>
    24a0:	1009883a 	mov	r4,r2
    24a4:	0002fcc0 	call	2fcc <__pack_d>
    24a8:	dfc01517 	ldw	ra,84(sp)
    24ac:	dcc01417 	ldw	r19,80(sp)
    24b0:	dc401317 	ldw	r17,76(sp)
    24b4:	dec01604 	addi	sp,sp,88
    24b8:	f800283a 	ret

000024bc <__adddf3>:
    24bc:	deffea04 	addi	sp,sp,-88
    24c0:	dcc01415 	stw	r19,80(sp)
    24c4:	dcc00404 	addi	r19,sp,16
    24c8:	2011883a 	mov	r8,r4
    24cc:	2813883a 	mov	r9,r5
    24d0:	dc401315 	stw	r17,76(sp)
    24d4:	d809883a 	mov	r4,sp
    24d8:	980b883a 	mov	r5,r19
    24dc:	dc400904 	addi	r17,sp,36
    24e0:	dfc01515 	stw	ra,84(sp)
    24e4:	da400115 	stw	r9,4(sp)
    24e8:	d9c00315 	stw	r7,12(sp)
    24ec:	da000015 	stw	r8,0(sp)
    24f0:	d9800215 	stw	r6,8(sp)
    24f4:	00032e00 	call	32e0 <__unpack_d>
    24f8:	d9000204 	addi	r4,sp,8
    24fc:	880b883a 	mov	r5,r17
    2500:	00032e00 	call	32e0 <__unpack_d>
    2504:	d9800e04 	addi	r6,sp,56
    2508:	9809883a 	mov	r4,r19
    250c:	880b883a 	mov	r5,r17
    2510:	000202c0 	call	202c <_fpadd_parts>
    2514:	1009883a 	mov	r4,r2
    2518:	0002fcc0 	call	2fcc <__pack_d>
    251c:	dfc01517 	ldw	ra,84(sp)
    2520:	dcc01417 	ldw	r19,80(sp)
    2524:	dc401317 	ldw	r17,76(sp)
    2528:	dec01604 	addi	sp,sp,88
    252c:	f800283a 	ret

00002530 <__muldf3>:
    2530:	deffe004 	addi	sp,sp,-128
    2534:	dc401815 	stw	r17,96(sp)
    2538:	dc400404 	addi	r17,sp,16
    253c:	2011883a 	mov	r8,r4
    2540:	2813883a 	mov	r9,r5
    2544:	dc001715 	stw	r16,92(sp)
    2548:	d809883a 	mov	r4,sp
    254c:	880b883a 	mov	r5,r17
    2550:	dc000904 	addi	r16,sp,36
    2554:	dfc01f15 	stw	ra,124(sp)
    2558:	da400115 	stw	r9,4(sp)
    255c:	d9c00315 	stw	r7,12(sp)
    2560:	da000015 	stw	r8,0(sp)
    2564:	d9800215 	stw	r6,8(sp)
    2568:	ddc01e15 	stw	r23,120(sp)
    256c:	dd801d15 	stw	r22,116(sp)
    2570:	dd401c15 	stw	r21,112(sp)
    2574:	dd001b15 	stw	r20,108(sp)
    2578:	dcc01a15 	stw	r19,104(sp)
    257c:	dc801915 	stw	r18,100(sp)
    2580:	00032e00 	call	32e0 <__unpack_d>
    2584:	d9000204 	addi	r4,sp,8
    2588:	800b883a 	mov	r5,r16
    258c:	00032e00 	call	32e0 <__unpack_d>
    2590:	d9000417 	ldw	r4,16(sp)
    2594:	00800044 	movi	r2,1
    2598:	1100102e 	bgeu	r2,r4,25dc <__muldf3+0xac>
    259c:	d8c00917 	ldw	r3,36(sp)
    25a0:	10c0062e 	bgeu	r2,r3,25bc <__muldf3+0x8c>
    25a4:	00800104 	movi	r2,4
    25a8:	20800a26 	beq	r4,r2,25d4 <__muldf3+0xa4>
    25ac:	1880cc26 	beq	r3,r2,28e0 <__muldf3+0x3b0>
    25b0:	00800084 	movi	r2,2
    25b4:	20800926 	beq	r4,r2,25dc <__muldf3+0xac>
    25b8:	1880191e 	bne	r3,r2,2620 <__muldf3+0xf0>
    25bc:	d8c00a17 	ldw	r3,40(sp)
    25c0:	d8800517 	ldw	r2,20(sp)
    25c4:	8009883a 	mov	r4,r16
    25c8:	10c4c03a 	cmpne	r2,r2,r3
    25cc:	d8800a15 	stw	r2,40(sp)
    25d0:	00000706 	br	25f0 <__muldf3+0xc0>
    25d4:	00800084 	movi	r2,2
    25d8:	1880c326 	beq	r3,r2,28e8 <__muldf3+0x3b8>
    25dc:	d8800517 	ldw	r2,20(sp)
    25e0:	d8c00a17 	ldw	r3,40(sp)
    25e4:	8809883a 	mov	r4,r17
    25e8:	10c4c03a 	cmpne	r2,r2,r3
    25ec:	d8800515 	stw	r2,20(sp)
    25f0:	0002fcc0 	call	2fcc <__pack_d>
    25f4:	dfc01f17 	ldw	ra,124(sp)
    25f8:	ddc01e17 	ldw	r23,120(sp)
    25fc:	dd801d17 	ldw	r22,116(sp)
    2600:	dd401c17 	ldw	r21,112(sp)
    2604:	dd001b17 	ldw	r20,108(sp)
    2608:	dcc01a17 	ldw	r19,104(sp)
    260c:	dc801917 	ldw	r18,100(sp)
    2610:	dc401817 	ldw	r17,96(sp)
    2614:	dc001717 	ldw	r16,92(sp)
    2618:	dec02004 	addi	sp,sp,128
    261c:	f800283a 	ret
    2620:	dd800717 	ldw	r22,28(sp)
    2624:	dc800c17 	ldw	r18,48(sp)
    2628:	002b883a 	mov	r21,zero
    262c:	0023883a 	mov	r17,zero
    2630:	a80b883a 	mov	r5,r21
    2634:	b00d883a 	mov	r6,r22
    2638:	880f883a 	mov	r7,r17
    263c:	ddc00817 	ldw	r23,32(sp)
    2640:	dcc00d17 	ldw	r19,52(sp)
    2644:	9009883a 	mov	r4,r18
    2648:	0002eb40 	call	2eb4 <__muldi3>
    264c:	001b883a 	mov	r13,zero
    2650:	680f883a 	mov	r7,r13
    2654:	b009883a 	mov	r4,r22
    2658:	000b883a 	mov	r5,zero
    265c:	980d883a 	mov	r6,r19
    2660:	b82d883a 	mov	r22,r23
    2664:	002f883a 	mov	r23,zero
    2668:	db401615 	stw	r13,88(sp)
    266c:	d8801315 	stw	r2,76(sp)
    2670:	d8c01415 	stw	r3,80(sp)
    2674:	dcc01515 	stw	r19,84(sp)
    2678:	0002eb40 	call	2eb4 <__muldi3>
    267c:	b00d883a 	mov	r6,r22
    2680:	000b883a 	mov	r5,zero
    2684:	9009883a 	mov	r4,r18
    2688:	b80f883a 	mov	r7,r23
    268c:	1021883a 	mov	r16,r2
    2690:	1823883a 	mov	r17,r3
    2694:	0002eb40 	call	2eb4 <__muldi3>
    2698:	8085883a 	add	r2,r16,r2
    269c:	140d803a 	cmpltu	r6,r2,r16
    26a0:	88c7883a 	add	r3,r17,r3
    26a4:	30cd883a 	add	r6,r6,r3
    26a8:	1029883a 	mov	r20,r2
    26ac:	302b883a 	mov	r21,r6
    26b0:	da801317 	ldw	r10,76(sp)
    26b4:	dac01417 	ldw	r11,80(sp)
    26b8:	db001517 	ldw	r12,84(sp)
    26bc:	db401617 	ldw	r13,88(sp)
    26c0:	3440612e 	bgeu	r6,r17,2848 <__muldf3+0x318>
    26c4:	0009883a 	mov	r4,zero
    26c8:	5105883a 	add	r2,r10,r4
    26cc:	128d803a 	cmpltu	r6,r2,r10
    26d0:	5d07883a 	add	r3,r11,r20
    26d4:	30cd883a 	add	r6,r6,r3
    26d8:	0021883a 	mov	r16,zero
    26dc:	04400044 	movi	r17,1
    26e0:	1025883a 	mov	r18,r2
    26e4:	3027883a 	mov	r19,r6
    26e8:	32c06236 	bltu	r6,r11,2874 <__muldf3+0x344>
    26ec:	59807a26 	beq	r11,r6,28d8 <__muldf3+0x3a8>
    26f0:	680b883a 	mov	r5,r13
    26f4:	b80f883a 	mov	r7,r23
    26f8:	6009883a 	mov	r4,r12
    26fc:	b00d883a 	mov	r6,r22
    2700:	0002eb40 	call	2eb4 <__muldi3>
    2704:	1009883a 	mov	r4,r2
    2708:	000f883a 	mov	r7,zero
    270c:	1545883a 	add	r2,r2,r21
    2710:	1111803a 	cmpltu	r8,r2,r4
    2714:	19c7883a 	add	r3,r3,r7
    2718:	40c7883a 	add	r3,r8,r3
    271c:	88cb883a 	add	r5,r17,r3
    2720:	d8c00617 	ldw	r3,24(sp)
    2724:	8089883a 	add	r4,r16,r2
    2728:	d8800b17 	ldw	r2,44(sp)
    272c:	18c00104 	addi	r3,r3,4
    2730:	240d803a 	cmpltu	r6,r4,r16
    2734:	10c7883a 	add	r3,r2,r3
    2738:	2013883a 	mov	r9,r4
    273c:	d8800a17 	ldw	r2,40(sp)
    2740:	d9000517 	ldw	r4,20(sp)
    2744:	314d883a 	add	r6,r6,r5
    2748:	3015883a 	mov	r10,r6
    274c:	2088c03a 	cmpne	r4,r4,r2
    2750:	00880034 	movhi	r2,8192
    2754:	10bfffc4 	addi	r2,r2,-1
    2758:	d9000f15 	stw	r4,60(sp)
    275c:	d8c01015 	stw	r3,64(sp)
    2760:	1180162e 	bgeu	r2,r6,27bc <__muldf3+0x28c>
    2764:	1811883a 	mov	r8,r3
    2768:	101f883a 	mov	r15,r2
    276c:	980497fa 	slli	r2,r19,31
    2770:	9016d07a 	srli	r11,r18,1
    2774:	500697fa 	slli	r3,r10,31
    2778:	480cd07a 	srli	r6,r9,1
    277c:	500ed07a 	srli	r7,r10,1
    2780:	12d6b03a 	or	r11,r2,r11
    2784:	00800044 	movi	r2,1
    2788:	198cb03a 	or	r6,r3,r6
    278c:	4888703a 	and	r4,r9,r2
    2790:	9818d07a 	srli	r12,r19,1
    2794:	001b883a 	mov	r13,zero
    2798:	03a00034 	movhi	r14,32768
    279c:	3013883a 	mov	r9,r6
    27a0:	3815883a 	mov	r10,r7
    27a4:	4091883a 	add	r8,r8,r2
    27a8:	20000226 	beq	r4,zero,27b4 <__muldf3+0x284>
    27ac:	5b64b03a 	or	r18,r11,r13
    27b0:	63a6b03a 	or	r19,r12,r14
    27b4:	7abfed36 	bltu	r15,r10,276c <__muldf3+0x23c>
    27b8:	da001015 	stw	r8,64(sp)
    27bc:	00840034 	movhi	r2,4096
    27c0:	10bfffc4 	addi	r2,r2,-1
    27c4:	12801436 	bltu	r2,r10,2818 <__muldf3+0x2e8>
    27c8:	da001017 	ldw	r8,64(sp)
    27cc:	101f883a 	mov	r15,r2
    27d0:	4a45883a 	add	r2,r9,r9
    27d4:	124d803a 	cmpltu	r6,r2,r9
    27d8:	5287883a 	add	r3,r10,r10
    27dc:	9497883a 	add	r11,r18,r18
    27e0:	5c8f803a 	cmpltu	r7,r11,r18
    27e4:	9cd9883a 	add	r12,r19,r19
    27e8:	01000044 	movi	r4,1
    27ec:	30cd883a 	add	r6,r6,r3
    27f0:	3b0f883a 	add	r7,r7,r12
    27f4:	423fffc4 	addi	r8,r8,-1
    27f8:	1013883a 	mov	r9,r2
    27fc:	3015883a 	mov	r10,r6
    2800:	111ab03a 	or	r13,r2,r4
    2804:	98003016 	blt	r19,zero,28c8 <__muldf3+0x398>
    2808:	5825883a 	mov	r18,r11
    280c:	3827883a 	mov	r19,r7
    2810:	7abfef2e 	bgeu	r15,r10,27d0 <__muldf3+0x2a0>
    2814:	da001015 	stw	r8,64(sp)
    2818:	00803fc4 	movi	r2,255
    281c:	488e703a 	and	r7,r9,r2
    2820:	00802004 	movi	r2,128
    2824:	0007883a 	mov	r3,zero
    2828:	0011883a 	mov	r8,zero
    282c:	38801826 	beq	r7,r2,2890 <__muldf3+0x360>
    2830:	008000c4 	movi	r2,3
    2834:	d9000e04 	addi	r4,sp,56
    2838:	da801215 	stw	r10,72(sp)
    283c:	d8800e15 	stw	r2,56(sp)
    2840:	da401115 	stw	r9,68(sp)
    2844:	003f6a06 	br	25f0 <__muldf3+0xc0>
    2848:	89802126 	beq	r17,r6,28d0 <__muldf3+0x3a0>
    284c:	0009883a 	mov	r4,zero
    2850:	5105883a 	add	r2,r10,r4
    2854:	128d803a 	cmpltu	r6,r2,r10
    2858:	5d07883a 	add	r3,r11,r20
    285c:	30cd883a 	add	r6,r6,r3
    2860:	0021883a 	mov	r16,zero
    2864:	0023883a 	mov	r17,zero
    2868:	1025883a 	mov	r18,r2
    286c:	3027883a 	mov	r19,r6
    2870:	32ff9e2e 	bgeu	r6,r11,26ec <__muldf3+0x1bc>
    2874:	00800044 	movi	r2,1
    2878:	8089883a 	add	r4,r16,r2
    287c:	240d803a 	cmpltu	r6,r4,r16
    2880:	344d883a 	add	r6,r6,r17
    2884:	2021883a 	mov	r16,r4
    2888:	3023883a 	mov	r17,r6
    288c:	003f9806 	br	26f0 <__muldf3+0x1c0>
    2890:	403fe71e 	bne	r8,zero,2830 <__muldf3+0x300>
    2894:	01004004 	movi	r4,256
    2898:	4904703a 	and	r2,r9,r4
    289c:	10c4b03a 	or	r2,r2,r3
    28a0:	103fe31e 	bne	r2,zero,2830 <__muldf3+0x300>
    28a4:	94c4b03a 	or	r2,r18,r19
    28a8:	103fe126 	beq	r2,zero,2830 <__muldf3+0x300>
    28ac:	49c5883a 	add	r2,r9,r7
    28b0:	1251803a 	cmpltu	r8,r2,r9
    28b4:	4291883a 	add	r8,r8,r10
    28b8:	013fc004 	movi	r4,-256
    28bc:	1112703a 	and	r9,r2,r4
    28c0:	4015883a 	mov	r10,r8
    28c4:	003fda06 	br	2830 <__muldf3+0x300>
    28c8:	6813883a 	mov	r9,r13
    28cc:	003fce06 	br	2808 <__muldf3+0x2d8>
    28d0:	143f7c36 	bltu	r2,r16,26c4 <__muldf3+0x194>
    28d4:	003fdd06 	br	284c <__muldf3+0x31c>
    28d8:	12bf852e 	bgeu	r2,r10,26f0 <__muldf3+0x1c0>
    28dc:	003fe506 	br	2874 <__muldf3+0x344>
    28e0:	00800084 	movi	r2,2
    28e4:	20bf351e 	bne	r4,r2,25bc <__muldf3+0x8c>
    28e8:	01000074 	movhi	r4,1
    28ec:	213a6104 	addi	r4,r4,-5756
    28f0:	003f3f06 	br	25f0 <__muldf3+0xc0>

000028f4 <__divdf3>:
    28f4:	deffed04 	addi	sp,sp,-76
    28f8:	dcc01115 	stw	r19,68(sp)
    28fc:	dcc00404 	addi	r19,sp,16
    2900:	2011883a 	mov	r8,r4
    2904:	2813883a 	mov	r9,r5
    2908:	dc000e15 	stw	r16,56(sp)
    290c:	d809883a 	mov	r4,sp
    2910:	980b883a 	mov	r5,r19
    2914:	dc000904 	addi	r16,sp,36
    2918:	dfc01215 	stw	ra,72(sp)
    291c:	da400115 	stw	r9,4(sp)
    2920:	d9c00315 	stw	r7,12(sp)
    2924:	da000015 	stw	r8,0(sp)
    2928:	d9800215 	stw	r6,8(sp)
    292c:	dc801015 	stw	r18,64(sp)
    2930:	dc400f15 	stw	r17,60(sp)
    2934:	00032e00 	call	32e0 <__unpack_d>
    2938:	d9000204 	addi	r4,sp,8
    293c:	800b883a 	mov	r5,r16
    2940:	00032e00 	call	32e0 <__unpack_d>
    2944:	d9000417 	ldw	r4,16(sp)
    2948:	00800044 	movi	r2,1
    294c:	11000b2e 	bgeu	r2,r4,297c <__divdf3+0x88>
    2950:	d9400917 	ldw	r5,36(sp)
    2954:	1140762e 	bgeu	r2,r5,2b30 <__divdf3+0x23c>
    2958:	d8800517 	ldw	r2,20(sp)
    295c:	d8c00a17 	ldw	r3,40(sp)
    2960:	01800104 	movi	r6,4
    2964:	10c4f03a 	xor	r2,r2,r3
    2968:	d8800515 	stw	r2,20(sp)
    296c:	21800226 	beq	r4,r6,2978 <__divdf3+0x84>
    2970:	00800084 	movi	r2,2
    2974:	2080141e 	bne	r4,r2,29c8 <__divdf3+0xd4>
    2978:	29000926 	beq	r5,r4,29a0 <__divdf3+0xac>
    297c:	9809883a 	mov	r4,r19
    2980:	0002fcc0 	call	2fcc <__pack_d>
    2984:	dfc01217 	ldw	ra,72(sp)
    2988:	dcc01117 	ldw	r19,68(sp)
    298c:	dc801017 	ldw	r18,64(sp)
    2990:	dc400f17 	ldw	r17,60(sp)
    2994:	dc000e17 	ldw	r16,56(sp)
    2998:	dec01304 	addi	sp,sp,76
    299c:	f800283a 	ret
    29a0:	01000074 	movhi	r4,1
    29a4:	213a6104 	addi	r4,r4,-5756
    29a8:	0002fcc0 	call	2fcc <__pack_d>
    29ac:	dfc01217 	ldw	ra,72(sp)
    29b0:	dcc01117 	ldw	r19,68(sp)
    29b4:	dc801017 	ldw	r18,64(sp)
    29b8:	dc400f17 	ldw	r17,60(sp)
    29bc:	dc000e17 	ldw	r16,56(sp)
    29c0:	dec01304 	addi	sp,sp,76
    29c4:	f800283a 	ret
    29c8:	29805b26 	beq	r5,r6,2b38 <__divdf3+0x244>
    29cc:	28802d26 	beq	r5,r2,2a84 <__divdf3+0x190>
    29d0:	d8c00617 	ldw	r3,24(sp)
    29d4:	d8800b17 	ldw	r2,44(sp)
    29d8:	d9c00817 	ldw	r7,32(sp)
    29dc:	dc400d17 	ldw	r17,52(sp)
    29e0:	188bc83a 	sub	r5,r3,r2
    29e4:	d9800717 	ldw	r6,28(sp)
    29e8:	dc000c17 	ldw	r16,48(sp)
    29ec:	d9400615 	stw	r5,24(sp)
    29f0:	3c403836 	bltu	r7,r17,2ad4 <__divdf3+0x1e0>
    29f4:	89c03626 	beq	r17,r7,2ad0 <__divdf3+0x1dc>
    29f8:	0015883a 	mov	r10,zero
    29fc:	001d883a 	mov	r14,zero
    2a00:	02c40034 	movhi	r11,4096
    2a04:	001f883a 	mov	r15,zero
    2a08:	003f883a 	mov	ra,zero
    2a0c:	04800f44 	movi	r18,61
    2a10:	00000f06 	br	2a50 <__divdf3+0x15c>
    2a14:	601d883a 	mov	r14,r12
    2a18:	681f883a 	mov	r15,r13
    2a1c:	400d883a 	mov	r6,r8
    2a20:	100f883a 	mov	r7,r2
    2a24:	3191883a 	add	r8,r6,r6
    2a28:	5808d07a 	srli	r4,r11,1
    2a2c:	4185803a 	cmpltu	r2,r8,r6
    2a30:	39d3883a 	add	r9,r7,r7
    2a34:	28c6b03a 	or	r3,r5,r3
    2a38:	1245883a 	add	r2,r2,r9
    2a3c:	1815883a 	mov	r10,r3
    2a40:	2017883a 	mov	r11,r4
    2a44:	400d883a 	mov	r6,r8
    2a48:	100f883a 	mov	r7,r2
    2a4c:	fc801726 	beq	ra,r18,2aac <__divdf3+0x1b8>
    2a50:	580a97fa 	slli	r5,r11,31
    2a54:	5006d07a 	srli	r3,r10,1
    2a58:	ffc00044 	addi	ra,ra,1
    2a5c:	3c7ff136 	bltu	r7,r17,2a24 <__divdf3+0x130>
    2a60:	3411c83a 	sub	r8,r6,r16
    2a64:	3205803a 	cmpltu	r2,r6,r8
    2a68:	3c53c83a 	sub	r9,r7,r17
    2a6c:	7298b03a 	or	r12,r14,r10
    2a70:	7adab03a 	or	r13,r15,r11
    2a74:	4885c83a 	sub	r2,r9,r2
    2a78:	89ffe61e 	bne	r17,r7,2a14 <__divdf3+0x120>
    2a7c:	343fe936 	bltu	r6,r16,2a24 <__divdf3+0x130>
    2a80:	003fe406 	br	2a14 <__divdf3+0x120>
    2a84:	9809883a 	mov	r4,r19
    2a88:	d9800415 	stw	r6,16(sp)
    2a8c:	0002fcc0 	call	2fcc <__pack_d>
    2a90:	dfc01217 	ldw	ra,72(sp)
    2a94:	dcc01117 	ldw	r19,68(sp)
    2a98:	dc801017 	ldw	r18,64(sp)
    2a9c:	dc400f17 	ldw	r17,60(sp)
    2aa0:	dc000e17 	ldw	r16,56(sp)
    2aa4:	dec01304 	addi	sp,sp,76
    2aa8:	f800283a 	ret
    2aac:	00803fc4 	movi	r2,255
    2ab0:	7090703a 	and	r8,r14,r2
    2ab4:	00802004 	movi	r2,128
    2ab8:	0007883a 	mov	r3,zero
    2abc:	0013883a 	mov	r9,zero
    2ac0:	40800d26 	beq	r8,r2,2af8 <__divdf3+0x204>
    2ac4:	dbc00815 	stw	r15,32(sp)
    2ac8:	db800715 	stw	r14,28(sp)
    2acc:	003fab06 	br	297c <__divdf3+0x88>
    2ad0:	343fc92e 	bgeu	r6,r16,29f8 <__divdf3+0x104>
    2ad4:	3185883a 	add	r2,r6,r6
    2ad8:	1189803a 	cmpltu	r4,r2,r6
    2adc:	39c7883a 	add	r3,r7,r7
    2ae0:	20c9883a 	add	r4,r4,r3
    2ae4:	297fffc4 	addi	r5,r5,-1
    2ae8:	100d883a 	mov	r6,r2
    2aec:	200f883a 	mov	r7,r4
    2af0:	d9400615 	stw	r5,24(sp)
    2af4:	003fc006 	br	29f8 <__divdf3+0x104>
    2af8:	483ff21e 	bne	r9,zero,2ac4 <__divdf3+0x1d0>
    2afc:	01004004 	movi	r4,256
    2b00:	7104703a 	and	r2,r14,r4
    2b04:	10c4b03a 	or	r2,r2,r3
    2b08:	103fee1e 	bne	r2,zero,2ac4 <__divdf3+0x1d0>
    2b0c:	31c4b03a 	or	r2,r6,r7
    2b10:	103fec26 	beq	r2,zero,2ac4 <__divdf3+0x1d0>
    2b14:	7205883a 	add	r2,r14,r8
    2b18:	1391803a 	cmpltu	r8,r2,r14
    2b1c:	43d1883a 	add	r8,r8,r15
    2b20:	013fc004 	movi	r4,-256
    2b24:	111c703a 	and	r14,r2,r4
    2b28:	401f883a 	mov	r15,r8
    2b2c:	003fe506 	br	2ac4 <__divdf3+0x1d0>
    2b30:	8009883a 	mov	r4,r16
    2b34:	003f9206 	br	2980 <__divdf3+0x8c>
    2b38:	9809883a 	mov	r4,r19
    2b3c:	d8000715 	stw	zero,28(sp)
    2b40:	d8000815 	stw	zero,32(sp)
    2b44:	d8000615 	stw	zero,24(sp)
    2b48:	003f8d06 	br	2980 <__divdf3+0x8c>

00002b4c <__gtdf2>:
    2b4c:	deffef04 	addi	sp,sp,-68
    2b50:	dc400f15 	stw	r17,60(sp)
    2b54:	dc400404 	addi	r17,sp,16
    2b58:	2005883a 	mov	r2,r4
    2b5c:	2807883a 	mov	r3,r5
    2b60:	dc000e15 	stw	r16,56(sp)
    2b64:	d809883a 	mov	r4,sp
    2b68:	880b883a 	mov	r5,r17
    2b6c:	dc000904 	addi	r16,sp,36
    2b70:	d8c00115 	stw	r3,4(sp)
    2b74:	d8800015 	stw	r2,0(sp)
    2b78:	d9800215 	stw	r6,8(sp)
    2b7c:	dfc01015 	stw	ra,64(sp)
    2b80:	d9c00315 	stw	r7,12(sp)
    2b84:	00032e00 	call	32e0 <__unpack_d>
    2b88:	d9000204 	addi	r4,sp,8
    2b8c:	800b883a 	mov	r5,r16
    2b90:	00032e00 	call	32e0 <__unpack_d>
    2b94:	d8800417 	ldw	r2,16(sp)
    2b98:	00c00044 	movi	r3,1
    2b9c:	01bfffc4 	movi	r6,-1
    2ba0:	1880062e 	bgeu	r3,r2,2bbc <__gtdf2+0x70>
    2ba4:	d8800917 	ldw	r2,36(sp)
    2ba8:	8809883a 	mov	r4,r17
    2bac:	800b883a 	mov	r5,r16
    2bb0:	1880022e 	bgeu	r3,r2,2bbc <__gtdf2+0x70>
    2bb4:	00034180 	call	3418 <__fpcmp_parts_d>
    2bb8:	100d883a 	mov	r6,r2
    2bbc:	3005883a 	mov	r2,r6
    2bc0:	dfc01017 	ldw	ra,64(sp)
    2bc4:	dc400f17 	ldw	r17,60(sp)
    2bc8:	dc000e17 	ldw	r16,56(sp)
    2bcc:	dec01104 	addi	sp,sp,68
    2bd0:	f800283a 	ret

00002bd4 <__gedf2>:
    2bd4:	deffef04 	addi	sp,sp,-68
    2bd8:	dc400f15 	stw	r17,60(sp)
    2bdc:	dc400404 	addi	r17,sp,16
    2be0:	2005883a 	mov	r2,r4
    2be4:	2807883a 	mov	r3,r5
    2be8:	dc000e15 	stw	r16,56(sp)
    2bec:	d809883a 	mov	r4,sp
    2bf0:	880b883a 	mov	r5,r17
    2bf4:	dc000904 	addi	r16,sp,36
    2bf8:	d8c00115 	stw	r3,4(sp)
    2bfc:	d8800015 	stw	r2,0(sp)
    2c00:	d9800215 	stw	r6,8(sp)
    2c04:	dfc01015 	stw	ra,64(sp)
    2c08:	d9c00315 	stw	r7,12(sp)
    2c0c:	00032e00 	call	32e0 <__unpack_d>
    2c10:	d9000204 	addi	r4,sp,8
    2c14:	800b883a 	mov	r5,r16
    2c18:	00032e00 	call	32e0 <__unpack_d>
    2c1c:	d8800417 	ldw	r2,16(sp)
    2c20:	00c00044 	movi	r3,1
    2c24:	01bfffc4 	movi	r6,-1
    2c28:	1880062e 	bgeu	r3,r2,2c44 <__gedf2+0x70>
    2c2c:	d8800917 	ldw	r2,36(sp)
    2c30:	8809883a 	mov	r4,r17
    2c34:	800b883a 	mov	r5,r16
    2c38:	1880022e 	bgeu	r3,r2,2c44 <__gedf2+0x70>
    2c3c:	00034180 	call	3418 <__fpcmp_parts_d>
    2c40:	100d883a 	mov	r6,r2
    2c44:	3005883a 	mov	r2,r6
    2c48:	dfc01017 	ldw	ra,64(sp)
    2c4c:	dc400f17 	ldw	r17,60(sp)
    2c50:	dc000e17 	ldw	r16,56(sp)
    2c54:	dec01104 	addi	sp,sp,68
    2c58:	f800283a 	ret

00002c5c <__ltdf2>:
    2c5c:	deffef04 	addi	sp,sp,-68
    2c60:	dc400f15 	stw	r17,60(sp)
    2c64:	dc400404 	addi	r17,sp,16
    2c68:	2005883a 	mov	r2,r4
    2c6c:	2807883a 	mov	r3,r5
    2c70:	dc000e15 	stw	r16,56(sp)
    2c74:	d809883a 	mov	r4,sp
    2c78:	880b883a 	mov	r5,r17
    2c7c:	dc000904 	addi	r16,sp,36
    2c80:	d8c00115 	stw	r3,4(sp)
    2c84:	d8800015 	stw	r2,0(sp)
    2c88:	d9800215 	stw	r6,8(sp)
    2c8c:	dfc01015 	stw	ra,64(sp)
    2c90:	d9c00315 	stw	r7,12(sp)
    2c94:	00032e00 	call	32e0 <__unpack_d>
    2c98:	d9000204 	addi	r4,sp,8
    2c9c:	800b883a 	mov	r5,r16
    2ca0:	00032e00 	call	32e0 <__unpack_d>
    2ca4:	d8800417 	ldw	r2,16(sp)
    2ca8:	00c00044 	movi	r3,1
    2cac:	180d883a 	mov	r6,r3
    2cb0:	1880062e 	bgeu	r3,r2,2ccc <__ltdf2+0x70>
    2cb4:	d8800917 	ldw	r2,36(sp)
    2cb8:	8809883a 	mov	r4,r17
    2cbc:	800b883a 	mov	r5,r16
    2cc0:	1880022e 	bgeu	r3,r2,2ccc <__ltdf2+0x70>
    2cc4:	00034180 	call	3418 <__fpcmp_parts_d>
    2cc8:	100d883a 	mov	r6,r2
    2ccc:	3005883a 	mov	r2,r6
    2cd0:	dfc01017 	ldw	ra,64(sp)
    2cd4:	dc400f17 	ldw	r17,60(sp)
    2cd8:	dc000e17 	ldw	r16,56(sp)
    2cdc:	dec01104 	addi	sp,sp,68
    2ce0:	f800283a 	ret

00002ce4 <__floatsidf>:
    2ce4:	2006d7fa 	srli	r3,r4,31
    2ce8:	defff604 	addi	sp,sp,-40
    2cec:	008000c4 	movi	r2,3
    2cf0:	dfc00915 	stw	ra,36(sp)
    2cf4:	dcc00815 	stw	r19,32(sp)
    2cf8:	dc800715 	stw	r18,28(sp)
    2cfc:	dc400615 	stw	r17,24(sp)
    2d00:	dc000515 	stw	r16,20(sp)
    2d04:	d8800015 	stw	r2,0(sp)
    2d08:	d8c00115 	stw	r3,4(sp)
    2d0c:	20000f1e 	bne	r4,zero,2d4c <__floatsidf+0x68>
    2d10:	00800084 	movi	r2,2
    2d14:	d8800015 	stw	r2,0(sp)
    2d18:	d809883a 	mov	r4,sp
    2d1c:	0002fcc0 	call	2fcc <__pack_d>
    2d20:	1009883a 	mov	r4,r2
    2d24:	180b883a 	mov	r5,r3
    2d28:	2005883a 	mov	r2,r4
    2d2c:	2807883a 	mov	r3,r5
    2d30:	dfc00917 	ldw	ra,36(sp)
    2d34:	dcc00817 	ldw	r19,32(sp)
    2d38:	dc800717 	ldw	r18,28(sp)
    2d3c:	dc400617 	ldw	r17,24(sp)
    2d40:	dc000517 	ldw	r16,20(sp)
    2d44:	dec00a04 	addi	sp,sp,40
    2d48:	f800283a 	ret
    2d4c:	00800f04 	movi	r2,60
    2d50:	1807003a 	cmpeq	r3,r3,zero
    2d54:	d8800215 	stw	r2,8(sp)
    2d58:	18001126 	beq	r3,zero,2da0 <__floatsidf+0xbc>
    2d5c:	0027883a 	mov	r19,zero
    2d60:	2025883a 	mov	r18,r4
    2d64:	d9000315 	stw	r4,12(sp)
    2d68:	dcc00415 	stw	r19,16(sp)
    2d6c:	0002f4c0 	call	2f4c <__clzsi2>
    2d70:	11000744 	addi	r4,r2,29
    2d74:	013fe80e 	bge	zero,r4,2d18 <__floatsidf+0x34>
    2d78:	10bfff44 	addi	r2,r2,-3
    2d7c:	10000c16 	blt	r2,zero,2db0 <__floatsidf+0xcc>
    2d80:	90a2983a 	sll	r17,r18,r2
    2d84:	0021883a 	mov	r16,zero
    2d88:	d8800217 	ldw	r2,8(sp)
    2d8c:	dc400415 	stw	r17,16(sp)
    2d90:	dc000315 	stw	r16,12(sp)
    2d94:	1105c83a 	sub	r2,r2,r4
    2d98:	d8800215 	stw	r2,8(sp)
    2d9c:	003fde06 	br	2d18 <__floatsidf+0x34>
    2da0:	00a00034 	movhi	r2,32768
    2da4:	20800a26 	beq	r4,r2,2dd0 <__floatsidf+0xec>
    2da8:	0109c83a 	sub	r4,zero,r4
    2dac:	003feb06 	br	2d5c <__floatsidf+0x78>
    2db0:	9006d07a 	srli	r3,r18,1
    2db4:	008007c4 	movi	r2,31
    2db8:	1105c83a 	sub	r2,r2,r4
    2dbc:	1886d83a 	srl	r3,r3,r2
    2dc0:	9922983a 	sll	r17,r19,r4
    2dc4:	9120983a 	sll	r16,r18,r4
    2dc8:	1c62b03a 	or	r17,r3,r17
    2dcc:	003fee06 	br	2d88 <__floatsidf+0xa4>
    2dd0:	0009883a 	mov	r4,zero
    2dd4:	01707834 	movhi	r5,49632
    2dd8:	003fd306 	br	2d28 <__floatsidf+0x44>

00002ddc <__fixdfsi>:
    2ddc:	defff804 	addi	sp,sp,-32
    2de0:	2005883a 	mov	r2,r4
    2de4:	2807883a 	mov	r3,r5
    2de8:	d809883a 	mov	r4,sp
    2dec:	d9400204 	addi	r5,sp,8
    2df0:	d8c00115 	stw	r3,4(sp)
    2df4:	d8800015 	stw	r2,0(sp)
    2df8:	dfc00715 	stw	ra,28(sp)
    2dfc:	00032e00 	call	32e0 <__unpack_d>
    2e00:	d8c00217 	ldw	r3,8(sp)
    2e04:	00800084 	movi	r2,2
    2e08:	1880051e 	bne	r3,r2,2e20 <__fixdfsi+0x44>
    2e0c:	0007883a 	mov	r3,zero
    2e10:	1805883a 	mov	r2,r3
    2e14:	dfc00717 	ldw	ra,28(sp)
    2e18:	dec00804 	addi	sp,sp,32
    2e1c:	f800283a 	ret
    2e20:	00800044 	movi	r2,1
    2e24:	10fff92e 	bgeu	r2,r3,2e0c <__fixdfsi+0x30>
    2e28:	00800104 	movi	r2,4
    2e2c:	18800426 	beq	r3,r2,2e40 <__fixdfsi+0x64>
    2e30:	d8c00417 	ldw	r3,16(sp)
    2e34:	183ff516 	blt	r3,zero,2e0c <__fixdfsi+0x30>
    2e38:	00800784 	movi	r2,30
    2e3c:	10c0080e 	bge	r2,r3,2e60 <__fixdfsi+0x84>
    2e40:	d8800317 	ldw	r2,12(sp)
    2e44:	1000121e 	bne	r2,zero,2e90 <__fixdfsi+0xb4>
    2e48:	00e00034 	movhi	r3,32768
    2e4c:	18ffffc4 	addi	r3,r3,-1
    2e50:	1805883a 	mov	r2,r3
    2e54:	dfc00717 	ldw	ra,28(sp)
    2e58:	dec00804 	addi	sp,sp,32
    2e5c:	f800283a 	ret
    2e60:	00800f04 	movi	r2,60
    2e64:	10d1c83a 	sub	r8,r2,r3
    2e68:	40bff804 	addi	r2,r8,-32
    2e6c:	d9800517 	ldw	r6,20(sp)
    2e70:	d9c00617 	ldw	r7,24(sp)
    2e74:	10000816 	blt	r2,zero,2e98 <__fixdfsi+0xbc>
    2e78:	3888d83a 	srl	r4,r7,r2
    2e7c:	d8800317 	ldw	r2,12(sp)
    2e80:	2007883a 	mov	r3,r4
    2e84:	103fe226 	beq	r2,zero,2e10 <__fixdfsi+0x34>
    2e88:	0107c83a 	sub	r3,zero,r4
    2e8c:	003fe006 	br	2e10 <__fixdfsi+0x34>
    2e90:	00e00034 	movhi	r3,32768
    2e94:	003fde06 	br	2e10 <__fixdfsi+0x34>
    2e98:	39c7883a 	add	r3,r7,r7
    2e9c:	008007c4 	movi	r2,31
    2ea0:	1205c83a 	sub	r2,r2,r8
    2ea4:	1886983a 	sll	r3,r3,r2
    2ea8:	3208d83a 	srl	r4,r6,r8
    2eac:	1908b03a 	or	r4,r3,r4
    2eb0:	003ff206 	br	2e7c <__fixdfsi+0xa0>

00002eb4 <__muldi3>:
    2eb4:	2011883a 	mov	r8,r4
    2eb8:	427fffcc 	andi	r9,r8,65535
    2ebc:	4018d43a 	srli	r12,r8,16
    2ec0:	32bfffcc 	andi	r10,r6,65535
    2ec4:	3016d43a 	srli	r11,r6,16
    2ec8:	4a85383a 	mul	r2,r9,r10
    2ecc:	6295383a 	mul	r10,r12,r10
    2ed0:	4ad3383a 	mul	r9,r9,r11
    2ed4:	113fffcc 	andi	r4,r2,65535
    2ed8:	1004d43a 	srli	r2,r2,16
    2edc:	4a93883a 	add	r9,r9,r10
    2ee0:	3807883a 	mov	r3,r7
    2ee4:	1245883a 	add	r2,r2,r9
    2ee8:	280f883a 	mov	r7,r5
    2eec:	180b883a 	mov	r5,r3
    2ef0:	1006943a 	slli	r3,r2,16
    2ef4:	defffd04 	addi	sp,sp,-12
    2ef8:	dc800215 	stw	r18,8(sp)
    2efc:	1907883a 	add	r3,r3,r4
    2f00:	dc400115 	stw	r17,4(sp)
    2f04:	dc000015 	stw	r16,0(sp)
    2f08:	4165383a 	mul	r18,r8,r5
    2f0c:	31e3383a 	mul	r17,r6,r7
    2f10:	1012d43a 	srli	r9,r2,16
    2f14:	62d9383a 	mul	r12,r12,r11
    2f18:	181f883a 	mov	r15,r3
    2f1c:	1280022e 	bgeu	r2,r10,2f28 <__muldi3+0x74>
    2f20:	00800074 	movhi	r2,1
    2f24:	6099883a 	add	r12,r12,r2
    2f28:	624d883a 	add	r6,r12,r9
    2f2c:	9187883a 	add	r3,r18,r6
    2f30:	88c7883a 	add	r3,r17,r3
    2f34:	7805883a 	mov	r2,r15
    2f38:	dc800217 	ldw	r18,8(sp)
    2f3c:	dc400117 	ldw	r17,4(sp)
    2f40:	dc000017 	ldw	r16,0(sp)
    2f44:	dec00304 	addi	sp,sp,12
    2f48:	f800283a 	ret

00002f4c <__clzsi2>:
    2f4c:	00bfffd4 	movui	r2,65535
    2f50:	11000e36 	bltu	r2,r4,2f8c <__clzsi2+0x40>
    2f54:	00803fc4 	movi	r2,255
    2f58:	01400204 	movi	r5,8
    2f5c:	0007883a 	mov	r3,zero
    2f60:	11001036 	bltu	r2,r4,2fa4 <__clzsi2+0x58>
    2f64:	000b883a 	mov	r5,zero
    2f68:	20c6d83a 	srl	r3,r4,r3
    2f6c:	00800074 	movhi	r2,1
    2f70:	10ba6604 	addi	r2,r2,-5736
    2f74:	1887883a 	add	r3,r3,r2
    2f78:	18800003 	ldbu	r2,0(r3)
    2f7c:	00c00804 	movi	r3,32
    2f80:	2885883a 	add	r2,r5,r2
    2f84:	1885c83a 	sub	r2,r3,r2
    2f88:	f800283a 	ret
    2f8c:	01400404 	movi	r5,16
    2f90:	00804034 	movhi	r2,256
    2f94:	10bfffc4 	addi	r2,r2,-1
    2f98:	2807883a 	mov	r3,r5
    2f9c:	113ff22e 	bgeu	r2,r4,2f68 <__clzsi2+0x1c>
    2fa0:	01400604 	movi	r5,24
    2fa4:	2807883a 	mov	r3,r5
    2fa8:	20c6d83a 	srl	r3,r4,r3
    2fac:	00800074 	movhi	r2,1
    2fb0:	10ba6604 	addi	r2,r2,-5736
    2fb4:	1887883a 	add	r3,r3,r2
    2fb8:	18800003 	ldbu	r2,0(r3)
    2fbc:	00c00804 	movi	r3,32
    2fc0:	2885883a 	add	r2,r5,r2
    2fc4:	1885c83a 	sub	r2,r3,r2
    2fc8:	f800283a 	ret

00002fcc <__pack_d>:
    2fcc:	20c00017 	ldw	r3,0(r4)
    2fd0:	defffd04 	addi	sp,sp,-12
    2fd4:	dc000015 	stw	r16,0(sp)
    2fd8:	dc800215 	stw	r18,8(sp)
    2fdc:	dc400115 	stw	r17,4(sp)
    2fe0:	00800044 	movi	r2,1
    2fe4:	22000317 	ldw	r8,12(r4)
    2fe8:	001f883a 	mov	r15,zero
    2fec:	22400417 	ldw	r9,16(r4)
    2ff0:	24000117 	ldw	r16,4(r4)
    2ff4:	10c0552e 	bgeu	r2,r3,314c <__pack_d+0x180>
    2ff8:	00800104 	movi	r2,4
    2ffc:	18804f26 	beq	r3,r2,313c <__pack_d+0x170>
    3000:	00800084 	movi	r2,2
    3004:	18800226 	beq	r3,r2,3010 <__pack_d+0x44>
    3008:	4244b03a 	or	r2,r8,r9
    300c:	10001a1e 	bne	r2,zero,3078 <__pack_d+0xac>
    3010:	000d883a 	mov	r6,zero
    3014:	000f883a 	mov	r7,zero
    3018:	0011883a 	mov	r8,zero
    301c:	00800434 	movhi	r2,16
    3020:	10bfffc4 	addi	r2,r2,-1
    3024:	301d883a 	mov	r14,r6
    3028:	3884703a 	and	r2,r7,r2
    302c:	400a953a 	slli	r5,r8,20
    3030:	79bffc2c 	andhi	r6,r15,65520
    3034:	308cb03a 	or	r6,r6,r2
    3038:	00e00434 	movhi	r3,32784
    303c:	18ffffc4 	addi	r3,r3,-1
    3040:	800497fa 	slli	r2,r16,31
    3044:	30c6703a 	and	r3,r6,r3
    3048:	1946b03a 	or	r3,r3,r5
    304c:	01600034 	movhi	r5,32768
    3050:	297fffc4 	addi	r5,r5,-1
    3054:	194a703a 	and	r5,r3,r5
    3058:	288ab03a 	or	r5,r5,r2
    305c:	2807883a 	mov	r3,r5
    3060:	7005883a 	mov	r2,r14
    3064:	dc800217 	ldw	r18,8(sp)
    3068:	dc400117 	ldw	r17,4(sp)
    306c:	dc000017 	ldw	r16,0(sp)
    3070:	dec00304 	addi	sp,sp,12
    3074:	f800283a 	ret
    3078:	21000217 	ldw	r4,8(r4)
    307c:	00bf0084 	movi	r2,-1022
    3080:	20803f16 	blt	r4,r2,3180 <__pack_d+0x1b4>
    3084:	0080ffc4 	movi	r2,1023
    3088:	11002c16 	blt	r2,r4,313c <__pack_d+0x170>
    308c:	00803fc4 	movi	r2,255
    3090:	408c703a 	and	r6,r8,r2
    3094:	00802004 	movi	r2,128
    3098:	0007883a 	mov	r3,zero
    309c:	000f883a 	mov	r7,zero
    30a0:	2280ffc4 	addi	r10,r4,1023
    30a4:	30801e26 	beq	r6,r2,3120 <__pack_d+0x154>
    30a8:	00801fc4 	movi	r2,127
    30ac:	4089883a 	add	r4,r8,r2
    30b0:	220d803a 	cmpltu	r6,r4,r8
    30b4:	324d883a 	add	r6,r6,r9
    30b8:	2011883a 	mov	r8,r4
    30bc:	3013883a 	mov	r9,r6
    30c0:	00880034 	movhi	r2,8192
    30c4:	10bfffc4 	addi	r2,r2,-1
    30c8:	12400d36 	bltu	r2,r9,3100 <__pack_d+0x134>
    30cc:	4804963a 	slli	r2,r9,24
    30d0:	400cd23a 	srli	r6,r8,8
    30d4:	480ed23a 	srli	r7,r9,8
    30d8:	013fffc4 	movi	r4,-1
    30dc:	118cb03a 	or	r6,r2,r6
    30e0:	01400434 	movhi	r5,16
    30e4:	297fffc4 	addi	r5,r5,-1
    30e8:	3104703a 	and	r2,r6,r4
    30ec:	3946703a 	and	r3,r7,r5
    30f0:	5201ffcc 	andi	r8,r10,2047
    30f4:	100d883a 	mov	r6,r2
    30f8:	180f883a 	mov	r7,r3
    30fc:	003fc706 	br	301c <__pack_d+0x50>
    3100:	480897fa 	slli	r4,r9,31
    3104:	4004d07a 	srli	r2,r8,1
    3108:	4806d07a 	srli	r3,r9,1
    310c:	52800044 	addi	r10,r10,1
    3110:	2084b03a 	or	r2,r4,r2
    3114:	1011883a 	mov	r8,r2
    3118:	1813883a 	mov	r9,r3
    311c:	003feb06 	br	30cc <__pack_d+0x100>
    3120:	383fe11e 	bne	r7,zero,30a8 <__pack_d+0xdc>
    3124:	01004004 	movi	r4,256
    3128:	4104703a 	and	r2,r8,r4
    312c:	10c4b03a 	or	r2,r2,r3
    3130:	103fe326 	beq	r2,zero,30c0 <__pack_d+0xf4>
    3134:	3005883a 	mov	r2,r6
    3138:	003fdc06 	br	30ac <__pack_d+0xe0>
    313c:	000d883a 	mov	r6,zero
    3140:	000f883a 	mov	r7,zero
    3144:	0201ffc4 	movi	r8,2047
    3148:	003fb406 	br	301c <__pack_d+0x50>
    314c:	0005883a 	mov	r2,zero
    3150:	00c00234 	movhi	r3,8
    3154:	408cb03a 	or	r6,r8,r2
    3158:	48ceb03a 	or	r7,r9,r3
    315c:	013fffc4 	movi	r4,-1
    3160:	01400434 	movhi	r5,16
    3164:	297fffc4 	addi	r5,r5,-1
    3168:	3104703a 	and	r2,r6,r4
    316c:	3946703a 	and	r3,r7,r5
    3170:	100d883a 	mov	r6,r2
    3174:	180f883a 	mov	r7,r3
    3178:	0201ffc4 	movi	r8,2047
    317c:	003fa706 	br	301c <__pack_d+0x50>
    3180:	1109c83a 	sub	r4,r2,r4
    3184:	00800e04 	movi	r2,56
    3188:	11004316 	blt	r2,r4,3298 <__pack_d+0x2cc>
    318c:	21fff804 	addi	r7,r4,-32
    3190:	38004516 	blt	r7,zero,32a8 <__pack_d+0x2dc>
    3194:	49d8d83a 	srl	r12,r9,r7
    3198:	001b883a 	mov	r13,zero
    319c:	0023883a 	mov	r17,zero
    31a0:	01400044 	movi	r5,1
    31a4:	0025883a 	mov	r18,zero
    31a8:	38004716 	blt	r7,zero,32c8 <__pack_d+0x2fc>
    31ac:	29d6983a 	sll	r11,r5,r7
    31b0:	0015883a 	mov	r10,zero
    31b4:	00bfffc4 	movi	r2,-1
    31b8:	5089883a 	add	r4,r10,r2
    31bc:	588b883a 	add	r5,r11,r2
    31c0:	228d803a 	cmpltu	r6,r4,r10
    31c4:	314b883a 	add	r5,r6,r5
    31c8:	4104703a 	and	r2,r8,r4
    31cc:	4946703a 	and	r3,r9,r5
    31d0:	10c4b03a 	or	r2,r2,r3
    31d4:	10000226 	beq	r2,zero,31e0 <__pack_d+0x214>
    31d8:	04400044 	movi	r17,1
    31dc:	0025883a 	mov	r18,zero
    31e0:	00803fc4 	movi	r2,255
    31e4:	644eb03a 	or	r7,r12,r17
    31e8:	3892703a 	and	r9,r7,r2
    31ec:	00802004 	movi	r2,128
    31f0:	6c90b03a 	or	r8,r13,r18
    31f4:	0015883a 	mov	r10,zero
    31f8:	48801626 	beq	r9,r2,3254 <__pack_d+0x288>
    31fc:	01001fc4 	movi	r4,127
    3200:	3905883a 	add	r2,r7,r4
    3204:	11cd803a 	cmpltu	r6,r2,r7
    3208:	320d883a 	add	r6,r6,r8
    320c:	100f883a 	mov	r7,r2
    3210:	00840034 	movhi	r2,4096
    3214:	10bfffc4 	addi	r2,r2,-1
    3218:	3011883a 	mov	r8,r6
    321c:	0007883a 	mov	r3,zero
    3220:	11801b36 	bltu	r2,r6,3290 <__pack_d+0x2c4>
    3224:	4004963a 	slli	r2,r8,24
    3228:	3808d23a 	srli	r4,r7,8
    322c:	400ad23a 	srli	r5,r8,8
    3230:	1813883a 	mov	r9,r3
    3234:	1108b03a 	or	r4,r2,r4
    3238:	00bfffc4 	movi	r2,-1
    323c:	00c00434 	movhi	r3,16
    3240:	18ffffc4 	addi	r3,r3,-1
    3244:	208c703a 	and	r6,r4,r2
    3248:	28ce703a 	and	r7,r5,r3
    324c:	4a01ffcc 	andi	r8,r9,2047
    3250:	003f7206 	br	301c <__pack_d+0x50>
    3254:	503fe91e 	bne	r10,zero,31fc <__pack_d+0x230>
    3258:	01004004 	movi	r4,256
    325c:	3904703a 	and	r2,r7,r4
    3260:	0007883a 	mov	r3,zero
    3264:	10c4b03a 	or	r2,r2,r3
    3268:	10000626 	beq	r2,zero,3284 <__pack_d+0x2b8>
    326c:	3a45883a 	add	r2,r7,r9
    3270:	11cd803a 	cmpltu	r6,r2,r7
    3274:	320d883a 	add	r6,r6,r8
    3278:	100f883a 	mov	r7,r2
    327c:	3011883a 	mov	r8,r6
    3280:	0007883a 	mov	r3,zero
    3284:	00840034 	movhi	r2,4096
    3288:	10bfffc4 	addi	r2,r2,-1
    328c:	123fe52e 	bgeu	r2,r8,3224 <__pack_d+0x258>
    3290:	00c00044 	movi	r3,1
    3294:	003fe306 	br	3224 <__pack_d+0x258>
    3298:	0009883a 	mov	r4,zero
    329c:	0013883a 	mov	r9,zero
    32a0:	000b883a 	mov	r5,zero
    32a4:	003fe406 	br	3238 <__pack_d+0x26c>
    32a8:	4a47883a 	add	r3,r9,r9
    32ac:	008007c4 	movi	r2,31
    32b0:	1105c83a 	sub	r2,r2,r4
    32b4:	1886983a 	sll	r3,r3,r2
    32b8:	4118d83a 	srl	r12,r8,r4
    32bc:	491ad83a 	srl	r13,r9,r4
    32c0:	1b18b03a 	or	r12,r3,r12
    32c4:	003fb506 	br	319c <__pack_d+0x1d0>
    32c8:	2806d07a 	srli	r3,r5,1
    32cc:	008007c4 	movi	r2,31
    32d0:	1105c83a 	sub	r2,r2,r4
    32d4:	1896d83a 	srl	r11,r3,r2
    32d8:	2914983a 	sll	r10,r5,r4
    32dc:	003fb506 	br	31b4 <__pack_d+0x1e8>

000032e0 <__unpack_d>:
    32e0:	20c00117 	ldw	r3,4(r4)
    32e4:	22400017 	ldw	r9,0(r4)
    32e8:	00800434 	movhi	r2,16
    32ec:	10bfffc4 	addi	r2,r2,-1
    32f0:	1808d53a 	srli	r4,r3,20
    32f4:	180cd7fa 	srli	r6,r3,31
    32f8:	1894703a 	and	r10,r3,r2
    32fc:	2201ffcc 	andi	r8,r4,2047
    3300:	281b883a 	mov	r13,r5
    3304:	4817883a 	mov	r11,r9
    3308:	29800115 	stw	r6,4(r5)
    330c:	5019883a 	mov	r12,r10
    3310:	40001e1e 	bne	r8,zero,338c <__unpack_d+0xac>
    3314:	4a84b03a 	or	r2,r9,r10
    3318:	10001926 	beq	r2,zero,3380 <__unpack_d+0xa0>
    331c:	4804d63a 	srli	r2,r9,24
    3320:	500c923a 	slli	r6,r10,8
    3324:	013f0084 	movi	r4,-1022
    3328:	00c40034 	movhi	r3,4096
    332c:	18ffffc4 	addi	r3,r3,-1
    3330:	118cb03a 	or	r6,r2,r6
    3334:	008000c4 	movi	r2,3
    3338:	480a923a 	slli	r5,r9,8
    333c:	68800015 	stw	r2,0(r13)
    3340:	69000215 	stw	r4,8(r13)
    3344:	19800b36 	bltu	r3,r6,3374 <__unpack_d+0x94>
    3348:	200f883a 	mov	r7,r4
    334c:	1811883a 	mov	r8,r3
    3350:	2945883a 	add	r2,r5,r5
    3354:	1149803a 	cmpltu	r4,r2,r5
    3358:	3187883a 	add	r3,r6,r6
    335c:	20c9883a 	add	r4,r4,r3
    3360:	100b883a 	mov	r5,r2
    3364:	200d883a 	mov	r6,r4
    3368:	39ffffc4 	addi	r7,r7,-1
    336c:	413ff82e 	bgeu	r8,r4,3350 <__unpack_d+0x70>
    3370:	69c00215 	stw	r7,8(r13)
    3374:	69800415 	stw	r6,16(r13)
    3378:	69400315 	stw	r5,12(r13)
    337c:	f800283a 	ret
    3380:	00800084 	movi	r2,2
    3384:	28800015 	stw	r2,0(r5)
    3388:	f800283a 	ret
    338c:	0081ffc4 	movi	r2,2047
    3390:	40800f26 	beq	r8,r2,33d0 <__unpack_d+0xf0>
    3394:	480cd63a 	srli	r6,r9,24
    3398:	5006923a 	slli	r3,r10,8
    339c:	4804923a 	slli	r2,r9,8
    33a0:	0009883a 	mov	r4,zero
    33a4:	30c6b03a 	or	r3,r6,r3
    33a8:	01440034 	movhi	r5,4096
    33ac:	110cb03a 	or	r6,r2,r4
    33b0:	423f0044 	addi	r8,r8,-1023
    33b4:	194eb03a 	or	r7,r3,r5
    33b8:	008000c4 	movi	r2,3
    33bc:	69c00415 	stw	r7,16(r13)
    33c0:	6a000215 	stw	r8,8(r13)
    33c4:	68800015 	stw	r2,0(r13)
    33c8:	69800315 	stw	r6,12(r13)
    33cc:	f800283a 	ret
    33d0:	4a84b03a 	or	r2,r9,r10
    33d4:	1000031e 	bne	r2,zero,33e4 <__unpack_d+0x104>
    33d8:	00800104 	movi	r2,4
    33dc:	28800015 	stw	r2,0(r5)
    33e0:	f800283a 	ret
    33e4:	0009883a 	mov	r4,zero
    33e8:	01400234 	movhi	r5,8
    33ec:	4904703a 	and	r2,r9,r4
    33f0:	5146703a 	and	r3,r10,r5
    33f4:	10c4b03a 	or	r2,r2,r3
    33f8:	10000526 	beq	r2,zero,3410 <__unpack_d+0x130>
    33fc:	00800044 	movi	r2,1
    3400:	68800015 	stw	r2,0(r13)
    3404:	6b000415 	stw	r12,16(r13)
    3408:	6ac00315 	stw	r11,12(r13)
    340c:	f800283a 	ret
    3410:	68000015 	stw	zero,0(r13)
    3414:	003ffb06 	br	3404 <__unpack_d+0x124>

00003418 <__fpcmp_parts_d>:
    3418:	21800017 	ldw	r6,0(r4)
    341c:	00c00044 	movi	r3,1
    3420:	19800a2e 	bgeu	r3,r6,344c <__fpcmp_parts_d+0x34>
    3424:	28800017 	ldw	r2,0(r5)
    3428:	1880082e 	bgeu	r3,r2,344c <__fpcmp_parts_d+0x34>
    342c:	00c00104 	movi	r3,4
    3430:	30c02626 	beq	r6,r3,34cc <__fpcmp_parts_d+0xb4>
    3434:	10c02226 	beq	r2,r3,34c0 <__fpcmp_parts_d+0xa8>
    3438:	00c00084 	movi	r3,2
    343c:	30c00526 	beq	r6,r3,3454 <__fpcmp_parts_d+0x3c>
    3440:	10c0071e 	bne	r2,r3,3460 <__fpcmp_parts_d+0x48>
    3444:	20800117 	ldw	r2,4(r4)
    3448:	1000091e 	bne	r2,zero,3470 <__fpcmp_parts_d+0x58>
    344c:	00800044 	movi	r2,1
    3450:	f800283a 	ret
    3454:	10c01a1e 	bne	r2,r3,34c0 <__fpcmp_parts_d+0xa8>
    3458:	0005883a 	mov	r2,zero
    345c:	f800283a 	ret
    3460:	22000117 	ldw	r8,4(r4)
    3464:	28800117 	ldw	r2,4(r5)
    3468:	40800326 	beq	r8,r2,3478 <__fpcmp_parts_d+0x60>
    346c:	403ff726 	beq	r8,zero,344c <__fpcmp_parts_d+0x34>
    3470:	00bfffc4 	movi	r2,-1
    3474:	f800283a 	ret
    3478:	20c00217 	ldw	r3,8(r4)
    347c:	28800217 	ldw	r2,8(r5)
    3480:	10fffa16 	blt	r2,r3,346c <__fpcmp_parts_d+0x54>
    3484:	18800916 	blt	r3,r2,34ac <__fpcmp_parts_d+0x94>
    3488:	21c00417 	ldw	r7,16(r4)
    348c:	28c00417 	ldw	r3,16(r5)
    3490:	21800317 	ldw	r6,12(r4)
    3494:	28800317 	ldw	r2,12(r5)
    3498:	19fff436 	bltu	r3,r7,346c <__fpcmp_parts_d+0x54>
    349c:	38c00526 	beq	r7,r3,34b4 <__fpcmp_parts_d+0x9c>
    34a0:	38c00236 	bltu	r7,r3,34ac <__fpcmp_parts_d+0x94>
    34a4:	19ffec1e 	bne	r3,r7,3458 <__fpcmp_parts_d+0x40>
    34a8:	30bfeb2e 	bgeu	r6,r2,3458 <__fpcmp_parts_d+0x40>
    34ac:	403fe71e 	bne	r8,zero,344c <__fpcmp_parts_d+0x34>
    34b0:	003fef06 	br	3470 <__fpcmp_parts_d+0x58>
    34b4:	11bffa2e 	bgeu	r2,r6,34a0 <__fpcmp_parts_d+0x88>
    34b8:	403fe426 	beq	r8,zero,344c <__fpcmp_parts_d+0x34>
    34bc:	003fec06 	br	3470 <__fpcmp_parts_d+0x58>
    34c0:	28800117 	ldw	r2,4(r5)
    34c4:	103fe11e 	bne	r2,zero,344c <__fpcmp_parts_d+0x34>
    34c8:	003fe906 	br	3470 <__fpcmp_parts_d+0x58>
    34cc:	11bfdd1e 	bne	r2,r6,3444 <__fpcmp_parts_d+0x2c>
    34d0:	28c00117 	ldw	r3,4(r5)
    34d4:	20800117 	ldw	r2,4(r4)
    34d8:	1885c83a 	sub	r2,r3,r2
    34dc:	f800283a 	ret

000034e0 <__errno>:
    34e0:	00c00074 	movhi	r3,1
    34e4:	18c34a04 	addi	r3,r3,3368
    34e8:	18800017 	ldw	r2,0(r3)
    34ec:	f800283a 	ret

000034f0 <free>:
    34f0:	00800074 	movhi	r2,1
    34f4:	10834a04 	addi	r2,r2,3368
    34f8:	200b883a 	mov	r5,r4
    34fc:	11000017 	ldw	r4,0(r2)
    3500:	0007d541 	jmpi	7d54 <_free_r>

00003504 <malloc>:
    3504:	00800074 	movhi	r2,1
    3508:	10834a04 	addi	r2,r2,3368
    350c:	200b883a 	mov	r5,r4
    3510:	11000017 	ldw	r4,0(r2)
    3514:	00035181 	jmpi	3518 <_malloc_r>

00003518 <_malloc_r>:
    3518:	defff604 	addi	sp,sp,-40
    351c:	28c002c4 	addi	r3,r5,11
    3520:	00800584 	movi	r2,22
    3524:	dc800215 	stw	r18,8(sp)
    3528:	dfc00915 	stw	ra,36(sp)
    352c:	df000815 	stw	fp,32(sp)
    3530:	ddc00715 	stw	r23,28(sp)
    3534:	dd800615 	stw	r22,24(sp)
    3538:	dd400515 	stw	r21,20(sp)
    353c:	dd000415 	stw	r20,16(sp)
    3540:	dcc00315 	stw	r19,12(sp)
    3544:	dc400115 	stw	r17,4(sp)
    3548:	dc000015 	stw	r16,0(sp)
    354c:	2025883a 	mov	r18,r4
    3550:	10c01236 	bltu	r2,r3,359c <_malloc_r+0x84>
    3554:	04400404 	movi	r17,16
    3558:	8940142e 	bgeu	r17,r5,35ac <_malloc_r+0x94>
    355c:	00800304 	movi	r2,12
    3560:	0007883a 	mov	r3,zero
    3564:	90800015 	stw	r2,0(r18)
    3568:	1805883a 	mov	r2,r3
    356c:	dfc00917 	ldw	ra,36(sp)
    3570:	df000817 	ldw	fp,32(sp)
    3574:	ddc00717 	ldw	r23,28(sp)
    3578:	dd800617 	ldw	r22,24(sp)
    357c:	dd400517 	ldw	r21,20(sp)
    3580:	dd000417 	ldw	r20,16(sp)
    3584:	dcc00317 	ldw	r19,12(sp)
    3588:	dc800217 	ldw	r18,8(sp)
    358c:	dc400117 	ldw	r17,4(sp)
    3590:	dc000017 	ldw	r16,0(sp)
    3594:	dec00a04 	addi	sp,sp,40
    3598:	f800283a 	ret
    359c:	00bffe04 	movi	r2,-8
    35a0:	18a2703a 	and	r17,r3,r2
    35a4:	883fed16 	blt	r17,zero,355c <_malloc_r+0x44>
    35a8:	897fec36 	bltu	r17,r5,355c <_malloc_r+0x44>
    35ac:	9009883a 	mov	r4,r18
    35b0:	000bbcc0 	call	bbcc <__malloc_lock>
    35b4:	00807dc4 	movi	r2,503
    35b8:	14402b2e 	bgeu	r2,r17,3668 <_malloc_r+0x150>
    35bc:	8806d27a 	srli	r3,r17,9
    35c0:	18003f1e 	bne	r3,zero,36c0 <_malloc_r+0x1a8>
    35c4:	880cd0fa 	srli	r6,r17,3
    35c8:	300490fa 	slli	r2,r6,3
    35cc:	02c00074 	movhi	r11,1
    35d0:	5afc9104 	addi	r11,r11,-3516
    35d4:	12cb883a 	add	r5,r2,r11
    35d8:	2c000317 	ldw	r16,12(r5)
    35dc:	580f883a 	mov	r7,r11
    35e0:	2c00041e 	bne	r5,r16,35f4 <_malloc_r+0xdc>
    35e4:	00000a06 	br	3610 <_malloc_r+0xf8>
    35e8:	1800860e 	bge	r3,zero,3804 <_malloc_r+0x2ec>
    35ec:	84000317 	ldw	r16,12(r16)
    35f0:	2c000726 	beq	r5,r16,3610 <_malloc_r+0xf8>
    35f4:	80800117 	ldw	r2,4(r16)
    35f8:	00ffff04 	movi	r3,-4
    35fc:	10c8703a 	and	r4,r2,r3
    3600:	2447c83a 	sub	r3,r4,r17
    3604:	008003c4 	movi	r2,15
    3608:	10fff70e 	bge	r2,r3,35e8 <_malloc_r+0xd0>
    360c:	31bfffc4 	addi	r6,r6,-1
    3610:	32400044 	addi	r9,r6,1
    3614:	02800074 	movhi	r10,1
    3618:	52bc9304 	addi	r10,r10,-3508
    361c:	54000217 	ldw	r16,8(r10)
    3620:	8280a026 	beq	r16,r10,38a4 <_malloc_r+0x38c>
    3624:	80800117 	ldw	r2,4(r16)
    3628:	00ffff04 	movi	r3,-4
    362c:	10ca703a 	and	r5,r2,r3
    3630:	2c4dc83a 	sub	r6,r5,r17
    3634:	008003c4 	movi	r2,15
    3638:	11808316 	blt	r2,r6,3848 <_malloc_r+0x330>
    363c:	52800315 	stw	r10,12(r10)
    3640:	52800215 	stw	r10,8(r10)
    3644:	30002916 	blt	r6,zero,36ec <_malloc_r+0x1d4>
    3648:	8147883a 	add	r3,r16,r5
    364c:	18800117 	ldw	r2,4(r3)
    3650:	9009883a 	mov	r4,r18
    3654:	10800054 	ori	r2,r2,1
    3658:	18800115 	stw	r2,4(r3)
    365c:	000bbd00 	call	bbd0 <__malloc_unlock>
    3660:	80c00204 	addi	r3,r16,8
    3664:	003fc006 	br	3568 <_malloc_r+0x50>
    3668:	02c00074 	movhi	r11,1
    366c:	5afc9104 	addi	r11,r11,-3516
    3670:	8ac5883a 	add	r2,r17,r11
    3674:	14000317 	ldw	r16,12(r2)
    3678:	580f883a 	mov	r7,r11
    367c:	8806d0fa 	srli	r3,r17,3
    3680:	14006c26 	beq	r2,r16,3834 <_malloc_r+0x31c>
    3684:	80c00117 	ldw	r3,4(r16)
    3688:	00bfff04 	movi	r2,-4
    368c:	81800317 	ldw	r6,12(r16)
    3690:	1886703a 	and	r3,r3,r2
    3694:	80c7883a 	add	r3,r16,r3
    3698:	18800117 	ldw	r2,4(r3)
    369c:	81400217 	ldw	r5,8(r16)
    36a0:	9009883a 	mov	r4,r18
    36a4:	10800054 	ori	r2,r2,1
    36a8:	18800115 	stw	r2,4(r3)
    36ac:	31400215 	stw	r5,8(r6)
    36b0:	29800315 	stw	r6,12(r5)
    36b4:	000bbd00 	call	bbd0 <__malloc_unlock>
    36b8:	80c00204 	addi	r3,r16,8
    36bc:	003faa06 	br	3568 <_malloc_r+0x50>
    36c0:	00800104 	movi	r2,4
    36c4:	10c0052e 	bgeu	r2,r3,36dc <_malloc_r+0x1c4>
    36c8:	00800504 	movi	r2,20
    36cc:	10c07836 	bltu	r2,r3,38b0 <_malloc_r+0x398>
    36d0:	198016c4 	addi	r6,r3,91
    36d4:	300490fa 	slli	r2,r6,3
    36d8:	003fbc06 	br	35cc <_malloc_r+0xb4>
    36dc:	8804d1ba 	srli	r2,r17,6
    36e0:	11800e04 	addi	r6,r2,56
    36e4:	300490fa 	slli	r2,r6,3
    36e8:	003fb806 	br	35cc <_malloc_r+0xb4>
    36ec:	00807fc4 	movi	r2,511
    36f0:	1140bb36 	bltu	r2,r5,39e0 <_malloc_r+0x4c8>
    36f4:	2806d0fa 	srli	r3,r5,3
    36f8:	573ffe04 	addi	fp,r10,-8
    36fc:	00800044 	movi	r2,1
    3700:	180890fa 	slli	r4,r3,3
    3704:	1807d0ba 	srai	r3,r3,2
    3708:	e1c00117 	ldw	r7,4(fp)
    370c:	5909883a 	add	r4,r11,r4
    3710:	21400217 	ldw	r5,8(r4)
    3714:	10c4983a 	sll	r2,r2,r3
    3718:	81000315 	stw	r4,12(r16)
    371c:	81400215 	stw	r5,8(r16)
    3720:	388eb03a 	or	r7,r7,r2
    3724:	2c000315 	stw	r16,12(r5)
    3728:	24000215 	stw	r16,8(r4)
    372c:	e1c00115 	stw	r7,4(fp)
    3730:	4807883a 	mov	r3,r9
    3734:	4800cd16 	blt	r9,zero,3a6c <_malloc_r+0x554>
    3738:	1807d0ba 	srai	r3,r3,2
    373c:	00800044 	movi	r2,1
    3740:	10c8983a 	sll	r4,r2,r3
    3744:	39004436 	bltu	r7,r4,3858 <_malloc_r+0x340>
    3748:	21c4703a 	and	r2,r4,r7
    374c:	10000a1e 	bne	r2,zero,3778 <_malloc_r+0x260>
    3750:	2109883a 	add	r4,r4,r4
    3754:	00bfff04 	movi	r2,-4
    3758:	4884703a 	and	r2,r9,r2
    375c:	3906703a 	and	r3,r7,r4
    3760:	12400104 	addi	r9,r2,4
    3764:	1800041e 	bne	r3,zero,3778 <_malloc_r+0x260>
    3768:	2109883a 	add	r4,r4,r4
    376c:	3904703a 	and	r2,r7,r4
    3770:	4a400104 	addi	r9,r9,4
    3774:	103ffc26 	beq	r2,zero,3768 <_malloc_r+0x250>
    3778:	480490fa 	slli	r2,r9,3
    377c:	4819883a 	mov	r12,r9
    3780:	023fff04 	movi	r8,-4
    3784:	589b883a 	add	r13,r11,r2
    3788:	6807883a 	mov	r3,r13
    378c:	014003c4 	movi	r5,15
    3790:	1c000317 	ldw	r16,12(r3)
    3794:	1c00041e 	bne	r3,r16,37a8 <_malloc_r+0x290>
    3798:	0000a706 	br	3a38 <_malloc_r+0x520>
    379c:	3000ab0e 	bge	r6,zero,3a4c <_malloc_r+0x534>
    37a0:	84000317 	ldw	r16,12(r16)
    37a4:	1c00a426 	beq	r3,r16,3a38 <_malloc_r+0x520>
    37a8:	80800117 	ldw	r2,4(r16)
    37ac:	1204703a 	and	r2,r2,r8
    37b0:	144dc83a 	sub	r6,r2,r17
    37b4:	29bff90e 	bge	r5,r6,379c <_malloc_r+0x284>
    37b8:	81000317 	ldw	r4,12(r16)
    37bc:	80c00217 	ldw	r3,8(r16)
    37c0:	89400054 	ori	r5,r17,1
    37c4:	8445883a 	add	r2,r16,r17
    37c8:	20c00215 	stw	r3,8(r4)
    37cc:	19000315 	stw	r4,12(r3)
    37d0:	81400115 	stw	r5,4(r16)
    37d4:	1187883a 	add	r3,r2,r6
    37d8:	31000054 	ori	r4,r6,1
    37dc:	50800315 	stw	r2,12(r10)
    37e0:	50800215 	stw	r2,8(r10)
    37e4:	19800015 	stw	r6,0(r3)
    37e8:	11000115 	stw	r4,4(r2)
    37ec:	12800215 	stw	r10,8(r2)
    37f0:	12800315 	stw	r10,12(r2)
    37f4:	9009883a 	mov	r4,r18
    37f8:	000bbd00 	call	bbd0 <__malloc_unlock>
    37fc:	80c00204 	addi	r3,r16,8
    3800:	003f5906 	br	3568 <_malloc_r+0x50>
    3804:	8109883a 	add	r4,r16,r4
    3808:	20800117 	ldw	r2,4(r4)
    380c:	80c00217 	ldw	r3,8(r16)
    3810:	81400317 	ldw	r5,12(r16)
    3814:	10800054 	ori	r2,r2,1
    3818:	20800115 	stw	r2,4(r4)
    381c:	28c00215 	stw	r3,8(r5)
    3820:	19400315 	stw	r5,12(r3)
    3824:	9009883a 	mov	r4,r18
    3828:	000bbd00 	call	bbd0 <__malloc_unlock>
    382c:	80c00204 	addi	r3,r16,8
    3830:	003f4d06 	br	3568 <_malloc_r+0x50>
    3834:	80800204 	addi	r2,r16,8
    3838:	14000317 	ldw	r16,12(r2)
    383c:	143f911e 	bne	r2,r16,3684 <_malloc_r+0x16c>
    3840:	1a400084 	addi	r9,r3,2
    3844:	003f7306 	br	3614 <_malloc_r+0xfc>
    3848:	88c00054 	ori	r3,r17,1
    384c:	8445883a 	add	r2,r16,r17
    3850:	80c00115 	stw	r3,4(r16)
    3854:	003fdf06 	br	37d4 <_malloc_r+0x2bc>
    3858:	e4000217 	ldw	r16,8(fp)
    385c:	00bfff04 	movi	r2,-4
    3860:	80c00117 	ldw	r3,4(r16)
    3864:	802d883a 	mov	r22,r16
    3868:	18aa703a 	and	r21,r3,r2
    386c:	ac401636 	bltu	r21,r17,38c8 <_malloc_r+0x3b0>
    3870:	ac49c83a 	sub	r4,r21,r17
    3874:	008003c4 	movi	r2,15
    3878:	1100130e 	bge	r2,r4,38c8 <_malloc_r+0x3b0>
    387c:	88800054 	ori	r2,r17,1
    3880:	8447883a 	add	r3,r16,r17
    3884:	80800115 	stw	r2,4(r16)
    3888:	20800054 	ori	r2,r4,1
    388c:	18800115 	stw	r2,4(r3)
    3890:	e0c00215 	stw	r3,8(fp)
    3894:	9009883a 	mov	r4,r18
    3898:	000bbd00 	call	bbd0 <__malloc_unlock>
    389c:	80c00204 	addi	r3,r16,8
    38a0:	003f3106 	br	3568 <_malloc_r+0x50>
    38a4:	39c00117 	ldw	r7,4(r7)
    38a8:	573ffe04 	addi	fp,r10,-8
    38ac:	003fa006 	br	3730 <_malloc_r+0x218>
    38b0:	00801504 	movi	r2,84
    38b4:	10c06736 	bltu	r2,r3,3a54 <_malloc_r+0x53c>
    38b8:	8804d33a 	srli	r2,r17,12
    38bc:	11801b84 	addi	r6,r2,110
    38c0:	300490fa 	slli	r2,r6,3
    38c4:	003f4106 	br	35cc <_malloc_r+0xb4>
    38c8:	d0a81217 	ldw	r2,-24504(gp)
    38cc:	d0e02817 	ldw	r3,-32608(gp)
    38d0:	053fffc4 	movi	r20,-1
    38d4:	10800404 	addi	r2,r2,16
    38d8:	88a7883a 	add	r19,r17,r2
    38dc:	1d000326 	beq	r3,r20,38ec <_malloc_r+0x3d4>
    38e0:	98c3ffc4 	addi	r3,r19,4095
    38e4:	00bc0004 	movi	r2,-4096
    38e8:	18a6703a 	and	r19,r3,r2
    38ec:	9009883a 	mov	r4,r18
    38f0:	980b883a 	mov	r5,r19
    38f4:	0003e240 	call	3e24 <_sbrk_r>
    38f8:	1009883a 	mov	r4,r2
    38fc:	15000426 	beq	r2,r20,3910 <_malloc_r+0x3f8>
    3900:	854b883a 	add	r5,r16,r21
    3904:	1029883a 	mov	r20,r2
    3908:	11405a2e 	bgeu	r2,r5,3a74 <_malloc_r+0x55c>
    390c:	87000c26 	beq	r16,fp,3940 <_malloc_r+0x428>
    3910:	e4000217 	ldw	r16,8(fp)
    3914:	80c00117 	ldw	r3,4(r16)
    3918:	00bfff04 	movi	r2,-4
    391c:	1884703a 	and	r2,r3,r2
    3920:	14400336 	bltu	r2,r17,3930 <_malloc_r+0x418>
    3924:	1449c83a 	sub	r4,r2,r17
    3928:	008003c4 	movi	r2,15
    392c:	113fd316 	blt	r2,r4,387c <_malloc_r+0x364>
    3930:	9009883a 	mov	r4,r18
    3934:	000bbd00 	call	bbd0 <__malloc_unlock>
    3938:	0007883a 	mov	r3,zero
    393c:	003f0a06 	br	3568 <_malloc_r+0x50>
    3940:	05c001f4 	movhi	r23,7
    3944:	bdcc4404 	addi	r23,r23,12560
    3948:	b8800017 	ldw	r2,0(r23)
    394c:	988d883a 	add	r6,r19,r2
    3950:	b9800015 	stw	r6,0(r23)
    3954:	d0e02817 	ldw	r3,-32608(gp)
    3958:	00bfffc4 	movi	r2,-1
    395c:	18808e26 	beq	r3,r2,3b98 <_malloc_r+0x680>
    3960:	2145c83a 	sub	r2,r4,r5
    3964:	3085883a 	add	r2,r6,r2
    3968:	b8800015 	stw	r2,0(r23)
    396c:	20c001cc 	andi	r3,r4,7
    3970:	18005f1e 	bne	r3,zero,3af0 <_malloc_r+0x5d8>
    3974:	000b883a 	mov	r5,zero
    3978:	a4c5883a 	add	r2,r20,r19
    397c:	1083ffcc 	andi	r2,r2,4095
    3980:	00c40004 	movi	r3,4096
    3984:	1887c83a 	sub	r3,r3,r2
    3988:	28e7883a 	add	r19,r5,r3
    398c:	9009883a 	mov	r4,r18
    3990:	980b883a 	mov	r5,r19
    3994:	0003e240 	call	3e24 <_sbrk_r>
    3998:	1007883a 	mov	r3,r2
    399c:	00bfffc4 	movi	r2,-1
    39a0:	18807a26 	beq	r3,r2,3b8c <_malloc_r+0x674>
    39a4:	1d05c83a 	sub	r2,r3,r20
    39a8:	9885883a 	add	r2,r19,r2
    39ac:	10c00054 	ori	r3,r2,1
    39b0:	b8800017 	ldw	r2,0(r23)
    39b4:	a021883a 	mov	r16,r20
    39b8:	a0c00115 	stw	r3,4(r20)
    39bc:	9885883a 	add	r2,r19,r2
    39c0:	b8800015 	stw	r2,0(r23)
    39c4:	e5000215 	stw	r20,8(fp)
    39c8:	b7003626 	beq	r22,fp,3aa4 <_malloc_r+0x58c>
    39cc:	018003c4 	movi	r6,15
    39d0:	35404b36 	bltu	r6,r21,3b00 <_malloc_r+0x5e8>
    39d4:	00800044 	movi	r2,1
    39d8:	a0800115 	stw	r2,4(r20)
    39dc:	003fcd06 	br	3914 <_malloc_r+0x3fc>
    39e0:	2808d27a 	srli	r4,r5,9
    39e4:	2000371e 	bne	r4,zero,3ac4 <_malloc_r+0x5ac>
    39e8:	2808d0fa 	srli	r4,r5,3
    39ec:	200690fa 	slli	r3,r4,3
    39f0:	1ad1883a 	add	r8,r3,r11
    39f4:	41800217 	ldw	r6,8(r8)
    39f8:	41805b26 	beq	r8,r6,3b68 <_malloc_r+0x650>
    39fc:	30800117 	ldw	r2,4(r6)
    3a00:	00ffff04 	movi	r3,-4
    3a04:	10c4703a 	and	r2,r2,r3
    3a08:	2880022e 	bgeu	r5,r2,3a14 <_malloc_r+0x4fc>
    3a0c:	31800217 	ldw	r6,8(r6)
    3a10:	41bffa1e 	bne	r8,r6,39fc <_malloc_r+0x4e4>
    3a14:	32000317 	ldw	r8,12(r6)
    3a18:	39c00117 	ldw	r7,4(r7)
    3a1c:	82000315 	stw	r8,12(r16)
    3a20:	81800215 	stw	r6,8(r16)
    3a24:	07000074 	movhi	fp,1
    3a28:	e73c9104 	addi	fp,fp,-3516
    3a2c:	34000315 	stw	r16,12(r6)
    3a30:	44000215 	stw	r16,8(r8)
    3a34:	003f3e06 	br	3730 <_malloc_r+0x218>
    3a38:	63000044 	addi	r12,r12,1
    3a3c:	608000cc 	andi	r2,r12,3
    3a40:	10005d26 	beq	r2,zero,3bb8 <_malloc_r+0x6a0>
    3a44:	18c00204 	addi	r3,r3,8
    3a48:	003f5106 	br	3790 <_malloc_r+0x278>
    3a4c:	8089883a 	add	r4,r16,r2
    3a50:	003f6d06 	br	3808 <_malloc_r+0x2f0>
    3a54:	00805504 	movi	r2,340
    3a58:	10c02036 	bltu	r2,r3,3adc <_malloc_r+0x5c4>
    3a5c:	8804d3fa 	srli	r2,r17,15
    3a60:	11801dc4 	addi	r6,r2,119
    3a64:	300490fa 	slli	r2,r6,3
    3a68:	003ed806 	br	35cc <_malloc_r+0xb4>
    3a6c:	48c000c4 	addi	r3,r9,3
    3a70:	003f3106 	br	3738 <_malloc_r+0x220>
    3a74:	05c001f4 	movhi	r23,7
    3a78:	bdcc4404 	addi	r23,r23,12560
    3a7c:	b8800017 	ldw	r2,0(r23)
    3a80:	988d883a 	add	r6,r19,r2
    3a84:	b9800015 	stw	r6,0(r23)
    3a88:	293fb21e 	bne	r5,r4,3954 <_malloc_r+0x43c>
    3a8c:	2083ffcc 	andi	r2,r4,4095
    3a90:	103fb01e 	bne	r2,zero,3954 <_malloc_r+0x43c>
    3a94:	e4000217 	ldw	r16,8(fp)
    3a98:	9d45883a 	add	r2,r19,r21
    3a9c:	10800054 	ori	r2,r2,1
    3aa0:	80800115 	stw	r2,4(r16)
    3aa4:	b8c00017 	ldw	r3,0(r23)
    3aa8:	d0a81317 	ldw	r2,-24500(gp)
    3aac:	10c0012e 	bgeu	r2,r3,3ab4 <_malloc_r+0x59c>
    3ab0:	d0e81315 	stw	r3,-24500(gp)
    3ab4:	d0a81417 	ldw	r2,-24496(gp)
    3ab8:	10ff962e 	bgeu	r2,r3,3914 <_malloc_r+0x3fc>
    3abc:	d0e81415 	stw	r3,-24496(gp)
    3ac0:	003f9406 	br	3914 <_malloc_r+0x3fc>
    3ac4:	00800104 	movi	r2,4
    3ac8:	11001e36 	bltu	r2,r4,3b44 <_malloc_r+0x62c>
    3acc:	2804d1ba 	srli	r2,r5,6
    3ad0:	11000e04 	addi	r4,r2,56
    3ad4:	200690fa 	slli	r3,r4,3
    3ad8:	003fc506 	br	39f0 <_malloc_r+0x4d8>
    3adc:	00815504 	movi	r2,1364
    3ae0:	10c01d2e 	bgeu	r2,r3,3b58 <_malloc_r+0x640>
    3ae4:	01801f84 	movi	r6,126
    3ae8:	0080fc04 	movi	r2,1008
    3aec:	003eb706 	br	35cc <_malloc_r+0xb4>
    3af0:	00800204 	movi	r2,8
    3af4:	10cbc83a 	sub	r5,r2,r3
    3af8:	2169883a 	add	r20,r4,r5
    3afc:	003f9e06 	br	3978 <_malloc_r+0x460>
    3b00:	00bffe04 	movi	r2,-8
    3b04:	a93ffd04 	addi	r4,r21,-12
    3b08:	2088703a 	and	r4,r4,r2
    3b0c:	b10b883a 	add	r5,r22,r4
    3b10:	00c00144 	movi	r3,5
    3b14:	28c00215 	stw	r3,8(r5)
    3b18:	28c00115 	stw	r3,4(r5)
    3b1c:	b0800117 	ldw	r2,4(r22)
    3b20:	1080004c 	andi	r2,r2,1
    3b24:	2084b03a 	or	r2,r4,r2
    3b28:	b0800115 	stw	r2,4(r22)
    3b2c:	313fdd2e 	bgeu	r6,r4,3aa4 <_malloc_r+0x58c>
    3b30:	b1400204 	addi	r5,r22,8
    3b34:	9009883a 	mov	r4,r18
    3b38:	0007d540 	call	7d54 <_free_r>
    3b3c:	e4000217 	ldw	r16,8(fp)
    3b40:	003fd806 	br	3aa4 <_malloc_r+0x58c>
    3b44:	00800504 	movi	r2,20
    3b48:	11001536 	bltu	r2,r4,3ba0 <_malloc_r+0x688>
    3b4c:	210016c4 	addi	r4,r4,91
    3b50:	200690fa 	slli	r3,r4,3
    3b54:	003fa606 	br	39f0 <_malloc_r+0x4d8>
    3b58:	8804d4ba 	srli	r2,r17,18
    3b5c:	11801f04 	addi	r6,r2,124
    3b60:	300490fa 	slli	r2,r6,3
    3b64:	003e9906 	br	35cc <_malloc_r+0xb4>
    3b68:	2009d0ba 	srai	r4,r4,2
    3b6c:	01400074 	movhi	r5,1
    3b70:	297c9104 	addi	r5,r5,-3516
    3b74:	00c00044 	movi	r3,1
    3b78:	28800117 	ldw	r2,4(r5)
    3b7c:	1906983a 	sll	r3,r3,r4
    3b80:	10c4b03a 	or	r2,r2,r3
    3b84:	28800115 	stw	r2,4(r5)
    3b88:	003fa306 	br	3a18 <_malloc_r+0x500>
    3b8c:	0027883a 	mov	r19,zero
    3b90:	00c00044 	movi	r3,1
    3b94:	003f8606 	br	39b0 <_malloc_r+0x498>
    3b98:	d1202815 	stw	r4,-32608(gp)
    3b9c:	003f7306 	br	396c <_malloc_r+0x454>
    3ba0:	00801504 	movi	r2,84
    3ba4:	11001936 	bltu	r2,r4,3c0c <_malloc_r+0x6f4>
    3ba8:	2804d33a 	srli	r2,r5,12
    3bac:	11001b84 	addi	r4,r2,110
    3bb0:	200690fa 	slli	r3,r4,3
    3bb4:	003f8e06 	br	39f0 <_malloc_r+0x4d8>
    3bb8:	480b883a 	mov	r5,r9
    3bbc:	6807883a 	mov	r3,r13
    3bc0:	288000cc 	andi	r2,r5,3
    3bc4:	18fffe04 	addi	r3,r3,-8
    3bc8:	297fffc4 	addi	r5,r5,-1
    3bcc:	10001526 	beq	r2,zero,3c24 <_malloc_r+0x70c>
    3bd0:	18800217 	ldw	r2,8(r3)
    3bd4:	10fffa26 	beq	r2,r3,3bc0 <_malloc_r+0x6a8>
    3bd8:	2109883a 	add	r4,r4,r4
    3bdc:	393f1e36 	bltu	r7,r4,3858 <_malloc_r+0x340>
    3be0:	203f1d26 	beq	r4,zero,3858 <_malloc_r+0x340>
    3be4:	21c4703a 	and	r2,r4,r7
    3be8:	10000226 	beq	r2,zero,3bf4 <_malloc_r+0x6dc>
    3bec:	6013883a 	mov	r9,r12
    3bf0:	003ee106 	br	3778 <_malloc_r+0x260>
    3bf4:	2109883a 	add	r4,r4,r4
    3bf8:	3904703a 	and	r2,r7,r4
    3bfc:	63000104 	addi	r12,r12,4
    3c00:	103ffc26 	beq	r2,zero,3bf4 <_malloc_r+0x6dc>
    3c04:	6013883a 	mov	r9,r12
    3c08:	003edb06 	br	3778 <_malloc_r+0x260>
    3c0c:	00805504 	movi	r2,340
    3c10:	11000836 	bltu	r2,r4,3c34 <_malloc_r+0x71c>
    3c14:	2804d3fa 	srli	r2,r5,15
    3c18:	11001dc4 	addi	r4,r2,119
    3c1c:	200690fa 	slli	r3,r4,3
    3c20:	003f7306 	br	39f0 <_malloc_r+0x4d8>
    3c24:	0104303a 	nor	r2,zero,r4
    3c28:	388e703a 	and	r7,r7,r2
    3c2c:	e1c00115 	stw	r7,4(fp)
    3c30:	003fe906 	br	3bd8 <_malloc_r+0x6c0>
    3c34:	00815504 	movi	r2,1364
    3c38:	1100032e 	bgeu	r2,r4,3c48 <_malloc_r+0x730>
    3c3c:	01001f84 	movi	r4,126
    3c40:	00c0fc04 	movi	r3,1008
    3c44:	003f6a06 	br	39f0 <_malloc_r+0x4d8>
    3c48:	2804d4ba 	srli	r2,r5,18
    3c4c:	11001f04 	addi	r4,r2,124
    3c50:	200690fa 	slli	r3,r4,3
    3c54:	003f6606 	br	39f0 <_malloc_r+0x4d8>

00003c58 <memcpy>:
    3c58:	01c003c4 	movi	r7,15
    3c5c:	2007883a 	mov	r3,r4
    3c60:	3980032e 	bgeu	r7,r6,3c70 <memcpy+0x18>
    3c64:	2904b03a 	or	r2,r5,r4
    3c68:	108000cc 	andi	r2,r2,3
    3c6c:	10000926 	beq	r2,zero,3c94 <memcpy+0x3c>
    3c70:	30000626 	beq	r6,zero,3c8c <memcpy+0x34>
    3c74:	30cd883a 	add	r6,r6,r3
    3c78:	28800003 	ldbu	r2,0(r5)
    3c7c:	29400044 	addi	r5,r5,1
    3c80:	18800005 	stb	r2,0(r3)
    3c84:	18c00044 	addi	r3,r3,1
    3c88:	30fffb1e 	bne	r6,r3,3c78 <memcpy+0x20>
    3c8c:	2005883a 	mov	r2,r4
    3c90:	f800283a 	ret
    3c94:	3811883a 	mov	r8,r7
    3c98:	200f883a 	mov	r7,r4
    3c9c:	28c00017 	ldw	r3,0(r5)
    3ca0:	31bffc04 	addi	r6,r6,-16
    3ca4:	38c00015 	stw	r3,0(r7)
    3ca8:	28800117 	ldw	r2,4(r5)
    3cac:	38800115 	stw	r2,4(r7)
    3cb0:	28c00217 	ldw	r3,8(r5)
    3cb4:	38c00215 	stw	r3,8(r7)
    3cb8:	28800317 	ldw	r2,12(r5)
    3cbc:	29400404 	addi	r5,r5,16
    3cc0:	38800315 	stw	r2,12(r7)
    3cc4:	39c00404 	addi	r7,r7,16
    3cc8:	41bff436 	bltu	r8,r6,3c9c <memcpy+0x44>
    3ccc:	008000c4 	movi	r2,3
    3cd0:	1180072e 	bgeu	r2,r6,3cf0 <memcpy+0x98>
    3cd4:	1007883a 	mov	r3,r2
    3cd8:	28800017 	ldw	r2,0(r5)
    3cdc:	31bfff04 	addi	r6,r6,-4
    3ce0:	29400104 	addi	r5,r5,4
    3ce4:	38800015 	stw	r2,0(r7)
    3ce8:	39c00104 	addi	r7,r7,4
    3cec:	19bffa36 	bltu	r3,r6,3cd8 <memcpy+0x80>
    3cf0:	3807883a 	mov	r3,r7
    3cf4:	003fde06 	br	3c70 <memcpy+0x18>

00003cf8 <printf>:
    3cf8:	defffb04 	addi	sp,sp,-20
    3cfc:	dfc00115 	stw	ra,4(sp)
    3d00:	d9400215 	stw	r5,8(sp)
    3d04:	d9800315 	stw	r6,12(sp)
    3d08:	d9c00415 	stw	r7,16(sp)
    3d0c:	00800074 	movhi	r2,1
    3d10:	10834a04 	addi	r2,r2,3368
    3d14:	10c00017 	ldw	r3,0(r2)
    3d18:	200b883a 	mov	r5,r4
    3d1c:	d8800204 	addi	r2,sp,8
    3d20:	19000217 	ldw	r4,8(r3)
    3d24:	100d883a 	mov	r6,r2
    3d28:	d8800015 	stw	r2,0(sp)
    3d2c:	0005e0c0 	call	5e0c <__vfprintf_internal>
    3d30:	dfc00117 	ldw	ra,4(sp)
    3d34:	dec00504 	addi	sp,sp,20
    3d38:	f800283a 	ret

00003d3c <_printf_r>:
    3d3c:	defffc04 	addi	sp,sp,-16
    3d40:	dfc00115 	stw	ra,4(sp)
    3d44:	d9800215 	stw	r6,8(sp)
    3d48:	d9c00315 	stw	r7,12(sp)
    3d4c:	280d883a 	mov	r6,r5
    3d50:	21400217 	ldw	r5,8(r4)
    3d54:	d8c00204 	addi	r3,sp,8
    3d58:	180f883a 	mov	r7,r3
    3d5c:	d8c00015 	stw	r3,0(sp)
    3d60:	0003f600 	call	3f60 <___vfprintf_internal_r>
    3d64:	dfc00117 	ldw	ra,4(sp)
    3d68:	dec00404 	addi	sp,sp,16
    3d6c:	f800283a 	ret

00003d70 <_puts_r>:
    3d70:	defff604 	addi	sp,sp,-40
    3d74:	dc400715 	stw	r17,28(sp)
    3d78:	2023883a 	mov	r17,r4
    3d7c:	2809883a 	mov	r4,r5
    3d80:	dfc00915 	stw	ra,36(sp)
    3d84:	dcc00815 	stw	r19,32(sp)
    3d88:	2827883a 	mov	r19,r5
    3d8c:	0003e940 	call	3e94 <strlen>
    3d90:	89400217 	ldw	r5,8(r17)
    3d94:	00c00074 	movhi	r3,1
    3d98:	18fa3804 	addi	r3,r3,-5920
    3d9c:	01c00044 	movi	r7,1
    3da0:	12000044 	addi	r8,r2,1
    3da4:	d8c00515 	stw	r3,20(sp)
    3da8:	d9c00615 	stw	r7,24(sp)
    3dac:	d8c00304 	addi	r3,sp,12
    3db0:	01c00084 	movi	r7,2
    3db4:	8809883a 	mov	r4,r17
    3db8:	d80d883a 	mov	r6,sp
    3dbc:	d8c00015 	stw	r3,0(sp)
    3dc0:	dcc00315 	stw	r19,12(sp)
    3dc4:	da000215 	stw	r8,8(sp)
    3dc8:	d9c00115 	stw	r7,4(sp)
    3dcc:	d8800415 	stw	r2,16(sp)
    3dd0:	00080680 	call	8068 <__sfvwrite_r>
    3dd4:	00ffffc4 	movi	r3,-1
    3dd8:	10000626 	beq	r2,zero,3df4 <_puts_r+0x84>
    3ddc:	1805883a 	mov	r2,r3
    3de0:	dfc00917 	ldw	ra,36(sp)
    3de4:	dcc00817 	ldw	r19,32(sp)
    3de8:	dc400717 	ldw	r17,28(sp)
    3dec:	dec00a04 	addi	sp,sp,40
    3df0:	f800283a 	ret
    3df4:	00c00284 	movi	r3,10
    3df8:	1805883a 	mov	r2,r3
    3dfc:	dfc00917 	ldw	ra,36(sp)
    3e00:	dcc00817 	ldw	r19,32(sp)
    3e04:	dc400717 	ldw	r17,28(sp)
    3e08:	dec00a04 	addi	sp,sp,40
    3e0c:	f800283a 	ret

00003e10 <puts>:
    3e10:	00800074 	movhi	r2,1
    3e14:	10834a04 	addi	r2,r2,3368
    3e18:	200b883a 	mov	r5,r4
    3e1c:	11000017 	ldw	r4,0(r2)
    3e20:	0003d701 	jmpi	3d70 <_puts_r>

00003e24 <_sbrk_r>:
    3e24:	defffd04 	addi	sp,sp,-12
    3e28:	dc000015 	stw	r16,0(sp)
    3e2c:	04000074 	movhi	r16,1
    3e30:	840b3a04 	addi	r16,r16,11496
    3e34:	dc400115 	stw	r17,4(sp)
    3e38:	80000015 	stw	zero,0(r16)
    3e3c:	2023883a 	mov	r17,r4
    3e40:	2809883a 	mov	r4,r5
    3e44:	dfc00215 	stw	ra,8(sp)
    3e48:	000bef40 	call	bef4 <sbrk>
    3e4c:	1007883a 	mov	r3,r2
    3e50:	00bfffc4 	movi	r2,-1
    3e54:	18800626 	beq	r3,r2,3e70 <_sbrk_r+0x4c>
    3e58:	1805883a 	mov	r2,r3
    3e5c:	dfc00217 	ldw	ra,8(sp)
    3e60:	dc400117 	ldw	r17,4(sp)
    3e64:	dc000017 	ldw	r16,0(sp)
    3e68:	dec00304 	addi	sp,sp,12
    3e6c:	f800283a 	ret
    3e70:	80800017 	ldw	r2,0(r16)
    3e74:	103ff826 	beq	r2,zero,3e58 <_sbrk_r+0x34>
    3e78:	88800015 	stw	r2,0(r17)
    3e7c:	1805883a 	mov	r2,r3
    3e80:	dfc00217 	ldw	ra,8(sp)
    3e84:	dc400117 	ldw	r17,4(sp)
    3e88:	dc000017 	ldw	r16,0(sp)
    3e8c:	dec00304 	addi	sp,sp,12
    3e90:	f800283a 	ret

00003e94 <strlen>:
    3e94:	208000cc 	andi	r2,r4,3
    3e98:	2011883a 	mov	r8,r4
    3e9c:	1000161e 	bne	r2,zero,3ef8 <strlen+0x64>
    3ea0:	20c00017 	ldw	r3,0(r4)
    3ea4:	017fbff4 	movhi	r5,65279
    3ea8:	297fbfc4 	addi	r5,r5,-257
    3eac:	01e02074 	movhi	r7,32897
    3eb0:	39e02004 	addi	r7,r7,-32640
    3eb4:	1945883a 	add	r2,r3,r5
    3eb8:	11c4703a 	and	r2,r2,r7
    3ebc:	00c6303a 	nor	r3,zero,r3
    3ec0:	1886703a 	and	r3,r3,r2
    3ec4:	18000c1e 	bne	r3,zero,3ef8 <strlen+0x64>
    3ec8:	280d883a 	mov	r6,r5
    3ecc:	380b883a 	mov	r5,r7
    3ed0:	21000104 	addi	r4,r4,4
    3ed4:	20800017 	ldw	r2,0(r4)
    3ed8:	1187883a 	add	r3,r2,r6
    3edc:	1946703a 	and	r3,r3,r5
    3ee0:	0084303a 	nor	r2,zero,r2
    3ee4:	10c4703a 	and	r2,r2,r3
    3ee8:	103ff926 	beq	r2,zero,3ed0 <strlen+0x3c>
    3eec:	20800007 	ldb	r2,0(r4)
    3ef0:	10000326 	beq	r2,zero,3f00 <strlen+0x6c>
    3ef4:	21000044 	addi	r4,r4,1
    3ef8:	20800007 	ldb	r2,0(r4)
    3efc:	103ffd1e 	bne	r2,zero,3ef4 <strlen+0x60>
    3f00:	2205c83a 	sub	r2,r4,r8
    3f04:	f800283a 	ret

00003f08 <__sprint_r>:
    3f08:	30800217 	ldw	r2,8(r6)
    3f0c:	defffe04 	addi	sp,sp,-8
    3f10:	dc000015 	stw	r16,0(sp)
    3f14:	dfc00115 	stw	ra,4(sp)
    3f18:	3021883a 	mov	r16,r6
    3f1c:	0007883a 	mov	r3,zero
    3f20:	1000061e 	bne	r2,zero,3f3c <__sprint_r+0x34>
    3f24:	1805883a 	mov	r2,r3
    3f28:	30000115 	stw	zero,4(r6)
    3f2c:	dfc00117 	ldw	ra,4(sp)
    3f30:	dc000017 	ldw	r16,0(sp)
    3f34:	dec00204 	addi	sp,sp,8
    3f38:	f800283a 	ret
    3f3c:	00080680 	call	8068 <__sfvwrite_r>
    3f40:	1007883a 	mov	r3,r2
    3f44:	1805883a 	mov	r2,r3
    3f48:	80000115 	stw	zero,4(r16)
    3f4c:	80000215 	stw	zero,8(r16)
    3f50:	dfc00117 	ldw	ra,4(sp)
    3f54:	dc000017 	ldw	r16,0(sp)
    3f58:	dec00204 	addi	sp,sp,8
    3f5c:	f800283a 	ret

00003f60 <___vfprintf_internal_r>:
    3f60:	defea404 	addi	sp,sp,-1392
    3f64:	dd815815 	stw	r22,1376(sp)
    3f68:	dc015215 	stw	r16,1352(sp)
    3f6c:	d9c15115 	stw	r7,1348(sp)
    3f70:	dfc15b15 	stw	ra,1388(sp)
    3f74:	df015a15 	stw	fp,1384(sp)
    3f78:	ddc15915 	stw	r23,1380(sp)
    3f7c:	dd415715 	stw	r21,1372(sp)
    3f80:	dd015615 	stw	r20,1368(sp)
    3f84:	dcc15515 	stw	r19,1364(sp)
    3f88:	dc815415 	stw	r18,1360(sp)
    3f8c:	dc415315 	stw	r17,1356(sp)
    3f90:	282d883a 	mov	r22,r5
    3f94:	3021883a 	mov	r16,r6
    3f98:	d9014f15 	stw	r4,1340(sp)
    3f9c:	000868c0 	call	868c <_localeconv_r>
    3fa0:	10800017 	ldw	r2,0(r2)
    3fa4:	d9c15117 	ldw	r7,1348(sp)
    3fa8:	d8814915 	stw	r2,1316(sp)
    3fac:	d8814f17 	ldw	r2,1340(sp)
    3fb0:	10000226 	beq	r2,zero,3fbc <___vfprintf_internal_r+0x5c>
    3fb4:	10800e17 	ldw	r2,56(r2)
    3fb8:	10020d26 	beq	r2,zero,47f0 <___vfprintf_internal_r+0x890>
    3fbc:	b080030b 	ldhu	r2,12(r22)
    3fc0:	1080020c 	andi	r2,r2,8
    3fc4:	10020e26 	beq	r2,zero,4800 <___vfprintf_internal_r+0x8a0>
    3fc8:	b0800417 	ldw	r2,16(r22)
    3fcc:	10020c26 	beq	r2,zero,4800 <___vfprintf_internal_r+0x8a0>
    3fd0:	b200030b 	ldhu	r8,12(r22)
    3fd4:	00800284 	movi	r2,10
    3fd8:	40c0068c 	andi	r3,r8,26
    3fdc:	18802f1e 	bne	r3,r2,409c <___vfprintf_internal_r+0x13c>
    3fe0:	b080038f 	ldh	r2,14(r22)
    3fe4:	10002d16 	blt	r2,zero,409c <___vfprintf_internal_r+0x13c>
    3fe8:	b240038b 	ldhu	r9,14(r22)
    3fec:	b2800717 	ldw	r10,28(r22)
    3ff0:	b2c00917 	ldw	r11,36(r22)
    3ff4:	d9014f17 	ldw	r4,1340(sp)
    3ff8:	dc402904 	addi	r17,sp,164
    3ffc:	d8804004 	addi	r2,sp,256
    4000:	00c10004 	movi	r3,1024
    4004:	423fff4c 	andi	r8,r8,65533
    4008:	800d883a 	mov	r6,r16
    400c:	880b883a 	mov	r5,r17
    4010:	da002c0d 	sth	r8,176(sp)
    4014:	da402c8d 	sth	r9,178(sp)
    4018:	da803015 	stw	r10,192(sp)
    401c:	dac03215 	stw	r11,200(sp)
    4020:	d8802d15 	stw	r2,180(sp)
    4024:	d8c02e15 	stw	r3,184(sp)
    4028:	d8802915 	stw	r2,164(sp)
    402c:	d8c02b15 	stw	r3,172(sp)
    4030:	d8002f15 	stw	zero,188(sp)
    4034:	0003f600 	call	3f60 <___vfprintf_internal_r>
    4038:	d8814b15 	stw	r2,1324(sp)
    403c:	10000416 	blt	r2,zero,4050 <___vfprintf_internal_r+0xf0>
    4040:	d9014f17 	ldw	r4,1340(sp)
    4044:	880b883a 	mov	r5,r17
    4048:	00077380 	call	7738 <_fflush_r>
    404c:	1002321e 	bne	r2,zero,4918 <___vfprintf_internal_r+0x9b8>
    4050:	d8802c0b 	ldhu	r2,176(sp)
    4054:	1080100c 	andi	r2,r2,64
    4058:	10000326 	beq	r2,zero,4068 <___vfprintf_internal_r+0x108>
    405c:	b080030b 	ldhu	r2,12(r22)
    4060:	10801014 	ori	r2,r2,64
    4064:	b080030d 	sth	r2,12(r22)
    4068:	d8814b17 	ldw	r2,1324(sp)
    406c:	dfc15b17 	ldw	ra,1388(sp)
    4070:	df015a17 	ldw	fp,1384(sp)
    4074:	ddc15917 	ldw	r23,1380(sp)
    4078:	dd815817 	ldw	r22,1376(sp)
    407c:	dd415717 	ldw	r21,1372(sp)
    4080:	dd015617 	ldw	r20,1368(sp)
    4084:	dcc15517 	ldw	r19,1364(sp)
    4088:	dc815417 	ldw	r18,1360(sp)
    408c:	dc415317 	ldw	r17,1356(sp)
    4090:	dc015217 	ldw	r16,1352(sp)
    4094:	dec15c04 	addi	sp,sp,1392
    4098:	f800283a 	ret
    409c:	0005883a 	mov	r2,zero
    40a0:	0007883a 	mov	r3,zero
    40a4:	dd401904 	addi	r21,sp,100
    40a8:	d8814215 	stw	r2,1288(sp)
    40ac:	802f883a 	mov	r23,r16
    40b0:	d8c14315 	stw	r3,1292(sp)
    40b4:	d8014b15 	stw	zero,1324(sp)
    40b8:	d8014815 	stw	zero,1312(sp)
    40bc:	d8014415 	stw	zero,1296(sp)
    40c0:	d8014715 	stw	zero,1308(sp)
    40c4:	dd400c15 	stw	r21,48(sp)
    40c8:	d8000e15 	stw	zero,56(sp)
    40cc:	d8000d15 	stw	zero,52(sp)
    40d0:	b8800007 	ldb	r2,0(r23)
    40d4:	10001926 	beq	r2,zero,413c <___vfprintf_internal_r+0x1dc>
    40d8:	00c00944 	movi	r3,37
    40dc:	10c01726 	beq	r2,r3,413c <___vfprintf_internal_r+0x1dc>
    40e0:	b821883a 	mov	r16,r23
    40e4:	00000106 	br	40ec <___vfprintf_internal_r+0x18c>
    40e8:	10c00326 	beq	r2,r3,40f8 <___vfprintf_internal_r+0x198>
    40ec:	84000044 	addi	r16,r16,1
    40f0:	80800007 	ldb	r2,0(r16)
    40f4:	103ffc1e 	bne	r2,zero,40e8 <___vfprintf_internal_r+0x188>
    40f8:	85e7c83a 	sub	r19,r16,r23
    40fc:	98000e26 	beq	r19,zero,4138 <___vfprintf_internal_r+0x1d8>
    4100:	dc800e17 	ldw	r18,56(sp)
    4104:	dc400d17 	ldw	r17,52(sp)
    4108:	008001c4 	movi	r2,7
    410c:	94e5883a 	add	r18,r18,r19
    4110:	8c400044 	addi	r17,r17,1
    4114:	adc00015 	stw	r23,0(r21)
    4118:	dc800e15 	stw	r18,56(sp)
    411c:	acc00115 	stw	r19,4(r21)
    4120:	dc400d15 	stw	r17,52(sp)
    4124:	14428b16 	blt	r2,r17,4b54 <___vfprintf_internal_r+0xbf4>
    4128:	ad400204 	addi	r21,r21,8
    412c:	d9014b17 	ldw	r4,1324(sp)
    4130:	24c9883a 	add	r4,r4,r19
    4134:	d9014b15 	stw	r4,1324(sp)
    4138:	802f883a 	mov	r23,r16
    413c:	b8800007 	ldb	r2,0(r23)
    4140:	10013c26 	beq	r2,zero,4634 <___vfprintf_internal_r+0x6d4>
    4144:	bdc00044 	addi	r23,r23,1
    4148:	d8000405 	stb	zero,16(sp)
    414c:	b8c00007 	ldb	r3,0(r23)
    4150:	04ffffc4 	movi	r19,-1
    4154:	d8014c15 	stw	zero,1328(sp)
    4158:	d8014a15 	stw	zero,1320(sp)
    415c:	d8c14d15 	stw	r3,1332(sp)
    4160:	bdc00044 	addi	r23,r23,1
    4164:	d9414d17 	ldw	r5,1332(sp)
    4168:	00801604 	movi	r2,88
    416c:	28fff804 	addi	r3,r5,-32
    4170:	10c06036 	bltu	r2,r3,42f4 <___vfprintf_internal_r+0x394>
    4174:	18c5883a 	add	r2,r3,r3
    4178:	1085883a 	add	r2,r2,r2
    417c:	00c00034 	movhi	r3,0
    4180:	18d06404 	addi	r3,r3,16784
    4184:	10c5883a 	add	r2,r2,r3
    4188:	11000017 	ldw	r4,0(r2)
    418c:	2000683a 	jmp	r4
    4190:	00005104 	movi	zero,324
    4194:	000042f4 	movhi	zero,267
    4198:	000042f4 	movhi	zero,267
    419c:	000050f0 	cmpltui	zero,zero,323
    41a0:	000042f4 	movhi	zero,267
    41a4:	000042f4 	movhi	zero,267
    41a8:	000042f4 	movhi	zero,267
    41ac:	000042f4 	movhi	zero,267
    41b0:	000042f4 	movhi	zero,267
    41b4:	000042f4 	movhi	zero,267
    41b8:	00004ed0 	cmplti	zero,zero,315
    41bc:	000050e0 	cmpeqi	zero,zero,323
    41c0:	000042f4 	movhi	zero,267
    41c4:	00004ee8 	cmpgeui	zero,zero,315
    41c8:	0000517c 	xorhi	zero,zero,325
    41cc:	000042f4 	movhi	zero,267
    41d0:	00005168 	cmpgeui	zero,zero,325
    41d4:	00005130 	cmpltui	zero,zero,324
    41d8:	00005130 	cmpltui	zero,zero,324
    41dc:	00005130 	cmpltui	zero,zero,324
    41e0:	00005130 	cmpltui	zero,zero,324
    41e4:	00005130 	cmpltui	zero,zero,324
    41e8:	00005130 	cmpltui	zero,zero,324
    41ec:	00005130 	cmpltui	zero,zero,324
    41f0:	00005130 	cmpltui	zero,zero,324
    41f4:	00005130 	cmpltui	zero,zero,324
    41f8:	000042f4 	movhi	zero,267
    41fc:	000042f4 	movhi	zero,267
    4200:	000042f4 	movhi	zero,267
    4204:	000042f4 	movhi	zero,267
    4208:	000042f4 	movhi	zero,267
    420c:	000042f4 	movhi	zero,267
    4210:	000042f4 	movhi	zero,267
    4214:	000042f4 	movhi	zero,267
    4218:	000042f4 	movhi	zero,267
    421c:	000042f4 	movhi	zero,267
    4220:	0000494c 	andi	zero,zero,293
    4224:	00004fb8 	rdprs	zero,zero,318
    4228:	000042f4 	movhi	zero,267
    422c:	00004fb8 	rdprs	zero,zero,318
    4230:	000042f4 	movhi	zero,267
    4234:	000042f4 	movhi	zero,267
    4238:	000042f4 	movhi	zero,267
    423c:	000042f4 	movhi	zero,267
    4240:	0000511c 	xori	zero,zero,324
    4244:	000042f4 	movhi	zero,267
    4248:	000042f4 	movhi	zero,267
    424c:	00004a00 	call	4a0 <kiss_fft_alloc_twiddles+0x6c>
    4250:	000042f4 	movhi	zero,267
    4254:	000042f4 	movhi	zero,267
    4258:	000042f4 	movhi	zero,267
    425c:	000042f4 	movhi	zero,267
    4260:	000042f4 	movhi	zero,267
    4264:	00004a4c 	andi	zero,zero,297
    4268:	000042f4 	movhi	zero,267
    426c:	000042f4 	movhi	zero,267
    4270:	0000506c 	andhi	zero,zero,321
    4274:	000042f4 	movhi	zero,267
    4278:	000042f4 	movhi	zero,267
    427c:	000042f4 	movhi	zero,267
    4280:	000042f4 	movhi	zero,267
    4284:	000042f4 	movhi	zero,267
    4288:	000042f4 	movhi	zero,267
    428c:	000042f4 	movhi	zero,267
    4290:	000042f4 	movhi	zero,267
    4294:	000042f4 	movhi	zero,267
    4298:	000042f4 	movhi	zero,267
    429c:	00005040 	call	504 <kiss_fft_alloc>
    42a0:	00004958 	cmpnei	zero,zero,293
    42a4:	00004fb8 	rdprs	zero,zero,318
    42a8:	00004fb8 	rdprs	zero,zero,318
    42ac:	00004fb8 	rdprs	zero,zero,318
    42b0:	00004fa4 	muli	zero,zero,318
    42b4:	00004958 	cmpnei	zero,zero,293
    42b8:	000042f4 	movhi	zero,267
    42bc:	000042f4 	movhi	zero,267
    42c0:	00004f2c 	andhi	zero,zero,316
    42c4:	000042f4 	movhi	zero,267
    42c8:	00004efc 	xorhi	zero,zero,315
    42cc:	00004a0c 	andi	zero,zero,296
    42d0:	00004f5c 	xori	zero,zero,317
    42d4:	00004f48 	cmpgei	zero,zero,317
    42d8:	000042f4 	movhi	zero,267
    42dc:	000051d8 	cmpnei	zero,zero,327
    42e0:	000042f4 	movhi	zero,267
    42e4:	00004a58 	cmpnei	zero,zero,297
    42e8:	000042f4 	movhi	zero,267
    42ec:	000042f4 	movhi	zero,267
    42f0:	000050d0 	cmplti	zero,zero,323
    42f4:	d9014d17 	ldw	r4,1332(sp)
    42f8:	2000ce26 	beq	r4,zero,4634 <___vfprintf_internal_r+0x6d4>
    42fc:	01400044 	movi	r5,1
    4300:	d9800f04 	addi	r6,sp,60
    4304:	d9c14015 	stw	r7,1280(sp)
    4308:	d9414515 	stw	r5,1300(sp)
    430c:	d9814115 	stw	r6,1284(sp)
    4310:	280f883a 	mov	r7,r5
    4314:	d9000f05 	stb	r4,60(sp)
    4318:	d8000405 	stb	zero,16(sp)
    431c:	d8014615 	stw	zero,1304(sp)
    4320:	d8c14c17 	ldw	r3,1328(sp)
    4324:	1880008c 	andi	r2,r3,2
    4328:	1005003a 	cmpeq	r2,r2,zero
    432c:	d8815015 	stw	r2,1344(sp)
    4330:	1000031e 	bne	r2,zero,4340 <___vfprintf_internal_r+0x3e0>
    4334:	d9014517 	ldw	r4,1300(sp)
    4338:	21000084 	addi	r4,r4,2
    433c:	d9014515 	stw	r4,1300(sp)
    4340:	d9414c17 	ldw	r5,1328(sp)
    4344:	2940210c 	andi	r5,r5,132
    4348:	d9414e15 	stw	r5,1336(sp)
    434c:	28002d1e 	bne	r5,zero,4404 <___vfprintf_internal_r+0x4a4>
    4350:	d9814a17 	ldw	r6,1320(sp)
    4354:	d8814517 	ldw	r2,1300(sp)
    4358:	30a1c83a 	sub	r16,r6,r2
    435c:	0400290e 	bge	zero,r16,4404 <___vfprintf_internal_r+0x4a4>
    4360:	00800404 	movi	r2,16
    4364:	1404580e 	bge	r2,r16,54c8 <___vfprintf_internal_r+0x1568>
    4368:	dc800e17 	ldw	r18,56(sp)
    436c:	dc400d17 	ldw	r17,52(sp)
    4370:	1027883a 	mov	r19,r2
    4374:	07000074 	movhi	fp,1
    4378:	e73ac284 	addi	fp,fp,-5366
    437c:	050001c4 	movi	r20,7
    4380:	00000306 	br	4390 <___vfprintf_internal_r+0x430>
    4384:	843ffc04 	addi	r16,r16,-16
    4388:	ad400204 	addi	r21,r21,8
    438c:	9c00130e 	bge	r19,r16,43dc <___vfprintf_internal_r+0x47c>
    4390:	94800404 	addi	r18,r18,16
    4394:	8c400044 	addi	r17,r17,1
    4398:	af000015 	stw	fp,0(r21)
    439c:	acc00115 	stw	r19,4(r21)
    43a0:	dc800e15 	stw	r18,56(sp)
    43a4:	dc400d15 	stw	r17,52(sp)
    43a8:	a47ff60e 	bge	r20,r17,4384 <___vfprintf_internal_r+0x424>
    43ac:	d9014f17 	ldw	r4,1340(sp)
    43b0:	b00b883a 	mov	r5,r22
    43b4:	d9800c04 	addi	r6,sp,48
    43b8:	d9c15115 	stw	r7,1348(sp)
    43bc:	0003f080 	call	3f08 <__sprint_r>
    43c0:	d9c15117 	ldw	r7,1348(sp)
    43c4:	10009e1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    43c8:	843ffc04 	addi	r16,r16,-16
    43cc:	dc800e17 	ldw	r18,56(sp)
    43d0:	dc400d17 	ldw	r17,52(sp)
    43d4:	dd401904 	addi	r21,sp,100
    43d8:	9c3fed16 	blt	r19,r16,4390 <___vfprintf_internal_r+0x430>
    43dc:	9425883a 	add	r18,r18,r16
    43e0:	8c400044 	addi	r17,r17,1
    43e4:	008001c4 	movi	r2,7
    43e8:	af000015 	stw	fp,0(r21)
    43ec:	ac000115 	stw	r16,4(r21)
    43f0:	dc800e15 	stw	r18,56(sp)
    43f4:	dc400d15 	stw	r17,52(sp)
    43f8:	1441f516 	blt	r2,r17,4bd0 <___vfprintf_internal_r+0xc70>
    43fc:	ad400204 	addi	r21,r21,8
    4400:	00000206 	br	440c <___vfprintf_internal_r+0x4ac>
    4404:	dc800e17 	ldw	r18,56(sp)
    4408:	dc400d17 	ldw	r17,52(sp)
    440c:	d8800407 	ldb	r2,16(sp)
    4410:	10000b26 	beq	r2,zero,4440 <___vfprintf_internal_r+0x4e0>
    4414:	00800044 	movi	r2,1
    4418:	94800044 	addi	r18,r18,1
    441c:	8c400044 	addi	r17,r17,1
    4420:	a8800115 	stw	r2,4(r21)
    4424:	d8c00404 	addi	r3,sp,16
    4428:	008001c4 	movi	r2,7
    442c:	a8c00015 	stw	r3,0(r21)
    4430:	dc800e15 	stw	r18,56(sp)
    4434:	dc400d15 	stw	r17,52(sp)
    4438:	1441da16 	blt	r2,r17,4ba4 <___vfprintf_internal_r+0xc44>
    443c:	ad400204 	addi	r21,r21,8
    4440:	d9015017 	ldw	r4,1344(sp)
    4444:	20000b1e 	bne	r4,zero,4474 <___vfprintf_internal_r+0x514>
    4448:	d8800444 	addi	r2,sp,17
    444c:	94800084 	addi	r18,r18,2
    4450:	8c400044 	addi	r17,r17,1
    4454:	a8800015 	stw	r2,0(r21)
    4458:	00c00084 	movi	r3,2
    445c:	008001c4 	movi	r2,7
    4460:	a8c00115 	stw	r3,4(r21)
    4464:	dc800e15 	stw	r18,56(sp)
    4468:	dc400d15 	stw	r17,52(sp)
    446c:	1441c216 	blt	r2,r17,4b78 <___vfprintf_internal_r+0xc18>
    4470:	ad400204 	addi	r21,r21,8
    4474:	d9414e17 	ldw	r5,1336(sp)
    4478:	00802004 	movi	r2,128
    447c:	2880b126 	beq	r5,r2,4744 <___vfprintf_internal_r+0x7e4>
    4480:	d8c14617 	ldw	r3,1304(sp)
    4484:	19e1c83a 	sub	r16,r3,r7
    4488:	0400260e 	bge	zero,r16,4524 <___vfprintf_internal_r+0x5c4>
    448c:	00800404 	movi	r2,16
    4490:	1403c90e 	bge	r2,r16,53b8 <___vfprintf_internal_r+0x1458>
    4494:	1027883a 	mov	r19,r2
    4498:	07000074 	movhi	fp,1
    449c:	e73abe84 	addi	fp,fp,-5382
    44a0:	050001c4 	movi	r20,7
    44a4:	00000306 	br	44b4 <___vfprintf_internal_r+0x554>
    44a8:	843ffc04 	addi	r16,r16,-16
    44ac:	ad400204 	addi	r21,r21,8
    44b0:	9c00130e 	bge	r19,r16,4500 <___vfprintf_internal_r+0x5a0>
    44b4:	94800404 	addi	r18,r18,16
    44b8:	8c400044 	addi	r17,r17,1
    44bc:	af000015 	stw	fp,0(r21)
    44c0:	acc00115 	stw	r19,4(r21)
    44c4:	dc800e15 	stw	r18,56(sp)
    44c8:	dc400d15 	stw	r17,52(sp)
    44cc:	a47ff60e 	bge	r20,r17,44a8 <___vfprintf_internal_r+0x548>
    44d0:	d9014f17 	ldw	r4,1340(sp)
    44d4:	b00b883a 	mov	r5,r22
    44d8:	d9800c04 	addi	r6,sp,48
    44dc:	d9c15115 	stw	r7,1348(sp)
    44e0:	0003f080 	call	3f08 <__sprint_r>
    44e4:	d9c15117 	ldw	r7,1348(sp)
    44e8:	1000551e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    44ec:	843ffc04 	addi	r16,r16,-16
    44f0:	dc800e17 	ldw	r18,56(sp)
    44f4:	dc400d17 	ldw	r17,52(sp)
    44f8:	dd401904 	addi	r21,sp,100
    44fc:	9c3fed16 	blt	r19,r16,44b4 <___vfprintf_internal_r+0x554>
    4500:	9425883a 	add	r18,r18,r16
    4504:	8c400044 	addi	r17,r17,1
    4508:	008001c4 	movi	r2,7
    450c:	af000015 	stw	fp,0(r21)
    4510:	ac000115 	stw	r16,4(r21)
    4514:	dc800e15 	stw	r18,56(sp)
    4518:	dc400d15 	stw	r17,52(sp)
    451c:	14418216 	blt	r2,r17,4b28 <___vfprintf_internal_r+0xbc8>
    4520:	ad400204 	addi	r21,r21,8
    4524:	d9014c17 	ldw	r4,1328(sp)
    4528:	2080400c 	andi	r2,r4,256
    452c:	10004a1e 	bne	r2,zero,4658 <___vfprintf_internal_r+0x6f8>
    4530:	d9414117 	ldw	r5,1284(sp)
    4534:	91e5883a 	add	r18,r18,r7
    4538:	8c400044 	addi	r17,r17,1
    453c:	008001c4 	movi	r2,7
    4540:	a9400015 	stw	r5,0(r21)
    4544:	a9c00115 	stw	r7,4(r21)
    4548:	dc800e15 	stw	r18,56(sp)
    454c:	dc400d15 	stw	r17,52(sp)
    4550:	14416716 	blt	r2,r17,4af0 <___vfprintf_internal_r+0xb90>
    4554:	a8c00204 	addi	r3,r21,8
    4558:	d9814c17 	ldw	r6,1328(sp)
    455c:	3080010c 	andi	r2,r6,4
    4560:	10002826 	beq	r2,zero,4604 <___vfprintf_internal_r+0x6a4>
    4564:	d8814a17 	ldw	r2,1320(sp)
    4568:	d9014517 	ldw	r4,1300(sp)
    456c:	1121c83a 	sub	r16,r2,r4
    4570:	0400240e 	bge	zero,r16,4604 <___vfprintf_internal_r+0x6a4>
    4574:	00800404 	movi	r2,16
    4578:	14044f0e 	bge	r2,r16,56b8 <___vfprintf_internal_r+0x1758>
    457c:	dc400d17 	ldw	r17,52(sp)
    4580:	1027883a 	mov	r19,r2
    4584:	07000074 	movhi	fp,1
    4588:	e73ac284 	addi	fp,fp,-5366
    458c:	050001c4 	movi	r20,7
    4590:	00000306 	br	45a0 <___vfprintf_internal_r+0x640>
    4594:	843ffc04 	addi	r16,r16,-16
    4598:	18c00204 	addi	r3,r3,8
    459c:	9c00110e 	bge	r19,r16,45e4 <___vfprintf_internal_r+0x684>
    45a0:	94800404 	addi	r18,r18,16
    45a4:	8c400044 	addi	r17,r17,1
    45a8:	1f000015 	stw	fp,0(r3)
    45ac:	1cc00115 	stw	r19,4(r3)
    45b0:	dc800e15 	stw	r18,56(sp)
    45b4:	dc400d15 	stw	r17,52(sp)
    45b8:	a47ff60e 	bge	r20,r17,4594 <___vfprintf_internal_r+0x634>
    45bc:	d9014f17 	ldw	r4,1340(sp)
    45c0:	b00b883a 	mov	r5,r22
    45c4:	d9800c04 	addi	r6,sp,48
    45c8:	0003f080 	call	3f08 <__sprint_r>
    45cc:	10001c1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    45d0:	843ffc04 	addi	r16,r16,-16
    45d4:	dc800e17 	ldw	r18,56(sp)
    45d8:	dc400d17 	ldw	r17,52(sp)
    45dc:	d8c01904 	addi	r3,sp,100
    45e0:	9c3fef16 	blt	r19,r16,45a0 <___vfprintf_internal_r+0x640>
    45e4:	9425883a 	add	r18,r18,r16
    45e8:	8c400044 	addi	r17,r17,1
    45ec:	008001c4 	movi	r2,7
    45f0:	1f000015 	stw	fp,0(r3)
    45f4:	1c000115 	stw	r16,4(r3)
    45f8:	dc800e15 	stw	r18,56(sp)
    45fc:	dc400d15 	stw	r17,52(sp)
    4600:	1440cb16 	blt	r2,r17,4930 <___vfprintf_internal_r+0x9d0>
    4604:	d8814a17 	ldw	r2,1320(sp)
    4608:	d9414517 	ldw	r5,1300(sp)
    460c:	1140010e 	bge	r2,r5,4614 <___vfprintf_internal_r+0x6b4>
    4610:	2805883a 	mov	r2,r5
    4614:	d9814b17 	ldw	r6,1324(sp)
    4618:	308d883a 	add	r6,r6,r2
    461c:	d9814b15 	stw	r6,1324(sp)
    4620:	90013b1e 	bne	r18,zero,4b10 <___vfprintf_internal_r+0xbb0>
    4624:	d9c14017 	ldw	r7,1280(sp)
    4628:	dd401904 	addi	r21,sp,100
    462c:	d8000d15 	stw	zero,52(sp)
    4630:	003ea706 	br	40d0 <___vfprintf_internal_r+0x170>
    4634:	d8800e17 	ldw	r2,56(sp)
    4638:	10053f1e 	bne	r2,zero,5b38 <___vfprintf_internal_r+0x1bd8>
    463c:	d8000d15 	stw	zero,52(sp)
    4640:	b080030b 	ldhu	r2,12(r22)
    4644:	1080100c 	andi	r2,r2,64
    4648:	103e8726 	beq	r2,zero,4068 <___vfprintf_internal_r+0x108>
    464c:	00bfffc4 	movi	r2,-1
    4650:	d8814b15 	stw	r2,1324(sp)
    4654:	003e8406 	br	4068 <___vfprintf_internal_r+0x108>
    4658:	d9814d17 	ldw	r6,1332(sp)
    465c:	00801944 	movi	r2,101
    4660:	11806e16 	blt	r2,r6,481c <___vfprintf_internal_r+0x8bc>
    4664:	d9414717 	ldw	r5,1308(sp)
    4668:	00c00044 	movi	r3,1
    466c:	1943430e 	bge	r3,r5,537c <___vfprintf_internal_r+0x141c>
    4670:	d8814117 	ldw	r2,1284(sp)
    4674:	94800044 	addi	r18,r18,1
    4678:	8c400044 	addi	r17,r17,1
    467c:	a8800015 	stw	r2,0(r21)
    4680:	008001c4 	movi	r2,7
    4684:	a8c00115 	stw	r3,4(r21)
    4688:	dc800e15 	stw	r18,56(sp)
    468c:	dc400d15 	stw	r17,52(sp)
    4690:	1441ca16 	blt	r2,r17,4dbc <___vfprintf_internal_r+0xe5c>
    4694:	a8c00204 	addi	r3,r21,8
    4698:	d9014917 	ldw	r4,1316(sp)
    469c:	00800044 	movi	r2,1
    46a0:	94800044 	addi	r18,r18,1
    46a4:	8c400044 	addi	r17,r17,1
    46a8:	18800115 	stw	r2,4(r3)
    46ac:	008001c4 	movi	r2,7
    46b0:	19000015 	stw	r4,0(r3)
    46b4:	dc800e15 	stw	r18,56(sp)
    46b8:	dc400d15 	stw	r17,52(sp)
    46bc:	1441b616 	blt	r2,r17,4d98 <___vfprintf_internal_r+0xe38>
    46c0:	1cc00204 	addi	r19,r3,8
    46c4:	d9014217 	ldw	r4,1288(sp)
    46c8:	d9414317 	ldw	r5,1292(sp)
    46cc:	000d883a 	mov	r6,zero
    46d0:	000f883a 	mov	r7,zero
    46d4:	000b4100 	call	b410 <__nedf2>
    46d8:	10017426 	beq	r2,zero,4cac <___vfprintf_internal_r+0xd4c>
    46dc:	d9414717 	ldw	r5,1308(sp)
    46e0:	d9814117 	ldw	r6,1284(sp)
    46e4:	8c400044 	addi	r17,r17,1
    46e8:	2c85883a 	add	r2,r5,r18
    46ec:	14bfffc4 	addi	r18,r2,-1
    46f0:	28bfffc4 	addi	r2,r5,-1
    46f4:	30c00044 	addi	r3,r6,1
    46f8:	98800115 	stw	r2,4(r19)
    46fc:	008001c4 	movi	r2,7
    4700:	98c00015 	stw	r3,0(r19)
    4704:	dc800e15 	stw	r18,56(sp)
    4708:	dc400d15 	stw	r17,52(sp)
    470c:	14418e16 	blt	r2,r17,4d48 <___vfprintf_internal_r+0xde8>
    4710:	9cc00204 	addi	r19,r19,8
    4714:	d9414817 	ldw	r5,1312(sp)
    4718:	d8800804 	addi	r2,sp,32
    471c:	8c400044 	addi	r17,r17,1
    4720:	9165883a 	add	r18,r18,r5
    4724:	98800015 	stw	r2,0(r19)
    4728:	008001c4 	movi	r2,7
    472c:	99400115 	stw	r5,4(r19)
    4730:	dc800e15 	stw	r18,56(sp)
    4734:	dc400d15 	stw	r17,52(sp)
    4738:	1440ed16 	blt	r2,r17,4af0 <___vfprintf_internal_r+0xb90>
    473c:	98c00204 	addi	r3,r19,8
    4740:	003f8506 	br	4558 <___vfprintf_internal_r+0x5f8>
    4744:	d9814a17 	ldw	r6,1320(sp)
    4748:	d8814517 	ldw	r2,1300(sp)
    474c:	30a1c83a 	sub	r16,r6,r2
    4750:	043f4b0e 	bge	zero,r16,4480 <___vfprintf_internal_r+0x520>
    4754:	00800404 	movi	r2,16
    4758:	1404340e 	bge	r2,r16,582c <___vfprintf_internal_r+0x18cc>
    475c:	1027883a 	mov	r19,r2
    4760:	07000074 	movhi	fp,1
    4764:	e73abe84 	addi	fp,fp,-5382
    4768:	050001c4 	movi	r20,7
    476c:	00000306 	br	477c <___vfprintf_internal_r+0x81c>
    4770:	843ffc04 	addi	r16,r16,-16
    4774:	ad400204 	addi	r21,r21,8
    4778:	9c00130e 	bge	r19,r16,47c8 <___vfprintf_internal_r+0x868>
    477c:	94800404 	addi	r18,r18,16
    4780:	8c400044 	addi	r17,r17,1
    4784:	af000015 	stw	fp,0(r21)
    4788:	acc00115 	stw	r19,4(r21)
    478c:	dc800e15 	stw	r18,56(sp)
    4790:	dc400d15 	stw	r17,52(sp)
    4794:	a47ff60e 	bge	r20,r17,4770 <___vfprintf_internal_r+0x810>
    4798:	d9014f17 	ldw	r4,1340(sp)
    479c:	b00b883a 	mov	r5,r22
    47a0:	d9800c04 	addi	r6,sp,48
    47a4:	d9c15115 	stw	r7,1348(sp)
    47a8:	0003f080 	call	3f08 <__sprint_r>
    47ac:	d9c15117 	ldw	r7,1348(sp)
    47b0:	103fa31e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    47b4:	843ffc04 	addi	r16,r16,-16
    47b8:	dc800e17 	ldw	r18,56(sp)
    47bc:	dc400d17 	ldw	r17,52(sp)
    47c0:	dd401904 	addi	r21,sp,100
    47c4:	9c3fed16 	blt	r19,r16,477c <___vfprintf_internal_r+0x81c>
    47c8:	9425883a 	add	r18,r18,r16
    47cc:	8c400044 	addi	r17,r17,1
    47d0:	008001c4 	movi	r2,7
    47d4:	af000015 	stw	fp,0(r21)
    47d8:	ac000115 	stw	r16,4(r21)
    47dc:	dc800e15 	stw	r18,56(sp)
    47e0:	dc400d15 	stw	r17,52(sp)
    47e4:	14416116 	blt	r2,r17,4d6c <___vfprintf_internal_r+0xe0c>
    47e8:	ad400204 	addi	r21,r21,8
    47ec:	003f2406 	br	4480 <___vfprintf_internal_r+0x520>
    47f0:	d9014f17 	ldw	r4,1340(sp)
    47f4:	00079d00 	call	79d0 <__sinit>
    47f8:	d9c15117 	ldw	r7,1348(sp)
    47fc:	003def06 	br	3fbc <___vfprintf_internal_r+0x5c>
    4800:	d9014f17 	ldw	r4,1340(sp)
    4804:	b00b883a 	mov	r5,r22
    4808:	d9c15115 	stw	r7,1348(sp)
    480c:	0005e300 	call	5e30 <__swsetup_r>
    4810:	d9c15117 	ldw	r7,1348(sp)
    4814:	103dee26 	beq	r2,zero,3fd0 <___vfprintf_internal_r+0x70>
    4818:	003f8c06 	br	464c <___vfprintf_internal_r+0x6ec>
    481c:	d9014217 	ldw	r4,1288(sp)
    4820:	d9414317 	ldw	r5,1292(sp)
    4824:	000d883a 	mov	r6,zero
    4828:	000f883a 	mov	r7,zero
    482c:	000b3880 	call	b388 <__eqdf2>
    4830:	1000f21e 	bne	r2,zero,4bfc <___vfprintf_internal_r+0xc9c>
    4834:	00800074 	movhi	r2,1
    4838:	10babe04 	addi	r2,r2,-5384
    483c:	94800044 	addi	r18,r18,1
    4840:	8c400044 	addi	r17,r17,1
    4844:	a8800015 	stw	r2,0(r21)
    4848:	00c00044 	movi	r3,1
    484c:	008001c4 	movi	r2,7
    4850:	a8c00115 	stw	r3,4(r21)
    4854:	dc800e15 	stw	r18,56(sp)
    4858:	dc400d15 	stw	r17,52(sp)
    485c:	1442fa16 	blt	r2,r17,5448 <___vfprintf_internal_r+0x14e8>
    4860:	a8c00204 	addi	r3,r21,8
    4864:	d8800517 	ldw	r2,20(sp)
    4868:	d9014717 	ldw	r4,1308(sp)
    486c:	11015c0e 	bge	r2,r4,4de0 <___vfprintf_internal_r+0xe80>
    4870:	dc400d17 	ldw	r17,52(sp)
    4874:	d9814917 	ldw	r6,1316(sp)
    4878:	00800044 	movi	r2,1
    487c:	94800044 	addi	r18,r18,1
    4880:	8c400044 	addi	r17,r17,1
    4884:	18800115 	stw	r2,4(r3)
    4888:	008001c4 	movi	r2,7
    488c:	19800015 	stw	r6,0(r3)
    4890:	dc800e15 	stw	r18,56(sp)
    4894:	dc400d15 	stw	r17,52(sp)
    4898:	14431016 	blt	r2,r17,54dc <___vfprintf_internal_r+0x157c>
    489c:	18c00204 	addi	r3,r3,8
    48a0:	d8814717 	ldw	r2,1308(sp)
    48a4:	143fffc4 	addi	r16,r2,-1
    48a8:	043f2b0e 	bge	zero,r16,4558 <___vfprintf_internal_r+0x5f8>
    48ac:	00800404 	movi	r2,16
    48b0:	1402a20e 	bge	r2,r16,533c <___vfprintf_internal_r+0x13dc>
    48b4:	dc400d17 	ldw	r17,52(sp)
    48b8:	1027883a 	mov	r19,r2
    48bc:	07000074 	movhi	fp,1
    48c0:	e73abe84 	addi	fp,fp,-5382
    48c4:	050001c4 	movi	r20,7
    48c8:	00000306 	br	48d8 <___vfprintf_internal_r+0x978>
    48cc:	18c00204 	addi	r3,r3,8
    48d0:	843ffc04 	addi	r16,r16,-16
    48d4:	9c029c0e 	bge	r19,r16,5348 <___vfprintf_internal_r+0x13e8>
    48d8:	94800404 	addi	r18,r18,16
    48dc:	8c400044 	addi	r17,r17,1
    48e0:	1f000015 	stw	fp,0(r3)
    48e4:	1cc00115 	stw	r19,4(r3)
    48e8:	dc800e15 	stw	r18,56(sp)
    48ec:	dc400d15 	stw	r17,52(sp)
    48f0:	a47ff60e 	bge	r20,r17,48cc <___vfprintf_internal_r+0x96c>
    48f4:	d9014f17 	ldw	r4,1340(sp)
    48f8:	b00b883a 	mov	r5,r22
    48fc:	d9800c04 	addi	r6,sp,48
    4900:	0003f080 	call	3f08 <__sprint_r>
    4904:	103f4e1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4908:	dc800e17 	ldw	r18,56(sp)
    490c:	dc400d17 	ldw	r17,52(sp)
    4910:	d8c01904 	addi	r3,sp,100
    4914:	003fee06 	br	48d0 <___vfprintf_internal_r+0x970>
    4918:	d8802c0b 	ldhu	r2,176(sp)
    491c:	00ffffc4 	movi	r3,-1
    4920:	d8c14b15 	stw	r3,1324(sp)
    4924:	1080100c 	andi	r2,r2,64
    4928:	103dcc1e 	bne	r2,zero,405c <___vfprintf_internal_r+0xfc>
    492c:	003dce06 	br	4068 <___vfprintf_internal_r+0x108>
    4930:	d9014f17 	ldw	r4,1340(sp)
    4934:	b00b883a 	mov	r5,r22
    4938:	d9800c04 	addi	r6,sp,48
    493c:	0003f080 	call	3f08 <__sprint_r>
    4940:	103f3f1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4944:	dc800e17 	ldw	r18,56(sp)
    4948:	003f2e06 	br	4604 <___vfprintf_internal_r+0x6a4>
    494c:	d9414c17 	ldw	r5,1328(sp)
    4950:	29400414 	ori	r5,r5,16
    4954:	d9414c15 	stw	r5,1328(sp)
    4958:	d9814c17 	ldw	r6,1328(sp)
    495c:	3080080c 	andi	r2,r6,32
    4960:	10014f1e 	bne	r2,zero,4ea0 <___vfprintf_internal_r+0xf40>
    4964:	d8c14c17 	ldw	r3,1328(sp)
    4968:	1880040c 	andi	r2,r3,16
    496c:	1002ea1e 	bne	r2,zero,5518 <___vfprintf_internal_r+0x15b8>
    4970:	d9014c17 	ldw	r4,1328(sp)
    4974:	2080100c 	andi	r2,r4,64
    4978:	1002e726 	beq	r2,zero,5518 <___vfprintf_internal_r+0x15b8>
    497c:	3880000f 	ldh	r2,0(r7)
    4980:	39c00104 	addi	r7,r7,4
    4984:	d9c14015 	stw	r7,1280(sp)
    4988:	1023d7fa 	srai	r17,r2,31
    498c:	1021883a 	mov	r16,r2
    4990:	88037216 	blt	r17,zero,575c <___vfprintf_internal_r+0x17fc>
    4994:	01000044 	movi	r4,1
    4998:	98000416 	blt	r19,zero,49ac <___vfprintf_internal_r+0xa4c>
    499c:	d8c14c17 	ldw	r3,1328(sp)
    49a0:	00bfdfc4 	movi	r2,-129
    49a4:	1886703a 	and	r3,r3,r2
    49a8:	d8c14c15 	stw	r3,1328(sp)
    49ac:	8444b03a 	or	r2,r16,r17
    49b0:	1002261e 	bne	r2,zero,524c <___vfprintf_internal_r+0x12ec>
    49b4:	9802251e 	bne	r19,zero,524c <___vfprintf_internal_r+0x12ec>
    49b8:	20803fcc 	andi	r2,r4,255
    49bc:	10029b26 	beq	r2,zero,542c <___vfprintf_internal_r+0x14cc>
    49c0:	d8c01904 	addi	r3,sp,100
    49c4:	dd000f04 	addi	r20,sp,60
    49c8:	d8c14115 	stw	r3,1284(sp)
    49cc:	d8c14117 	ldw	r3,1284(sp)
    49d0:	dcc14515 	stw	r19,1300(sp)
    49d4:	a0c5c83a 	sub	r2,r20,r3
    49d8:	11c00a04 	addi	r7,r2,40
    49dc:	99c0010e 	bge	r19,r7,49e4 <___vfprintf_internal_r+0xa84>
    49e0:	d9c14515 	stw	r7,1300(sp)
    49e4:	dcc14615 	stw	r19,1304(sp)
    49e8:	d8800407 	ldb	r2,16(sp)
    49ec:	103e4c26 	beq	r2,zero,4320 <___vfprintf_internal_r+0x3c0>
    49f0:	d8814517 	ldw	r2,1300(sp)
    49f4:	10800044 	addi	r2,r2,1
    49f8:	d8814515 	stw	r2,1300(sp)
    49fc:	003e4806 	br	4320 <___vfprintf_internal_r+0x3c0>
    4a00:	d9814c17 	ldw	r6,1328(sp)
    4a04:	31800414 	ori	r6,r6,16
    4a08:	d9814c15 	stw	r6,1328(sp)
    4a0c:	d8c14c17 	ldw	r3,1328(sp)
    4a10:	1880080c 	andi	r2,r3,32
    4a14:	1001271e 	bne	r2,zero,4eb4 <___vfprintf_internal_r+0xf54>
    4a18:	d9414c17 	ldw	r5,1328(sp)
    4a1c:	2880040c 	andi	r2,r5,16
    4a20:	1002b61e 	bne	r2,zero,54fc <___vfprintf_internal_r+0x159c>
    4a24:	d9814c17 	ldw	r6,1328(sp)
    4a28:	3080100c 	andi	r2,r6,64
    4a2c:	1002b326 	beq	r2,zero,54fc <___vfprintf_internal_r+0x159c>
    4a30:	3c00000b 	ldhu	r16,0(r7)
    4a34:	0009883a 	mov	r4,zero
    4a38:	39c00104 	addi	r7,r7,4
    4a3c:	0023883a 	mov	r17,zero
    4a40:	d9c14015 	stw	r7,1280(sp)
    4a44:	d8000405 	stb	zero,16(sp)
    4a48:	003fd306 	br	4998 <___vfprintf_internal_r+0xa38>
    4a4c:	d9014c17 	ldw	r4,1328(sp)
    4a50:	21000414 	ori	r4,r4,16
    4a54:	d9014c15 	stw	r4,1328(sp)
    4a58:	d9414c17 	ldw	r5,1328(sp)
    4a5c:	2880080c 	andi	r2,r5,32
    4a60:	1001081e 	bne	r2,zero,4e84 <___vfprintf_internal_r+0xf24>
    4a64:	d8c14c17 	ldw	r3,1328(sp)
    4a68:	1880040c 	andi	r2,r3,16
    4a6c:	1002b01e 	bne	r2,zero,5530 <___vfprintf_internal_r+0x15d0>
    4a70:	d9014c17 	ldw	r4,1328(sp)
    4a74:	2080100c 	andi	r2,r4,64
    4a78:	1002ad26 	beq	r2,zero,5530 <___vfprintf_internal_r+0x15d0>
    4a7c:	3c00000b 	ldhu	r16,0(r7)
    4a80:	01000044 	movi	r4,1
    4a84:	39c00104 	addi	r7,r7,4
    4a88:	0023883a 	mov	r17,zero
    4a8c:	d9c14015 	stw	r7,1280(sp)
    4a90:	d8000405 	stb	zero,16(sp)
    4a94:	003fc006 	br	4998 <___vfprintf_internal_r+0xa38>
    4a98:	d9014f17 	ldw	r4,1340(sp)
    4a9c:	b00b883a 	mov	r5,r22
    4aa0:	d9800c04 	addi	r6,sp,48
    4aa4:	0003f080 	call	3f08 <__sprint_r>
    4aa8:	103ee51e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4aac:	dc800e17 	ldw	r18,56(sp)
    4ab0:	d8c01904 	addi	r3,sp,100
    4ab4:	d9814c17 	ldw	r6,1328(sp)
    4ab8:	3080004c 	andi	r2,r6,1
    4abc:	1005003a 	cmpeq	r2,r2,zero
    4ac0:	103ea51e 	bne	r2,zero,4558 <___vfprintf_internal_r+0x5f8>
    4ac4:	00800044 	movi	r2,1
    4ac8:	dc400d17 	ldw	r17,52(sp)
    4acc:	18800115 	stw	r2,4(r3)
    4ad0:	d8814917 	ldw	r2,1316(sp)
    4ad4:	94800044 	addi	r18,r18,1
    4ad8:	8c400044 	addi	r17,r17,1
    4adc:	18800015 	stw	r2,0(r3)
    4ae0:	008001c4 	movi	r2,7
    4ae4:	dc800e15 	stw	r18,56(sp)
    4ae8:	dc400d15 	stw	r17,52(sp)
    4aec:	14421e0e 	bge	r2,r17,5368 <___vfprintf_internal_r+0x1408>
    4af0:	d9014f17 	ldw	r4,1340(sp)
    4af4:	b00b883a 	mov	r5,r22
    4af8:	d9800c04 	addi	r6,sp,48
    4afc:	0003f080 	call	3f08 <__sprint_r>
    4b00:	103ecf1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4b04:	dc800e17 	ldw	r18,56(sp)
    4b08:	d8c01904 	addi	r3,sp,100
    4b0c:	003e9206 	br	4558 <___vfprintf_internal_r+0x5f8>
    4b10:	d9014f17 	ldw	r4,1340(sp)
    4b14:	b00b883a 	mov	r5,r22
    4b18:	d9800c04 	addi	r6,sp,48
    4b1c:	0003f080 	call	3f08 <__sprint_r>
    4b20:	103ec026 	beq	r2,zero,4624 <___vfprintf_internal_r+0x6c4>
    4b24:	003ec606 	br	4640 <___vfprintf_internal_r+0x6e0>
    4b28:	d9014f17 	ldw	r4,1340(sp)
    4b2c:	b00b883a 	mov	r5,r22
    4b30:	d9800c04 	addi	r6,sp,48
    4b34:	d9c15115 	stw	r7,1348(sp)
    4b38:	0003f080 	call	3f08 <__sprint_r>
    4b3c:	d9c15117 	ldw	r7,1348(sp)
    4b40:	103ebf1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4b44:	dc800e17 	ldw	r18,56(sp)
    4b48:	dc400d17 	ldw	r17,52(sp)
    4b4c:	dd401904 	addi	r21,sp,100
    4b50:	003e7406 	br	4524 <___vfprintf_internal_r+0x5c4>
    4b54:	d9014f17 	ldw	r4,1340(sp)
    4b58:	b00b883a 	mov	r5,r22
    4b5c:	d9800c04 	addi	r6,sp,48
    4b60:	d9c15115 	stw	r7,1348(sp)
    4b64:	0003f080 	call	3f08 <__sprint_r>
    4b68:	d9c15117 	ldw	r7,1348(sp)
    4b6c:	103eb41e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4b70:	dd401904 	addi	r21,sp,100
    4b74:	003d6d06 	br	412c <___vfprintf_internal_r+0x1cc>
    4b78:	d9014f17 	ldw	r4,1340(sp)
    4b7c:	b00b883a 	mov	r5,r22
    4b80:	d9800c04 	addi	r6,sp,48
    4b84:	d9c15115 	stw	r7,1348(sp)
    4b88:	0003f080 	call	3f08 <__sprint_r>
    4b8c:	d9c15117 	ldw	r7,1348(sp)
    4b90:	103eab1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4b94:	dc800e17 	ldw	r18,56(sp)
    4b98:	dc400d17 	ldw	r17,52(sp)
    4b9c:	dd401904 	addi	r21,sp,100
    4ba0:	003e3406 	br	4474 <___vfprintf_internal_r+0x514>
    4ba4:	d9014f17 	ldw	r4,1340(sp)
    4ba8:	b00b883a 	mov	r5,r22
    4bac:	d9800c04 	addi	r6,sp,48
    4bb0:	d9c15115 	stw	r7,1348(sp)
    4bb4:	0003f080 	call	3f08 <__sprint_r>
    4bb8:	d9c15117 	ldw	r7,1348(sp)
    4bbc:	103ea01e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4bc0:	dc800e17 	ldw	r18,56(sp)
    4bc4:	dc400d17 	ldw	r17,52(sp)
    4bc8:	dd401904 	addi	r21,sp,100
    4bcc:	003e1c06 	br	4440 <___vfprintf_internal_r+0x4e0>
    4bd0:	d9014f17 	ldw	r4,1340(sp)
    4bd4:	b00b883a 	mov	r5,r22
    4bd8:	d9800c04 	addi	r6,sp,48
    4bdc:	d9c15115 	stw	r7,1348(sp)
    4be0:	0003f080 	call	3f08 <__sprint_r>
    4be4:	d9c15117 	ldw	r7,1348(sp)
    4be8:	103e951e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4bec:	dc800e17 	ldw	r18,56(sp)
    4bf0:	dc400d17 	ldw	r17,52(sp)
    4bf4:	dd401904 	addi	r21,sp,100
    4bf8:	003e0406 	br	440c <___vfprintf_internal_r+0x4ac>
    4bfc:	d9000517 	ldw	r4,20(sp)
    4c00:	0102520e 	bge	zero,r4,554c <___vfprintf_internal_r+0x15ec>
    4c04:	d9814717 	ldw	r6,1308(sp)
    4c08:	21807a16 	blt	r4,r6,4df4 <___vfprintf_internal_r+0xe94>
    4c0c:	d8814117 	ldw	r2,1284(sp)
    4c10:	91a5883a 	add	r18,r18,r6
    4c14:	8c400044 	addi	r17,r17,1
    4c18:	a8800015 	stw	r2,0(r21)
    4c1c:	008001c4 	movi	r2,7
    4c20:	a9800115 	stw	r6,4(r21)
    4c24:	dc800e15 	stw	r18,56(sp)
    4c28:	dc400d15 	stw	r17,52(sp)
    4c2c:	1442f616 	blt	r2,r17,5808 <___vfprintf_internal_r+0x18a8>
    4c30:	a8c00204 	addi	r3,r21,8
    4c34:	d9414717 	ldw	r5,1308(sp)
    4c38:	2161c83a 	sub	r16,r4,r5
    4c3c:	043f9d0e 	bge	zero,r16,4ab4 <___vfprintf_internal_r+0xb54>
    4c40:	00800404 	movi	r2,16
    4c44:	1402130e 	bge	r2,r16,5494 <___vfprintf_internal_r+0x1534>
    4c48:	dc400d17 	ldw	r17,52(sp)
    4c4c:	1027883a 	mov	r19,r2
    4c50:	07000074 	movhi	fp,1
    4c54:	e73abe84 	addi	fp,fp,-5382
    4c58:	050001c4 	movi	r20,7
    4c5c:	00000306 	br	4c6c <___vfprintf_internal_r+0xd0c>
    4c60:	18c00204 	addi	r3,r3,8
    4c64:	843ffc04 	addi	r16,r16,-16
    4c68:	9c020d0e 	bge	r19,r16,54a0 <___vfprintf_internal_r+0x1540>
    4c6c:	94800404 	addi	r18,r18,16
    4c70:	8c400044 	addi	r17,r17,1
    4c74:	1f000015 	stw	fp,0(r3)
    4c78:	1cc00115 	stw	r19,4(r3)
    4c7c:	dc800e15 	stw	r18,56(sp)
    4c80:	dc400d15 	stw	r17,52(sp)
    4c84:	a47ff60e 	bge	r20,r17,4c60 <___vfprintf_internal_r+0xd00>
    4c88:	d9014f17 	ldw	r4,1340(sp)
    4c8c:	b00b883a 	mov	r5,r22
    4c90:	d9800c04 	addi	r6,sp,48
    4c94:	0003f080 	call	3f08 <__sprint_r>
    4c98:	103e691e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4c9c:	dc800e17 	ldw	r18,56(sp)
    4ca0:	dc400d17 	ldw	r17,52(sp)
    4ca4:	d8c01904 	addi	r3,sp,100
    4ca8:	003fee06 	br	4c64 <___vfprintf_internal_r+0xd04>
    4cac:	d8814717 	ldw	r2,1308(sp)
    4cb0:	143fffc4 	addi	r16,r2,-1
    4cb4:	043e970e 	bge	zero,r16,4714 <___vfprintf_internal_r+0x7b4>
    4cb8:	00800404 	movi	r2,16
    4cbc:	1400180e 	bge	r2,r16,4d20 <___vfprintf_internal_r+0xdc0>
    4cc0:	1029883a 	mov	r20,r2
    4cc4:	07000074 	movhi	fp,1
    4cc8:	e73abe84 	addi	fp,fp,-5382
    4ccc:	054001c4 	movi	r21,7
    4cd0:	00000306 	br	4ce0 <___vfprintf_internal_r+0xd80>
    4cd4:	9cc00204 	addi	r19,r19,8
    4cd8:	843ffc04 	addi	r16,r16,-16
    4cdc:	a400120e 	bge	r20,r16,4d28 <___vfprintf_internal_r+0xdc8>
    4ce0:	94800404 	addi	r18,r18,16
    4ce4:	8c400044 	addi	r17,r17,1
    4ce8:	9f000015 	stw	fp,0(r19)
    4cec:	9d000115 	stw	r20,4(r19)
    4cf0:	dc800e15 	stw	r18,56(sp)
    4cf4:	dc400d15 	stw	r17,52(sp)
    4cf8:	ac7ff60e 	bge	r21,r17,4cd4 <___vfprintf_internal_r+0xd74>
    4cfc:	d9014f17 	ldw	r4,1340(sp)
    4d00:	b00b883a 	mov	r5,r22
    4d04:	d9800c04 	addi	r6,sp,48
    4d08:	0003f080 	call	3f08 <__sprint_r>
    4d0c:	103e4c1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4d10:	dc800e17 	ldw	r18,56(sp)
    4d14:	dc400d17 	ldw	r17,52(sp)
    4d18:	dcc01904 	addi	r19,sp,100
    4d1c:	003fee06 	br	4cd8 <___vfprintf_internal_r+0xd78>
    4d20:	07000074 	movhi	fp,1
    4d24:	e73abe84 	addi	fp,fp,-5382
    4d28:	9425883a 	add	r18,r18,r16
    4d2c:	8c400044 	addi	r17,r17,1
    4d30:	008001c4 	movi	r2,7
    4d34:	9f000015 	stw	fp,0(r19)
    4d38:	9c000115 	stw	r16,4(r19)
    4d3c:	dc800e15 	stw	r18,56(sp)
    4d40:	dc400d15 	stw	r17,52(sp)
    4d44:	147e720e 	bge	r2,r17,4710 <___vfprintf_internal_r+0x7b0>
    4d48:	d9014f17 	ldw	r4,1340(sp)
    4d4c:	b00b883a 	mov	r5,r22
    4d50:	d9800c04 	addi	r6,sp,48
    4d54:	0003f080 	call	3f08 <__sprint_r>
    4d58:	103e391e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4d5c:	dc800e17 	ldw	r18,56(sp)
    4d60:	dc400d17 	ldw	r17,52(sp)
    4d64:	dcc01904 	addi	r19,sp,100
    4d68:	003e6a06 	br	4714 <___vfprintf_internal_r+0x7b4>
    4d6c:	d9014f17 	ldw	r4,1340(sp)
    4d70:	b00b883a 	mov	r5,r22
    4d74:	d9800c04 	addi	r6,sp,48
    4d78:	d9c15115 	stw	r7,1348(sp)
    4d7c:	0003f080 	call	3f08 <__sprint_r>
    4d80:	d9c15117 	ldw	r7,1348(sp)
    4d84:	103e2e1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4d88:	dc800e17 	ldw	r18,56(sp)
    4d8c:	dc400d17 	ldw	r17,52(sp)
    4d90:	dd401904 	addi	r21,sp,100
    4d94:	003dba06 	br	4480 <___vfprintf_internal_r+0x520>
    4d98:	d9014f17 	ldw	r4,1340(sp)
    4d9c:	b00b883a 	mov	r5,r22
    4da0:	d9800c04 	addi	r6,sp,48
    4da4:	0003f080 	call	3f08 <__sprint_r>
    4da8:	103e251e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4dac:	dc800e17 	ldw	r18,56(sp)
    4db0:	dc400d17 	ldw	r17,52(sp)
    4db4:	dcc01904 	addi	r19,sp,100
    4db8:	003e4206 	br	46c4 <___vfprintf_internal_r+0x764>
    4dbc:	d9014f17 	ldw	r4,1340(sp)
    4dc0:	b00b883a 	mov	r5,r22
    4dc4:	d9800c04 	addi	r6,sp,48
    4dc8:	0003f080 	call	3f08 <__sprint_r>
    4dcc:	103e1c1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    4dd0:	dc800e17 	ldw	r18,56(sp)
    4dd4:	dc400d17 	ldw	r17,52(sp)
    4dd8:	d8c01904 	addi	r3,sp,100
    4ddc:	003e2e06 	br	4698 <___vfprintf_internal_r+0x738>
    4de0:	d9414c17 	ldw	r5,1328(sp)
    4de4:	2880004c 	andi	r2,r5,1
    4de8:	1005003a 	cmpeq	r2,r2,zero
    4dec:	103dda1e 	bne	r2,zero,4558 <___vfprintf_internal_r+0x5f8>
    4df0:	003e9f06 	br	4870 <___vfprintf_internal_r+0x910>
    4df4:	d8c14117 	ldw	r3,1284(sp)
    4df8:	9125883a 	add	r18,r18,r4
    4dfc:	8c400044 	addi	r17,r17,1
    4e00:	008001c4 	movi	r2,7
    4e04:	a8c00015 	stw	r3,0(r21)
    4e08:	a9000115 	stw	r4,4(r21)
    4e0c:	dc800e15 	stw	r18,56(sp)
    4e10:	dc400d15 	stw	r17,52(sp)
    4e14:	14426616 	blt	r2,r17,57b0 <___vfprintf_internal_r+0x1850>
    4e18:	a8c00204 	addi	r3,r21,8
    4e1c:	d9414917 	ldw	r5,1316(sp)
    4e20:	00800044 	movi	r2,1
    4e24:	94800044 	addi	r18,r18,1
    4e28:	8c400044 	addi	r17,r17,1
    4e2c:	18800115 	stw	r2,4(r3)
    4e30:	008001c4 	movi	r2,7
    4e34:	19400015 	stw	r5,0(r3)
    4e38:	dc800e15 	stw	r18,56(sp)
    4e3c:	dc400d15 	stw	r17,52(sp)
    4e40:	2021883a 	mov	r16,r4
    4e44:	14425016 	blt	r2,r17,5788 <___vfprintf_internal_r+0x1828>
    4e48:	19400204 	addi	r5,r3,8
    4e4c:	d9814717 	ldw	r6,1308(sp)
    4e50:	8c400044 	addi	r17,r17,1
    4e54:	dc400d15 	stw	r17,52(sp)
    4e58:	3107c83a 	sub	r3,r6,r4
    4e5c:	d9014117 	ldw	r4,1284(sp)
    4e60:	90e5883a 	add	r18,r18,r3
    4e64:	28c00115 	stw	r3,4(r5)
    4e68:	8105883a 	add	r2,r16,r4
    4e6c:	28800015 	stw	r2,0(r5)
    4e70:	008001c4 	movi	r2,7
    4e74:	dc800e15 	stw	r18,56(sp)
    4e78:	147f1d16 	blt	r2,r17,4af0 <___vfprintf_internal_r+0xb90>
    4e7c:	28c00204 	addi	r3,r5,8
    4e80:	003db506 	br	4558 <___vfprintf_internal_r+0x5f8>
    4e84:	3c000017 	ldw	r16,0(r7)
    4e88:	3c400117 	ldw	r17,4(r7)
    4e8c:	39800204 	addi	r6,r7,8
    4e90:	01000044 	movi	r4,1
    4e94:	d9814015 	stw	r6,1280(sp)
    4e98:	d8000405 	stb	zero,16(sp)
    4e9c:	003ebe06 	br	4998 <___vfprintf_internal_r+0xa38>
    4ea0:	3c000017 	ldw	r16,0(r7)
    4ea4:	3c400117 	ldw	r17,4(r7)
    4ea8:	38800204 	addi	r2,r7,8
    4eac:	d8814015 	stw	r2,1280(sp)
    4eb0:	003eb706 	br	4990 <___vfprintf_internal_r+0xa30>
    4eb4:	3c000017 	ldw	r16,0(r7)
    4eb8:	3c400117 	ldw	r17,4(r7)
    4ebc:	39000204 	addi	r4,r7,8
    4ec0:	d9014015 	stw	r4,1280(sp)
    4ec4:	0009883a 	mov	r4,zero
    4ec8:	d8000405 	stb	zero,16(sp)
    4ecc:	003eb206 	br	4998 <___vfprintf_internal_r+0xa38>
    4ed0:	38c00017 	ldw	r3,0(r7)
    4ed4:	39c00104 	addi	r7,r7,4
    4ed8:	d8c14a15 	stw	r3,1320(sp)
    4edc:	1800d10e 	bge	r3,zero,5224 <___vfprintf_internal_r+0x12c4>
    4ee0:	00c7c83a 	sub	r3,zero,r3
    4ee4:	d8c14a15 	stw	r3,1320(sp)
    4ee8:	d9014c17 	ldw	r4,1328(sp)
    4eec:	b8c00007 	ldb	r3,0(r23)
    4ef0:	21000114 	ori	r4,r4,4
    4ef4:	d9014c15 	stw	r4,1328(sp)
    4ef8:	003c9806 	br	415c <___vfprintf_internal_r+0x1fc>
    4efc:	d9814c17 	ldw	r6,1328(sp)
    4f00:	3080080c 	andi	r2,r6,32
    4f04:	1001f026 	beq	r2,zero,56c8 <___vfprintf_internal_r+0x1768>
    4f08:	d9014b17 	ldw	r4,1324(sp)
    4f0c:	38800017 	ldw	r2,0(r7)
    4f10:	39c00104 	addi	r7,r7,4
    4f14:	d9c14015 	stw	r7,1280(sp)
    4f18:	2007d7fa 	srai	r3,r4,31
    4f1c:	d9c14017 	ldw	r7,1280(sp)
    4f20:	11000015 	stw	r4,0(r2)
    4f24:	10c00115 	stw	r3,4(r2)
    4f28:	003c6906 	br	40d0 <___vfprintf_internal_r+0x170>
    4f2c:	b8c00007 	ldb	r3,0(r23)
    4f30:	00801b04 	movi	r2,108
    4f34:	18824f26 	beq	r3,r2,5874 <___vfprintf_internal_r+0x1914>
    4f38:	d9414c17 	ldw	r5,1328(sp)
    4f3c:	29400414 	ori	r5,r5,16
    4f40:	d9414c15 	stw	r5,1328(sp)
    4f44:	003c8506 	br	415c <___vfprintf_internal_r+0x1fc>
    4f48:	d9814c17 	ldw	r6,1328(sp)
    4f4c:	b8c00007 	ldb	r3,0(r23)
    4f50:	31800814 	ori	r6,r6,32
    4f54:	d9814c15 	stw	r6,1328(sp)
    4f58:	003c8006 	br	415c <___vfprintf_internal_r+0x1fc>
    4f5c:	d8814c17 	ldw	r2,1328(sp)
    4f60:	3c000017 	ldw	r16,0(r7)
    4f64:	00c01e04 	movi	r3,120
    4f68:	10800094 	ori	r2,r2,2
    4f6c:	d8814c15 	stw	r2,1328(sp)
    4f70:	39c00104 	addi	r7,r7,4
    4f74:	01400074 	movhi	r5,1
    4f78:	297aa704 	addi	r5,r5,-5476
    4f7c:	00800c04 	movi	r2,48
    4f80:	0023883a 	mov	r17,zero
    4f84:	01000084 	movi	r4,2
    4f88:	d9c14015 	stw	r7,1280(sp)
    4f8c:	d8c14d15 	stw	r3,1332(sp)
    4f90:	d9414415 	stw	r5,1296(sp)
    4f94:	d8800445 	stb	r2,17(sp)
    4f98:	d8c00485 	stb	r3,18(sp)
    4f9c:	d8000405 	stb	zero,16(sp)
    4fa0:	003e7d06 	br	4998 <___vfprintf_internal_r+0xa38>
    4fa4:	d8814c17 	ldw	r2,1328(sp)
    4fa8:	b8c00007 	ldb	r3,0(r23)
    4fac:	10801014 	ori	r2,r2,64
    4fb0:	d8814c15 	stw	r2,1328(sp)
    4fb4:	003c6906 	br	415c <___vfprintf_internal_r+0x1fc>
    4fb8:	d9414c17 	ldw	r5,1328(sp)
    4fbc:	2880020c 	andi	r2,r5,8
    4fc0:	1001df26 	beq	r2,zero,5740 <___vfprintf_internal_r+0x17e0>
    4fc4:	39800017 	ldw	r6,0(r7)
    4fc8:	38800204 	addi	r2,r7,8
    4fcc:	d8814015 	stw	r2,1280(sp)
    4fd0:	d9814215 	stw	r6,1288(sp)
    4fd4:	39c00117 	ldw	r7,4(r7)
    4fd8:	d9c14315 	stw	r7,1292(sp)
    4fdc:	d9014217 	ldw	r4,1288(sp)
    4fe0:	d9414317 	ldw	r5,1292(sp)
    4fe4:	000a1200 	call	a120 <__isinfd>
    4fe8:	10021726 	beq	r2,zero,5848 <___vfprintf_internal_r+0x18e8>
    4fec:	d9014217 	ldw	r4,1288(sp)
    4ff0:	d9414317 	ldw	r5,1292(sp)
    4ff4:	000d883a 	mov	r6,zero
    4ff8:	000f883a 	mov	r7,zero
    4ffc:	0002c5c0 	call	2c5c <__ltdf2>
    5000:	1002ca16 	blt	r2,zero,5b2c <___vfprintf_internal_r+0x1bcc>
    5004:	d9414d17 	ldw	r5,1332(sp)
    5008:	008011c4 	movi	r2,71
    500c:	11420a16 	blt	r2,r5,5838 <___vfprintf_internal_r+0x18d8>
    5010:	01800074 	movhi	r6,1
    5014:	31baac04 	addi	r6,r6,-5456
    5018:	d9814115 	stw	r6,1284(sp)
    501c:	d9014c17 	ldw	r4,1328(sp)
    5020:	00c000c4 	movi	r3,3
    5024:	00bfdfc4 	movi	r2,-129
    5028:	2088703a 	and	r4,r4,r2
    502c:	180f883a 	mov	r7,r3
    5030:	d8c14515 	stw	r3,1300(sp)
    5034:	d9014c15 	stw	r4,1328(sp)
    5038:	d8014615 	stw	zero,1304(sp)
    503c:	003e6a06 	br	49e8 <___vfprintf_internal_r+0xa88>
    5040:	38800017 	ldw	r2,0(r7)
    5044:	00c00044 	movi	r3,1
    5048:	39c00104 	addi	r7,r7,4
    504c:	d9c14015 	stw	r7,1280(sp)
    5050:	d9000f04 	addi	r4,sp,60
    5054:	180f883a 	mov	r7,r3
    5058:	d8c14515 	stw	r3,1300(sp)
    505c:	d9014115 	stw	r4,1284(sp)
    5060:	d8800f05 	stb	r2,60(sp)
    5064:	d8000405 	stb	zero,16(sp)
    5068:	003cac06 	br	431c <___vfprintf_internal_r+0x3bc>
    506c:	01400074 	movhi	r5,1
    5070:	297ab204 	addi	r5,r5,-5432
    5074:	d9414415 	stw	r5,1296(sp)
    5078:	d9814c17 	ldw	r6,1328(sp)
    507c:	3080080c 	andi	r2,r6,32
    5080:	1000f926 	beq	r2,zero,5468 <___vfprintf_internal_r+0x1508>
    5084:	3c000017 	ldw	r16,0(r7)
    5088:	3c400117 	ldw	r17,4(r7)
    508c:	38800204 	addi	r2,r7,8
    5090:	d8814015 	stw	r2,1280(sp)
    5094:	d9414c17 	ldw	r5,1328(sp)
    5098:	2880004c 	andi	r2,r5,1
    509c:	1005003a 	cmpeq	r2,r2,zero
    50a0:	1000b31e 	bne	r2,zero,5370 <___vfprintf_internal_r+0x1410>
    50a4:	8444b03a 	or	r2,r16,r17
    50a8:	1000b126 	beq	r2,zero,5370 <___vfprintf_internal_r+0x1410>
    50ac:	d9814d17 	ldw	r6,1332(sp)
    50b0:	29400094 	ori	r5,r5,2
    50b4:	00800c04 	movi	r2,48
    50b8:	01000084 	movi	r4,2
    50bc:	d9414c15 	stw	r5,1328(sp)
    50c0:	d8800445 	stb	r2,17(sp)
    50c4:	d9800485 	stb	r6,18(sp)
    50c8:	d8000405 	stb	zero,16(sp)
    50cc:	003e3206 	br	4998 <___vfprintf_internal_r+0xa38>
    50d0:	01800074 	movhi	r6,1
    50d4:	31baa704 	addi	r6,r6,-5476
    50d8:	d9814415 	stw	r6,1296(sp)
    50dc:	003fe606 	br	5078 <___vfprintf_internal_r+0x1118>
    50e0:	00800ac4 	movi	r2,43
    50e4:	d8800405 	stb	r2,16(sp)
    50e8:	b8c00007 	ldb	r3,0(r23)
    50ec:	003c1b06 	br	415c <___vfprintf_internal_r+0x1fc>
    50f0:	d8814c17 	ldw	r2,1328(sp)
    50f4:	b8c00007 	ldb	r3,0(r23)
    50f8:	10800054 	ori	r2,r2,1
    50fc:	d8814c15 	stw	r2,1328(sp)
    5100:	003c1606 	br	415c <___vfprintf_internal_r+0x1fc>
    5104:	d8800407 	ldb	r2,16(sp)
    5108:	1000461e 	bne	r2,zero,5224 <___vfprintf_internal_r+0x12c4>
    510c:	00800804 	movi	r2,32
    5110:	d8800405 	stb	r2,16(sp)
    5114:	b8c00007 	ldb	r3,0(r23)
    5118:	003c1006 	br	415c <___vfprintf_internal_r+0x1fc>
    511c:	d9814c17 	ldw	r6,1328(sp)
    5120:	b8c00007 	ldb	r3,0(r23)
    5124:	31800214 	ori	r6,r6,8
    5128:	d9814c15 	stw	r6,1328(sp)
    512c:	003c0b06 	br	415c <___vfprintf_internal_r+0x1fc>
    5130:	0007883a 	mov	r3,zero
    5134:	01000244 	movi	r4,9
    5138:	188002a4 	muli	r2,r3,10
    513c:	b8c00007 	ldb	r3,0(r23)
    5140:	d9814d17 	ldw	r6,1332(sp)
    5144:	bdc00044 	addi	r23,r23,1
    5148:	d8c14d15 	stw	r3,1332(sp)
    514c:	d9414d17 	ldw	r5,1332(sp)
    5150:	3085883a 	add	r2,r6,r2
    5154:	10fff404 	addi	r3,r2,-48
    5158:	28bff404 	addi	r2,r5,-48
    515c:	20bff62e 	bgeu	r4,r2,5138 <___vfprintf_internal_r+0x11d8>
    5160:	d8c14a15 	stw	r3,1320(sp)
    5164:	003bff06 	br	4164 <___vfprintf_internal_r+0x204>
    5168:	d9414c17 	ldw	r5,1328(sp)
    516c:	b8c00007 	ldb	r3,0(r23)
    5170:	29402014 	ori	r5,r5,128
    5174:	d9414c15 	stw	r5,1328(sp)
    5178:	003bf806 	br	415c <___vfprintf_internal_r+0x1fc>
    517c:	b8c00007 	ldb	r3,0(r23)
    5180:	00800a84 	movi	r2,42
    5184:	bdc00044 	addi	r23,r23,1
    5188:	18831526 	beq	r3,r2,5de0 <___vfprintf_internal_r+0x1e80>
    518c:	d8c14d15 	stw	r3,1332(sp)
    5190:	18bff404 	addi	r2,r3,-48
    5194:	00c00244 	movi	r3,9
    5198:	18827836 	bltu	r3,r2,5b7c <___vfprintf_internal_r+0x1c1c>
    519c:	000d883a 	mov	r6,zero
    51a0:	308002a4 	muli	r2,r6,10
    51a4:	b9800007 	ldb	r6,0(r23)
    51a8:	d9414d17 	ldw	r5,1332(sp)
    51ac:	bdc00044 	addi	r23,r23,1
    51b0:	d9814d15 	stw	r6,1332(sp)
    51b4:	d9014d17 	ldw	r4,1332(sp)
    51b8:	1145883a 	add	r2,r2,r5
    51bc:	11bff404 	addi	r6,r2,-48
    51c0:	20bff404 	addi	r2,r4,-48
    51c4:	18bff62e 	bgeu	r3,r2,51a0 <___vfprintf_internal_r+0x1240>
    51c8:	3027883a 	mov	r19,r6
    51cc:	303be50e 	bge	r6,zero,4164 <___vfprintf_internal_r+0x204>
    51d0:	04ffffc4 	movi	r19,-1
    51d4:	003be306 	br	4164 <___vfprintf_internal_r+0x204>
    51d8:	d8000405 	stb	zero,16(sp)
    51dc:	39800017 	ldw	r6,0(r7)
    51e0:	39c00104 	addi	r7,r7,4
    51e4:	d9c14015 	stw	r7,1280(sp)
    51e8:	d9814115 	stw	r6,1284(sp)
    51ec:	3001c926 	beq	r6,zero,5914 <___vfprintf_internal_r+0x19b4>
    51f0:	98000e16 	blt	r19,zero,522c <___vfprintf_internal_r+0x12cc>
    51f4:	d9014117 	ldw	r4,1284(sp)
    51f8:	000b883a 	mov	r5,zero
    51fc:	980d883a 	mov	r6,r19
    5200:	00088dc0 	call	88dc <memchr>
    5204:	10025926 	beq	r2,zero,5b6c <___vfprintf_internal_r+0x1c0c>
    5208:	d8c14117 	ldw	r3,1284(sp)
    520c:	10cfc83a 	sub	r7,r2,r3
    5210:	99c19e16 	blt	r19,r7,588c <___vfprintf_internal_r+0x192c>
    5214:	d9c14515 	stw	r7,1300(sp)
    5218:	38000916 	blt	r7,zero,5240 <___vfprintf_internal_r+0x12e0>
    521c:	d8014615 	stw	zero,1304(sp)
    5220:	003df106 	br	49e8 <___vfprintf_internal_r+0xa88>
    5224:	b8c00007 	ldb	r3,0(r23)
    5228:	003bcc06 	br	415c <___vfprintf_internal_r+0x1fc>
    522c:	d9014117 	ldw	r4,1284(sp)
    5230:	0003e940 	call	3e94 <strlen>
    5234:	d8814515 	stw	r2,1300(sp)
    5238:	100f883a 	mov	r7,r2
    523c:	103ff70e 	bge	r2,zero,521c <___vfprintf_internal_r+0x12bc>
    5240:	d8014515 	stw	zero,1300(sp)
    5244:	d8014615 	stw	zero,1304(sp)
    5248:	003de706 	br	49e8 <___vfprintf_internal_r+0xa88>
    524c:	20c03fcc 	andi	r3,r4,255
    5250:	00800044 	movi	r2,1
    5254:	18802d26 	beq	r3,r2,530c <___vfprintf_internal_r+0x13ac>
    5258:	18800e36 	bltu	r3,r2,5294 <___vfprintf_internal_r+0x1334>
    525c:	00800084 	movi	r2,2
    5260:	1880fa26 	beq	r3,r2,564c <___vfprintf_internal_r+0x16ec>
    5264:	01000074 	movhi	r4,1
    5268:	213ab704 	addi	r4,r4,-5412
    526c:	0003e940 	call	3e94 <strlen>
    5270:	100f883a 	mov	r7,r2
    5274:	dcc14515 	stw	r19,1300(sp)
    5278:	9880010e 	bge	r19,r2,5280 <___vfprintf_internal_r+0x1320>
    527c:	d8814515 	stw	r2,1300(sp)
    5280:	00800074 	movhi	r2,1
    5284:	10bab704 	addi	r2,r2,-5412
    5288:	dcc14615 	stw	r19,1304(sp)
    528c:	d8814115 	stw	r2,1284(sp)
    5290:	003dd506 	br	49e8 <___vfprintf_internal_r+0xa88>
    5294:	d9401904 	addi	r5,sp,100
    5298:	dd000f04 	addi	r20,sp,60
    529c:	d9414115 	stw	r5,1284(sp)
    52a0:	880a977a 	slli	r5,r17,29
    52a4:	d9814117 	ldw	r6,1284(sp)
    52a8:	8004d0fa 	srli	r2,r16,3
    52ac:	8806d0fa 	srli	r3,r17,3
    52b0:	810001cc 	andi	r4,r16,7
    52b4:	2884b03a 	or	r2,r5,r2
    52b8:	31bfffc4 	addi	r6,r6,-1
    52bc:	21000c04 	addi	r4,r4,48
    52c0:	d9814115 	stw	r6,1284(sp)
    52c4:	10cab03a 	or	r5,r2,r3
    52c8:	31000005 	stb	r4,0(r6)
    52cc:	1021883a 	mov	r16,r2
    52d0:	1823883a 	mov	r17,r3
    52d4:	283ff21e 	bne	r5,zero,52a0 <___vfprintf_internal_r+0x1340>
    52d8:	d8c14c17 	ldw	r3,1328(sp)
    52dc:	1880004c 	andi	r2,r3,1
    52e0:	1005003a 	cmpeq	r2,r2,zero
    52e4:	103db91e 	bne	r2,zero,49cc <___vfprintf_internal_r+0xa6c>
    52e8:	20803fcc 	andi	r2,r4,255
    52ec:	1080201c 	xori	r2,r2,128
    52f0:	10bfe004 	addi	r2,r2,-128
    52f4:	00c00c04 	movi	r3,48
    52f8:	10fdb426 	beq	r2,r3,49cc <___vfprintf_internal_r+0xa6c>
    52fc:	31bfffc4 	addi	r6,r6,-1
    5300:	d9814115 	stw	r6,1284(sp)
    5304:	30c00005 	stb	r3,0(r6)
    5308:	003db006 	br	49cc <___vfprintf_internal_r+0xa6c>
    530c:	88800068 	cmpgeui	r2,r17,1
    5310:	10002c1e 	bne	r2,zero,53c4 <___vfprintf_internal_r+0x1464>
    5314:	8800021e 	bne	r17,zero,5320 <___vfprintf_internal_r+0x13c0>
    5318:	00800244 	movi	r2,9
    531c:	14002936 	bltu	r2,r16,53c4 <___vfprintf_internal_r+0x1464>
    5320:	d90018c4 	addi	r4,sp,99
    5324:	dd000f04 	addi	r20,sp,60
    5328:	d9014115 	stw	r4,1284(sp)
    532c:	d9014117 	ldw	r4,1284(sp)
    5330:	80800c04 	addi	r2,r16,48
    5334:	20800005 	stb	r2,0(r4)
    5338:	003da406 	br	49cc <___vfprintf_internal_r+0xa6c>
    533c:	dc400d17 	ldw	r17,52(sp)
    5340:	07000074 	movhi	fp,1
    5344:	e73abe84 	addi	fp,fp,-5382
    5348:	9425883a 	add	r18,r18,r16
    534c:	8c400044 	addi	r17,r17,1
    5350:	008001c4 	movi	r2,7
    5354:	1f000015 	stw	fp,0(r3)
    5358:	1c000115 	stw	r16,4(r3)
    535c:	dc800e15 	stw	r18,56(sp)
    5360:	dc400d15 	stw	r17,52(sp)
    5364:	147de216 	blt	r2,r17,4af0 <___vfprintf_internal_r+0xb90>
    5368:	18c00204 	addi	r3,r3,8
    536c:	003c7a06 	br	4558 <___vfprintf_internal_r+0x5f8>
    5370:	01000084 	movi	r4,2
    5374:	d8000405 	stb	zero,16(sp)
    5378:	003d8706 	br	4998 <___vfprintf_internal_r+0xa38>
    537c:	d9814c17 	ldw	r6,1328(sp)
    5380:	30c4703a 	and	r2,r6,r3
    5384:	1005003a 	cmpeq	r2,r2,zero
    5388:	103cb926 	beq	r2,zero,4670 <___vfprintf_internal_r+0x710>
    538c:	d9014117 	ldw	r4,1284(sp)
    5390:	94800044 	addi	r18,r18,1
    5394:	8c400044 	addi	r17,r17,1
    5398:	008001c4 	movi	r2,7
    539c:	a9000015 	stw	r4,0(r21)
    53a0:	a8c00115 	stw	r3,4(r21)
    53a4:	dc800e15 	stw	r18,56(sp)
    53a8:	dc400d15 	stw	r17,52(sp)
    53ac:	147e6616 	blt	r2,r17,4d48 <___vfprintf_internal_r+0xde8>
    53b0:	acc00204 	addi	r19,r21,8
    53b4:	003cd706 	br	4714 <___vfprintf_internal_r+0x7b4>
    53b8:	07000074 	movhi	fp,1
    53bc:	e73abe84 	addi	fp,fp,-5382
    53c0:	003c4f06 	br	4500 <___vfprintf_internal_r+0x5a0>
    53c4:	dd000f04 	addi	r20,sp,60
    53c8:	dc801904 	addi	r18,sp,100
    53cc:	8009883a 	mov	r4,r16
    53d0:	880b883a 	mov	r5,r17
    53d4:	01800284 	movi	r6,10
    53d8:	000f883a 	mov	r7,zero
    53dc:	000add80 	call	add8 <__umoddi3>
    53e0:	12000c04 	addi	r8,r2,48
    53e4:	94bfffc4 	addi	r18,r18,-1
    53e8:	8009883a 	mov	r4,r16
    53ec:	880b883a 	mov	r5,r17
    53f0:	01800284 	movi	r6,10
    53f4:	000f883a 	mov	r7,zero
    53f8:	92000005 	stb	r8,0(r18)
    53fc:	000a7fc0 	call	a7fc <__udivdi3>
    5400:	1009883a 	mov	r4,r2
    5404:	1021883a 	mov	r16,r2
    5408:	18800068 	cmpgeui	r2,r3,1
    540c:	1823883a 	mov	r17,r3
    5410:	103fee1e 	bne	r2,zero,53cc <___vfprintf_internal_r+0x146c>
    5414:	1800021e 	bne	r3,zero,5420 <___vfprintf_internal_r+0x14c0>
    5418:	00800244 	movi	r2,9
    541c:	113feb36 	bltu	r2,r4,53cc <___vfprintf_internal_r+0x146c>
    5420:	94bfffc4 	addi	r18,r18,-1
    5424:	dc814115 	stw	r18,1284(sp)
    5428:	003fc006 	br	532c <___vfprintf_internal_r+0x13cc>
    542c:	d9014c17 	ldw	r4,1328(sp)
    5430:	2080004c 	andi	r2,r4,1
    5434:	10009a1e 	bne	r2,zero,56a0 <___vfprintf_internal_r+0x1740>
    5438:	d9401904 	addi	r5,sp,100
    543c:	dd000f04 	addi	r20,sp,60
    5440:	d9414115 	stw	r5,1284(sp)
    5444:	003d6106 	br	49cc <___vfprintf_internal_r+0xa6c>
    5448:	d9014f17 	ldw	r4,1340(sp)
    544c:	b00b883a 	mov	r5,r22
    5450:	d9800c04 	addi	r6,sp,48
    5454:	0003f080 	call	3f08 <__sprint_r>
    5458:	103c791e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    545c:	dc800e17 	ldw	r18,56(sp)
    5460:	d8c01904 	addi	r3,sp,100
    5464:	003cff06 	br	4864 <___vfprintf_internal_r+0x904>
    5468:	d8c14c17 	ldw	r3,1328(sp)
    546c:	1880040c 	andi	r2,r3,16
    5470:	1000711e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x16d8>
    5474:	d9014c17 	ldw	r4,1328(sp)
    5478:	2080100c 	andi	r2,r4,64
    547c:	10006e26 	beq	r2,zero,5638 <___vfprintf_internal_r+0x16d8>
    5480:	3c00000b 	ldhu	r16,0(r7)
    5484:	0023883a 	mov	r17,zero
    5488:	39c00104 	addi	r7,r7,4
    548c:	d9c14015 	stw	r7,1280(sp)
    5490:	003f0006 	br	5094 <___vfprintf_internal_r+0x1134>
    5494:	dc400d17 	ldw	r17,52(sp)
    5498:	07000074 	movhi	fp,1
    549c:	e73abe84 	addi	fp,fp,-5382
    54a0:	9425883a 	add	r18,r18,r16
    54a4:	8c400044 	addi	r17,r17,1
    54a8:	008001c4 	movi	r2,7
    54ac:	1f000015 	stw	fp,0(r3)
    54b0:	1c000115 	stw	r16,4(r3)
    54b4:	dc800e15 	stw	r18,56(sp)
    54b8:	dc400d15 	stw	r17,52(sp)
    54bc:	147d7616 	blt	r2,r17,4a98 <___vfprintf_internal_r+0xb38>
    54c0:	18c00204 	addi	r3,r3,8
    54c4:	003d7b06 	br	4ab4 <___vfprintf_internal_r+0xb54>
    54c8:	dc800e17 	ldw	r18,56(sp)
    54cc:	dc400d17 	ldw	r17,52(sp)
    54d0:	07000074 	movhi	fp,1
    54d4:	e73ac284 	addi	fp,fp,-5366
    54d8:	003bc006 	br	43dc <___vfprintf_internal_r+0x47c>
    54dc:	d9014f17 	ldw	r4,1340(sp)
    54e0:	b00b883a 	mov	r5,r22
    54e4:	d9800c04 	addi	r6,sp,48
    54e8:	0003f080 	call	3f08 <__sprint_r>
    54ec:	103c541e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    54f0:	dc800e17 	ldw	r18,56(sp)
    54f4:	d8c01904 	addi	r3,sp,100
    54f8:	003ce906 	br	48a0 <___vfprintf_internal_r+0x940>
    54fc:	3c000017 	ldw	r16,0(r7)
    5500:	0009883a 	mov	r4,zero
    5504:	39c00104 	addi	r7,r7,4
    5508:	0023883a 	mov	r17,zero
    550c:	d9c14015 	stw	r7,1280(sp)
    5510:	d8000405 	stb	zero,16(sp)
    5514:	003d2006 	br	4998 <___vfprintf_internal_r+0xa38>
    5518:	38800017 	ldw	r2,0(r7)
    551c:	39c00104 	addi	r7,r7,4
    5520:	d9c14015 	stw	r7,1280(sp)
    5524:	1023d7fa 	srai	r17,r2,31
    5528:	1021883a 	mov	r16,r2
    552c:	003d1806 	br	4990 <___vfprintf_internal_r+0xa30>
    5530:	3c000017 	ldw	r16,0(r7)
    5534:	01000044 	movi	r4,1
    5538:	39c00104 	addi	r7,r7,4
    553c:	0023883a 	mov	r17,zero
    5540:	d9c14015 	stw	r7,1280(sp)
    5544:	d8000405 	stb	zero,16(sp)
    5548:	003d1306 	br	4998 <___vfprintf_internal_r+0xa38>
    554c:	00800074 	movhi	r2,1
    5550:	10babe04 	addi	r2,r2,-5384
    5554:	94800044 	addi	r18,r18,1
    5558:	8c400044 	addi	r17,r17,1
    555c:	a8800015 	stw	r2,0(r21)
    5560:	00c00044 	movi	r3,1
    5564:	008001c4 	movi	r2,7
    5568:	a8c00115 	stw	r3,4(r21)
    556c:	dc800e15 	stw	r18,56(sp)
    5570:	dc400d15 	stw	r17,52(sp)
    5574:	1440ca16 	blt	r2,r17,58a0 <___vfprintf_internal_r+0x1940>
    5578:	a8c00204 	addi	r3,r21,8
    557c:	2000061e 	bne	r4,zero,5598 <___vfprintf_internal_r+0x1638>
    5580:	d9414717 	ldw	r5,1308(sp)
    5584:	2800041e 	bne	r5,zero,5598 <___vfprintf_internal_r+0x1638>
    5588:	d9814c17 	ldw	r6,1328(sp)
    558c:	3080004c 	andi	r2,r6,1
    5590:	1005003a 	cmpeq	r2,r2,zero
    5594:	103bf01e 	bne	r2,zero,4558 <___vfprintf_internal_r+0x5f8>
    5598:	00800044 	movi	r2,1
    559c:	dc400d17 	ldw	r17,52(sp)
    55a0:	18800115 	stw	r2,4(r3)
    55a4:	d8814917 	ldw	r2,1316(sp)
    55a8:	94800044 	addi	r18,r18,1
    55ac:	8c400044 	addi	r17,r17,1
    55b0:	18800015 	stw	r2,0(r3)
    55b4:	008001c4 	movi	r2,7
    55b8:	dc800e15 	stw	r18,56(sp)
    55bc:	dc400d15 	stw	r17,52(sp)
    55c0:	1440ca16 	blt	r2,r17,58ec <___vfprintf_internal_r+0x198c>
    55c4:	18c00204 	addi	r3,r3,8
    55c8:	0121c83a 	sub	r16,zero,r4
    55cc:	0400500e 	bge	zero,r16,5710 <___vfprintf_internal_r+0x17b0>
    55d0:	00800404 	movi	r2,16
    55d4:	1400800e 	bge	r2,r16,57d8 <___vfprintf_internal_r+0x1878>
    55d8:	1027883a 	mov	r19,r2
    55dc:	07000074 	movhi	fp,1
    55e0:	e73abe84 	addi	fp,fp,-5382
    55e4:	050001c4 	movi	r20,7
    55e8:	00000306 	br	55f8 <___vfprintf_internal_r+0x1698>
    55ec:	18c00204 	addi	r3,r3,8
    55f0:	843ffc04 	addi	r16,r16,-16
    55f4:	9c007a0e 	bge	r19,r16,57e0 <___vfprintf_internal_r+0x1880>
    55f8:	94800404 	addi	r18,r18,16
    55fc:	8c400044 	addi	r17,r17,1
    5600:	1f000015 	stw	fp,0(r3)
    5604:	1cc00115 	stw	r19,4(r3)
    5608:	dc800e15 	stw	r18,56(sp)
    560c:	dc400d15 	stw	r17,52(sp)
    5610:	a47ff60e 	bge	r20,r17,55ec <___vfprintf_internal_r+0x168c>
    5614:	d9014f17 	ldw	r4,1340(sp)
    5618:	b00b883a 	mov	r5,r22
    561c:	d9800c04 	addi	r6,sp,48
    5620:	0003f080 	call	3f08 <__sprint_r>
    5624:	103c061e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    5628:	dc800e17 	ldw	r18,56(sp)
    562c:	dc400d17 	ldw	r17,52(sp)
    5630:	d8c01904 	addi	r3,sp,100
    5634:	003fee06 	br	55f0 <___vfprintf_internal_r+0x1690>
    5638:	3c000017 	ldw	r16,0(r7)
    563c:	0023883a 	mov	r17,zero
    5640:	39c00104 	addi	r7,r7,4
    5644:	d9c14015 	stw	r7,1280(sp)
    5648:	003e9206 	br	5094 <___vfprintf_internal_r+0x1134>
    564c:	d9401904 	addi	r5,sp,100
    5650:	dd000f04 	addi	r20,sp,60
    5654:	d9414115 	stw	r5,1284(sp)
    5658:	d9814417 	ldw	r6,1296(sp)
    565c:	880a973a 	slli	r5,r17,28
    5660:	8004d13a 	srli	r2,r16,4
    5664:	810003cc 	andi	r4,r16,15
    5668:	3109883a 	add	r4,r6,r4
    566c:	2884b03a 	or	r2,r5,r2
    5670:	21400003 	ldbu	r5,0(r4)
    5674:	d9014117 	ldw	r4,1284(sp)
    5678:	8806d13a 	srli	r3,r17,4
    567c:	1021883a 	mov	r16,r2
    5680:	213fffc4 	addi	r4,r4,-1
    5684:	d9014115 	stw	r4,1284(sp)
    5688:	d9814117 	ldw	r6,1284(sp)
    568c:	10c8b03a 	or	r4,r2,r3
    5690:	1823883a 	mov	r17,r3
    5694:	31400005 	stb	r5,0(r6)
    5698:	203fef1e 	bne	r4,zero,5658 <___vfprintf_internal_r+0x16f8>
    569c:	003ccb06 	br	49cc <___vfprintf_internal_r+0xa6c>
    56a0:	00800c04 	movi	r2,48
    56a4:	d98018c4 	addi	r6,sp,99
    56a8:	dd000f04 	addi	r20,sp,60
    56ac:	d88018c5 	stb	r2,99(sp)
    56b0:	d9814115 	stw	r6,1284(sp)
    56b4:	003cc506 	br	49cc <___vfprintf_internal_r+0xa6c>
    56b8:	dc400d17 	ldw	r17,52(sp)
    56bc:	07000074 	movhi	fp,1
    56c0:	e73ac284 	addi	fp,fp,-5366
    56c4:	003bc706 	br	45e4 <___vfprintf_internal_r+0x684>
    56c8:	d9414c17 	ldw	r5,1328(sp)
    56cc:	2880040c 	andi	r2,r5,16
    56d0:	10007c26 	beq	r2,zero,58c4 <___vfprintf_internal_r+0x1964>
    56d4:	38800017 	ldw	r2,0(r7)
    56d8:	39c00104 	addi	r7,r7,4
    56dc:	d9c14015 	stw	r7,1280(sp)
    56e0:	d9814b17 	ldw	r6,1324(sp)
    56e4:	d9c14017 	ldw	r7,1280(sp)
    56e8:	11800015 	stw	r6,0(r2)
    56ec:	003a7806 	br	40d0 <___vfprintf_internal_r+0x170>
    56f0:	d9014f17 	ldw	r4,1340(sp)
    56f4:	b00b883a 	mov	r5,r22
    56f8:	d9800c04 	addi	r6,sp,48
    56fc:	0003f080 	call	3f08 <__sprint_r>
    5700:	103bcf1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    5704:	dc800e17 	ldw	r18,56(sp)
    5708:	dc400d17 	ldw	r17,52(sp)
    570c:	d8c01904 	addi	r3,sp,100
    5710:	d9014717 	ldw	r4,1308(sp)
    5714:	d9414117 	ldw	r5,1284(sp)
    5718:	8c400044 	addi	r17,r17,1
    571c:	9125883a 	add	r18,r18,r4
    5720:	008001c4 	movi	r2,7
    5724:	19400015 	stw	r5,0(r3)
    5728:	19000115 	stw	r4,4(r3)
    572c:	dc800e15 	stw	r18,56(sp)
    5730:	dc400d15 	stw	r17,52(sp)
    5734:	147cee16 	blt	r2,r17,4af0 <___vfprintf_internal_r+0xb90>
    5738:	18c00204 	addi	r3,r3,8
    573c:	003b8606 	br	4558 <___vfprintf_internal_r+0x5f8>
    5740:	38c00017 	ldw	r3,0(r7)
    5744:	39000204 	addi	r4,r7,8
    5748:	d9014015 	stw	r4,1280(sp)
    574c:	d8c14215 	stw	r3,1288(sp)
    5750:	39c00117 	ldw	r7,4(r7)
    5754:	d9c14315 	stw	r7,1292(sp)
    5758:	003e2006 	br	4fdc <___vfprintf_internal_r+0x107c>
    575c:	0005883a 	mov	r2,zero
    5760:	1409c83a 	sub	r4,r2,r16
    5764:	1105803a 	cmpltu	r2,r2,r4
    5768:	044bc83a 	sub	r5,zero,r17
    576c:	2885c83a 	sub	r2,r5,r2
    5770:	2021883a 	mov	r16,r4
    5774:	1023883a 	mov	r17,r2
    5778:	01000044 	movi	r4,1
    577c:	00800b44 	movi	r2,45
    5780:	d8800405 	stb	r2,16(sp)
    5784:	003c8406 	br	4998 <___vfprintf_internal_r+0xa38>
    5788:	d9014f17 	ldw	r4,1340(sp)
    578c:	b00b883a 	mov	r5,r22
    5790:	d9800c04 	addi	r6,sp,48
    5794:	0003f080 	call	3f08 <__sprint_r>
    5798:	103ba91e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    579c:	dc800e17 	ldw	r18,56(sp)
    57a0:	dc400d17 	ldw	r17,52(sp)
    57a4:	d9000517 	ldw	r4,20(sp)
    57a8:	d9401904 	addi	r5,sp,100
    57ac:	003da706 	br	4e4c <___vfprintf_internal_r+0xeec>
    57b0:	d9014f17 	ldw	r4,1340(sp)
    57b4:	b00b883a 	mov	r5,r22
    57b8:	d9800c04 	addi	r6,sp,48
    57bc:	0003f080 	call	3f08 <__sprint_r>
    57c0:	103b9f1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    57c4:	dc800e17 	ldw	r18,56(sp)
    57c8:	dc400d17 	ldw	r17,52(sp)
    57cc:	d9000517 	ldw	r4,20(sp)
    57d0:	d8c01904 	addi	r3,sp,100
    57d4:	003d9106 	br	4e1c <___vfprintf_internal_r+0xebc>
    57d8:	07000074 	movhi	fp,1
    57dc:	e73abe84 	addi	fp,fp,-5382
    57e0:	9425883a 	add	r18,r18,r16
    57e4:	8c400044 	addi	r17,r17,1
    57e8:	008001c4 	movi	r2,7
    57ec:	1f000015 	stw	fp,0(r3)
    57f0:	1c000115 	stw	r16,4(r3)
    57f4:	dc800e15 	stw	r18,56(sp)
    57f8:	dc400d15 	stw	r17,52(sp)
    57fc:	147fbc16 	blt	r2,r17,56f0 <___vfprintf_internal_r+0x1790>
    5800:	18c00204 	addi	r3,r3,8
    5804:	003fc206 	br	5710 <___vfprintf_internal_r+0x17b0>
    5808:	d9014f17 	ldw	r4,1340(sp)
    580c:	b00b883a 	mov	r5,r22
    5810:	d9800c04 	addi	r6,sp,48
    5814:	0003f080 	call	3f08 <__sprint_r>
    5818:	103b891e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    581c:	dc800e17 	ldw	r18,56(sp)
    5820:	d9000517 	ldw	r4,20(sp)
    5824:	d8c01904 	addi	r3,sp,100
    5828:	003d0206 	br	4c34 <___vfprintf_internal_r+0xcd4>
    582c:	07000074 	movhi	fp,1
    5830:	e73abe84 	addi	fp,fp,-5382
    5834:	003be406 	br	47c8 <___vfprintf_internal_r+0x868>
    5838:	00800074 	movhi	r2,1
    583c:	10baad04 	addi	r2,r2,-5452
    5840:	d8814115 	stw	r2,1284(sp)
    5844:	003df506 	br	501c <___vfprintf_internal_r+0x10bc>
    5848:	d9014217 	ldw	r4,1288(sp)
    584c:	d9414317 	ldw	r5,1292(sp)
    5850:	0001ff40 	call	1ff4 <__isnand>
    5854:	10003926 	beq	r2,zero,593c <___vfprintf_internal_r+0x19dc>
    5858:	d9414d17 	ldw	r5,1332(sp)
    585c:	008011c4 	movi	r2,71
    5860:	1140ce16 	blt	r2,r5,5b9c <___vfprintf_internal_r+0x1c3c>
    5864:	01800074 	movhi	r6,1
    5868:	31baae04 	addi	r6,r6,-5448
    586c:	d9814115 	stw	r6,1284(sp)
    5870:	003dea06 	br	501c <___vfprintf_internal_r+0x10bc>
    5874:	d9014c17 	ldw	r4,1328(sp)
    5878:	bdc00044 	addi	r23,r23,1
    587c:	b8c00007 	ldb	r3,0(r23)
    5880:	21000814 	ori	r4,r4,32
    5884:	d9014c15 	stw	r4,1328(sp)
    5888:	003a3406 	br	415c <___vfprintf_internal_r+0x1fc>
    588c:	dcc14515 	stw	r19,1300(sp)
    5890:	98011016 	blt	r19,zero,5cd4 <___vfprintf_internal_r+0x1d74>
    5894:	980f883a 	mov	r7,r19
    5898:	d8014615 	stw	zero,1304(sp)
    589c:	003c5206 	br	49e8 <___vfprintf_internal_r+0xa88>
    58a0:	d9014f17 	ldw	r4,1340(sp)
    58a4:	b00b883a 	mov	r5,r22
    58a8:	d9800c04 	addi	r6,sp,48
    58ac:	0003f080 	call	3f08 <__sprint_r>
    58b0:	103b631e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    58b4:	dc800e17 	ldw	r18,56(sp)
    58b8:	d9000517 	ldw	r4,20(sp)
    58bc:	d8c01904 	addi	r3,sp,100
    58c0:	003f2e06 	br	557c <___vfprintf_internal_r+0x161c>
    58c4:	d8c14c17 	ldw	r3,1328(sp)
    58c8:	1880100c 	andi	r2,r3,64
    58cc:	1000a026 	beq	r2,zero,5b50 <___vfprintf_internal_r+0x1bf0>
    58d0:	38800017 	ldw	r2,0(r7)
    58d4:	39c00104 	addi	r7,r7,4
    58d8:	d9c14015 	stw	r7,1280(sp)
    58dc:	d9014b17 	ldw	r4,1324(sp)
    58e0:	d9c14017 	ldw	r7,1280(sp)
    58e4:	1100000d 	sth	r4,0(r2)
    58e8:	0039f906 	br	40d0 <___vfprintf_internal_r+0x170>
    58ec:	d9014f17 	ldw	r4,1340(sp)
    58f0:	b00b883a 	mov	r5,r22
    58f4:	d9800c04 	addi	r6,sp,48
    58f8:	0003f080 	call	3f08 <__sprint_r>
    58fc:	103b501e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    5900:	dc800e17 	ldw	r18,56(sp)
    5904:	dc400d17 	ldw	r17,52(sp)
    5908:	d9000517 	ldw	r4,20(sp)
    590c:	d8c01904 	addi	r3,sp,100
    5910:	003f2d06 	br	55c8 <___vfprintf_internal_r+0x1668>
    5914:	00800184 	movi	r2,6
    5918:	14c09a36 	bltu	r2,r19,5b84 <___vfprintf_internal_r+0x1c24>
    591c:	dcc14515 	stw	r19,1300(sp)
    5920:	9800010e 	bge	r19,zero,5928 <___vfprintf_internal_r+0x19c8>
    5924:	d8014515 	stw	zero,1300(sp)
    5928:	00800074 	movhi	r2,1
    592c:	10bab004 	addi	r2,r2,-5440
    5930:	980f883a 	mov	r7,r19
    5934:	d8814115 	stw	r2,1284(sp)
    5938:	003a7806 	br	431c <___vfprintf_internal_r+0x3bc>
    593c:	00bfffc4 	movi	r2,-1
    5940:	9880e226 	beq	r19,r2,5ccc <___vfprintf_internal_r+0x1d6c>
    5944:	d9414d17 	ldw	r5,1332(sp)
    5948:	008019c4 	movi	r2,103
    594c:	2880dc26 	beq	r5,r2,5cc0 <___vfprintf_internal_r+0x1d60>
    5950:	008011c4 	movi	r2,71
    5954:	2880da26 	beq	r5,r2,5cc0 <___vfprintf_internal_r+0x1d60>
    5958:	d9414c17 	ldw	r5,1328(sp)
    595c:	d9014317 	ldw	r4,1292(sp)
    5960:	d9814217 	ldw	r6,1288(sp)
    5964:	29404014 	ori	r5,r5,256
    5968:	d9414c15 	stw	r5,1328(sp)
    596c:	2000cc16 	blt	r4,zero,5ca0 <___vfprintf_internal_r+0x1d40>
    5970:	3021883a 	mov	r16,r6
    5974:	2023883a 	mov	r17,r4
    5978:	0039883a 	mov	fp,zero
    597c:	d9414d17 	ldw	r5,1332(sp)
    5980:	00801984 	movi	r2,102
    5984:	2880b726 	beq	r5,r2,5c64 <___vfprintf_internal_r+0x1d04>
    5988:	00801184 	movi	r2,70
    598c:	2880b526 	beq	r5,r2,5c64 <___vfprintf_internal_r+0x1d04>
    5990:	00801944 	movi	r2,101
    5994:	2880c826 	beq	r5,r2,5cb8 <___vfprintf_internal_r+0x1d58>
    5998:	00801144 	movi	r2,69
    599c:	2880c626 	beq	r5,r2,5cb8 <___vfprintf_internal_r+0x1d58>
    59a0:	9829883a 	mov	r20,r19
    59a4:	d9014f17 	ldw	r4,1340(sp)
    59a8:	d8800504 	addi	r2,sp,20
    59ac:	880d883a 	mov	r6,r17
    59b0:	d8800115 	stw	r2,4(sp)
    59b4:	d8c00604 	addi	r3,sp,24
    59b8:	d8800704 	addi	r2,sp,28
    59bc:	800b883a 	mov	r5,r16
    59c0:	01c00084 	movi	r7,2
    59c4:	d8c00215 	stw	r3,8(sp)
    59c8:	d8800315 	stw	r2,12(sp)
    59cc:	dd000015 	stw	r20,0(sp)
    59d0:	00061840 	call	6184 <_dtoa_r>
    59d4:	d9814d17 	ldw	r6,1332(sp)
    59d8:	d8814115 	stw	r2,1284(sp)
    59dc:	008019c4 	movi	r2,103
    59e0:	30809526 	beq	r6,r2,5c38 <___vfprintf_internal_r+0x1cd8>
    59e4:	d8c14d17 	ldw	r3,1332(sp)
    59e8:	008011c4 	movi	r2,71
    59ec:	18809226 	beq	r3,r2,5c38 <___vfprintf_internal_r+0x1cd8>
    59f0:	d9414117 	ldw	r5,1284(sp)
    59f4:	d9814d17 	ldw	r6,1332(sp)
    59f8:	00801984 	movi	r2,102
    59fc:	2d25883a 	add	r18,r5,r20
    5a00:	30808626 	beq	r6,r2,5c1c <___vfprintf_internal_r+0x1cbc>
    5a04:	00801184 	movi	r2,70
    5a08:	30808426 	beq	r6,r2,5c1c <___vfprintf_internal_r+0x1cbc>
    5a0c:	000d883a 	mov	r6,zero
    5a10:	000f883a 	mov	r7,zero
    5a14:	880b883a 	mov	r5,r17
    5a18:	8009883a 	mov	r4,r16
    5a1c:	000b3880 	call	b388 <__eqdf2>
    5a20:	1000751e 	bne	r2,zero,5bf8 <___vfprintf_internal_r+0x1c98>
    5a24:	9005883a 	mov	r2,r18
    5a28:	dc800715 	stw	r18,28(sp)
    5a2c:	d9014117 	ldw	r4,1284(sp)
    5a30:	d9414d17 	ldw	r5,1332(sp)
    5a34:	00c019c4 	movi	r3,103
    5a38:	1125c83a 	sub	r18,r2,r4
    5a3c:	28c06826 	beq	r5,r3,5be0 <___vfprintf_internal_r+0x1c80>
    5a40:	008011c4 	movi	r2,71
    5a44:	28806626 	beq	r5,r2,5be0 <___vfprintf_internal_r+0x1c80>
    5a48:	d9000517 	ldw	r4,20(sp)
    5a4c:	d8c14d17 	ldw	r3,1332(sp)
    5a50:	00801944 	movi	r2,101
    5a54:	10c05516 	blt	r2,r3,5bac <___vfprintf_internal_r+0x1c4c>
    5a58:	213fffc4 	addi	r4,r4,-1
    5a5c:	d9000515 	stw	r4,20(sp)
    5a60:	d8c00805 	stb	r3,32(sp)
    5a64:	2021883a 	mov	r16,r4
    5a68:	2000c116 	blt	r4,zero,5d70 <___vfprintf_internal_r+0x1e10>
    5a6c:	00800ac4 	movi	r2,43
    5a70:	d8800845 	stb	r2,33(sp)
    5a74:	00800244 	movi	r2,9
    5a78:	1400af0e 	bge	r2,r16,5d38 <___vfprintf_internal_r+0x1dd8>
    5a7c:	1027883a 	mov	r19,r2
    5a80:	dc400b84 	addi	r17,sp,46
    5a84:	8009883a 	mov	r4,r16
    5a88:	01400284 	movi	r5,10
    5a8c:	000b7080 	call	b708 <__modsi3>
    5a90:	10800c04 	addi	r2,r2,48
    5a94:	8c7fffc4 	addi	r17,r17,-1
    5a98:	8009883a 	mov	r4,r16
    5a9c:	01400284 	movi	r5,10
    5aa0:	88800005 	stb	r2,0(r17)
    5aa4:	000b6a80 	call	b6a8 <__divsi3>
    5aa8:	1021883a 	mov	r16,r2
    5aac:	98bff516 	blt	r19,r2,5a84 <___vfprintf_internal_r+0x1b24>
    5ab0:	10c00c04 	addi	r3,r2,48
    5ab4:	d88009c4 	addi	r2,sp,39
    5ab8:	108001c4 	addi	r2,r2,7
    5abc:	897fffc4 	addi	r5,r17,-1
    5ac0:	88ffffc5 	stb	r3,-1(r17)
    5ac4:	2880a72e 	bgeu	r5,r2,5d64 <___vfprintf_internal_r+0x1e04>
    5ac8:	1009883a 	mov	r4,r2
    5acc:	d9800804 	addi	r6,sp,32
    5ad0:	d8c00884 	addi	r3,sp,34
    5ad4:	28800003 	ldbu	r2,0(r5)
    5ad8:	29400044 	addi	r5,r5,1
    5adc:	18800005 	stb	r2,0(r3)
    5ae0:	18c00044 	addi	r3,r3,1
    5ae4:	293ffb36 	bltu	r5,r4,5ad4 <___vfprintf_internal_r+0x1b74>
    5ae8:	1987c83a 	sub	r3,r3,r6
    5aec:	00800044 	movi	r2,1
    5af0:	d8c14815 	stw	r3,1312(sp)
    5af4:	90cf883a 	add	r7,r18,r3
    5af8:	1480960e 	bge	r2,r18,5d54 <___vfprintf_internal_r+0x1df4>
    5afc:	39c00044 	addi	r7,r7,1
    5b00:	d9c14515 	stw	r7,1300(sp)
    5b04:	38003416 	blt	r7,zero,5bd8 <___vfprintf_internal_r+0x1c78>
    5b08:	e0803fcc 	andi	r2,fp,255
    5b0c:	1080201c 	xori	r2,r2,128
    5b10:	10bfe004 	addi	r2,r2,-128
    5b14:	10004e26 	beq	r2,zero,5c50 <___vfprintf_internal_r+0x1cf0>
    5b18:	00800b44 	movi	r2,45
    5b1c:	dc814715 	stw	r18,1308(sp)
    5b20:	d8014615 	stw	zero,1304(sp)
    5b24:	d8800405 	stb	r2,16(sp)
    5b28:	003bb106 	br	49f0 <___vfprintf_internal_r+0xa90>
    5b2c:	00800b44 	movi	r2,45
    5b30:	d8800405 	stb	r2,16(sp)
    5b34:	003d3306 	br	5004 <___vfprintf_internal_r+0x10a4>
    5b38:	d9014f17 	ldw	r4,1340(sp)
    5b3c:	b00b883a 	mov	r5,r22
    5b40:	d9800c04 	addi	r6,sp,48
    5b44:	0003f080 	call	3f08 <__sprint_r>
    5b48:	103abd1e 	bne	r2,zero,4640 <___vfprintf_internal_r+0x6e0>
    5b4c:	003abb06 	br	463c <___vfprintf_internal_r+0x6dc>
    5b50:	38800017 	ldw	r2,0(r7)
    5b54:	39c00104 	addi	r7,r7,4
    5b58:	d9c14015 	stw	r7,1280(sp)
    5b5c:	d9414b17 	ldw	r5,1324(sp)
    5b60:	d9c14017 	ldw	r7,1280(sp)
    5b64:	11400015 	stw	r5,0(r2)
    5b68:	00395906 	br	40d0 <___vfprintf_internal_r+0x170>
    5b6c:	980f883a 	mov	r7,r19
    5b70:	dcc14515 	stw	r19,1300(sp)
    5b74:	d8014615 	stw	zero,1304(sp)
    5b78:	003b9b06 	br	49e8 <___vfprintf_internal_r+0xa88>
    5b7c:	0027883a 	mov	r19,zero
    5b80:	00397806 	br	4164 <___vfprintf_internal_r+0x204>
    5b84:	00c00074 	movhi	r3,1
    5b88:	18fab004 	addi	r3,r3,-5440
    5b8c:	100f883a 	mov	r7,r2
    5b90:	d8814515 	stw	r2,1300(sp)
    5b94:	d8c14115 	stw	r3,1284(sp)
    5b98:	0039e006 	br	431c <___vfprintf_internal_r+0x3bc>
    5b9c:	00800074 	movhi	r2,1
    5ba0:	10baaf04 	addi	r2,r2,-5444
    5ba4:	d8814115 	stw	r2,1284(sp)
    5ba8:	003d1c06 	br	501c <___vfprintf_internal_r+0x10bc>
    5bac:	d9414d17 	ldw	r5,1332(sp)
    5bb0:	00801984 	movi	r2,102
    5bb4:	28804926 	beq	r5,r2,5cdc <___vfprintf_internal_r+0x1d7c>
    5bb8:	200f883a 	mov	r7,r4
    5bbc:	24805716 	blt	r4,r18,5d1c <___vfprintf_internal_r+0x1dbc>
    5bc0:	d9414c17 	ldw	r5,1328(sp)
    5bc4:	2880004c 	andi	r2,r5,1
    5bc8:	10000126 	beq	r2,zero,5bd0 <___vfprintf_internal_r+0x1c70>
    5bcc:	21c00044 	addi	r7,r4,1
    5bd0:	d9c14515 	stw	r7,1300(sp)
    5bd4:	383fcc0e 	bge	r7,zero,5b08 <___vfprintf_internal_r+0x1ba8>
    5bd8:	d8014515 	stw	zero,1300(sp)
    5bdc:	003fca06 	br	5b08 <___vfprintf_internal_r+0x1ba8>
    5be0:	d9000517 	ldw	r4,20(sp)
    5be4:	00bfff04 	movi	r2,-4
    5be8:	1100480e 	bge	r2,r4,5d0c <___vfprintf_internal_r+0x1dac>
    5bec:	99004716 	blt	r19,r4,5d0c <___vfprintf_internal_r+0x1dac>
    5bf0:	d8c14d15 	stw	r3,1332(sp)
    5bf4:	003ff006 	br	5bb8 <___vfprintf_internal_r+0x1c58>
    5bf8:	d8800717 	ldw	r2,28(sp)
    5bfc:	14bf8b2e 	bgeu	r2,r18,5a2c <___vfprintf_internal_r+0x1acc>
    5c00:	9007883a 	mov	r3,r18
    5c04:	01000c04 	movi	r4,48
    5c08:	11000005 	stb	r4,0(r2)
    5c0c:	10800044 	addi	r2,r2,1
    5c10:	d8800715 	stw	r2,28(sp)
    5c14:	18bffc1e 	bne	r3,r2,5c08 <___vfprintf_internal_r+0x1ca8>
    5c18:	003f8406 	br	5a2c <___vfprintf_internal_r+0x1acc>
    5c1c:	d8814117 	ldw	r2,1284(sp)
    5c20:	10c00007 	ldb	r3,0(r2)
    5c24:	00800c04 	movi	r2,48
    5c28:	18805b26 	beq	r3,r2,5d98 <___vfprintf_internal_r+0x1e38>
    5c2c:	d9000517 	ldw	r4,20(sp)
    5c30:	9125883a 	add	r18,r18,r4
    5c34:	003f7506 	br	5a0c <___vfprintf_internal_r+0x1aac>
    5c38:	d9014c17 	ldw	r4,1328(sp)
    5c3c:	2080004c 	andi	r2,r4,1
    5c40:	1005003a 	cmpeq	r2,r2,zero
    5c44:	103f6a26 	beq	r2,zero,59f0 <___vfprintf_internal_r+0x1a90>
    5c48:	d8800717 	ldw	r2,28(sp)
    5c4c:	003f7706 	br	5a2c <___vfprintf_internal_r+0x1acc>
    5c50:	d9c14515 	stw	r7,1300(sp)
    5c54:	38004d16 	blt	r7,zero,5d8c <___vfprintf_internal_r+0x1e2c>
    5c58:	dc814715 	stw	r18,1308(sp)
    5c5c:	d8014615 	stw	zero,1304(sp)
    5c60:	003b6106 	br	49e8 <___vfprintf_internal_r+0xa88>
    5c64:	d9014f17 	ldw	r4,1340(sp)
    5c68:	d8800504 	addi	r2,sp,20
    5c6c:	d8800115 	stw	r2,4(sp)
    5c70:	d8c00604 	addi	r3,sp,24
    5c74:	d8800704 	addi	r2,sp,28
    5c78:	800b883a 	mov	r5,r16
    5c7c:	880d883a 	mov	r6,r17
    5c80:	01c000c4 	movi	r7,3
    5c84:	d8c00215 	stw	r3,8(sp)
    5c88:	d8800315 	stw	r2,12(sp)
    5c8c:	dcc00015 	stw	r19,0(sp)
    5c90:	9829883a 	mov	r20,r19
    5c94:	00061840 	call	6184 <_dtoa_r>
    5c98:	d8814115 	stw	r2,1284(sp)
    5c9c:	003f5106 	br	59e4 <___vfprintf_internal_r+0x1a84>
    5ca0:	d8c14217 	ldw	r3,1288(sp)
    5ca4:	d9014317 	ldw	r4,1292(sp)
    5ca8:	07000b44 	movi	fp,45
    5cac:	1821883a 	mov	r16,r3
    5cb0:	2460003c 	xorhi	r17,r4,32768
    5cb4:	003f3106 	br	597c <___vfprintf_internal_r+0x1a1c>
    5cb8:	9d000044 	addi	r20,r19,1
    5cbc:	003f3906 	br	59a4 <___vfprintf_internal_r+0x1a44>
    5cc0:	983f251e 	bne	r19,zero,5958 <___vfprintf_internal_r+0x19f8>
    5cc4:	04c00044 	movi	r19,1
    5cc8:	003f2306 	br	5958 <___vfprintf_internal_r+0x19f8>
    5ccc:	04c00184 	movi	r19,6
    5cd0:	003f2106 	br	5958 <___vfprintf_internal_r+0x19f8>
    5cd4:	d8014515 	stw	zero,1300(sp)
    5cd8:	003eee06 	br	5894 <___vfprintf_internal_r+0x1934>
    5cdc:	200f883a 	mov	r7,r4
    5ce0:	0100370e 	bge	zero,r4,5dc0 <___vfprintf_internal_r+0x1e60>
    5ce4:	9800031e 	bne	r19,zero,5cf4 <___vfprintf_internal_r+0x1d94>
    5ce8:	d9814c17 	ldw	r6,1328(sp)
    5cec:	3080004c 	andi	r2,r6,1
    5cf0:	103fb726 	beq	r2,zero,5bd0 <___vfprintf_internal_r+0x1c70>
    5cf4:	20800044 	addi	r2,r4,1
    5cf8:	98a7883a 	add	r19,r19,r2
    5cfc:	dcc14515 	stw	r19,1300(sp)
    5d00:	980f883a 	mov	r7,r19
    5d04:	983f800e 	bge	r19,zero,5b08 <___vfprintf_internal_r+0x1ba8>
    5d08:	003fb306 	br	5bd8 <___vfprintf_internal_r+0x1c78>
    5d0c:	d9814d17 	ldw	r6,1332(sp)
    5d10:	31bfff84 	addi	r6,r6,-2
    5d14:	d9814d15 	stw	r6,1332(sp)
    5d18:	003f4c06 	br	5a4c <___vfprintf_internal_r+0x1aec>
    5d1c:	0100180e 	bge	zero,r4,5d80 <___vfprintf_internal_r+0x1e20>
    5d20:	00800044 	movi	r2,1
    5d24:	1485883a 	add	r2,r2,r18
    5d28:	d8814515 	stw	r2,1300(sp)
    5d2c:	100f883a 	mov	r7,r2
    5d30:	103f750e 	bge	r2,zero,5b08 <___vfprintf_internal_r+0x1ba8>
    5d34:	003fa806 	br	5bd8 <___vfprintf_internal_r+0x1c78>
    5d38:	80c00c04 	addi	r3,r16,48
    5d3c:	00800c04 	movi	r2,48
    5d40:	d8c008c5 	stb	r3,35(sp)
    5d44:	d9800804 	addi	r6,sp,32
    5d48:	d8c00904 	addi	r3,sp,36
    5d4c:	d8800885 	stb	r2,34(sp)
    5d50:	003f6506 	br	5ae8 <___vfprintf_internal_r+0x1b88>
    5d54:	d9014c17 	ldw	r4,1328(sp)
    5d58:	2084703a 	and	r2,r4,r2
    5d5c:	103f9c26 	beq	r2,zero,5bd0 <___vfprintf_internal_r+0x1c70>
    5d60:	003f6606 	br	5afc <___vfprintf_internal_r+0x1b9c>
    5d64:	d9800804 	addi	r6,sp,32
    5d68:	d8c00884 	addi	r3,sp,34
    5d6c:	003f5e06 	br	5ae8 <___vfprintf_internal_r+0x1b88>
    5d70:	00800b44 	movi	r2,45
    5d74:	0121c83a 	sub	r16,zero,r4
    5d78:	d8800845 	stb	r2,33(sp)
    5d7c:	003f3d06 	br	5a74 <___vfprintf_internal_r+0x1b14>
    5d80:	00800084 	movi	r2,2
    5d84:	1105c83a 	sub	r2,r2,r4
    5d88:	003fe606 	br	5d24 <___vfprintf_internal_r+0x1dc4>
    5d8c:	d8014515 	stw	zero,1300(sp)
    5d90:	dc814715 	stw	r18,1308(sp)
    5d94:	003fb106 	br	5c5c <___vfprintf_internal_r+0x1cfc>
    5d98:	000d883a 	mov	r6,zero
    5d9c:	000f883a 	mov	r7,zero
    5da0:	8009883a 	mov	r4,r16
    5da4:	880b883a 	mov	r5,r17
    5da8:	000b4100 	call	b410 <__nedf2>
    5dac:	103f9f26 	beq	r2,zero,5c2c <___vfprintf_internal_r+0x1ccc>
    5db0:	00800044 	movi	r2,1
    5db4:	1509c83a 	sub	r4,r2,r20
    5db8:	d9000515 	stw	r4,20(sp)
    5dbc:	003f9b06 	br	5c2c <___vfprintf_internal_r+0x1ccc>
    5dc0:	98000d1e 	bne	r19,zero,5df8 <___vfprintf_internal_r+0x1e98>
    5dc4:	d8c14c17 	ldw	r3,1328(sp)
    5dc8:	1880004c 	andi	r2,r3,1
    5dcc:	10000a1e 	bne	r2,zero,5df8 <___vfprintf_internal_r+0x1e98>
    5dd0:	01000044 	movi	r4,1
    5dd4:	200f883a 	mov	r7,r4
    5dd8:	d9014515 	stw	r4,1300(sp)
    5ddc:	003f4a06 	br	5b08 <___vfprintf_internal_r+0x1ba8>
    5de0:	3cc00017 	ldw	r19,0(r7)
    5de4:	39c00104 	addi	r7,r7,4
    5de8:	983d0e0e 	bge	r19,zero,5224 <___vfprintf_internal_r+0x12c4>
    5dec:	b8c00007 	ldb	r3,0(r23)
    5df0:	04ffffc4 	movi	r19,-1
    5df4:	0038d906 	br	415c <___vfprintf_internal_r+0x1fc>
    5df8:	9cc00084 	addi	r19,r19,2
    5dfc:	dcc14515 	stw	r19,1300(sp)
    5e00:	980f883a 	mov	r7,r19
    5e04:	983f400e 	bge	r19,zero,5b08 <___vfprintf_internal_r+0x1ba8>
    5e08:	003f7306 	br	5bd8 <___vfprintf_internal_r+0x1c78>

00005e0c <__vfprintf_internal>:
    5e0c:	00800074 	movhi	r2,1
    5e10:	10834a04 	addi	r2,r2,3368
    5e14:	2013883a 	mov	r9,r4
    5e18:	11000017 	ldw	r4,0(r2)
    5e1c:	2805883a 	mov	r2,r5
    5e20:	300f883a 	mov	r7,r6
    5e24:	480b883a 	mov	r5,r9
    5e28:	100d883a 	mov	r6,r2
    5e2c:	0003f601 	jmpi	3f60 <___vfprintf_internal_r>

00005e30 <__swsetup_r>:
    5e30:	00800074 	movhi	r2,1
    5e34:	10834a04 	addi	r2,r2,3368
    5e38:	10c00017 	ldw	r3,0(r2)
    5e3c:	defffd04 	addi	sp,sp,-12
    5e40:	dc400115 	stw	r17,4(sp)
    5e44:	dc000015 	stw	r16,0(sp)
    5e48:	dfc00215 	stw	ra,8(sp)
    5e4c:	2023883a 	mov	r17,r4
    5e50:	2821883a 	mov	r16,r5
    5e54:	18000226 	beq	r3,zero,5e60 <__swsetup_r+0x30>
    5e58:	18800e17 	ldw	r2,56(r3)
    5e5c:	10001f26 	beq	r2,zero,5edc <__swsetup_r+0xac>
    5e60:	8100030b 	ldhu	r4,12(r16)
    5e64:	2080020c 	andi	r2,r4,8
    5e68:	10002826 	beq	r2,zero,5f0c <__swsetup_r+0xdc>
    5e6c:	81400417 	ldw	r5,16(r16)
    5e70:	28001d26 	beq	r5,zero,5ee8 <__swsetup_r+0xb8>
    5e74:	2080004c 	andi	r2,r4,1
    5e78:	1005003a 	cmpeq	r2,r2,zero
    5e7c:	10000b26 	beq	r2,zero,5eac <__swsetup_r+0x7c>
    5e80:	2080008c 	andi	r2,r4,2
    5e84:	10001226 	beq	r2,zero,5ed0 <__swsetup_r+0xa0>
    5e88:	0005883a 	mov	r2,zero
    5e8c:	80800215 	stw	r2,8(r16)
    5e90:	28000b26 	beq	r5,zero,5ec0 <__swsetup_r+0x90>
    5e94:	0005883a 	mov	r2,zero
    5e98:	dfc00217 	ldw	ra,8(sp)
    5e9c:	dc400117 	ldw	r17,4(sp)
    5ea0:	dc000017 	ldw	r16,0(sp)
    5ea4:	dec00304 	addi	sp,sp,12
    5ea8:	f800283a 	ret
    5eac:	80800517 	ldw	r2,20(r16)
    5eb0:	80000215 	stw	zero,8(r16)
    5eb4:	0085c83a 	sub	r2,zero,r2
    5eb8:	80800615 	stw	r2,24(r16)
    5ebc:	283ff51e 	bne	r5,zero,5e94 <__swsetup_r+0x64>
    5ec0:	2080200c 	andi	r2,r4,128
    5ec4:	103ff326 	beq	r2,zero,5e94 <__swsetup_r+0x64>
    5ec8:	00bfffc4 	movi	r2,-1
    5ecc:	003ff206 	br	5e98 <__swsetup_r+0x68>
    5ed0:	80800517 	ldw	r2,20(r16)
    5ed4:	80800215 	stw	r2,8(r16)
    5ed8:	003fed06 	br	5e90 <__swsetup_r+0x60>
    5edc:	1809883a 	mov	r4,r3
    5ee0:	00079d00 	call	79d0 <__sinit>
    5ee4:	003fde06 	br	5e60 <__swsetup_r+0x30>
    5ee8:	20c0a00c 	andi	r3,r4,640
    5eec:	00808004 	movi	r2,512
    5ef0:	18bfe026 	beq	r3,r2,5e74 <__swsetup_r+0x44>
    5ef4:	8809883a 	mov	r4,r17
    5ef8:	800b883a 	mov	r5,r16
    5efc:	00087480 	call	8748 <__smakebuf_r>
    5f00:	8100030b 	ldhu	r4,12(r16)
    5f04:	81400417 	ldw	r5,16(r16)
    5f08:	003fda06 	br	5e74 <__swsetup_r+0x44>
    5f0c:	2080040c 	andi	r2,r4,16
    5f10:	103fed26 	beq	r2,zero,5ec8 <__swsetup_r+0x98>
    5f14:	2080010c 	andi	r2,r4,4
    5f18:	10001226 	beq	r2,zero,5f64 <__swsetup_r+0x134>
    5f1c:	81400c17 	ldw	r5,48(r16)
    5f20:	28000526 	beq	r5,zero,5f38 <__swsetup_r+0x108>
    5f24:	80801004 	addi	r2,r16,64
    5f28:	28800226 	beq	r5,r2,5f34 <__swsetup_r+0x104>
    5f2c:	8809883a 	mov	r4,r17
    5f30:	0007d540 	call	7d54 <_free_r>
    5f34:	80000c15 	stw	zero,48(r16)
    5f38:	8080030b 	ldhu	r2,12(r16)
    5f3c:	81400417 	ldw	r5,16(r16)
    5f40:	80000115 	stw	zero,4(r16)
    5f44:	10bff6cc 	andi	r2,r2,65499
    5f48:	8080030d 	sth	r2,12(r16)
    5f4c:	81400015 	stw	r5,0(r16)
    5f50:	8080030b 	ldhu	r2,12(r16)
    5f54:	10800214 	ori	r2,r2,8
    5f58:	113fffcc 	andi	r4,r2,65535
    5f5c:	8080030d 	sth	r2,12(r16)
    5f60:	003fc306 	br	5e70 <__swsetup_r+0x40>
    5f64:	81400417 	ldw	r5,16(r16)
    5f68:	003ff906 	br	5f50 <__swsetup_r+0x120>

00005f6c <quorem>:
    5f6c:	28c00417 	ldw	r3,16(r5)
    5f70:	20800417 	ldw	r2,16(r4)
    5f74:	defff604 	addi	sp,sp,-40
    5f78:	ddc00715 	stw	r23,28(sp)
    5f7c:	dd400515 	stw	r21,20(sp)
    5f80:	dfc00915 	stw	ra,36(sp)
    5f84:	df000815 	stw	fp,32(sp)
    5f88:	dd800615 	stw	r22,24(sp)
    5f8c:	dd000415 	stw	r20,16(sp)
    5f90:	dcc00315 	stw	r19,12(sp)
    5f94:	dc800215 	stw	r18,8(sp)
    5f98:	dc400115 	stw	r17,4(sp)
    5f9c:	dc000015 	stw	r16,0(sp)
    5fa0:	202f883a 	mov	r23,r4
    5fa4:	282b883a 	mov	r21,r5
    5fa8:	10c07416 	blt	r2,r3,617c <quorem+0x210>
    5fac:	1c7fffc4 	addi	r17,r3,-1
    5fb0:	8c45883a 	add	r2,r17,r17
    5fb4:	1085883a 	add	r2,r2,r2
    5fb8:	2c000504 	addi	r16,r5,20
    5fbc:	24c00504 	addi	r19,r4,20
    5fc0:	14ed883a 	add	r22,r2,r19
    5fc4:	80a5883a 	add	r18,r16,r2
    5fc8:	b7000017 	ldw	fp,0(r22)
    5fcc:	91400017 	ldw	r5,0(r18)
    5fd0:	e009883a 	mov	r4,fp
    5fd4:	29400044 	addi	r5,r5,1
    5fd8:	000b7680 	call	b768 <__udivsi3>
    5fdc:	1029883a 	mov	r20,r2
    5fe0:	10003c1e 	bne	r2,zero,60d4 <quorem+0x168>
    5fe4:	a80b883a 	mov	r5,r21
    5fe8:	b809883a 	mov	r4,r23
    5fec:	0008c940 	call	8c94 <__mcmp>
    5ff0:	10002b16 	blt	r2,zero,60a0 <quorem+0x134>
    5ff4:	a5000044 	addi	r20,r20,1
    5ff8:	980f883a 	mov	r7,r19
    5ffc:	0011883a 	mov	r8,zero
    6000:	0009883a 	mov	r4,zero
    6004:	81400017 	ldw	r5,0(r16)
    6008:	38c00017 	ldw	r3,0(r7)
    600c:	84000104 	addi	r16,r16,4
    6010:	28bfffcc 	andi	r2,r5,65535
    6014:	2085883a 	add	r2,r4,r2
    6018:	11bfffcc 	andi	r6,r2,65535
    601c:	193fffcc 	andi	r4,r3,65535
    6020:	1004d43a 	srli	r2,r2,16
    6024:	280ad43a 	srli	r5,r5,16
    6028:	2189c83a 	sub	r4,r4,r6
    602c:	2209883a 	add	r4,r4,r8
    6030:	1806d43a 	srli	r3,r3,16
    6034:	288b883a 	add	r5,r5,r2
    6038:	200dd43a 	srai	r6,r4,16
    603c:	28bfffcc 	andi	r2,r5,65535
    6040:	1887c83a 	sub	r3,r3,r2
    6044:	1987883a 	add	r3,r3,r6
    6048:	3900000d 	sth	r4,0(r7)
    604c:	38c0008d 	sth	r3,2(r7)
    6050:	2808d43a 	srli	r4,r5,16
    6054:	39c00104 	addi	r7,r7,4
    6058:	1811d43a 	srai	r8,r3,16
    605c:	943fe92e 	bgeu	r18,r16,6004 <quorem+0x98>
    6060:	8c45883a 	add	r2,r17,r17
    6064:	1085883a 	add	r2,r2,r2
    6068:	9885883a 	add	r2,r19,r2
    606c:	10c00017 	ldw	r3,0(r2)
    6070:	18000b1e 	bne	r3,zero,60a0 <quorem+0x134>
    6074:	113fff04 	addi	r4,r2,-4
    6078:	9900082e 	bgeu	r19,r4,609c <quorem+0x130>
    607c:	10bfff17 	ldw	r2,-4(r2)
    6080:	10000326 	beq	r2,zero,6090 <quorem+0x124>
    6084:	00000506 	br	609c <quorem+0x130>
    6088:	20800017 	ldw	r2,0(r4)
    608c:	1000031e 	bne	r2,zero,609c <quorem+0x130>
    6090:	213fff04 	addi	r4,r4,-4
    6094:	8c7fffc4 	addi	r17,r17,-1
    6098:	993ffb36 	bltu	r19,r4,6088 <quorem+0x11c>
    609c:	bc400415 	stw	r17,16(r23)
    60a0:	a005883a 	mov	r2,r20
    60a4:	dfc00917 	ldw	ra,36(sp)
    60a8:	df000817 	ldw	fp,32(sp)
    60ac:	ddc00717 	ldw	r23,28(sp)
    60b0:	dd800617 	ldw	r22,24(sp)
    60b4:	dd400517 	ldw	r21,20(sp)
    60b8:	dd000417 	ldw	r20,16(sp)
    60bc:	dcc00317 	ldw	r19,12(sp)
    60c0:	dc800217 	ldw	r18,8(sp)
    60c4:	dc400117 	ldw	r17,4(sp)
    60c8:	dc000017 	ldw	r16,0(sp)
    60cc:	dec00a04 	addi	sp,sp,40
    60d0:	f800283a 	ret
    60d4:	980f883a 	mov	r7,r19
    60d8:	8011883a 	mov	r8,r16
    60dc:	0013883a 	mov	r9,zero
    60e0:	000d883a 	mov	r6,zero
    60e4:	40c00017 	ldw	r3,0(r8)
    60e8:	39000017 	ldw	r4,0(r7)
    60ec:	42000104 	addi	r8,r8,4
    60f0:	18bfffcc 	andi	r2,r3,65535
    60f4:	a085383a 	mul	r2,r20,r2
    60f8:	1806d43a 	srli	r3,r3,16
    60fc:	217fffcc 	andi	r5,r4,65535
    6100:	3085883a 	add	r2,r6,r2
    6104:	11bfffcc 	andi	r6,r2,65535
    6108:	a0c7383a 	mul	r3,r20,r3
    610c:	1004d43a 	srli	r2,r2,16
    6110:	298bc83a 	sub	r5,r5,r6
    6114:	2a4b883a 	add	r5,r5,r9
    6118:	2008d43a 	srli	r4,r4,16
    611c:	1887883a 	add	r3,r3,r2
    6120:	280dd43a 	srai	r6,r5,16
    6124:	18bfffcc 	andi	r2,r3,65535
    6128:	2089c83a 	sub	r4,r4,r2
    612c:	2189883a 	add	r4,r4,r6
    6130:	3900008d 	sth	r4,2(r7)
    6134:	3940000d 	sth	r5,0(r7)
    6138:	180cd43a 	srli	r6,r3,16
    613c:	39c00104 	addi	r7,r7,4
    6140:	2013d43a 	srai	r9,r4,16
    6144:	923fe72e 	bgeu	r18,r8,60e4 <quorem+0x178>
    6148:	e03fa61e 	bne	fp,zero,5fe4 <quorem+0x78>
    614c:	b0ffff04 	addi	r3,r22,-4
    6150:	98c0082e 	bgeu	r19,r3,6174 <quorem+0x208>
    6154:	b0bfff17 	ldw	r2,-4(r22)
    6158:	10000326 	beq	r2,zero,6168 <quorem+0x1fc>
    615c:	00000506 	br	6174 <quorem+0x208>
    6160:	18800017 	ldw	r2,0(r3)
    6164:	1000031e 	bne	r2,zero,6174 <quorem+0x208>
    6168:	18ffff04 	addi	r3,r3,-4
    616c:	8c7fffc4 	addi	r17,r17,-1
    6170:	98fffb36 	bltu	r19,r3,6160 <quorem+0x1f4>
    6174:	bc400415 	stw	r17,16(r23)
    6178:	003f9a06 	br	5fe4 <quorem+0x78>
    617c:	0005883a 	mov	r2,zero
    6180:	003fc806 	br	60a4 <quorem+0x138>

00006184 <_dtoa_r>:
    6184:	22001017 	ldw	r8,64(r4)
    6188:	deffda04 	addi	sp,sp,-152
    618c:	dd402115 	stw	r21,132(sp)
    6190:	dd002015 	stw	r20,128(sp)
    6194:	dc801e15 	stw	r18,120(sp)
    6198:	dc401d15 	stw	r17,116(sp)
    619c:	dfc02515 	stw	ra,148(sp)
    61a0:	df002415 	stw	fp,144(sp)
    61a4:	ddc02315 	stw	r23,140(sp)
    61a8:	dd802215 	stw	r22,136(sp)
    61ac:	dcc01f15 	stw	r19,124(sp)
    61b0:	dc001c15 	stw	r16,112(sp)
    61b4:	d9001615 	stw	r4,88(sp)
    61b8:	3023883a 	mov	r17,r6
    61bc:	2829883a 	mov	r20,r5
    61c0:	d9c01715 	stw	r7,92(sp)
    61c4:	dc802817 	ldw	r18,160(sp)
    61c8:	302b883a 	mov	r21,r6
    61cc:	40000a26 	beq	r8,zero,61f8 <_dtoa_r+0x74>
    61d0:	20801117 	ldw	r2,68(r4)
    61d4:	400b883a 	mov	r5,r8
    61d8:	40800115 	stw	r2,4(r8)
    61dc:	20c01117 	ldw	r3,68(r4)
    61e0:	00800044 	movi	r2,1
    61e4:	10c4983a 	sll	r2,r2,r3
    61e8:	40800215 	stw	r2,8(r8)
    61ec:	0008b380 	call	8b38 <_Bfree>
    61f0:	d8c01617 	ldw	r3,88(sp)
    61f4:	18001015 	stw	zero,64(r3)
    61f8:	8800a316 	blt	r17,zero,6488 <_dtoa_r+0x304>
    61fc:	90000015 	stw	zero,0(r18)
    6200:	a8dffc2c 	andhi	r3,r21,32752
    6204:	009ffc34 	movhi	r2,32752
    6208:	18809126 	beq	r3,r2,6450 <_dtoa_r+0x2cc>
    620c:	000d883a 	mov	r6,zero
    6210:	000f883a 	mov	r7,zero
    6214:	a009883a 	mov	r4,r20
    6218:	a80b883a 	mov	r5,r21
    621c:	dd001215 	stw	r20,72(sp)
    6220:	dd401315 	stw	r21,76(sp)
    6224:	000b4100 	call	b410 <__nedf2>
    6228:	1000171e 	bne	r2,zero,6288 <_dtoa_r+0x104>
    622c:	d9802717 	ldw	r6,156(sp)
    6230:	00800044 	movi	r2,1
    6234:	30800015 	stw	r2,0(r6)
    6238:	d8802917 	ldw	r2,164(sp)
    623c:	10029b26 	beq	r2,zero,6cac <_dtoa_r+0xb28>
    6240:	d9002917 	ldw	r4,164(sp)
    6244:	00800074 	movhi	r2,1
    6248:	10babe44 	addi	r2,r2,-5383
    624c:	10ffffc4 	addi	r3,r2,-1
    6250:	20800015 	stw	r2,0(r4)
    6254:	1805883a 	mov	r2,r3
    6258:	dfc02517 	ldw	ra,148(sp)
    625c:	df002417 	ldw	fp,144(sp)
    6260:	ddc02317 	ldw	r23,140(sp)
    6264:	dd802217 	ldw	r22,136(sp)
    6268:	dd402117 	ldw	r21,132(sp)
    626c:	dd002017 	ldw	r20,128(sp)
    6270:	dcc01f17 	ldw	r19,124(sp)
    6274:	dc801e17 	ldw	r18,120(sp)
    6278:	dc401d17 	ldw	r17,116(sp)
    627c:	dc001c17 	ldw	r16,112(sp)
    6280:	dec02604 	addi	sp,sp,152
    6284:	f800283a 	ret
    6288:	d9001617 	ldw	r4,88(sp)
    628c:	d9401217 	ldw	r5,72(sp)
    6290:	d8800104 	addi	r2,sp,4
    6294:	a80d883a 	mov	r6,r21
    6298:	d9c00204 	addi	r7,sp,8
    629c:	d8800015 	stw	r2,0(sp)
    62a0:	00091740 	call	9174 <__d2b>
    62a4:	d8800715 	stw	r2,28(sp)
    62a8:	a804d53a 	srli	r2,r21,20
    62ac:	1101ffcc 	andi	r4,r2,2047
    62b0:	20008626 	beq	r4,zero,64cc <_dtoa_r+0x348>
    62b4:	d8c01217 	ldw	r3,72(sp)
    62b8:	00800434 	movhi	r2,16
    62bc:	10bfffc4 	addi	r2,r2,-1
    62c0:	ddc00117 	ldw	r23,4(sp)
    62c4:	a884703a 	and	r2,r21,r2
    62c8:	1811883a 	mov	r8,r3
    62cc:	124ffc34 	orhi	r9,r2,16368
    62d0:	25bf0044 	addi	r22,r4,-1023
    62d4:	d8000815 	stw	zero,32(sp)
    62d8:	0005883a 	mov	r2,zero
    62dc:	00cffe34 	movhi	r3,16376
    62e0:	480b883a 	mov	r5,r9
    62e4:	4009883a 	mov	r4,r8
    62e8:	180f883a 	mov	r7,r3
    62ec:	100d883a 	mov	r6,r2
    62f0:	000243c0 	call	243c <__subdf3>
    62f4:	0218dbf4 	movhi	r8,25455
    62f8:	4210d844 	addi	r8,r8,17249
    62fc:	024ff4f4 	movhi	r9,16339
    6300:	4a61e9c4 	addi	r9,r9,-30809
    6304:	480f883a 	mov	r7,r9
    6308:	400d883a 	mov	r6,r8
    630c:	180b883a 	mov	r5,r3
    6310:	1009883a 	mov	r4,r2
    6314:	00025300 	call	2530 <__muldf3>
    6318:	0222d874 	movhi	r8,35681
    631c:	42322cc4 	addi	r8,r8,-14157
    6320:	024ff1f4 	movhi	r9,16327
    6324:	4a628a04 	addi	r9,r9,-30168
    6328:	480f883a 	mov	r7,r9
    632c:	400d883a 	mov	r6,r8
    6330:	180b883a 	mov	r5,r3
    6334:	1009883a 	mov	r4,r2
    6338:	00024bc0 	call	24bc <__adddf3>
    633c:	b009883a 	mov	r4,r22
    6340:	1021883a 	mov	r16,r2
    6344:	1823883a 	mov	r17,r3
    6348:	0002ce40 	call	2ce4 <__floatsidf>
    634c:	021427f4 	movhi	r8,20639
    6350:	421e7ec4 	addi	r8,r8,31227
    6354:	024ff4f4 	movhi	r9,16339
    6358:	4a5104c4 	addi	r9,r9,17427
    635c:	480f883a 	mov	r7,r9
    6360:	400d883a 	mov	r6,r8
    6364:	180b883a 	mov	r5,r3
    6368:	1009883a 	mov	r4,r2
    636c:	00025300 	call	2530 <__muldf3>
    6370:	180f883a 	mov	r7,r3
    6374:	880b883a 	mov	r5,r17
    6378:	100d883a 	mov	r6,r2
    637c:	8009883a 	mov	r4,r16
    6380:	00024bc0 	call	24bc <__adddf3>
    6384:	1009883a 	mov	r4,r2
    6388:	180b883a 	mov	r5,r3
    638c:	1021883a 	mov	r16,r2
    6390:	1823883a 	mov	r17,r3
    6394:	0002ddc0 	call	2ddc <__fixdfsi>
    6398:	000d883a 	mov	r6,zero
    639c:	000f883a 	mov	r7,zero
    63a0:	8009883a 	mov	r4,r16
    63a4:	880b883a 	mov	r5,r17
    63a8:	d8800d15 	stw	r2,52(sp)
    63ac:	0002c5c0 	call	2c5c <__ltdf2>
    63b0:	10031716 	blt	r2,zero,7010 <_dtoa_r+0xe8c>
    63b4:	d8c00d17 	ldw	r3,52(sp)
    63b8:	00800584 	movi	r2,22
    63bc:	10c1482e 	bgeu	r2,r3,68e0 <_dtoa_r+0x75c>
    63c0:	01000044 	movi	r4,1
    63c4:	d9000c15 	stw	r4,48(sp)
    63c8:	bd85c83a 	sub	r2,r23,r22
    63cc:	11bfffc4 	addi	r6,r2,-1
    63d0:	30030b16 	blt	r6,zero,7000 <_dtoa_r+0xe7c>
    63d4:	d9800a15 	stw	r6,40(sp)
    63d8:	d8001115 	stw	zero,68(sp)
    63dc:	d8c00d17 	ldw	r3,52(sp)
    63e0:	1802ff16 	blt	r3,zero,6fe0 <_dtoa_r+0xe5c>
    63e4:	d9000a17 	ldw	r4,40(sp)
    63e8:	d8c00915 	stw	r3,36(sp)
    63ec:	d8001015 	stw	zero,64(sp)
    63f0:	20c9883a 	add	r4,r4,r3
    63f4:	d9000a15 	stw	r4,40(sp)
    63f8:	d9001717 	ldw	r4,92(sp)
    63fc:	00800244 	movi	r2,9
    6400:	11004636 	bltu	r2,r4,651c <_dtoa_r+0x398>
    6404:	00800144 	movi	r2,5
    6408:	11020416 	blt	r2,r4,6c1c <_dtoa_r+0xa98>
    640c:	04400044 	movi	r17,1
    6410:	d8c01717 	ldw	r3,92(sp)
    6414:	00800144 	movi	r2,5
    6418:	10c1ed36 	bltu	r2,r3,6bd0 <_dtoa_r+0xa4c>
    641c:	18c5883a 	add	r2,r3,r3
    6420:	1085883a 	add	r2,r2,r2
    6424:	00c00034 	movhi	r3,0
    6428:	18d90e04 	addi	r3,r3,25656
    642c:	10c5883a 	add	r2,r2,r3
    6430:	11000017 	ldw	r4,0(r2)
    6434:	2000683a 	jmp	r4
    6438:	00006524 	muli	zero,zero,404
    643c:	00006524 	muli	zero,zero,404
    6440:	00006f24 	muli	zero,zero,444
    6444:	00006efc 	xorhi	zero,zero,443
    6448:	00006f40 	call	6f4 <char_lcd_shift_right+0x4>
    644c:	00006f4c 	andi	zero,zero,445
    6450:	d9002717 	ldw	r4,156(sp)
    6454:	0089c3c4 	movi	r2,9999
    6458:	20800015 	stw	r2,0(r4)
    645c:	a0001026 	beq	r20,zero,64a0 <_dtoa_r+0x31c>
    6460:	00c00074 	movhi	r3,1
    6464:	18faca04 	addi	r3,r3,-5336
    6468:	d9802917 	ldw	r6,164(sp)
    646c:	303f7926 	beq	r6,zero,6254 <_dtoa_r+0xd0>
    6470:	188000c7 	ldb	r2,3(r3)
    6474:	190000c4 	addi	r4,r3,3
    6478:	1000101e 	bne	r2,zero,64bc <_dtoa_r+0x338>
    647c:	d8802917 	ldw	r2,164(sp)
    6480:	11000015 	stw	r4,0(r2)
    6484:	003f7306 	br	6254 <_dtoa_r+0xd0>
    6488:	00a00034 	movhi	r2,32768
    648c:	10bfffc4 	addi	r2,r2,-1
    6490:	00c00044 	movi	r3,1
    6494:	88aa703a 	and	r21,r17,r2
    6498:	90c00015 	stw	r3,0(r18)
    649c:	003f5806 	br	6200 <_dtoa_r+0x7c>
    64a0:	00800434 	movhi	r2,16
    64a4:	10bfffc4 	addi	r2,r2,-1
    64a8:	a884703a 	and	r2,r21,r2
    64ac:	103fec1e 	bne	r2,zero,6460 <_dtoa_r+0x2dc>
    64b0:	00c00074 	movhi	r3,1
    64b4:	18fac704 	addi	r3,r3,-5348
    64b8:	003feb06 	br	6468 <_dtoa_r+0x2e4>
    64bc:	d8802917 	ldw	r2,164(sp)
    64c0:	19000204 	addi	r4,r3,8
    64c4:	11000015 	stw	r4,0(r2)
    64c8:	003f6206 	br	6254 <_dtoa_r+0xd0>
    64cc:	ddc00117 	ldw	r23,4(sp)
    64d0:	d8800217 	ldw	r2,8(sp)
    64d4:	01000804 	movi	r4,32
    64d8:	b8c10c84 	addi	r3,r23,1074
    64dc:	18a3883a 	add	r17,r3,r2
    64e0:	2441b80e 	bge	r4,r17,6bc4 <_dtoa_r+0xa40>
    64e4:	00c01004 	movi	r3,64
    64e8:	1c47c83a 	sub	r3,r3,r17
    64ec:	88bff804 	addi	r2,r17,-32
    64f0:	a8c6983a 	sll	r3,r21,r3
    64f4:	a084d83a 	srl	r2,r20,r2
    64f8:	1888b03a 	or	r4,r3,r2
    64fc:	000b4980 	call	b498 <__floatunsidf>
    6500:	1011883a 	mov	r8,r2
    6504:	00bf8434 	movhi	r2,65040
    6508:	01000044 	movi	r4,1
    650c:	10d3883a 	add	r9,r2,r3
    6510:	8dbef344 	addi	r22,r17,-1075
    6514:	d9000815 	stw	r4,32(sp)
    6518:	003f6f06 	br	62d8 <_dtoa_r+0x154>
    651c:	d8001715 	stw	zero,92(sp)
    6520:	04400044 	movi	r17,1
    6524:	00bfffc4 	movi	r2,-1
    6528:	00c00044 	movi	r3,1
    652c:	d8800e15 	stw	r2,56(sp)
    6530:	d8002615 	stw	zero,152(sp)
    6534:	d8800f15 	stw	r2,60(sp)
    6538:	d8c00b15 	stw	r3,44(sp)
    653c:	1021883a 	mov	r16,r2
    6540:	d8801617 	ldw	r2,88(sp)
    6544:	10001115 	stw	zero,68(r2)
    6548:	d8801617 	ldw	r2,88(sp)
    654c:	11401117 	ldw	r5,68(r2)
    6550:	1009883a 	mov	r4,r2
    6554:	00090b80 	call	90b8 <_Balloc>
    6558:	d8c01617 	ldw	r3,88(sp)
    655c:	d8800515 	stw	r2,20(sp)
    6560:	18801015 	stw	r2,64(r3)
    6564:	00800384 	movi	r2,14
    6568:	14006836 	bltu	r2,r16,670c <_dtoa_r+0x588>
    656c:	8805003a 	cmpeq	r2,r17,zero
    6570:	1000661e 	bne	r2,zero,670c <_dtoa_r+0x588>
    6574:	d9000d17 	ldw	r4,52(sp)
    6578:	0102300e 	bge	zero,r4,6e3c <_dtoa_r+0xcb8>
    657c:	208003cc 	andi	r2,r4,15
    6580:	100490fa 	slli	r2,r2,3
    6584:	2025d13a 	srai	r18,r4,4
    6588:	00c00074 	movhi	r3,1
    658c:	18fadb04 	addi	r3,r3,-5268
    6590:	10c5883a 	add	r2,r2,r3
    6594:	90c0040c 	andi	r3,r18,16
    6598:	14000017 	ldw	r16,0(r2)
    659c:	14400117 	ldw	r17,4(r2)
    65a0:	18036a1e 	bne	r3,zero,734c <_dtoa_r+0x11c8>
    65a4:	05800084 	movi	r22,2
    65a8:	90001026 	beq	r18,zero,65ec <_dtoa_r+0x468>
    65ac:	04c00074 	movhi	r19,1
    65b0:	9cfb0d04 	addi	r19,r19,-5068
    65b4:	9080004c 	andi	r2,r18,1
    65b8:	1005003a 	cmpeq	r2,r2,zero
    65bc:	1000081e 	bne	r2,zero,65e0 <_dtoa_r+0x45c>
    65c0:	99800017 	ldw	r6,0(r19)
    65c4:	99c00117 	ldw	r7,4(r19)
    65c8:	880b883a 	mov	r5,r17
    65cc:	8009883a 	mov	r4,r16
    65d0:	00025300 	call	2530 <__muldf3>
    65d4:	1021883a 	mov	r16,r2
    65d8:	b5800044 	addi	r22,r22,1
    65dc:	1823883a 	mov	r17,r3
    65e0:	9025d07a 	srai	r18,r18,1
    65e4:	9cc00204 	addi	r19,r19,8
    65e8:	903ff21e 	bne	r18,zero,65b4 <_dtoa_r+0x430>
    65ec:	a80b883a 	mov	r5,r21
    65f0:	a009883a 	mov	r4,r20
    65f4:	880f883a 	mov	r7,r17
    65f8:	800d883a 	mov	r6,r16
    65fc:	00028f40 	call	28f4 <__divdf3>
    6600:	1029883a 	mov	r20,r2
    6604:	182b883a 	mov	r21,r3
    6608:	d8c00c17 	ldw	r3,48(sp)
    660c:	1805003a 	cmpeq	r2,r3,zero
    6610:	1000081e 	bne	r2,zero,6634 <_dtoa_r+0x4b0>
    6614:	0005883a 	mov	r2,zero
    6618:	00cffc34 	movhi	r3,16368
    661c:	180f883a 	mov	r7,r3
    6620:	a009883a 	mov	r4,r20
    6624:	a80b883a 	mov	r5,r21
    6628:	100d883a 	mov	r6,r2
    662c:	0002c5c0 	call	2c5c <__ltdf2>
    6630:	1003fe16 	blt	r2,zero,762c <_dtoa_r+0x14a8>
    6634:	b009883a 	mov	r4,r22
    6638:	0002ce40 	call	2ce4 <__floatsidf>
    663c:	180b883a 	mov	r5,r3
    6640:	1009883a 	mov	r4,r2
    6644:	a00d883a 	mov	r6,r20
    6648:	a80f883a 	mov	r7,r21
    664c:	00025300 	call	2530 <__muldf3>
    6650:	0011883a 	mov	r8,zero
    6654:	02500734 	movhi	r9,16412
    6658:	1009883a 	mov	r4,r2
    665c:	180b883a 	mov	r5,r3
    6660:	480f883a 	mov	r7,r9
    6664:	400d883a 	mov	r6,r8
    6668:	00024bc0 	call	24bc <__adddf3>
    666c:	d9000f17 	ldw	r4,60(sp)
    6670:	102d883a 	mov	r22,r2
    6674:	00bf3034 	movhi	r2,64704
    6678:	18b9883a 	add	fp,r3,r2
    667c:	e02f883a 	mov	r23,fp
    6680:	20028f1e 	bne	r4,zero,70c0 <_dtoa_r+0xf3c>
    6684:	0005883a 	mov	r2,zero
    6688:	00d00534 	movhi	r3,16404
    668c:	a009883a 	mov	r4,r20
    6690:	a80b883a 	mov	r5,r21
    6694:	180f883a 	mov	r7,r3
    6698:	100d883a 	mov	r6,r2
    669c:	000243c0 	call	243c <__subdf3>
    66a0:	1009883a 	mov	r4,r2
    66a4:	e00f883a 	mov	r7,fp
    66a8:	180b883a 	mov	r5,r3
    66ac:	b00d883a 	mov	r6,r22
    66b0:	1025883a 	mov	r18,r2
    66b4:	1827883a 	mov	r19,r3
    66b8:	0002b4c0 	call	2b4c <__gtdf2>
    66bc:	00834f16 	blt	zero,r2,73fc <_dtoa_r+0x1278>
    66c0:	e0e0003c 	xorhi	r3,fp,32768
    66c4:	9009883a 	mov	r4,r18
    66c8:	980b883a 	mov	r5,r19
    66cc:	180f883a 	mov	r7,r3
    66d0:	b00d883a 	mov	r6,r22
    66d4:	0002c5c0 	call	2c5c <__ltdf2>
    66d8:	1000080e 	bge	r2,zero,66fc <_dtoa_r+0x578>
    66dc:	0027883a 	mov	r19,zero
    66e0:	0025883a 	mov	r18,zero
    66e4:	d8802617 	ldw	r2,152(sp)
    66e8:	df000517 	ldw	fp,20(sp)
    66ec:	d8000615 	stw	zero,24(sp)
    66f0:	0084303a 	nor	r2,zero,r2
    66f4:	d8800d15 	stw	r2,52(sp)
    66f8:	00019b06 	br	6d68 <_dtoa_r+0xbe4>
    66fc:	d9801217 	ldw	r6,72(sp)
    6700:	d8801317 	ldw	r2,76(sp)
    6704:	3029883a 	mov	r20,r6
    6708:	102b883a 	mov	r21,r2
    670c:	d8c00217 	ldw	r3,8(sp)
    6710:	18008516 	blt	r3,zero,6928 <_dtoa_r+0x7a4>
    6714:	d9000d17 	ldw	r4,52(sp)
    6718:	00800384 	movi	r2,14
    671c:	11008216 	blt	r2,r4,6928 <_dtoa_r+0x7a4>
    6720:	200490fa 	slli	r2,r4,3
    6724:	d9802617 	ldw	r6,152(sp)
    6728:	00c00074 	movhi	r3,1
    672c:	18fadb04 	addi	r3,r3,-5268
    6730:	10c5883a 	add	r2,r2,r3
    6734:	14800017 	ldw	r18,0(r2)
    6738:	14c00117 	ldw	r19,4(r2)
    673c:	30031e16 	blt	r6,zero,73b8 <_dtoa_r+0x1234>
    6740:	d9000517 	ldw	r4,20(sp)
    6744:	d8c00f17 	ldw	r3,60(sp)
    6748:	a823883a 	mov	r17,r21
    674c:	a021883a 	mov	r16,r20
    6750:	192b883a 	add	r21,r3,r4
    6754:	2039883a 	mov	fp,r4
    6758:	00000f06 	br	6798 <_dtoa_r+0x614>
    675c:	0005883a 	mov	r2,zero
    6760:	00d00934 	movhi	r3,16420
    6764:	5009883a 	mov	r4,r10
    6768:	580b883a 	mov	r5,r11
    676c:	180f883a 	mov	r7,r3
    6770:	100d883a 	mov	r6,r2
    6774:	00025300 	call	2530 <__muldf3>
    6778:	180b883a 	mov	r5,r3
    677c:	000d883a 	mov	r6,zero
    6780:	000f883a 	mov	r7,zero
    6784:	1009883a 	mov	r4,r2
    6788:	1021883a 	mov	r16,r2
    678c:	1823883a 	mov	r17,r3
    6790:	000b4100 	call	b410 <__nedf2>
    6794:	10004526 	beq	r2,zero,68ac <_dtoa_r+0x728>
    6798:	900d883a 	mov	r6,r18
    679c:	980f883a 	mov	r7,r19
    67a0:	8009883a 	mov	r4,r16
    67a4:	880b883a 	mov	r5,r17
    67a8:	00028f40 	call	28f4 <__divdf3>
    67ac:	180b883a 	mov	r5,r3
    67b0:	1009883a 	mov	r4,r2
    67b4:	0002ddc0 	call	2ddc <__fixdfsi>
    67b8:	1009883a 	mov	r4,r2
    67bc:	1029883a 	mov	r20,r2
    67c0:	0002ce40 	call	2ce4 <__floatsidf>
    67c4:	180f883a 	mov	r7,r3
    67c8:	9009883a 	mov	r4,r18
    67cc:	980b883a 	mov	r5,r19
    67d0:	100d883a 	mov	r6,r2
    67d4:	00025300 	call	2530 <__muldf3>
    67d8:	180f883a 	mov	r7,r3
    67dc:	880b883a 	mov	r5,r17
    67e0:	8009883a 	mov	r4,r16
    67e4:	100d883a 	mov	r6,r2
    67e8:	000243c0 	call	243c <__subdf3>
    67ec:	1015883a 	mov	r10,r2
    67f0:	a0800c04 	addi	r2,r20,48
    67f4:	e0800005 	stb	r2,0(fp)
    67f8:	e7000044 	addi	fp,fp,1
    67fc:	1817883a 	mov	r11,r3
    6800:	e57fd61e 	bne	fp,r21,675c <_dtoa_r+0x5d8>
    6804:	500d883a 	mov	r6,r10
    6808:	180f883a 	mov	r7,r3
    680c:	5009883a 	mov	r4,r10
    6810:	180b883a 	mov	r5,r3
    6814:	00024bc0 	call	24bc <__adddf3>
    6818:	100d883a 	mov	r6,r2
    681c:	9009883a 	mov	r4,r18
    6820:	980b883a 	mov	r5,r19
    6824:	180f883a 	mov	r7,r3
    6828:	1021883a 	mov	r16,r2
    682c:	1823883a 	mov	r17,r3
    6830:	0002c5c0 	call	2c5c <__ltdf2>
    6834:	10000816 	blt	r2,zero,6858 <_dtoa_r+0x6d4>
    6838:	980b883a 	mov	r5,r19
    683c:	800d883a 	mov	r6,r16
    6840:	880f883a 	mov	r7,r17
    6844:	9009883a 	mov	r4,r18
    6848:	000b3880 	call	b388 <__eqdf2>
    684c:	1000171e 	bne	r2,zero,68ac <_dtoa_r+0x728>
    6850:	a080004c 	andi	r2,r20,1
    6854:	10001526 	beq	r2,zero,68ac <_dtoa_r+0x728>
    6858:	d8800d17 	ldw	r2,52(sp)
    685c:	d8800415 	stw	r2,16(sp)
    6860:	e009883a 	mov	r4,fp
    6864:	213fffc4 	addi	r4,r4,-1
    6868:	20c00007 	ldb	r3,0(r4)
    686c:	00800e44 	movi	r2,57
    6870:	1880081e 	bne	r3,r2,6894 <_dtoa_r+0x710>
    6874:	d8800517 	ldw	r2,20(sp)
    6878:	113ffa1e 	bne	r2,r4,6864 <_dtoa_r+0x6e0>
    687c:	d8c00417 	ldw	r3,16(sp)
    6880:	d9800517 	ldw	r6,20(sp)
    6884:	00800c04 	movi	r2,48
    6888:	18c00044 	addi	r3,r3,1
    688c:	d8c00415 	stw	r3,16(sp)
    6890:	30800005 	stb	r2,0(r6)
    6894:	20800003 	ldbu	r2,0(r4)
    6898:	d8c00417 	ldw	r3,16(sp)
    689c:	27000044 	addi	fp,r4,1
    68a0:	10800044 	addi	r2,r2,1
    68a4:	d8c00d15 	stw	r3,52(sp)
    68a8:	20800005 	stb	r2,0(r4)
    68ac:	d9001617 	ldw	r4,88(sp)
    68b0:	d9400717 	ldw	r5,28(sp)
    68b4:	0008b380 	call	8b38 <_Bfree>
    68b8:	e0000005 	stb	zero,0(fp)
    68bc:	d9800d17 	ldw	r6,52(sp)
    68c0:	d8c02717 	ldw	r3,156(sp)
    68c4:	d9002917 	ldw	r4,164(sp)
    68c8:	30800044 	addi	r2,r6,1
    68cc:	18800015 	stw	r2,0(r3)
    68d0:	20029c26 	beq	r4,zero,7344 <_dtoa_r+0x11c0>
    68d4:	d8c00517 	ldw	r3,20(sp)
    68d8:	27000015 	stw	fp,0(r4)
    68dc:	003e5d06 	br	6254 <_dtoa_r+0xd0>
    68e0:	d9800d17 	ldw	r6,52(sp)
    68e4:	00c00074 	movhi	r3,1
    68e8:	18fadb04 	addi	r3,r3,-5268
    68ec:	d9001217 	ldw	r4,72(sp)
    68f0:	300490fa 	slli	r2,r6,3
    68f4:	d9401317 	ldw	r5,76(sp)
    68f8:	10c5883a 	add	r2,r2,r3
    68fc:	12000017 	ldw	r8,0(r2)
    6900:	12400117 	ldw	r9,4(r2)
    6904:	400d883a 	mov	r6,r8
    6908:	480f883a 	mov	r7,r9
    690c:	0002c5c0 	call	2c5c <__ltdf2>
    6910:	1000030e 	bge	r2,zero,6920 <_dtoa_r+0x79c>
    6914:	d8800d17 	ldw	r2,52(sp)
    6918:	10bfffc4 	addi	r2,r2,-1
    691c:	d8800d15 	stw	r2,52(sp)
    6920:	d8000c15 	stw	zero,48(sp)
    6924:	003ea806 	br	63c8 <_dtoa_r+0x244>
    6928:	d9000b17 	ldw	r4,44(sp)
    692c:	202cc03a 	cmpne	r22,r4,zero
    6930:	b000c71e 	bne	r22,zero,6c50 <_dtoa_r+0xacc>
    6934:	dc001117 	ldw	r16,68(sp)
    6938:	dc801017 	ldw	r18,64(sp)
    693c:	0027883a 	mov	r19,zero
    6940:	04000b0e 	bge	zero,r16,6970 <_dtoa_r+0x7ec>
    6944:	d8c00a17 	ldw	r3,40(sp)
    6948:	00c0090e 	bge	zero,r3,6970 <_dtoa_r+0x7ec>
    694c:	8005883a 	mov	r2,r16
    6950:	1c011316 	blt	r3,r16,6da0 <_dtoa_r+0xc1c>
    6954:	d9000a17 	ldw	r4,40(sp)
    6958:	d9801117 	ldw	r6,68(sp)
    695c:	80a1c83a 	sub	r16,r16,r2
    6960:	2089c83a 	sub	r4,r4,r2
    6964:	308dc83a 	sub	r6,r6,r2
    6968:	d9000a15 	stw	r4,40(sp)
    696c:	d9801115 	stw	r6,68(sp)
    6970:	d8801017 	ldw	r2,64(sp)
    6974:	0080150e 	bge	zero,r2,69cc <_dtoa_r+0x848>
    6978:	d8c00b17 	ldw	r3,44(sp)
    697c:	1805003a 	cmpeq	r2,r3,zero
    6980:	1001c91e 	bne	r2,zero,70a8 <_dtoa_r+0xf24>
    6984:	04800e0e 	bge	zero,r18,69c0 <_dtoa_r+0x83c>
    6988:	d9001617 	ldw	r4,88(sp)
    698c:	980b883a 	mov	r5,r19
    6990:	900d883a 	mov	r6,r18
    6994:	00098ec0 	call	98ec <__pow5mult>
    6998:	d9001617 	ldw	r4,88(sp)
    699c:	d9800717 	ldw	r6,28(sp)
    69a0:	100b883a 	mov	r5,r2
    69a4:	1027883a 	mov	r19,r2
    69a8:	00095c80 	call	95c8 <__multiply>
    69ac:	d9001617 	ldw	r4,88(sp)
    69b0:	d9400717 	ldw	r5,28(sp)
    69b4:	1023883a 	mov	r17,r2
    69b8:	0008b380 	call	8b38 <_Bfree>
    69bc:	dc400715 	stw	r17,28(sp)
    69c0:	d9001017 	ldw	r4,64(sp)
    69c4:	248dc83a 	sub	r6,r4,r18
    69c8:	30010e1e 	bne	r6,zero,6e04 <_dtoa_r+0xc80>
    69cc:	d9001617 	ldw	r4,88(sp)
    69d0:	04400044 	movi	r17,1
    69d4:	880b883a 	mov	r5,r17
    69d8:	00097b00 	call	97b0 <__i2b>
    69dc:	d9800917 	ldw	r6,36(sp)
    69e0:	1025883a 	mov	r18,r2
    69e4:	0180040e 	bge	zero,r6,69f8 <_dtoa_r+0x874>
    69e8:	d9001617 	ldw	r4,88(sp)
    69ec:	100b883a 	mov	r5,r2
    69f0:	00098ec0 	call	98ec <__pow5mult>
    69f4:	1025883a 	mov	r18,r2
    69f8:	d8801717 	ldw	r2,92(sp)
    69fc:	8880f30e 	bge	r17,r2,6dcc <_dtoa_r+0xc48>
    6a00:	0023883a 	mov	r17,zero
    6a04:	d9800917 	ldw	r6,36(sp)
    6a08:	30019e1e 	bne	r6,zero,7084 <_dtoa_r+0xf00>
    6a0c:	00c00044 	movi	r3,1
    6a10:	d9000a17 	ldw	r4,40(sp)
    6a14:	20c5883a 	add	r2,r4,r3
    6a18:	10c007cc 	andi	r3,r2,31
    6a1c:	1800841e 	bne	r3,zero,6c30 <_dtoa_r+0xaac>
    6a20:	00800704 	movi	r2,28
    6a24:	d9000a17 	ldw	r4,40(sp)
    6a28:	d9801117 	ldw	r6,68(sp)
    6a2c:	80a1883a 	add	r16,r16,r2
    6a30:	2089883a 	add	r4,r4,r2
    6a34:	308d883a 	add	r6,r6,r2
    6a38:	d9000a15 	stw	r4,40(sp)
    6a3c:	d9801115 	stw	r6,68(sp)
    6a40:	d8801117 	ldw	r2,68(sp)
    6a44:	0080050e 	bge	zero,r2,6a5c <_dtoa_r+0x8d8>
    6a48:	d9400717 	ldw	r5,28(sp)
    6a4c:	d9001617 	ldw	r4,88(sp)
    6a50:	100d883a 	mov	r6,r2
    6a54:	000947c0 	call	947c <__lshift>
    6a58:	d8800715 	stw	r2,28(sp)
    6a5c:	d8c00a17 	ldw	r3,40(sp)
    6a60:	00c0050e 	bge	zero,r3,6a78 <_dtoa_r+0x8f4>
    6a64:	d9001617 	ldw	r4,88(sp)
    6a68:	900b883a 	mov	r5,r18
    6a6c:	180d883a 	mov	r6,r3
    6a70:	000947c0 	call	947c <__lshift>
    6a74:	1025883a 	mov	r18,r2
    6a78:	d9000c17 	ldw	r4,48(sp)
    6a7c:	2005003a 	cmpeq	r2,r4,zero
    6a80:	10016f26 	beq	r2,zero,7040 <_dtoa_r+0xebc>
    6a84:	d9000f17 	ldw	r4,60(sp)
    6a88:	0102170e 	bge	zero,r4,72e8 <_dtoa_r+0x1164>
    6a8c:	d9800b17 	ldw	r6,44(sp)
    6a90:	3005003a 	cmpeq	r2,r6,zero
    6a94:	1000881e 	bne	r2,zero,6cb8 <_dtoa_r+0xb34>
    6a98:	0400050e 	bge	zero,r16,6ab0 <_dtoa_r+0x92c>
    6a9c:	d9001617 	ldw	r4,88(sp)
    6aa0:	980b883a 	mov	r5,r19
    6aa4:	800d883a 	mov	r6,r16
    6aa8:	000947c0 	call	947c <__lshift>
    6aac:	1027883a 	mov	r19,r2
    6ab0:	8804c03a 	cmpne	r2,r17,zero
    6ab4:	1002541e 	bne	r2,zero,7408 <_dtoa_r+0x1284>
    6ab8:	980b883a 	mov	r5,r19
    6abc:	dd800517 	ldw	r22,20(sp)
    6ac0:	dcc00615 	stw	r19,24(sp)
    6ac4:	a700004c 	andi	fp,r20,1
    6ac8:	2827883a 	mov	r19,r5
    6acc:	d9000717 	ldw	r4,28(sp)
    6ad0:	900b883a 	mov	r5,r18
    6ad4:	0005f6c0 	call	5f6c <quorem>
    6ad8:	d9000717 	ldw	r4,28(sp)
    6adc:	d9400617 	ldw	r5,24(sp)
    6ae0:	1023883a 	mov	r17,r2
    6ae4:	8dc00c04 	addi	r23,r17,48
    6ae8:	0008c940 	call	8c94 <__mcmp>
    6aec:	d9001617 	ldw	r4,88(sp)
    6af0:	900b883a 	mov	r5,r18
    6af4:	980d883a 	mov	r6,r19
    6af8:	1029883a 	mov	r20,r2
    6afc:	00092f00 	call	92f0 <__mdiff>
    6b00:	102b883a 	mov	r21,r2
    6b04:	10800317 	ldw	r2,12(r2)
    6b08:	1001281e 	bne	r2,zero,6fac <_dtoa_r+0xe28>
    6b0c:	d9000717 	ldw	r4,28(sp)
    6b10:	a80b883a 	mov	r5,r21
    6b14:	0008c940 	call	8c94 <__mcmp>
    6b18:	d9001617 	ldw	r4,88(sp)
    6b1c:	1021883a 	mov	r16,r2
    6b20:	a80b883a 	mov	r5,r21
    6b24:	0008b380 	call	8b38 <_Bfree>
    6b28:	8000041e 	bne	r16,zero,6b3c <_dtoa_r+0x9b8>
    6b2c:	d8801717 	ldw	r2,92(sp)
    6b30:	1000021e 	bne	r2,zero,6b3c <_dtoa_r+0x9b8>
    6b34:	e004c03a 	cmpne	r2,fp,zero
    6b38:	10011726 	beq	r2,zero,6f98 <_dtoa_r+0xe14>
    6b3c:	a0010616 	blt	r20,zero,6f58 <_dtoa_r+0xdd4>
    6b40:	a000041e 	bne	r20,zero,6b54 <_dtoa_r+0x9d0>
    6b44:	d8c01717 	ldw	r3,92(sp)
    6b48:	1800021e 	bne	r3,zero,6b54 <_dtoa_r+0x9d0>
    6b4c:	e004c03a 	cmpne	r2,fp,zero
    6b50:	10010126 	beq	r2,zero,6f58 <_dtoa_r+0xdd4>
    6b54:	04023d16 	blt	zero,r16,744c <_dtoa_r+0x12c8>
    6b58:	b5c00005 	stb	r23,0(r22)
    6b5c:	d9800517 	ldw	r6,20(sp)
    6b60:	d9000f17 	ldw	r4,60(sp)
    6b64:	b5800044 	addi	r22,r22,1
    6b68:	3105883a 	add	r2,r6,r4
    6b6c:	b0806526 	beq	r22,r2,6d04 <_dtoa_r+0xb80>
    6b70:	d9400717 	ldw	r5,28(sp)
    6b74:	d9001617 	ldw	r4,88(sp)
    6b78:	01800284 	movi	r6,10
    6b7c:	000f883a 	mov	r7,zero
    6b80:	00097ec0 	call	97ec <__multadd>
    6b84:	d8800715 	stw	r2,28(sp)
    6b88:	d8800617 	ldw	r2,24(sp)
    6b8c:	14c10c26 	beq	r2,r19,6fc0 <_dtoa_r+0xe3c>
    6b90:	d9400617 	ldw	r5,24(sp)
    6b94:	d9001617 	ldw	r4,88(sp)
    6b98:	01800284 	movi	r6,10
    6b9c:	000f883a 	mov	r7,zero
    6ba0:	00097ec0 	call	97ec <__multadd>
    6ba4:	d9001617 	ldw	r4,88(sp)
    6ba8:	980b883a 	mov	r5,r19
    6bac:	01800284 	movi	r6,10
    6bb0:	000f883a 	mov	r7,zero
    6bb4:	d8800615 	stw	r2,24(sp)
    6bb8:	00097ec0 	call	97ec <__multadd>
    6bbc:	1027883a 	mov	r19,r2
    6bc0:	003fc206 	br	6acc <_dtoa_r+0x948>
    6bc4:	2445c83a 	sub	r2,r4,r17
    6bc8:	a088983a 	sll	r4,r20,r2
    6bcc:	003e4b06 	br	64fc <_dtoa_r+0x378>
    6bd0:	01bfffc4 	movi	r6,-1
    6bd4:	00800044 	movi	r2,1
    6bd8:	d9800e15 	stw	r6,56(sp)
    6bdc:	d9800f15 	stw	r6,60(sp)
    6be0:	d8800b15 	stw	r2,44(sp)
    6be4:	d8c01617 	ldw	r3,88(sp)
    6be8:	008005c4 	movi	r2,23
    6bec:	18001115 	stw	zero,68(r3)
    6bf0:	1580082e 	bgeu	r2,r22,6c14 <_dtoa_r+0xa90>
    6bf4:	00c00104 	movi	r3,4
    6bf8:	0009883a 	mov	r4,zero
    6bfc:	18c7883a 	add	r3,r3,r3
    6c00:	18800504 	addi	r2,r3,20
    6c04:	21000044 	addi	r4,r4,1
    6c08:	b0bffc2e 	bgeu	r22,r2,6bfc <_dtoa_r+0xa78>
    6c0c:	d9801617 	ldw	r6,88(sp)
    6c10:	31001115 	stw	r4,68(r6)
    6c14:	dc000f17 	ldw	r16,60(sp)
    6c18:	003e4b06 	br	6548 <_dtoa_r+0x3c4>
    6c1c:	d9801717 	ldw	r6,92(sp)
    6c20:	0023883a 	mov	r17,zero
    6c24:	31bfff04 	addi	r6,r6,-4
    6c28:	d9801715 	stw	r6,92(sp)
    6c2c:	003df806 	br	6410 <_dtoa_r+0x28c>
    6c30:	00800804 	movi	r2,32
    6c34:	10c9c83a 	sub	r4,r2,r3
    6c38:	00c00104 	movi	r3,4
    6c3c:	19005a16 	blt	r3,r4,6da8 <_dtoa_r+0xc24>
    6c40:	008000c4 	movi	r2,3
    6c44:	113f7e16 	blt	r2,r4,6a40 <_dtoa_r+0x8bc>
    6c48:	20800704 	addi	r2,r4,28
    6c4c:	003f7506 	br	6a24 <_dtoa_r+0x8a0>
    6c50:	d9801717 	ldw	r6,92(sp)
    6c54:	00800044 	movi	r2,1
    6c58:	1180a10e 	bge	r2,r6,6ee0 <_dtoa_r+0xd5c>
    6c5c:	d9800f17 	ldw	r6,60(sp)
    6c60:	d8c01017 	ldw	r3,64(sp)
    6c64:	30bfffc4 	addi	r2,r6,-1
    6c68:	1881c616 	blt	r3,r2,7384 <_dtoa_r+0x1200>
    6c6c:	18a5c83a 	sub	r18,r3,r2
    6c70:	d8800f17 	ldw	r2,60(sp)
    6c74:	10026216 	blt	r2,zero,7600 <_dtoa_r+0x147c>
    6c78:	dc001117 	ldw	r16,68(sp)
    6c7c:	1007883a 	mov	r3,r2
    6c80:	d9800a17 	ldw	r6,40(sp)
    6c84:	d8801117 	ldw	r2,68(sp)
    6c88:	d9001617 	ldw	r4,88(sp)
    6c8c:	30cd883a 	add	r6,r6,r3
    6c90:	10c5883a 	add	r2,r2,r3
    6c94:	01400044 	movi	r5,1
    6c98:	d9800a15 	stw	r6,40(sp)
    6c9c:	d8801115 	stw	r2,68(sp)
    6ca0:	00097b00 	call	97b0 <__i2b>
    6ca4:	1027883a 	mov	r19,r2
    6ca8:	003f2506 	br	6940 <_dtoa_r+0x7bc>
    6cac:	00c00074 	movhi	r3,1
    6cb0:	18fabe04 	addi	r3,r3,-5384
    6cb4:	003d6706 	br	6254 <_dtoa_r+0xd0>
    6cb8:	dd800517 	ldw	r22,20(sp)
    6cbc:	04000044 	movi	r16,1
    6cc0:	00000706 	br	6ce0 <_dtoa_r+0xb5c>
    6cc4:	d9400717 	ldw	r5,28(sp)
    6cc8:	d9001617 	ldw	r4,88(sp)
    6ccc:	01800284 	movi	r6,10
    6cd0:	000f883a 	mov	r7,zero
    6cd4:	00097ec0 	call	97ec <__multadd>
    6cd8:	d8800715 	stw	r2,28(sp)
    6cdc:	84000044 	addi	r16,r16,1
    6ce0:	d9000717 	ldw	r4,28(sp)
    6ce4:	900b883a 	mov	r5,r18
    6ce8:	0005f6c0 	call	5f6c <quorem>
    6cec:	15c00c04 	addi	r23,r2,48
    6cf0:	b5c00005 	stb	r23,0(r22)
    6cf4:	d8c00f17 	ldw	r3,60(sp)
    6cf8:	b5800044 	addi	r22,r22,1
    6cfc:	80fff116 	blt	r16,r3,6cc4 <_dtoa_r+0xb40>
    6d00:	d8000615 	stw	zero,24(sp)
    6d04:	d9400717 	ldw	r5,28(sp)
    6d08:	d9001617 	ldw	r4,88(sp)
    6d0c:	01800044 	movi	r6,1
    6d10:	000947c0 	call	947c <__lshift>
    6d14:	1009883a 	mov	r4,r2
    6d18:	900b883a 	mov	r5,r18
    6d1c:	d8800715 	stw	r2,28(sp)
    6d20:	0008c940 	call	8c94 <__mcmp>
    6d24:	00803c0e 	bge	zero,r2,6e18 <_dtoa_r+0xc94>
    6d28:	b009883a 	mov	r4,r22
    6d2c:	213fffc4 	addi	r4,r4,-1
    6d30:	21400003 	ldbu	r5,0(r4)
    6d34:	00800e44 	movi	r2,57
    6d38:	28c03fcc 	andi	r3,r5,255
    6d3c:	18c0201c 	xori	r3,r3,128
    6d40:	18ffe004 	addi	r3,r3,-128
    6d44:	1881981e 	bne	r3,r2,73a8 <_dtoa_r+0x1224>
    6d48:	d9800517 	ldw	r6,20(sp)
    6d4c:	21bff71e 	bne	r4,r6,6d2c <_dtoa_r+0xba8>
    6d50:	d8800d17 	ldw	r2,52(sp)
    6d54:	37000044 	addi	fp,r6,1
    6d58:	10800044 	addi	r2,r2,1
    6d5c:	d8800d15 	stw	r2,52(sp)
    6d60:	00800c44 	movi	r2,49
    6d64:	30800005 	stb	r2,0(r6)
    6d68:	d9001617 	ldw	r4,88(sp)
    6d6c:	900b883a 	mov	r5,r18
    6d70:	0008b380 	call	8b38 <_Bfree>
    6d74:	983ecd26 	beq	r19,zero,68ac <_dtoa_r+0x728>
    6d78:	d8c00617 	ldw	r3,24(sp)
    6d7c:	18000426 	beq	r3,zero,6d90 <_dtoa_r+0xc0c>
    6d80:	1cc00326 	beq	r3,r19,6d90 <_dtoa_r+0xc0c>
    6d84:	d9001617 	ldw	r4,88(sp)
    6d88:	180b883a 	mov	r5,r3
    6d8c:	0008b380 	call	8b38 <_Bfree>
    6d90:	d9001617 	ldw	r4,88(sp)
    6d94:	980b883a 	mov	r5,r19
    6d98:	0008b380 	call	8b38 <_Bfree>
    6d9c:	003ec306 	br	68ac <_dtoa_r+0x728>
    6da0:	1805883a 	mov	r2,r3
    6da4:	003eeb06 	br	6954 <_dtoa_r+0x7d0>
    6da8:	d9800a17 	ldw	r6,40(sp)
    6dac:	d8c01117 	ldw	r3,68(sp)
    6db0:	20bfff04 	addi	r2,r4,-4
    6db4:	308d883a 	add	r6,r6,r2
    6db8:	1887883a 	add	r3,r3,r2
    6dbc:	80a1883a 	add	r16,r16,r2
    6dc0:	d9800a15 	stw	r6,40(sp)
    6dc4:	d8c01115 	stw	r3,68(sp)
    6dc8:	003f1d06 	br	6a40 <_dtoa_r+0x8bc>
    6dcc:	a03f0c1e 	bne	r20,zero,6a00 <_dtoa_r+0x87c>
    6dd0:	00800434 	movhi	r2,16
    6dd4:	10bfffc4 	addi	r2,r2,-1
    6dd8:	a884703a 	and	r2,r21,r2
    6ddc:	103f081e 	bne	r2,zero,6a00 <_dtoa_r+0x87c>
    6de0:	a89ffc2c 	andhi	r2,r21,32752
    6de4:	103f0626 	beq	r2,zero,6a00 <_dtoa_r+0x87c>
    6de8:	d8c01117 	ldw	r3,68(sp)
    6dec:	d9000a17 	ldw	r4,40(sp)
    6df0:	18c00044 	addi	r3,r3,1
    6df4:	21000044 	addi	r4,r4,1
    6df8:	d8c01115 	stw	r3,68(sp)
    6dfc:	d9000a15 	stw	r4,40(sp)
    6e00:	003f0006 	br	6a04 <_dtoa_r+0x880>
    6e04:	d9400717 	ldw	r5,28(sp)
    6e08:	d9001617 	ldw	r4,88(sp)
    6e0c:	00098ec0 	call	98ec <__pow5mult>
    6e10:	d8800715 	stw	r2,28(sp)
    6e14:	003eed06 	br	69cc <_dtoa_r+0x848>
    6e18:	1000021e 	bne	r2,zero,6e24 <_dtoa_r+0xca0>
    6e1c:	b880004c 	andi	r2,r23,1
    6e20:	103fc11e 	bne	r2,zero,6d28 <_dtoa_r+0xba4>
    6e24:	b5bfffc4 	addi	r22,r22,-1
    6e28:	b0c00007 	ldb	r3,0(r22)
    6e2c:	00800c04 	movi	r2,48
    6e30:	18bffc26 	beq	r3,r2,6e24 <_dtoa_r+0xca0>
    6e34:	b7000044 	addi	fp,r22,1
    6e38:	003fcb06 	br	6d68 <_dtoa_r+0xbe4>
    6e3c:	d9800d17 	ldw	r6,52(sp)
    6e40:	018fc83a 	sub	r7,zero,r6
    6e44:	3801f726 	beq	r7,zero,7624 <_dtoa_r+0x14a0>
    6e48:	398003cc 	andi	r6,r7,15
    6e4c:	300c90fa 	slli	r6,r6,3
    6e50:	01400074 	movhi	r5,1
    6e54:	297adb04 	addi	r5,r5,-5268
    6e58:	d9001217 	ldw	r4,72(sp)
    6e5c:	314d883a 	add	r6,r6,r5
    6e60:	30c00117 	ldw	r3,4(r6)
    6e64:	30800017 	ldw	r2,0(r6)
    6e68:	d9401317 	ldw	r5,76(sp)
    6e6c:	3821d13a 	srai	r16,r7,4
    6e70:	100d883a 	mov	r6,r2
    6e74:	180f883a 	mov	r7,r3
    6e78:	00025300 	call	2530 <__muldf3>
    6e7c:	1011883a 	mov	r8,r2
    6e80:	1813883a 	mov	r9,r3
    6e84:	1029883a 	mov	r20,r2
    6e88:	182b883a 	mov	r21,r3
    6e8c:	8001e526 	beq	r16,zero,7624 <_dtoa_r+0x14a0>
    6e90:	05800084 	movi	r22,2
    6e94:	04400074 	movhi	r17,1
    6e98:	8c7b0d04 	addi	r17,r17,-5068
    6e9c:	8080004c 	andi	r2,r16,1
    6ea0:	1005003a 	cmpeq	r2,r2,zero
    6ea4:	1000081e 	bne	r2,zero,6ec8 <_dtoa_r+0xd44>
    6ea8:	89800017 	ldw	r6,0(r17)
    6eac:	89c00117 	ldw	r7,4(r17)
    6eb0:	480b883a 	mov	r5,r9
    6eb4:	4009883a 	mov	r4,r8
    6eb8:	00025300 	call	2530 <__muldf3>
    6ebc:	1011883a 	mov	r8,r2
    6ec0:	b5800044 	addi	r22,r22,1
    6ec4:	1813883a 	mov	r9,r3
    6ec8:	8021d07a 	srai	r16,r16,1
    6ecc:	8c400204 	addi	r17,r17,8
    6ed0:	803ff21e 	bne	r16,zero,6e9c <_dtoa_r+0xd18>
    6ed4:	4029883a 	mov	r20,r8
    6ed8:	482b883a 	mov	r21,r9
    6edc:	003dca06 	br	6608 <_dtoa_r+0x484>
    6ee0:	d9000817 	ldw	r4,32(sp)
    6ee4:	2005003a 	cmpeq	r2,r4,zero
    6ee8:	1001f61e 	bne	r2,zero,76c4 <_dtoa_r+0x1540>
    6eec:	dc001117 	ldw	r16,68(sp)
    6ef0:	dc801017 	ldw	r18,64(sp)
    6ef4:	18c10cc4 	addi	r3,r3,1075
    6ef8:	003f6106 	br	6c80 <_dtoa_r+0xafc>
    6efc:	d8000b15 	stw	zero,44(sp)
    6f00:	d9802617 	ldw	r6,152(sp)
    6f04:	d8c00d17 	ldw	r3,52(sp)
    6f08:	30800044 	addi	r2,r6,1
    6f0c:	18ad883a 	add	r22,r3,r2
    6f10:	b13fffc4 	addi	r4,r22,-1
    6f14:	d9000e15 	stw	r4,56(sp)
    6f18:	0581f60e 	bge	zero,r22,76f4 <_dtoa_r+0x1570>
    6f1c:	dd800f15 	stw	r22,60(sp)
    6f20:	003f3006 	br	6be4 <_dtoa_r+0xa60>
    6f24:	d8000b15 	stw	zero,44(sp)
    6f28:	d9002617 	ldw	r4,152(sp)
    6f2c:	0101eb0e 	bge	zero,r4,76dc <_dtoa_r+0x1558>
    6f30:	202d883a 	mov	r22,r4
    6f34:	d9000e15 	stw	r4,56(sp)
    6f38:	d9000f15 	stw	r4,60(sp)
    6f3c:	003f2906 	br	6be4 <_dtoa_r+0xa60>
    6f40:	01800044 	movi	r6,1
    6f44:	d9800b15 	stw	r6,44(sp)
    6f48:	003ff706 	br	6f28 <_dtoa_r+0xda4>
    6f4c:	01000044 	movi	r4,1
    6f50:	d9000b15 	stw	r4,44(sp)
    6f54:	003fea06 	br	6f00 <_dtoa_r+0xd7c>
    6f58:	04000c0e 	bge	zero,r16,6f8c <_dtoa_r+0xe08>
    6f5c:	d9400717 	ldw	r5,28(sp)
    6f60:	d9001617 	ldw	r4,88(sp)
    6f64:	01800044 	movi	r6,1
    6f68:	000947c0 	call	947c <__lshift>
    6f6c:	1009883a 	mov	r4,r2
    6f70:	900b883a 	mov	r5,r18
    6f74:	d8800715 	stw	r2,28(sp)
    6f78:	0008c940 	call	8c94 <__mcmp>
    6f7c:	0081e00e 	bge	zero,r2,7700 <_dtoa_r+0x157c>
    6f80:	bdc00044 	addi	r23,r23,1
    6f84:	00800e84 	movi	r2,58
    6f88:	b881a226 	beq	r23,r2,7614 <_dtoa_r+0x1490>
    6f8c:	b7000044 	addi	fp,r22,1
    6f90:	b5c00005 	stb	r23,0(r22)
    6f94:	003f7406 	br	6d68 <_dtoa_r+0xbe4>
    6f98:	00800e44 	movi	r2,57
    6f9c:	b8819d26 	beq	r23,r2,7614 <_dtoa_r+0x1490>
    6fa0:	053ffa0e 	bge	zero,r20,6f8c <_dtoa_r+0xe08>
    6fa4:	8dc00c44 	addi	r23,r17,49
    6fa8:	003ff806 	br	6f8c <_dtoa_r+0xe08>
    6fac:	d9001617 	ldw	r4,88(sp)
    6fb0:	a80b883a 	mov	r5,r21
    6fb4:	04000044 	movi	r16,1
    6fb8:	0008b380 	call	8b38 <_Bfree>
    6fbc:	003edf06 	br	6b3c <_dtoa_r+0x9b8>
    6fc0:	d9001617 	ldw	r4,88(sp)
    6fc4:	980b883a 	mov	r5,r19
    6fc8:	01800284 	movi	r6,10
    6fcc:	000f883a 	mov	r7,zero
    6fd0:	00097ec0 	call	97ec <__multadd>
    6fd4:	1027883a 	mov	r19,r2
    6fd8:	d8800615 	stw	r2,24(sp)
    6fdc:	003ebb06 	br	6acc <_dtoa_r+0x948>
    6fe0:	d9801117 	ldw	r6,68(sp)
    6fe4:	d8800d17 	ldw	r2,52(sp)
    6fe8:	d8000915 	stw	zero,36(sp)
    6fec:	308dc83a 	sub	r6,r6,r2
    6ff0:	0087c83a 	sub	r3,zero,r2
    6ff4:	d9801115 	stw	r6,68(sp)
    6ff8:	d8c01015 	stw	r3,64(sp)
    6ffc:	003cfe06 	br	63f8 <_dtoa_r+0x274>
    7000:	018dc83a 	sub	r6,zero,r6
    7004:	d9801115 	stw	r6,68(sp)
    7008:	d8000a15 	stw	zero,40(sp)
    700c:	003cf306 	br	63dc <_dtoa_r+0x258>
    7010:	d9000d17 	ldw	r4,52(sp)
    7014:	0002ce40 	call	2ce4 <__floatsidf>
    7018:	880b883a 	mov	r5,r17
    701c:	8009883a 	mov	r4,r16
    7020:	180f883a 	mov	r7,r3
    7024:	100d883a 	mov	r6,r2
    7028:	000b4100 	call	b410 <__nedf2>
    702c:	103ce126 	beq	r2,zero,63b4 <_dtoa_r+0x230>
    7030:	d9800d17 	ldw	r6,52(sp)
    7034:	31bfffc4 	addi	r6,r6,-1
    7038:	d9800d15 	stw	r6,52(sp)
    703c:	003cdd06 	br	63b4 <_dtoa_r+0x230>
    7040:	d9000717 	ldw	r4,28(sp)
    7044:	900b883a 	mov	r5,r18
    7048:	0008c940 	call	8c94 <__mcmp>
    704c:	103e8d0e 	bge	r2,zero,6a84 <_dtoa_r+0x900>
    7050:	d9400717 	ldw	r5,28(sp)
    7054:	d9001617 	ldw	r4,88(sp)
    7058:	01800284 	movi	r6,10
    705c:	000f883a 	mov	r7,zero
    7060:	00097ec0 	call	97ec <__multadd>
    7064:	d9800d17 	ldw	r6,52(sp)
    7068:	d8800715 	stw	r2,28(sp)
    706c:	31bfffc4 	addi	r6,r6,-1
    7070:	d9800d15 	stw	r6,52(sp)
    7074:	b001a71e 	bne	r22,zero,7714 <_dtoa_r+0x1590>
    7078:	d8800e17 	ldw	r2,56(sp)
    707c:	d8800f15 	stw	r2,60(sp)
    7080:	003e8006 	br	6a84 <_dtoa_r+0x900>
    7084:	90800417 	ldw	r2,16(r18)
    7088:	1085883a 	add	r2,r2,r2
    708c:	1085883a 	add	r2,r2,r2
    7090:	1485883a 	add	r2,r2,r18
    7094:	11000417 	ldw	r4,16(r2)
    7098:	0008b600 	call	8b60 <__hi0bits>
    709c:	00c00804 	movi	r3,32
    70a0:	1887c83a 	sub	r3,r3,r2
    70a4:	003e5a06 	br	6a10 <_dtoa_r+0x88c>
    70a8:	d9400717 	ldw	r5,28(sp)
    70ac:	d9801017 	ldw	r6,64(sp)
    70b0:	d9001617 	ldw	r4,88(sp)
    70b4:	00098ec0 	call	98ec <__pow5mult>
    70b8:	d8800715 	stw	r2,28(sp)
    70bc:	003e4306 	br	69cc <_dtoa_r+0x848>
    70c0:	d9800f17 	ldw	r6,60(sp)
    70c4:	d8800d17 	ldw	r2,52(sp)
    70c8:	d9800315 	stw	r6,12(sp)
    70cc:	d8800415 	stw	r2,16(sp)
    70d0:	d8c00b17 	ldw	r3,44(sp)
    70d4:	1805003a 	cmpeq	r2,r3,zero
    70d8:	1000e21e 	bne	r2,zero,7464 <_dtoa_r+0x12e0>
    70dc:	d9000317 	ldw	r4,12(sp)
    70e0:	0005883a 	mov	r2,zero
    70e4:	00cff834 	movhi	r3,16352
    70e8:	200c90fa 	slli	r6,r4,3
    70ec:	01000074 	movhi	r4,1
    70f0:	213adb04 	addi	r4,r4,-5268
    70f4:	180b883a 	mov	r5,r3
    70f8:	310d883a 	add	r6,r6,r4
    70fc:	327fff17 	ldw	r9,-4(r6)
    7100:	323ffe17 	ldw	r8,-8(r6)
    7104:	1009883a 	mov	r4,r2
    7108:	480f883a 	mov	r7,r9
    710c:	400d883a 	mov	r6,r8
    7110:	00028f40 	call	28f4 <__divdf3>
    7114:	180b883a 	mov	r5,r3
    7118:	b00d883a 	mov	r6,r22
    711c:	b80f883a 	mov	r7,r23
    7120:	1009883a 	mov	r4,r2
    7124:	000243c0 	call	243c <__subdf3>
    7128:	a80b883a 	mov	r5,r21
    712c:	a009883a 	mov	r4,r20
    7130:	d8c01915 	stw	r3,100(sp)
    7134:	d8801815 	stw	r2,96(sp)
    7138:	0002ddc0 	call	2ddc <__fixdfsi>
    713c:	1009883a 	mov	r4,r2
    7140:	1027883a 	mov	r19,r2
    7144:	0002ce40 	call	2ce4 <__floatsidf>
    7148:	a80b883a 	mov	r5,r21
    714c:	a009883a 	mov	r4,r20
    7150:	180f883a 	mov	r7,r3
    7154:	100d883a 	mov	r6,r2
    7158:	000243c0 	call	243c <__subdf3>
    715c:	d9801817 	ldw	r6,96(sp)
    7160:	1823883a 	mov	r17,r3
    7164:	d8801415 	stw	r2,80(sp)
    7168:	302d883a 	mov	r22,r6
    716c:	d9800517 	ldw	r6,20(sp)
    7170:	9cc00c04 	addi	r19,r19,48
    7174:	dc401515 	stw	r17,84(sp)
    7178:	d8c01917 	ldw	r3,100(sp)
    717c:	34c00005 	stb	r19,0(r6)
    7180:	d8800517 	ldw	r2,20(sp)
    7184:	d9401917 	ldw	r5,100(sp)
    7188:	d9801417 	ldw	r6,80(sp)
    718c:	b009883a 	mov	r4,r22
    7190:	880f883a 	mov	r7,r17
    7194:	182f883a 	mov	r23,r3
    7198:	17000044 	addi	fp,r2,1
    719c:	0002b4c0 	call	2b4c <__gtdf2>
    71a0:	00804e16 	blt	zero,r2,72dc <_dtoa_r+0x1158>
    71a4:	d9801417 	ldw	r6,80(sp)
    71a8:	0005883a 	mov	r2,zero
    71ac:	00cffc34 	movhi	r3,16368
    71b0:	180b883a 	mov	r5,r3
    71b4:	880f883a 	mov	r7,r17
    71b8:	1009883a 	mov	r4,r2
    71bc:	000243c0 	call	243c <__subdf3>
    71c0:	d9401917 	ldw	r5,100(sp)
    71c4:	180f883a 	mov	r7,r3
    71c8:	b009883a 	mov	r4,r22
    71cc:	100d883a 	mov	r6,r2
    71d0:	0002b4c0 	call	2b4c <__gtdf2>
    71d4:	00bda216 	blt	zero,r2,6860 <_dtoa_r+0x6dc>
    71d8:	d8c00317 	ldw	r3,12(sp)
    71dc:	00800044 	movi	r2,1
    71e0:	10c01216 	blt	r2,r3,722c <_dtoa_r+0x10a8>
    71e4:	003d4506 	br	66fc <_dtoa_r+0x578>
    71e8:	d9801417 	ldw	r6,80(sp)
    71ec:	0005883a 	mov	r2,zero
    71f0:	00cffc34 	movhi	r3,16368
    71f4:	180b883a 	mov	r5,r3
    71f8:	880f883a 	mov	r7,r17
    71fc:	1009883a 	mov	r4,r2
    7200:	000243c0 	call	243c <__subdf3>
    7204:	d9c01b17 	ldw	r7,108(sp)
    7208:	180b883a 	mov	r5,r3
    720c:	1009883a 	mov	r4,r2
    7210:	b00d883a 	mov	r6,r22
    7214:	0002c5c0 	call	2c5c <__ltdf2>
    7218:	103d9116 	blt	r2,zero,6860 <_dtoa_r+0x6dc>
    721c:	d9800517 	ldw	r6,20(sp)
    7220:	d9000317 	ldw	r4,12(sp)
    7224:	3105883a 	add	r2,r6,r4
    7228:	e0bd3426 	beq	fp,r2,66fc <_dtoa_r+0x578>
    722c:	04500934 	movhi	r17,16420
    7230:	0021883a 	mov	r16,zero
    7234:	b80b883a 	mov	r5,r23
    7238:	b009883a 	mov	r4,r22
    723c:	800d883a 	mov	r6,r16
    7240:	880f883a 	mov	r7,r17
    7244:	00025300 	call	2530 <__muldf3>
    7248:	d9401517 	ldw	r5,84(sp)
    724c:	d9001417 	ldw	r4,80(sp)
    7250:	880f883a 	mov	r7,r17
    7254:	000d883a 	mov	r6,zero
    7258:	d8801a15 	stw	r2,104(sp)
    725c:	d8c01b15 	stw	r3,108(sp)
    7260:	00025300 	call	2530 <__muldf3>
    7264:	180b883a 	mov	r5,r3
    7268:	1009883a 	mov	r4,r2
    726c:	1823883a 	mov	r17,r3
    7270:	1021883a 	mov	r16,r2
    7274:	0002ddc0 	call	2ddc <__fixdfsi>
    7278:	1009883a 	mov	r4,r2
    727c:	102b883a 	mov	r21,r2
    7280:	0002ce40 	call	2ce4 <__floatsidf>
    7284:	880b883a 	mov	r5,r17
    7288:	8009883a 	mov	r4,r16
    728c:	180f883a 	mov	r7,r3
    7290:	100d883a 	mov	r6,r2
    7294:	000243c0 	call	243c <__subdf3>
    7298:	1021883a 	mov	r16,r2
    729c:	d9001b17 	ldw	r4,108(sp)
    72a0:	1823883a 	mov	r17,r3
    72a4:	dc001415 	stw	r16,80(sp)
    72a8:	ad400c04 	addi	r21,r21,48
    72ac:	dc401515 	stw	r17,84(sp)
    72b0:	d8801a17 	ldw	r2,104(sp)
    72b4:	e5400005 	stb	r21,0(fp)
    72b8:	202f883a 	mov	r23,r4
    72bc:	d9c01b17 	ldw	r7,108(sp)
    72c0:	d9001417 	ldw	r4,80(sp)
    72c4:	880b883a 	mov	r5,r17
    72c8:	100d883a 	mov	r6,r2
    72cc:	102d883a 	mov	r22,r2
    72d0:	e7000044 	addi	fp,fp,1
    72d4:	0002c5c0 	call	2c5c <__ltdf2>
    72d8:	103fc30e 	bge	r2,zero,71e8 <_dtoa_r+0x1064>
    72dc:	d9000417 	ldw	r4,16(sp)
    72e0:	d9000d15 	stw	r4,52(sp)
    72e4:	003d7106 	br	68ac <_dtoa_r+0x728>
    72e8:	d9801717 	ldw	r6,92(sp)
    72ec:	00800084 	movi	r2,2
    72f0:	11bde60e 	bge	r2,r6,6a8c <_dtoa_r+0x908>
    72f4:	203cfb1e 	bne	r4,zero,66e4 <_dtoa_r+0x560>
    72f8:	d9001617 	ldw	r4,88(sp)
    72fc:	900b883a 	mov	r5,r18
    7300:	01800144 	movi	r6,5
    7304:	000f883a 	mov	r7,zero
    7308:	00097ec0 	call	97ec <__multadd>
    730c:	d9000717 	ldw	r4,28(sp)
    7310:	100b883a 	mov	r5,r2
    7314:	1025883a 	mov	r18,r2
    7318:	0008c940 	call	8c94 <__mcmp>
    731c:	00bcf10e 	bge	zero,r2,66e4 <_dtoa_r+0x560>
    7320:	d8c00d17 	ldw	r3,52(sp)
    7324:	d9000517 	ldw	r4,20(sp)
    7328:	d8000615 	stw	zero,24(sp)
    732c:	18c00044 	addi	r3,r3,1
    7330:	d8c00d15 	stw	r3,52(sp)
    7334:	00800c44 	movi	r2,49
    7338:	27000044 	addi	fp,r4,1
    733c:	20800005 	stb	r2,0(r4)
    7340:	003e8906 	br	6d68 <_dtoa_r+0xbe4>
    7344:	d8c00517 	ldw	r3,20(sp)
    7348:	003bc206 	br	6254 <_dtoa_r+0xd0>
    734c:	01800074 	movhi	r6,1
    7350:	31bb0d04 	addi	r6,r6,-5068
    7354:	30c00917 	ldw	r3,36(r6)
    7358:	30800817 	ldw	r2,32(r6)
    735c:	d9001217 	ldw	r4,72(sp)
    7360:	d9401317 	ldw	r5,76(sp)
    7364:	180f883a 	mov	r7,r3
    7368:	100d883a 	mov	r6,r2
    736c:	00028f40 	call	28f4 <__divdf3>
    7370:	948003cc 	andi	r18,r18,15
    7374:	058000c4 	movi	r22,3
    7378:	1029883a 	mov	r20,r2
    737c:	182b883a 	mov	r21,r3
    7380:	003c8906 	br	65a8 <_dtoa_r+0x424>
    7384:	d9001017 	ldw	r4,64(sp)
    7388:	d9800917 	ldw	r6,36(sp)
    738c:	0025883a 	mov	r18,zero
    7390:	1105c83a 	sub	r2,r2,r4
    7394:	2089883a 	add	r4,r4,r2
    7398:	308d883a 	add	r6,r6,r2
    739c:	d9001015 	stw	r4,64(sp)
    73a0:	d9800915 	stw	r6,36(sp)
    73a4:	003e3206 	br	6c70 <_dtoa_r+0xaec>
    73a8:	28800044 	addi	r2,r5,1
    73ac:	27000044 	addi	fp,r4,1
    73b0:	20800005 	stb	r2,0(r4)
    73b4:	003e6c06 	br	6d68 <_dtoa_r+0xbe4>
    73b8:	d8800f17 	ldw	r2,60(sp)
    73bc:	00bce016 	blt	zero,r2,6740 <_dtoa_r+0x5bc>
    73c0:	d9800f17 	ldw	r6,60(sp)
    73c4:	303cc51e 	bne	r6,zero,66dc <_dtoa_r+0x558>
    73c8:	0005883a 	mov	r2,zero
    73cc:	00d00534 	movhi	r3,16404
    73d0:	980b883a 	mov	r5,r19
    73d4:	180f883a 	mov	r7,r3
    73d8:	9009883a 	mov	r4,r18
    73dc:	100d883a 	mov	r6,r2
    73e0:	00025300 	call	2530 <__muldf3>
    73e4:	180b883a 	mov	r5,r3
    73e8:	a80f883a 	mov	r7,r21
    73ec:	1009883a 	mov	r4,r2
    73f0:	a00d883a 	mov	r6,r20
    73f4:	0002bd40 	call	2bd4 <__gedf2>
    73f8:	103cb80e 	bge	r2,zero,66dc <_dtoa_r+0x558>
    73fc:	0027883a 	mov	r19,zero
    7400:	0025883a 	mov	r18,zero
    7404:	003fc606 	br	7320 <_dtoa_r+0x119c>
    7408:	99400117 	ldw	r5,4(r19)
    740c:	d9001617 	ldw	r4,88(sp)
    7410:	00090b80 	call	90b8 <_Balloc>
    7414:	99800417 	ldw	r6,16(r19)
    7418:	11000304 	addi	r4,r2,12
    741c:	99400304 	addi	r5,r19,12
    7420:	318d883a 	add	r6,r6,r6
    7424:	318d883a 	add	r6,r6,r6
    7428:	31800204 	addi	r6,r6,8
    742c:	1023883a 	mov	r17,r2
    7430:	0003c580 	call	3c58 <memcpy>
    7434:	d9001617 	ldw	r4,88(sp)
    7438:	880b883a 	mov	r5,r17
    743c:	01800044 	movi	r6,1
    7440:	000947c0 	call	947c <__lshift>
    7444:	100b883a 	mov	r5,r2
    7448:	003d9c06 	br	6abc <_dtoa_r+0x938>
    744c:	00800e44 	movi	r2,57
    7450:	b8807026 	beq	r23,r2,7614 <_dtoa_r+0x1490>
    7454:	b8800044 	addi	r2,r23,1
    7458:	b7000044 	addi	fp,r22,1
    745c:	b0800005 	stb	r2,0(r22)
    7460:	003e4106 	br	6d68 <_dtoa_r+0xbe4>
    7464:	d8800317 	ldw	r2,12(sp)
    7468:	01800074 	movhi	r6,1
    746c:	31badb04 	addi	r6,r6,-5268
    7470:	b009883a 	mov	r4,r22
    7474:	100e90fa 	slli	r7,r2,3
    7478:	b80b883a 	mov	r5,r23
    747c:	398f883a 	add	r7,r7,r6
    7480:	38bffe17 	ldw	r2,-8(r7)
    7484:	d9800517 	ldw	r6,20(sp)
    7488:	38ffff17 	ldw	r3,-4(r7)
    748c:	37000044 	addi	fp,r6,1
    7490:	180f883a 	mov	r7,r3
    7494:	100d883a 	mov	r6,r2
    7498:	00025300 	call	2530 <__muldf3>
    749c:	a80b883a 	mov	r5,r21
    74a0:	a009883a 	mov	r4,r20
    74a4:	182f883a 	mov	r23,r3
    74a8:	102d883a 	mov	r22,r2
    74ac:	0002ddc0 	call	2ddc <__fixdfsi>
    74b0:	1009883a 	mov	r4,r2
    74b4:	1027883a 	mov	r19,r2
    74b8:	0002ce40 	call	2ce4 <__floatsidf>
    74bc:	a80b883a 	mov	r5,r21
    74c0:	a009883a 	mov	r4,r20
    74c4:	180f883a 	mov	r7,r3
    74c8:	100d883a 	mov	r6,r2
    74cc:	000243c0 	call	243c <__subdf3>
    74d0:	180b883a 	mov	r5,r3
    74d4:	d8c00517 	ldw	r3,20(sp)
    74d8:	9cc00c04 	addi	r19,r19,48
    74dc:	1009883a 	mov	r4,r2
    74e0:	1cc00005 	stb	r19,0(r3)
    74e4:	2021883a 	mov	r16,r4
    74e8:	d9000317 	ldw	r4,12(sp)
    74ec:	00800044 	movi	r2,1
    74f0:	2823883a 	mov	r17,r5
    74f4:	20802226 	beq	r4,r2,7580 <_dtoa_r+0x13fc>
    74f8:	1029883a 	mov	r20,r2
    74fc:	0005883a 	mov	r2,zero
    7500:	00d00934 	movhi	r3,16420
    7504:	180f883a 	mov	r7,r3
    7508:	100d883a 	mov	r6,r2
    750c:	880b883a 	mov	r5,r17
    7510:	8009883a 	mov	r4,r16
    7514:	00025300 	call	2530 <__muldf3>
    7518:	180b883a 	mov	r5,r3
    751c:	1009883a 	mov	r4,r2
    7520:	1823883a 	mov	r17,r3
    7524:	1021883a 	mov	r16,r2
    7528:	0002ddc0 	call	2ddc <__fixdfsi>
    752c:	1009883a 	mov	r4,r2
    7530:	102b883a 	mov	r21,r2
    7534:	0002ce40 	call	2ce4 <__floatsidf>
    7538:	880b883a 	mov	r5,r17
    753c:	8009883a 	mov	r4,r16
    7540:	180f883a 	mov	r7,r3
    7544:	100d883a 	mov	r6,r2
    7548:	000243c0 	call	243c <__subdf3>
    754c:	180b883a 	mov	r5,r3
    7550:	d8c00517 	ldw	r3,20(sp)
    7554:	1009883a 	mov	r4,r2
    7558:	ad400c04 	addi	r21,r21,48
    755c:	1d05883a 	add	r2,r3,r20
    7560:	15400005 	stb	r21,0(r2)
    7564:	2021883a 	mov	r16,r4
    7568:	d9000317 	ldw	r4,12(sp)
    756c:	a5000044 	addi	r20,r20,1
    7570:	2823883a 	mov	r17,r5
    7574:	a13fe11e 	bne	r20,r4,74fc <_dtoa_r+0x1378>
    7578:	e505883a 	add	r2,fp,r20
    757c:	173fffc4 	addi	fp,r2,-1
    7580:	0025883a 	mov	r18,zero
    7584:	04cff834 	movhi	r19,16352
    7588:	b009883a 	mov	r4,r22
    758c:	b80b883a 	mov	r5,r23
    7590:	900d883a 	mov	r6,r18
    7594:	980f883a 	mov	r7,r19
    7598:	00024bc0 	call	24bc <__adddf3>
    759c:	180b883a 	mov	r5,r3
    75a0:	1009883a 	mov	r4,r2
    75a4:	800d883a 	mov	r6,r16
    75a8:	880f883a 	mov	r7,r17
    75ac:	0002c5c0 	call	2c5c <__ltdf2>
    75b0:	103cab16 	blt	r2,zero,6860 <_dtoa_r+0x6dc>
    75b4:	0009883a 	mov	r4,zero
    75b8:	980b883a 	mov	r5,r19
    75bc:	b80f883a 	mov	r7,r23
    75c0:	b00d883a 	mov	r6,r22
    75c4:	000243c0 	call	243c <__subdf3>
    75c8:	180b883a 	mov	r5,r3
    75cc:	880f883a 	mov	r7,r17
    75d0:	1009883a 	mov	r4,r2
    75d4:	800d883a 	mov	r6,r16
    75d8:	0002b4c0 	call	2b4c <__gtdf2>
    75dc:	00bc470e 	bge	zero,r2,66fc <_dtoa_r+0x578>
    75e0:	00c00c04 	movi	r3,48
    75e4:	e73fffc4 	addi	fp,fp,-1
    75e8:	e0800007 	ldb	r2,0(fp)
    75ec:	10fffd26 	beq	r2,r3,75e4 <_dtoa_r+0x1460>
    75f0:	d9800417 	ldw	r6,16(sp)
    75f4:	e7000044 	addi	fp,fp,1
    75f8:	d9800d15 	stw	r6,52(sp)
    75fc:	003cab06 	br	68ac <_dtoa_r+0x728>
    7600:	d8c00f17 	ldw	r3,60(sp)
    7604:	d9001117 	ldw	r4,68(sp)
    7608:	20e1c83a 	sub	r16,r4,r3
    760c:	0007883a 	mov	r3,zero
    7610:	003d9b06 	br	6c80 <_dtoa_r+0xafc>
    7614:	00800e44 	movi	r2,57
    7618:	b0800005 	stb	r2,0(r22)
    761c:	b5800044 	addi	r22,r22,1
    7620:	003dc106 	br	6d28 <_dtoa_r+0xba4>
    7624:	05800084 	movi	r22,2
    7628:	003bf706 	br	6608 <_dtoa_r+0x484>
    762c:	d9000f17 	ldw	r4,60(sp)
    7630:	013c000e 	bge	zero,r4,6634 <_dtoa_r+0x4b0>
    7634:	d9800e17 	ldw	r6,56(sp)
    7638:	01bc300e 	bge	zero,r6,66fc <_dtoa_r+0x578>
    763c:	0005883a 	mov	r2,zero
    7640:	00d00934 	movhi	r3,16420
    7644:	a80b883a 	mov	r5,r21
    7648:	180f883a 	mov	r7,r3
    764c:	a009883a 	mov	r4,r20
    7650:	100d883a 	mov	r6,r2
    7654:	00025300 	call	2530 <__muldf3>
    7658:	b1000044 	addi	r4,r22,1
    765c:	1021883a 	mov	r16,r2
    7660:	1823883a 	mov	r17,r3
    7664:	0002ce40 	call	2ce4 <__floatsidf>
    7668:	880b883a 	mov	r5,r17
    766c:	8009883a 	mov	r4,r16
    7670:	180f883a 	mov	r7,r3
    7674:	100d883a 	mov	r6,r2
    7678:	00025300 	call	2530 <__muldf3>
    767c:	0011883a 	mov	r8,zero
    7680:	02500734 	movhi	r9,16412
    7684:	180b883a 	mov	r5,r3
    7688:	480f883a 	mov	r7,r9
    768c:	1009883a 	mov	r4,r2
    7690:	400d883a 	mov	r6,r8
    7694:	00024bc0 	call	24bc <__adddf3>
    7698:	102d883a 	mov	r22,r2
    769c:	00bf3034 	movhi	r2,64704
    76a0:	10ef883a 	add	r23,r2,r3
    76a4:	d8800d17 	ldw	r2,52(sp)
    76a8:	d8c00e17 	ldw	r3,56(sp)
    76ac:	8029883a 	mov	r20,r16
    76b0:	10bfffc4 	addi	r2,r2,-1
    76b4:	882b883a 	mov	r21,r17
    76b8:	d8800415 	stw	r2,16(sp)
    76bc:	d8c00315 	stw	r3,12(sp)
    76c0:	003e8306 	br	70d0 <_dtoa_r+0xf4c>
    76c4:	d8800117 	ldw	r2,4(sp)
    76c8:	dc001117 	ldw	r16,68(sp)
    76cc:	dc801017 	ldw	r18,64(sp)
    76d0:	00c00d84 	movi	r3,54
    76d4:	1887c83a 	sub	r3,r3,r2
    76d8:	003d6906 	br	6c80 <_dtoa_r+0xafc>
    76dc:	01800044 	movi	r6,1
    76e0:	3021883a 	mov	r16,r6
    76e4:	d9800f15 	stw	r6,60(sp)
    76e8:	d9802615 	stw	r6,152(sp)
    76ec:	d9800e15 	stw	r6,56(sp)
    76f0:	003b9306 	br	6540 <_dtoa_r+0x3bc>
    76f4:	b021883a 	mov	r16,r22
    76f8:	dd800f15 	stw	r22,60(sp)
    76fc:	003b9006 	br	6540 <_dtoa_r+0x3bc>
    7700:	103e221e 	bne	r2,zero,6f8c <_dtoa_r+0xe08>
    7704:	b880004c 	andi	r2,r23,1
    7708:	1005003a 	cmpeq	r2,r2,zero
    770c:	103e1f1e 	bne	r2,zero,6f8c <_dtoa_r+0xe08>
    7710:	003e1b06 	br	6f80 <_dtoa_r+0xdfc>
    7714:	d9001617 	ldw	r4,88(sp)
    7718:	980b883a 	mov	r5,r19
    771c:	01800284 	movi	r6,10
    7720:	000f883a 	mov	r7,zero
    7724:	00097ec0 	call	97ec <__multadd>
    7728:	d8c00e17 	ldw	r3,56(sp)
    772c:	1027883a 	mov	r19,r2
    7730:	d8c00f15 	stw	r3,60(sp)
    7734:	003cd306 	br	6a84 <_dtoa_r+0x900>

00007738 <_fflush_r>:
    7738:	defffb04 	addi	sp,sp,-20
    773c:	dcc00315 	stw	r19,12(sp)
    7740:	dc800215 	stw	r18,8(sp)
    7744:	dfc00415 	stw	ra,16(sp)
    7748:	dc400115 	stw	r17,4(sp)
    774c:	dc000015 	stw	r16,0(sp)
    7750:	2027883a 	mov	r19,r4
    7754:	2825883a 	mov	r18,r5
    7758:	20000226 	beq	r4,zero,7764 <_fflush_r+0x2c>
    775c:	20800e17 	ldw	r2,56(r4)
    7760:	10005626 	beq	r2,zero,78bc <_fflush_r+0x184>
    7764:	9100030b 	ldhu	r4,12(r18)
    7768:	20ffffcc 	andi	r3,r4,65535
    776c:	18e0001c 	xori	r3,r3,32768
    7770:	18e00004 	addi	r3,r3,-32768
    7774:	1880020c 	andi	r2,r3,8
    7778:	1000261e 	bne	r2,zero,7814 <_fflush_r+0xdc>
    777c:	90c00117 	ldw	r3,4(r18)
    7780:	20820014 	ori	r2,r4,2048
    7784:	9080030d 	sth	r2,12(r18)
    7788:	1009883a 	mov	r4,r2
    778c:	00c0400e 	bge	zero,r3,7890 <_fflush_r+0x158>
    7790:	92000a17 	ldw	r8,40(r18)
    7794:	40004026 	beq	r8,zero,7898 <_fflush_r+0x160>
    7798:	2084000c 	andi	r2,r4,4096
    779c:	10005326 	beq	r2,zero,78ec <_fflush_r+0x1b4>
    77a0:	94001417 	ldw	r16,80(r18)
    77a4:	9080030b 	ldhu	r2,12(r18)
    77a8:	1080010c 	andi	r2,r2,4
    77ac:	1000481e 	bne	r2,zero,78d0 <_fflush_r+0x198>
    77b0:	91400717 	ldw	r5,28(r18)
    77b4:	9809883a 	mov	r4,r19
    77b8:	800d883a 	mov	r6,r16
    77bc:	000f883a 	mov	r7,zero
    77c0:	403ee83a 	callr	r8
    77c4:	8080261e 	bne	r16,r2,7860 <_fflush_r+0x128>
    77c8:	9080030b 	ldhu	r2,12(r18)
    77cc:	91000417 	ldw	r4,16(r18)
    77d0:	90000115 	stw	zero,4(r18)
    77d4:	10bdffcc 	andi	r2,r2,63487
    77d8:	10ffffcc 	andi	r3,r2,65535
    77dc:	18c4000c 	andi	r3,r3,4096
    77e0:	9080030d 	sth	r2,12(r18)
    77e4:	91000015 	stw	r4,0(r18)
    77e8:	18002b26 	beq	r3,zero,7898 <_fflush_r+0x160>
    77ec:	0007883a 	mov	r3,zero
    77f0:	1805883a 	mov	r2,r3
    77f4:	94001415 	stw	r16,80(r18)
    77f8:	dfc00417 	ldw	ra,16(sp)
    77fc:	dcc00317 	ldw	r19,12(sp)
    7800:	dc800217 	ldw	r18,8(sp)
    7804:	dc400117 	ldw	r17,4(sp)
    7808:	dc000017 	ldw	r16,0(sp)
    780c:	dec00504 	addi	sp,sp,20
    7810:	f800283a 	ret
    7814:	94400417 	ldw	r17,16(r18)
    7818:	88001f26 	beq	r17,zero,7898 <_fflush_r+0x160>
    781c:	90800017 	ldw	r2,0(r18)
    7820:	18c000cc 	andi	r3,r3,3
    7824:	94400015 	stw	r17,0(r18)
    7828:	1461c83a 	sub	r16,r2,r17
    782c:	18002526 	beq	r3,zero,78c4 <_fflush_r+0x18c>
    7830:	0005883a 	mov	r2,zero
    7834:	90800215 	stw	r2,8(r18)
    7838:	0400170e 	bge	zero,r16,7898 <_fflush_r+0x160>
    783c:	90c00917 	ldw	r3,36(r18)
    7840:	91400717 	ldw	r5,28(r18)
    7844:	880d883a 	mov	r6,r17
    7848:	800f883a 	mov	r7,r16
    784c:	9809883a 	mov	r4,r19
    7850:	183ee83a 	callr	r3
    7854:	88a3883a 	add	r17,r17,r2
    7858:	80a1c83a 	sub	r16,r16,r2
    785c:	00bff616 	blt	zero,r2,7838 <_fflush_r+0x100>
    7860:	9080030b 	ldhu	r2,12(r18)
    7864:	00ffffc4 	movi	r3,-1
    7868:	10801014 	ori	r2,r2,64
    786c:	9080030d 	sth	r2,12(r18)
    7870:	1805883a 	mov	r2,r3
    7874:	dfc00417 	ldw	ra,16(sp)
    7878:	dcc00317 	ldw	r19,12(sp)
    787c:	dc800217 	ldw	r18,8(sp)
    7880:	dc400117 	ldw	r17,4(sp)
    7884:	dc000017 	ldw	r16,0(sp)
    7888:	dec00504 	addi	sp,sp,20
    788c:	f800283a 	ret
    7890:	90800f17 	ldw	r2,60(r18)
    7894:	00bfbe16 	blt	zero,r2,7790 <_fflush_r+0x58>
    7898:	0007883a 	mov	r3,zero
    789c:	1805883a 	mov	r2,r3
    78a0:	dfc00417 	ldw	ra,16(sp)
    78a4:	dcc00317 	ldw	r19,12(sp)
    78a8:	dc800217 	ldw	r18,8(sp)
    78ac:	dc400117 	ldw	r17,4(sp)
    78b0:	dc000017 	ldw	r16,0(sp)
    78b4:	dec00504 	addi	sp,sp,20
    78b8:	f800283a 	ret
    78bc:	00079d00 	call	79d0 <__sinit>
    78c0:	003fa806 	br	7764 <_fflush_r+0x2c>
    78c4:	90800517 	ldw	r2,20(r18)
    78c8:	90800215 	stw	r2,8(r18)
    78cc:	003fda06 	br	7838 <_fflush_r+0x100>
    78d0:	90800117 	ldw	r2,4(r18)
    78d4:	90c00c17 	ldw	r3,48(r18)
    78d8:	80a1c83a 	sub	r16,r16,r2
    78dc:	183fb426 	beq	r3,zero,77b0 <_fflush_r+0x78>
    78e0:	90800f17 	ldw	r2,60(r18)
    78e4:	80a1c83a 	sub	r16,r16,r2
    78e8:	003fb106 	br	77b0 <_fflush_r+0x78>
    78ec:	91400717 	ldw	r5,28(r18)
    78f0:	9809883a 	mov	r4,r19
    78f4:	000d883a 	mov	r6,zero
    78f8:	01c00044 	movi	r7,1
    78fc:	403ee83a 	callr	r8
    7900:	1021883a 	mov	r16,r2
    7904:	00bfffc4 	movi	r2,-1
    7908:	80800226 	beq	r16,r2,7914 <_fflush_r+0x1dc>
    790c:	92000a17 	ldw	r8,40(r18)
    7910:	003fa406 	br	77a4 <_fflush_r+0x6c>
    7914:	98c00017 	ldw	r3,0(r19)
    7918:	00800744 	movi	r2,29
    791c:	18bfde26 	beq	r3,r2,7898 <_fflush_r+0x160>
    7920:	9080030b 	ldhu	r2,12(r18)
    7924:	8007883a 	mov	r3,r16
    7928:	10801014 	ori	r2,r2,64
    792c:	9080030d 	sth	r2,12(r18)
    7930:	003fcf06 	br	7870 <_fflush_r+0x138>

00007934 <fflush>:
    7934:	01400034 	movhi	r5,0
    7938:	295dce04 	addi	r5,r5,30520
    793c:	2007883a 	mov	r3,r4
    7940:	20000526 	beq	r4,zero,7958 <fflush+0x24>
    7944:	00800074 	movhi	r2,1
    7948:	10834a04 	addi	r2,r2,3368
    794c:	11000017 	ldw	r4,0(r2)
    7950:	180b883a 	mov	r5,r3
    7954:	00077381 	jmpi	7738 <_fflush_r>
    7958:	00800074 	movhi	r2,1
    795c:	10834b04 	addi	r2,r2,3372
    7960:	11000017 	ldw	r4,0(r2)
    7964:	00085041 	jmpi	8504 <_fwalk_reent>

00007968 <std>:
    7968:	00800074 	movhi	r2,1
    796c:	10a85804 	addi	r2,r2,-24224
    7970:	20800b15 	stw	r2,44(r4)
    7974:	00800074 	movhi	r2,1
    7978:	10a89304 	addi	r2,r2,-23988
    797c:	20800815 	stw	r2,32(r4)
    7980:	00c00074 	movhi	r3,1
    7984:	18e87404 	addi	r3,r3,-24112
    7988:	00800074 	movhi	r2,1
    798c:	10a85a04 	addi	r2,r2,-24216
    7990:	2140030d 	sth	r5,12(r4)
    7994:	2180038d 	sth	r6,14(r4)
    7998:	20c00915 	stw	r3,36(r4)
    799c:	20800a15 	stw	r2,40(r4)
    79a0:	20000015 	stw	zero,0(r4)
    79a4:	20000115 	stw	zero,4(r4)
    79a8:	20000215 	stw	zero,8(r4)
    79ac:	20000415 	stw	zero,16(r4)
    79b0:	20000515 	stw	zero,20(r4)
    79b4:	20000615 	stw	zero,24(r4)
    79b8:	21000715 	stw	r4,28(r4)
    79bc:	f800283a 	ret

000079c0 <__sfp_lock_acquire>:
    79c0:	f800283a 	ret

000079c4 <__sfp_lock_release>:
    79c4:	f800283a 	ret

000079c8 <__sinit_lock_acquire>:
    79c8:	f800283a 	ret

000079cc <__sinit_lock_release>:
    79cc:	f800283a 	ret

000079d0 <__sinit>:
    79d0:	20800e17 	ldw	r2,56(r4)
    79d4:	defffd04 	addi	sp,sp,-12
    79d8:	dc400115 	stw	r17,4(sp)
    79dc:	dc000015 	stw	r16,0(sp)
    79e0:	dfc00215 	stw	ra,8(sp)
    79e4:	04400044 	movi	r17,1
    79e8:	01400104 	movi	r5,4
    79ec:	000d883a 	mov	r6,zero
    79f0:	2021883a 	mov	r16,r4
    79f4:	2200bb04 	addi	r8,r4,748
    79f8:	200f883a 	mov	r7,r4
    79fc:	10000526 	beq	r2,zero,7a14 <__sinit+0x44>
    7a00:	dfc00217 	ldw	ra,8(sp)
    7a04:	dc400117 	ldw	r17,4(sp)
    7a08:	dc000017 	ldw	r16,0(sp)
    7a0c:	dec00304 	addi	sp,sp,12
    7a10:	f800283a 	ret
    7a14:	21000117 	ldw	r4,4(r4)
    7a18:	00800034 	movhi	r2,0
    7a1c:	109ead04 	addi	r2,r2,31412
    7a20:	00c000c4 	movi	r3,3
    7a24:	80800f15 	stw	r2,60(r16)
    7a28:	80c0b915 	stw	r3,740(r16)
    7a2c:	8200ba15 	stw	r8,744(r16)
    7a30:	84400e15 	stw	r17,56(r16)
    7a34:	8000b815 	stw	zero,736(r16)
    7a38:	00079680 	call	7968 <std>
    7a3c:	81000217 	ldw	r4,8(r16)
    7a40:	880d883a 	mov	r6,r17
    7a44:	800f883a 	mov	r7,r16
    7a48:	01400284 	movi	r5,10
    7a4c:	00079680 	call	7968 <std>
    7a50:	81000317 	ldw	r4,12(r16)
    7a54:	800f883a 	mov	r7,r16
    7a58:	01400484 	movi	r5,18
    7a5c:	01800084 	movi	r6,2
    7a60:	dfc00217 	ldw	ra,8(sp)
    7a64:	dc400117 	ldw	r17,4(sp)
    7a68:	dc000017 	ldw	r16,0(sp)
    7a6c:	dec00304 	addi	sp,sp,12
    7a70:	00079681 	jmpi	7968 <std>

00007a74 <__fp_lock>:
    7a74:	0005883a 	mov	r2,zero
    7a78:	f800283a 	ret

00007a7c <__fp_unlock>:
    7a7c:	0005883a 	mov	r2,zero
    7a80:	f800283a 	ret

00007a84 <__fp_unlock_all>:
    7a84:	00800074 	movhi	r2,1
    7a88:	10834a04 	addi	r2,r2,3368
    7a8c:	11000017 	ldw	r4,0(r2)
    7a90:	01400034 	movhi	r5,0
    7a94:	295e9f04 	addi	r5,r5,31356
    7a98:	00085cc1 	jmpi	85cc <_fwalk>

00007a9c <__fp_lock_all>:
    7a9c:	00800074 	movhi	r2,1
    7aa0:	10834a04 	addi	r2,r2,3368
    7aa4:	11000017 	ldw	r4,0(r2)
    7aa8:	01400034 	movhi	r5,0
    7aac:	295e9d04 	addi	r5,r5,31348
    7ab0:	00085cc1 	jmpi	85cc <_fwalk>

00007ab4 <_cleanup_r>:
    7ab4:	01400074 	movhi	r5,1
    7ab8:	29698504 	addi	r5,r5,-23020
    7abc:	00085cc1 	jmpi	85cc <_fwalk>

00007ac0 <_cleanup>:
    7ac0:	00800074 	movhi	r2,1
    7ac4:	10834b04 	addi	r2,r2,3372
    7ac8:	11000017 	ldw	r4,0(r2)
    7acc:	0007ab41 	jmpi	7ab4 <_cleanup_r>

00007ad0 <__sfmoreglue>:
    7ad0:	defffc04 	addi	sp,sp,-16
    7ad4:	dc400115 	stw	r17,4(sp)
    7ad8:	2c401724 	muli	r17,r5,92
    7adc:	dc800215 	stw	r18,8(sp)
    7ae0:	2825883a 	mov	r18,r5
    7ae4:	89400304 	addi	r5,r17,12
    7ae8:	dc000015 	stw	r16,0(sp)
    7aec:	dfc00315 	stw	ra,12(sp)
    7af0:	00035180 	call	3518 <_malloc_r>
    7af4:	0021883a 	mov	r16,zero
    7af8:	880d883a 	mov	r6,r17
    7afc:	000b883a 	mov	r5,zero
    7b00:	10000626 	beq	r2,zero,7b1c <__sfmoreglue+0x4c>
    7b04:	11000304 	addi	r4,r2,12
    7b08:	14800115 	stw	r18,4(r2)
    7b0c:	10000015 	stw	zero,0(r2)
    7b10:	11000215 	stw	r4,8(r2)
    7b14:	1021883a 	mov	r16,r2
    7b18:	0008aa00 	call	8aa0 <memset>
    7b1c:	8005883a 	mov	r2,r16
    7b20:	dfc00317 	ldw	ra,12(sp)
    7b24:	dc800217 	ldw	r18,8(sp)
    7b28:	dc400117 	ldw	r17,4(sp)
    7b2c:	dc000017 	ldw	r16,0(sp)
    7b30:	dec00404 	addi	sp,sp,16
    7b34:	f800283a 	ret

00007b38 <__sfp>:
    7b38:	defffd04 	addi	sp,sp,-12
    7b3c:	00800074 	movhi	r2,1
    7b40:	10834b04 	addi	r2,r2,3372
    7b44:	dc000015 	stw	r16,0(sp)
    7b48:	14000017 	ldw	r16,0(r2)
    7b4c:	dc400115 	stw	r17,4(sp)
    7b50:	dfc00215 	stw	ra,8(sp)
    7b54:	80800e17 	ldw	r2,56(r16)
    7b58:	2023883a 	mov	r17,r4
    7b5c:	10002626 	beq	r2,zero,7bf8 <__sfp+0xc0>
    7b60:	8400b804 	addi	r16,r16,736
    7b64:	80800117 	ldw	r2,4(r16)
    7b68:	81000217 	ldw	r4,8(r16)
    7b6c:	10ffffc4 	addi	r3,r2,-1
    7b70:	18000916 	blt	r3,zero,7b98 <__sfp+0x60>
    7b74:	2080030f 	ldh	r2,12(r4)
    7b78:	10000b26 	beq	r2,zero,7ba8 <__sfp+0x70>
    7b7c:	017fffc4 	movi	r5,-1
    7b80:	00000206 	br	7b8c <__sfp+0x54>
    7b84:	2080030f 	ldh	r2,12(r4)
    7b88:	10000726 	beq	r2,zero,7ba8 <__sfp+0x70>
    7b8c:	18ffffc4 	addi	r3,r3,-1
    7b90:	21001704 	addi	r4,r4,92
    7b94:	197ffb1e 	bne	r3,r5,7b84 <__sfp+0x4c>
    7b98:	80800017 	ldw	r2,0(r16)
    7b9c:	10001926 	beq	r2,zero,7c04 <__sfp+0xcc>
    7ba0:	1021883a 	mov	r16,r2
    7ba4:	003fef06 	br	7b64 <__sfp+0x2c>
    7ba8:	00bfffc4 	movi	r2,-1
    7bac:	00c00044 	movi	r3,1
    7bb0:	2080038d 	sth	r2,14(r4)
    7bb4:	20c0030d 	sth	r3,12(r4)
    7bb8:	20000015 	stw	zero,0(r4)
    7bbc:	20000215 	stw	zero,8(r4)
    7bc0:	20000115 	stw	zero,4(r4)
    7bc4:	20000415 	stw	zero,16(r4)
    7bc8:	20000515 	stw	zero,20(r4)
    7bcc:	20000615 	stw	zero,24(r4)
    7bd0:	20000c15 	stw	zero,48(r4)
    7bd4:	20000d15 	stw	zero,52(r4)
    7bd8:	20001115 	stw	zero,68(r4)
    7bdc:	20001215 	stw	zero,72(r4)
    7be0:	2005883a 	mov	r2,r4
    7be4:	dfc00217 	ldw	ra,8(sp)
    7be8:	dc400117 	ldw	r17,4(sp)
    7bec:	dc000017 	ldw	r16,0(sp)
    7bf0:	dec00304 	addi	sp,sp,12
    7bf4:	f800283a 	ret
    7bf8:	8009883a 	mov	r4,r16
    7bfc:	00079d00 	call	79d0 <__sinit>
    7c00:	003fd706 	br	7b60 <__sfp+0x28>
    7c04:	8809883a 	mov	r4,r17
    7c08:	01400104 	movi	r5,4
    7c0c:	0007ad00 	call	7ad0 <__sfmoreglue>
    7c10:	80800015 	stw	r2,0(r16)
    7c14:	103fe21e 	bne	r2,zero,7ba0 <__sfp+0x68>
    7c18:	00800304 	movi	r2,12
    7c1c:	0009883a 	mov	r4,zero
    7c20:	88800015 	stw	r2,0(r17)
    7c24:	003fee06 	br	7be0 <__sfp+0xa8>

00007c28 <_malloc_trim_r>:
    7c28:	defffb04 	addi	sp,sp,-20
    7c2c:	dcc00315 	stw	r19,12(sp)
    7c30:	04c00074 	movhi	r19,1
    7c34:	9cfc9104 	addi	r19,r19,-3516
    7c38:	dc800215 	stw	r18,8(sp)
    7c3c:	dc400115 	stw	r17,4(sp)
    7c40:	dc000015 	stw	r16,0(sp)
    7c44:	2823883a 	mov	r17,r5
    7c48:	2025883a 	mov	r18,r4
    7c4c:	dfc00415 	stw	ra,16(sp)
    7c50:	000bbcc0 	call	bbcc <__malloc_lock>
    7c54:	98800217 	ldw	r2,8(r19)
    7c58:	9009883a 	mov	r4,r18
    7c5c:	000b883a 	mov	r5,zero
    7c60:	10c00117 	ldw	r3,4(r2)
    7c64:	00bfff04 	movi	r2,-4
    7c68:	18a0703a 	and	r16,r3,r2
    7c6c:	8463c83a 	sub	r17,r16,r17
    7c70:	8c43fbc4 	addi	r17,r17,4079
    7c74:	8822d33a 	srli	r17,r17,12
    7c78:	0083ffc4 	movi	r2,4095
    7c7c:	8c7fffc4 	addi	r17,r17,-1
    7c80:	8822933a 	slli	r17,r17,12
    7c84:	1440060e 	bge	r2,r17,7ca0 <_malloc_trim_r+0x78>
    7c88:	0003e240 	call	3e24 <_sbrk_r>
    7c8c:	98c00217 	ldw	r3,8(r19)
    7c90:	9009883a 	mov	r4,r18
    7c94:	044bc83a 	sub	r5,zero,r17
    7c98:	80c7883a 	add	r3,r16,r3
    7c9c:	10c00926 	beq	r2,r3,7cc4 <_malloc_trim_r+0x9c>
    7ca0:	000bbd00 	call	bbd0 <__malloc_unlock>
    7ca4:	0005883a 	mov	r2,zero
    7ca8:	dfc00417 	ldw	ra,16(sp)
    7cac:	dcc00317 	ldw	r19,12(sp)
    7cb0:	dc800217 	ldw	r18,8(sp)
    7cb4:	dc400117 	ldw	r17,4(sp)
    7cb8:	dc000017 	ldw	r16,0(sp)
    7cbc:	dec00504 	addi	sp,sp,20
    7cc0:	f800283a 	ret
    7cc4:	9009883a 	mov	r4,r18
    7cc8:	0003e240 	call	3e24 <_sbrk_r>
    7ccc:	844dc83a 	sub	r6,r16,r17
    7cd0:	00ffffc4 	movi	r3,-1
    7cd4:	9009883a 	mov	r4,r18
    7cd8:	000b883a 	mov	r5,zero
    7cdc:	01c001f4 	movhi	r7,7
    7ce0:	39cc4404 	addi	r7,r7,12560
    7ce4:	31800054 	ori	r6,r6,1
    7ce8:	10c00926 	beq	r2,r3,7d10 <_malloc_trim_r+0xe8>
    7cec:	38800017 	ldw	r2,0(r7)
    7cf0:	98c00217 	ldw	r3,8(r19)
    7cf4:	9009883a 	mov	r4,r18
    7cf8:	1445c83a 	sub	r2,r2,r17
    7cfc:	38800015 	stw	r2,0(r7)
    7d00:	19800115 	stw	r6,4(r3)
    7d04:	000bbd00 	call	bbd0 <__malloc_unlock>
    7d08:	00800044 	movi	r2,1
    7d0c:	003fe606 	br	7ca8 <_malloc_trim_r+0x80>
    7d10:	0003e240 	call	3e24 <_sbrk_r>
    7d14:	99800217 	ldw	r6,8(r19)
    7d18:	100f883a 	mov	r7,r2
    7d1c:	9009883a 	mov	r4,r18
    7d20:	1187c83a 	sub	r3,r2,r6
    7d24:	008003c4 	movi	r2,15
    7d28:	19400054 	ori	r5,r3,1
    7d2c:	10ffdc0e 	bge	r2,r3,7ca0 <_malloc_trim_r+0x78>
    7d30:	00800074 	movhi	r2,1
    7d34:	10834d04 	addi	r2,r2,3380
    7d38:	10c00017 	ldw	r3,0(r2)
    7d3c:	008001f4 	movhi	r2,7
    7d40:	108c4404 	addi	r2,r2,12560
    7d44:	31400115 	stw	r5,4(r6)
    7d48:	38c7c83a 	sub	r3,r7,r3
    7d4c:	10c00015 	stw	r3,0(r2)
    7d50:	003fd306 	br	7ca0 <_malloc_trim_r+0x78>

00007d54 <_free_r>:
    7d54:	defffd04 	addi	sp,sp,-12
    7d58:	dc400115 	stw	r17,4(sp)
    7d5c:	dc000015 	stw	r16,0(sp)
    7d60:	dfc00215 	stw	ra,8(sp)
    7d64:	2821883a 	mov	r16,r5
    7d68:	2023883a 	mov	r17,r4
    7d6c:	28005a26 	beq	r5,zero,7ed8 <_free_r+0x184>
    7d70:	000bbcc0 	call	bbcc <__malloc_lock>
    7d74:	823ffe04 	addi	r8,r16,-8
    7d78:	41400117 	ldw	r5,4(r8)
    7d7c:	00bfff84 	movi	r2,-2
    7d80:	02800074 	movhi	r10,1
    7d84:	52bc9104 	addi	r10,r10,-3516
    7d88:	288e703a 	and	r7,r5,r2
    7d8c:	41cd883a 	add	r6,r8,r7
    7d90:	30c00117 	ldw	r3,4(r6)
    7d94:	51000217 	ldw	r4,8(r10)
    7d98:	00bfff04 	movi	r2,-4
    7d9c:	1892703a 	and	r9,r3,r2
    7da0:	5017883a 	mov	r11,r10
    7da4:	31006726 	beq	r6,r4,7f44 <_free_r+0x1f0>
    7da8:	2880004c 	andi	r2,r5,1
    7dac:	1005003a 	cmpeq	r2,r2,zero
    7db0:	32400115 	stw	r9,4(r6)
    7db4:	10001a1e 	bne	r2,zero,7e20 <_free_r+0xcc>
    7db8:	000b883a 	mov	r5,zero
    7dbc:	3247883a 	add	r3,r6,r9
    7dc0:	18800117 	ldw	r2,4(r3)
    7dc4:	1080004c 	andi	r2,r2,1
    7dc8:	1000231e 	bne	r2,zero,7e58 <_free_r+0x104>
    7dcc:	280ac03a 	cmpne	r5,r5,zero
    7dd0:	3a4f883a 	add	r7,r7,r9
    7dd4:	2800451e 	bne	r5,zero,7eec <_free_r+0x198>
    7dd8:	31000217 	ldw	r4,8(r6)
    7ddc:	00800074 	movhi	r2,1
    7de0:	10bc9304 	addi	r2,r2,-3508
    7de4:	20807b26 	beq	r4,r2,7fd4 <_free_r+0x280>
    7de8:	30800317 	ldw	r2,12(r6)
    7dec:	3a07883a 	add	r3,r7,r8
    7df0:	19c00015 	stw	r7,0(r3)
    7df4:	11000215 	stw	r4,8(r2)
    7df8:	20800315 	stw	r2,12(r4)
    7dfc:	38800054 	ori	r2,r7,1
    7e00:	40800115 	stw	r2,4(r8)
    7e04:	28001a26 	beq	r5,zero,7e70 <_free_r+0x11c>
    7e08:	8809883a 	mov	r4,r17
    7e0c:	dfc00217 	ldw	ra,8(sp)
    7e10:	dc400117 	ldw	r17,4(sp)
    7e14:	dc000017 	ldw	r16,0(sp)
    7e18:	dec00304 	addi	sp,sp,12
    7e1c:	000bbd01 	jmpi	bbd0 <__malloc_unlock>
    7e20:	80bffe17 	ldw	r2,-8(r16)
    7e24:	50c00204 	addi	r3,r10,8
    7e28:	4091c83a 	sub	r8,r8,r2
    7e2c:	41000217 	ldw	r4,8(r8)
    7e30:	388f883a 	add	r7,r7,r2
    7e34:	20c06126 	beq	r4,r3,7fbc <_free_r+0x268>
    7e38:	40800317 	ldw	r2,12(r8)
    7e3c:	3247883a 	add	r3,r6,r9
    7e40:	000b883a 	mov	r5,zero
    7e44:	11000215 	stw	r4,8(r2)
    7e48:	20800315 	stw	r2,12(r4)
    7e4c:	18800117 	ldw	r2,4(r3)
    7e50:	1080004c 	andi	r2,r2,1
    7e54:	103fdd26 	beq	r2,zero,7dcc <_free_r+0x78>
    7e58:	38800054 	ori	r2,r7,1
    7e5c:	3a07883a 	add	r3,r7,r8
    7e60:	280ac03a 	cmpne	r5,r5,zero
    7e64:	40800115 	stw	r2,4(r8)
    7e68:	19c00015 	stw	r7,0(r3)
    7e6c:	283fe61e 	bne	r5,zero,7e08 <_free_r+0xb4>
    7e70:	00807fc4 	movi	r2,511
    7e74:	11c01f2e 	bgeu	r2,r7,7ef4 <_free_r+0x1a0>
    7e78:	3806d27a 	srli	r3,r7,9
    7e7c:	1800481e 	bne	r3,zero,7fa0 <_free_r+0x24c>
    7e80:	3804d0fa 	srli	r2,r7,3
    7e84:	100690fa 	slli	r3,r2,3
    7e88:	1acd883a 	add	r6,r3,r11
    7e8c:	31400217 	ldw	r5,8(r6)
    7e90:	31405926 	beq	r6,r5,7ff8 <_free_r+0x2a4>
    7e94:	28800117 	ldw	r2,4(r5)
    7e98:	00ffff04 	movi	r3,-4
    7e9c:	10c4703a 	and	r2,r2,r3
    7ea0:	3880022e 	bgeu	r7,r2,7eac <_free_r+0x158>
    7ea4:	29400217 	ldw	r5,8(r5)
    7ea8:	317ffa1e 	bne	r6,r5,7e94 <_free_r+0x140>
    7eac:	29800317 	ldw	r6,12(r5)
    7eb0:	41800315 	stw	r6,12(r8)
    7eb4:	41400215 	stw	r5,8(r8)
    7eb8:	8809883a 	mov	r4,r17
    7ebc:	2a000315 	stw	r8,12(r5)
    7ec0:	32000215 	stw	r8,8(r6)
    7ec4:	dfc00217 	ldw	ra,8(sp)
    7ec8:	dc400117 	ldw	r17,4(sp)
    7ecc:	dc000017 	ldw	r16,0(sp)
    7ed0:	dec00304 	addi	sp,sp,12
    7ed4:	000bbd01 	jmpi	bbd0 <__malloc_unlock>
    7ed8:	dfc00217 	ldw	ra,8(sp)
    7edc:	dc400117 	ldw	r17,4(sp)
    7ee0:	dc000017 	ldw	r16,0(sp)
    7ee4:	dec00304 	addi	sp,sp,12
    7ee8:	f800283a 	ret
    7eec:	31000217 	ldw	r4,8(r6)
    7ef0:	003fbd06 	br	7de8 <_free_r+0x94>
    7ef4:	3806d0fa 	srli	r3,r7,3
    7ef8:	00800044 	movi	r2,1
    7efc:	51400117 	ldw	r5,4(r10)
    7f00:	180890fa 	slli	r4,r3,3
    7f04:	1807d0ba 	srai	r3,r3,2
    7f08:	22c9883a 	add	r4,r4,r11
    7f0c:	21800217 	ldw	r6,8(r4)
    7f10:	10c4983a 	sll	r2,r2,r3
    7f14:	41000315 	stw	r4,12(r8)
    7f18:	41800215 	stw	r6,8(r8)
    7f1c:	288ab03a 	or	r5,r5,r2
    7f20:	22000215 	stw	r8,8(r4)
    7f24:	8809883a 	mov	r4,r17
    7f28:	51400115 	stw	r5,4(r10)
    7f2c:	32000315 	stw	r8,12(r6)
    7f30:	dfc00217 	ldw	ra,8(sp)
    7f34:	dc400117 	ldw	r17,4(sp)
    7f38:	dc000017 	ldw	r16,0(sp)
    7f3c:	dec00304 	addi	sp,sp,12
    7f40:	000bbd01 	jmpi	bbd0 <__malloc_unlock>
    7f44:	2880004c 	andi	r2,r5,1
    7f48:	3a4d883a 	add	r6,r7,r9
    7f4c:	1000071e 	bne	r2,zero,7f6c <_free_r+0x218>
    7f50:	80bffe17 	ldw	r2,-8(r16)
    7f54:	4091c83a 	sub	r8,r8,r2
    7f58:	41000317 	ldw	r4,12(r8)
    7f5c:	40c00217 	ldw	r3,8(r8)
    7f60:	308d883a 	add	r6,r6,r2
    7f64:	20c00215 	stw	r3,8(r4)
    7f68:	19000315 	stw	r4,12(r3)
    7f6c:	00800074 	movhi	r2,1
    7f70:	10834c04 	addi	r2,r2,3376
    7f74:	11000017 	ldw	r4,0(r2)
    7f78:	30c00054 	ori	r3,r6,1
    7f7c:	52000215 	stw	r8,8(r10)
    7f80:	40c00115 	stw	r3,4(r8)
    7f84:	313fa036 	bltu	r6,r4,7e08 <_free_r+0xb4>
    7f88:	00800074 	movhi	r2,1
    7f8c:	108b3704 	addi	r2,r2,11484
    7f90:	11400017 	ldw	r5,0(r2)
    7f94:	8809883a 	mov	r4,r17
    7f98:	0007c280 	call	7c28 <_malloc_trim_r>
    7f9c:	003f9a06 	br	7e08 <_free_r+0xb4>
    7fa0:	00800104 	movi	r2,4
    7fa4:	10c0072e 	bgeu	r2,r3,7fc4 <_free_r+0x270>
    7fa8:	00800504 	movi	r2,20
    7fac:	10c01936 	bltu	r2,r3,8014 <_free_r+0x2c0>
    7fb0:	188016c4 	addi	r2,r3,91
    7fb4:	100690fa 	slli	r3,r2,3
    7fb8:	003fb306 	br	7e88 <_free_r+0x134>
    7fbc:	01400044 	movi	r5,1
    7fc0:	003f7e06 	br	7dbc <_free_r+0x68>
    7fc4:	3804d1ba 	srli	r2,r7,6
    7fc8:	10800e04 	addi	r2,r2,56
    7fcc:	100690fa 	slli	r3,r2,3
    7fd0:	003fad06 	br	7e88 <_free_r+0x134>
    7fd4:	22000315 	stw	r8,12(r4)
    7fd8:	22000215 	stw	r8,8(r4)
    7fdc:	3a05883a 	add	r2,r7,r8
    7fe0:	38c00054 	ori	r3,r7,1
    7fe4:	11c00015 	stw	r7,0(r2)
    7fe8:	41000215 	stw	r4,8(r8)
    7fec:	40c00115 	stw	r3,4(r8)
    7ff0:	41000315 	stw	r4,12(r8)
    7ff4:	003f8406 	br	7e08 <_free_r+0xb4>
    7ff8:	1005d0ba 	srai	r2,r2,2
    7ffc:	00c00044 	movi	r3,1
    8000:	51000117 	ldw	r4,4(r10)
    8004:	1886983a 	sll	r3,r3,r2
    8008:	20c8b03a 	or	r4,r4,r3
    800c:	51000115 	stw	r4,4(r10)
    8010:	003fa706 	br	7eb0 <_free_r+0x15c>
    8014:	00801504 	movi	r2,84
    8018:	10c00436 	bltu	r2,r3,802c <_free_r+0x2d8>
    801c:	3804d33a 	srli	r2,r7,12
    8020:	10801b84 	addi	r2,r2,110
    8024:	100690fa 	slli	r3,r2,3
    8028:	003f9706 	br	7e88 <_free_r+0x134>
    802c:	00805504 	movi	r2,340
    8030:	10c00436 	bltu	r2,r3,8044 <_free_r+0x2f0>
    8034:	3804d3fa 	srli	r2,r7,15
    8038:	10801dc4 	addi	r2,r2,119
    803c:	100690fa 	slli	r3,r2,3
    8040:	003f9106 	br	7e88 <_free_r+0x134>
    8044:	00815504 	movi	r2,1364
    8048:	10c0032e 	bgeu	r2,r3,8058 <_free_r+0x304>
    804c:	00801f84 	movi	r2,126
    8050:	00c0fc04 	movi	r3,1008
    8054:	003f8c06 	br	7e88 <_free_r+0x134>
    8058:	3804d4ba 	srli	r2,r7,18
    805c:	10801f04 	addi	r2,r2,124
    8060:	100690fa 	slli	r3,r2,3
    8064:	003f8806 	br	7e88 <_free_r+0x134>

00008068 <__sfvwrite_r>:
    8068:	30800217 	ldw	r2,8(r6)
    806c:	defff504 	addi	sp,sp,-44
    8070:	df000915 	stw	fp,36(sp)
    8074:	dd800715 	stw	r22,28(sp)
    8078:	dc800315 	stw	r18,12(sp)
    807c:	dfc00a15 	stw	ra,40(sp)
    8080:	ddc00815 	stw	r23,32(sp)
    8084:	dd400615 	stw	r21,24(sp)
    8088:	dd000515 	stw	r20,20(sp)
    808c:	dcc00415 	stw	r19,16(sp)
    8090:	dc400215 	stw	r17,8(sp)
    8094:	dc000115 	stw	r16,4(sp)
    8098:	302d883a 	mov	r22,r6
    809c:	2039883a 	mov	fp,r4
    80a0:	2825883a 	mov	r18,r5
    80a4:	10001c26 	beq	r2,zero,8118 <__sfvwrite_r+0xb0>
    80a8:	29c0030b 	ldhu	r7,12(r5)
    80ac:	3880020c 	andi	r2,r7,8
    80b0:	10002726 	beq	r2,zero,8150 <__sfvwrite_r+0xe8>
    80b4:	28800417 	ldw	r2,16(r5)
    80b8:	10002526 	beq	r2,zero,8150 <__sfvwrite_r+0xe8>
    80bc:	3880008c 	andi	r2,r7,2
    80c0:	b5400017 	ldw	r21,0(r22)
    80c4:	10002826 	beq	r2,zero,8168 <__sfvwrite_r+0x100>
    80c8:	0021883a 	mov	r16,zero
    80cc:	0023883a 	mov	r17,zero
    80d0:	880d883a 	mov	r6,r17
    80d4:	e009883a 	mov	r4,fp
    80d8:	00810004 	movi	r2,1024
    80dc:	80006e26 	beq	r16,zero,8298 <__sfvwrite_r+0x230>
    80e0:	800f883a 	mov	r7,r16
    80e4:	91400717 	ldw	r5,28(r18)
    80e8:	1400012e 	bgeu	r2,r16,80f0 <__sfvwrite_r+0x88>
    80ec:	100f883a 	mov	r7,r2
    80f0:	90c00917 	ldw	r3,36(r18)
    80f4:	183ee83a 	callr	r3
    80f8:	1007883a 	mov	r3,r2
    80fc:	80a1c83a 	sub	r16,r16,r2
    8100:	88a3883a 	add	r17,r17,r2
    8104:	00806d0e 	bge	zero,r2,82bc <__sfvwrite_r+0x254>
    8108:	b0800217 	ldw	r2,8(r22)
    810c:	10c5c83a 	sub	r2,r2,r3
    8110:	b0800215 	stw	r2,8(r22)
    8114:	103fee1e 	bne	r2,zero,80d0 <__sfvwrite_r+0x68>
    8118:	0009883a 	mov	r4,zero
    811c:	2005883a 	mov	r2,r4
    8120:	dfc00a17 	ldw	ra,40(sp)
    8124:	df000917 	ldw	fp,36(sp)
    8128:	ddc00817 	ldw	r23,32(sp)
    812c:	dd800717 	ldw	r22,28(sp)
    8130:	dd400617 	ldw	r21,24(sp)
    8134:	dd000517 	ldw	r20,20(sp)
    8138:	dcc00417 	ldw	r19,16(sp)
    813c:	dc800317 	ldw	r18,12(sp)
    8140:	dc400217 	ldw	r17,8(sp)
    8144:	dc000117 	ldw	r16,4(sp)
    8148:	dec00b04 	addi	sp,sp,44
    814c:	f800283a 	ret
    8150:	0005e300 	call	5e30 <__swsetup_r>
    8154:	1000e41e 	bne	r2,zero,84e8 <__sfvwrite_r+0x480>
    8158:	91c0030b 	ldhu	r7,12(r18)
    815c:	b5400017 	ldw	r21,0(r22)
    8160:	3880008c 	andi	r2,r7,2
    8164:	103fd81e 	bne	r2,zero,80c8 <__sfvwrite_r+0x60>
    8168:	3880004c 	andi	r2,r7,1
    816c:	1005003a 	cmpeq	r2,r2,zero
    8170:	10005726 	beq	r2,zero,82d0 <__sfvwrite_r+0x268>
    8174:	0029883a 	mov	r20,zero
    8178:	002f883a 	mov	r23,zero
    817c:	a0004226 	beq	r20,zero,8288 <__sfvwrite_r+0x220>
    8180:	3880800c 	andi	r2,r7,512
    8184:	94000217 	ldw	r16,8(r18)
    8188:	10008b26 	beq	r2,zero,83b8 <__sfvwrite_r+0x350>
    818c:	800d883a 	mov	r6,r16
    8190:	a400a536 	bltu	r20,r16,8428 <__sfvwrite_r+0x3c0>
    8194:	3881200c 	andi	r2,r7,1152
    8198:	10002726 	beq	r2,zero,8238 <__sfvwrite_r+0x1d0>
    819c:	90800517 	ldw	r2,20(r18)
    81a0:	92000417 	ldw	r8,16(r18)
    81a4:	91400017 	ldw	r5,0(r18)
    81a8:	1087883a 	add	r3,r2,r2
    81ac:	1887883a 	add	r3,r3,r2
    81b0:	1808d7fa 	srli	r4,r3,31
    81b4:	2a21c83a 	sub	r16,r5,r8
    81b8:	80800044 	addi	r2,r16,1
    81bc:	20c9883a 	add	r4,r4,r3
    81c0:	2027d07a 	srai	r19,r4,1
    81c4:	a085883a 	add	r2,r20,r2
    81c8:	980d883a 	mov	r6,r19
    81cc:	9880022e 	bgeu	r19,r2,81d8 <__sfvwrite_r+0x170>
    81d0:	1027883a 	mov	r19,r2
    81d4:	100d883a 	mov	r6,r2
    81d8:	3881000c 	andi	r2,r7,1024
    81dc:	1000b826 	beq	r2,zero,84c0 <__sfvwrite_r+0x458>
    81e0:	300b883a 	mov	r5,r6
    81e4:	e009883a 	mov	r4,fp
    81e8:	00035180 	call	3518 <_malloc_r>
    81ec:	10003126 	beq	r2,zero,82b4 <__sfvwrite_r+0x24c>
    81f0:	91400417 	ldw	r5,16(r18)
    81f4:	1009883a 	mov	r4,r2
    81f8:	800d883a 	mov	r6,r16
    81fc:	1023883a 	mov	r17,r2
    8200:	0003c580 	call	3c58 <memcpy>
    8204:	90c0030b 	ldhu	r3,12(r18)
    8208:	00beffc4 	movi	r2,-1025
    820c:	1886703a 	and	r3,r3,r2
    8210:	18c02014 	ori	r3,r3,128
    8214:	90c0030d 	sth	r3,12(r18)
    8218:	9c07c83a 	sub	r3,r19,r16
    821c:	8c05883a 	add	r2,r17,r16
    8220:	a00d883a 	mov	r6,r20
    8224:	a021883a 	mov	r16,r20
    8228:	90800015 	stw	r2,0(r18)
    822c:	90c00215 	stw	r3,8(r18)
    8230:	94400415 	stw	r17,16(r18)
    8234:	94c00515 	stw	r19,20(r18)
    8238:	91000017 	ldw	r4,0(r18)
    823c:	b80b883a 	mov	r5,r23
    8240:	a023883a 	mov	r17,r20
    8244:	00089c00 	call	89c0 <memmove>
    8248:	90c00217 	ldw	r3,8(r18)
    824c:	90800017 	ldw	r2,0(r18)
    8250:	a027883a 	mov	r19,r20
    8254:	1c07c83a 	sub	r3,r3,r16
    8258:	1405883a 	add	r2,r2,r16
    825c:	90c00215 	stw	r3,8(r18)
    8260:	a021883a 	mov	r16,r20
    8264:	90800015 	stw	r2,0(r18)
    8268:	b0800217 	ldw	r2,8(r22)
    826c:	1405c83a 	sub	r2,r2,r16
    8270:	b0800215 	stw	r2,8(r22)
    8274:	103fa826 	beq	r2,zero,8118 <__sfvwrite_r+0xb0>
    8278:	a469c83a 	sub	r20,r20,r17
    827c:	91c0030b 	ldhu	r7,12(r18)
    8280:	bcef883a 	add	r23,r23,r19
    8284:	a03fbe1e 	bne	r20,zero,8180 <__sfvwrite_r+0x118>
    8288:	adc00017 	ldw	r23,0(r21)
    828c:	ad000117 	ldw	r20,4(r21)
    8290:	ad400204 	addi	r21,r21,8
    8294:	003fb906 	br	817c <__sfvwrite_r+0x114>
    8298:	ac400017 	ldw	r17,0(r21)
    829c:	ac000117 	ldw	r16,4(r21)
    82a0:	ad400204 	addi	r21,r21,8
    82a4:	003f8a06 	br	80d0 <__sfvwrite_r+0x68>
    82a8:	91400417 	ldw	r5,16(r18)
    82ac:	e009883a 	mov	r4,fp
    82b0:	0007d540 	call	7d54 <_free_r>
    82b4:	00800304 	movi	r2,12
    82b8:	e0800015 	stw	r2,0(fp)
    82bc:	9080030b 	ldhu	r2,12(r18)
    82c0:	013fffc4 	movi	r4,-1
    82c4:	10801014 	ori	r2,r2,64
    82c8:	9080030d 	sth	r2,12(r18)
    82cc:	003f9306 	br	811c <__sfvwrite_r+0xb4>
    82d0:	0027883a 	mov	r19,zero
    82d4:	002f883a 	mov	r23,zero
    82d8:	d8000015 	stw	zero,0(sp)
    82dc:	0029883a 	mov	r20,zero
    82e0:	98001e26 	beq	r19,zero,835c <__sfvwrite_r+0x2f4>
    82e4:	d8c00017 	ldw	r3,0(sp)
    82e8:	1804c03a 	cmpne	r2,r3,zero
    82ec:	10005e26 	beq	r2,zero,8468 <__sfvwrite_r+0x400>
    82f0:	9821883a 	mov	r16,r19
    82f4:	a4c0012e 	bgeu	r20,r19,82fc <__sfvwrite_r+0x294>
    82f8:	a021883a 	mov	r16,r20
    82fc:	91000017 	ldw	r4,0(r18)
    8300:	90800417 	ldw	r2,16(r18)
    8304:	91800217 	ldw	r6,8(r18)
    8308:	91c00517 	ldw	r7,20(r18)
    830c:	1100022e 	bgeu	r2,r4,8318 <__sfvwrite_r+0x2b0>
    8310:	31e3883a 	add	r17,r6,r7
    8314:	8c001616 	blt	r17,r16,8370 <__sfvwrite_r+0x308>
    8318:	81c03816 	blt	r16,r7,83fc <__sfvwrite_r+0x394>
    831c:	90c00917 	ldw	r3,36(r18)
    8320:	91400717 	ldw	r5,28(r18)
    8324:	e009883a 	mov	r4,fp
    8328:	b80d883a 	mov	r6,r23
    832c:	183ee83a 	callr	r3
    8330:	1023883a 	mov	r17,r2
    8334:	00bfe10e 	bge	zero,r2,82bc <__sfvwrite_r+0x254>
    8338:	a469c83a 	sub	r20,r20,r17
    833c:	a0001826 	beq	r20,zero,83a0 <__sfvwrite_r+0x338>
    8340:	b0800217 	ldw	r2,8(r22)
    8344:	1445c83a 	sub	r2,r2,r17
    8348:	b0800215 	stw	r2,8(r22)
    834c:	103f7226 	beq	r2,zero,8118 <__sfvwrite_r+0xb0>
    8350:	9c67c83a 	sub	r19,r19,r17
    8354:	bc6f883a 	add	r23,r23,r17
    8358:	983fe21e 	bne	r19,zero,82e4 <__sfvwrite_r+0x27c>
    835c:	adc00017 	ldw	r23,0(r21)
    8360:	acc00117 	ldw	r19,4(r21)
    8364:	ad400204 	addi	r21,r21,8
    8368:	d8000015 	stw	zero,0(sp)
    836c:	003fdc06 	br	82e0 <__sfvwrite_r+0x278>
    8370:	b80b883a 	mov	r5,r23
    8374:	880d883a 	mov	r6,r17
    8378:	00089c00 	call	89c0 <memmove>
    837c:	90c00017 	ldw	r3,0(r18)
    8380:	e009883a 	mov	r4,fp
    8384:	900b883a 	mov	r5,r18
    8388:	1c47883a 	add	r3,r3,r17
    838c:	90c00015 	stw	r3,0(r18)
    8390:	00077380 	call	7738 <_fflush_r>
    8394:	103fc91e 	bne	r2,zero,82bc <__sfvwrite_r+0x254>
    8398:	a469c83a 	sub	r20,r20,r17
    839c:	a03fe81e 	bne	r20,zero,8340 <__sfvwrite_r+0x2d8>
    83a0:	e009883a 	mov	r4,fp
    83a4:	900b883a 	mov	r5,r18
    83a8:	00077380 	call	7738 <_fflush_r>
    83ac:	103fc31e 	bne	r2,zero,82bc <__sfvwrite_r+0x254>
    83b0:	d8000015 	stw	zero,0(sp)
    83b4:	003fe206 	br	8340 <__sfvwrite_r+0x2d8>
    83b8:	91000017 	ldw	r4,0(r18)
    83bc:	90800417 	ldw	r2,16(r18)
    83c0:	1100022e 	bgeu	r2,r4,83cc <__sfvwrite_r+0x364>
    83c4:	8023883a 	mov	r17,r16
    83c8:	85003136 	bltu	r16,r20,8490 <__sfvwrite_r+0x428>
    83cc:	91c00517 	ldw	r7,20(r18)
    83d0:	a1c01836 	bltu	r20,r7,8434 <__sfvwrite_r+0x3cc>
    83d4:	90c00917 	ldw	r3,36(r18)
    83d8:	91400717 	ldw	r5,28(r18)
    83dc:	e009883a 	mov	r4,fp
    83e0:	b80d883a 	mov	r6,r23
    83e4:	183ee83a 	callr	r3
    83e8:	1021883a 	mov	r16,r2
    83ec:	00bfb30e 	bge	zero,r2,82bc <__sfvwrite_r+0x254>
    83f0:	1023883a 	mov	r17,r2
    83f4:	1027883a 	mov	r19,r2
    83f8:	003f9b06 	br	8268 <__sfvwrite_r+0x200>
    83fc:	b80b883a 	mov	r5,r23
    8400:	800d883a 	mov	r6,r16
    8404:	00089c00 	call	89c0 <memmove>
    8408:	90c00217 	ldw	r3,8(r18)
    840c:	90800017 	ldw	r2,0(r18)
    8410:	8023883a 	mov	r17,r16
    8414:	1c07c83a 	sub	r3,r3,r16
    8418:	1405883a 	add	r2,r2,r16
    841c:	90c00215 	stw	r3,8(r18)
    8420:	90800015 	stw	r2,0(r18)
    8424:	003fc406 	br	8338 <__sfvwrite_r+0x2d0>
    8428:	a00d883a 	mov	r6,r20
    842c:	a021883a 	mov	r16,r20
    8430:	003f8106 	br	8238 <__sfvwrite_r+0x1d0>
    8434:	b80b883a 	mov	r5,r23
    8438:	a00d883a 	mov	r6,r20
    843c:	00089c00 	call	89c0 <memmove>
    8440:	90c00217 	ldw	r3,8(r18)
    8444:	90800017 	ldw	r2,0(r18)
    8448:	a021883a 	mov	r16,r20
    844c:	1d07c83a 	sub	r3,r3,r20
    8450:	1505883a 	add	r2,r2,r20
    8454:	a023883a 	mov	r17,r20
    8458:	a027883a 	mov	r19,r20
    845c:	90c00215 	stw	r3,8(r18)
    8460:	90800015 	stw	r2,0(r18)
    8464:	003f8006 	br	8268 <__sfvwrite_r+0x200>
    8468:	b809883a 	mov	r4,r23
    846c:	01400284 	movi	r5,10
    8470:	980d883a 	mov	r6,r19
    8474:	00088dc0 	call	88dc <memchr>
    8478:	10001726 	beq	r2,zero,84d8 <__sfvwrite_r+0x470>
    847c:	15c5c83a 	sub	r2,r2,r23
    8480:	15000044 	addi	r20,r2,1
    8484:	00800044 	movi	r2,1
    8488:	d8800015 	stw	r2,0(sp)
    848c:	003f9806 	br	82f0 <__sfvwrite_r+0x288>
    8490:	b80b883a 	mov	r5,r23
    8494:	800d883a 	mov	r6,r16
    8498:	00089c00 	call	89c0 <memmove>
    849c:	90c00017 	ldw	r3,0(r18)
    84a0:	e009883a 	mov	r4,fp
    84a4:	900b883a 	mov	r5,r18
    84a8:	1c07883a 	add	r3,r3,r16
    84ac:	90c00015 	stw	r3,0(r18)
    84b0:	8027883a 	mov	r19,r16
    84b4:	00077380 	call	7738 <_fflush_r>
    84b8:	103f6b26 	beq	r2,zero,8268 <__sfvwrite_r+0x200>
    84bc:	003f7f06 	br	82bc <__sfvwrite_r+0x254>
    84c0:	400b883a 	mov	r5,r8
    84c4:	e009883a 	mov	r4,fp
    84c8:	0009b2c0 	call	9b2c <_realloc_r>
    84cc:	103f7626 	beq	r2,zero,82a8 <__sfvwrite_r+0x240>
    84d0:	1023883a 	mov	r17,r2
    84d4:	003f5006 	br	8218 <__sfvwrite_r+0x1b0>
    84d8:	00c00044 	movi	r3,1
    84dc:	9d000044 	addi	r20,r19,1
    84e0:	d8c00015 	stw	r3,0(sp)
    84e4:	003f8206 	br	82f0 <__sfvwrite_r+0x288>
    84e8:	9080030b 	ldhu	r2,12(r18)
    84ec:	00c00244 	movi	r3,9
    84f0:	013fffc4 	movi	r4,-1
    84f4:	10801014 	ori	r2,r2,64
    84f8:	9080030d 	sth	r2,12(r18)
    84fc:	e0c00015 	stw	r3,0(fp)
    8500:	003f0606 	br	811c <__sfvwrite_r+0xb4>

00008504 <_fwalk_reent>:
    8504:	defff704 	addi	sp,sp,-36
    8508:	dcc00315 	stw	r19,12(sp)
    850c:	24c0b804 	addi	r19,r4,736
    8510:	dd800615 	stw	r22,24(sp)
    8514:	dd400515 	stw	r21,20(sp)
    8518:	dfc00815 	stw	ra,32(sp)
    851c:	ddc00715 	stw	r23,28(sp)
    8520:	dd000415 	stw	r20,16(sp)
    8524:	dc800215 	stw	r18,8(sp)
    8528:	dc400115 	stw	r17,4(sp)
    852c:	dc000015 	stw	r16,0(sp)
    8530:	202b883a 	mov	r21,r4
    8534:	282d883a 	mov	r22,r5
    8538:	00079c00 	call	79c0 <__sfp_lock_acquire>
    853c:	98002126 	beq	r19,zero,85c4 <_fwalk_reent+0xc0>
    8540:	002f883a 	mov	r23,zero
    8544:	9c800117 	ldw	r18,4(r19)
    8548:	9c000217 	ldw	r16,8(r19)
    854c:	90bfffc4 	addi	r2,r18,-1
    8550:	10000d16 	blt	r2,zero,8588 <_fwalk_reent+0x84>
    8554:	0023883a 	mov	r17,zero
    8558:	053fffc4 	movi	r20,-1
    855c:	8080030f 	ldh	r2,12(r16)
    8560:	8c400044 	addi	r17,r17,1
    8564:	10000626 	beq	r2,zero,8580 <_fwalk_reent+0x7c>
    8568:	8080038f 	ldh	r2,14(r16)
    856c:	800b883a 	mov	r5,r16
    8570:	a809883a 	mov	r4,r21
    8574:	15000226 	beq	r2,r20,8580 <_fwalk_reent+0x7c>
    8578:	b03ee83a 	callr	r22
    857c:	b8aeb03a 	or	r23,r23,r2
    8580:	84001704 	addi	r16,r16,92
    8584:	947ff51e 	bne	r18,r17,855c <_fwalk_reent+0x58>
    8588:	9cc00017 	ldw	r19,0(r19)
    858c:	983fed1e 	bne	r19,zero,8544 <_fwalk_reent+0x40>
    8590:	00079c40 	call	79c4 <__sfp_lock_release>
    8594:	b805883a 	mov	r2,r23
    8598:	dfc00817 	ldw	ra,32(sp)
    859c:	ddc00717 	ldw	r23,28(sp)
    85a0:	dd800617 	ldw	r22,24(sp)
    85a4:	dd400517 	ldw	r21,20(sp)
    85a8:	dd000417 	ldw	r20,16(sp)
    85ac:	dcc00317 	ldw	r19,12(sp)
    85b0:	dc800217 	ldw	r18,8(sp)
    85b4:	dc400117 	ldw	r17,4(sp)
    85b8:	dc000017 	ldw	r16,0(sp)
    85bc:	dec00904 	addi	sp,sp,36
    85c0:	f800283a 	ret
    85c4:	002f883a 	mov	r23,zero
    85c8:	003ff106 	br	8590 <_fwalk_reent+0x8c>

000085cc <_fwalk>:
    85cc:	defff804 	addi	sp,sp,-32
    85d0:	dcc00315 	stw	r19,12(sp)
    85d4:	24c0b804 	addi	r19,r4,736
    85d8:	dd400515 	stw	r21,20(sp)
    85dc:	dfc00715 	stw	ra,28(sp)
    85e0:	dd800615 	stw	r22,24(sp)
    85e4:	dd000415 	stw	r20,16(sp)
    85e8:	dc800215 	stw	r18,8(sp)
    85ec:	dc400115 	stw	r17,4(sp)
    85f0:	dc000015 	stw	r16,0(sp)
    85f4:	282b883a 	mov	r21,r5
    85f8:	00079c00 	call	79c0 <__sfp_lock_acquire>
    85fc:	98001f26 	beq	r19,zero,867c <_fwalk+0xb0>
    8600:	002d883a 	mov	r22,zero
    8604:	9c800117 	ldw	r18,4(r19)
    8608:	9c000217 	ldw	r16,8(r19)
    860c:	90bfffc4 	addi	r2,r18,-1
    8610:	10000c16 	blt	r2,zero,8644 <_fwalk+0x78>
    8614:	0023883a 	mov	r17,zero
    8618:	053fffc4 	movi	r20,-1
    861c:	8080030f 	ldh	r2,12(r16)
    8620:	8c400044 	addi	r17,r17,1
    8624:	10000526 	beq	r2,zero,863c <_fwalk+0x70>
    8628:	8080038f 	ldh	r2,14(r16)
    862c:	8009883a 	mov	r4,r16
    8630:	15000226 	beq	r2,r20,863c <_fwalk+0x70>
    8634:	a83ee83a 	callr	r21
    8638:	b0acb03a 	or	r22,r22,r2
    863c:	84001704 	addi	r16,r16,92
    8640:	947ff61e 	bne	r18,r17,861c <_fwalk+0x50>
    8644:	9cc00017 	ldw	r19,0(r19)
    8648:	983fee1e 	bne	r19,zero,8604 <_fwalk+0x38>
    864c:	00079c40 	call	79c4 <__sfp_lock_release>
    8650:	b005883a 	mov	r2,r22
    8654:	dfc00717 	ldw	ra,28(sp)
    8658:	dd800617 	ldw	r22,24(sp)
    865c:	dd400517 	ldw	r21,20(sp)
    8660:	dd000417 	ldw	r20,16(sp)
    8664:	dcc00317 	ldw	r19,12(sp)
    8668:	dc800217 	ldw	r18,8(sp)
    866c:	dc400117 	ldw	r17,4(sp)
    8670:	dc000017 	ldw	r16,0(sp)
    8674:	dec00804 	addi	sp,sp,32
    8678:	f800283a 	ret
    867c:	002d883a 	mov	r22,zero
    8680:	003ff206 	br	864c <_fwalk+0x80>

00008684 <__locale_charset>:
    8684:	d0a02a17 	ldw	r2,-32600(gp)
    8688:	f800283a 	ret

0000868c <_localeconv_r>:
    868c:	00800074 	movhi	r2,1
    8690:	10bacf04 	addi	r2,r2,-5316
    8694:	f800283a 	ret

00008698 <localeconv>:
    8698:	00800074 	movhi	r2,1
    869c:	10834a04 	addi	r2,r2,3368
    86a0:	11000017 	ldw	r4,0(r2)
    86a4:	000868c1 	jmpi	868c <_localeconv_r>

000086a8 <_setlocale_r>:
    86a8:	defffc04 	addi	sp,sp,-16
    86ac:	00c00074 	movhi	r3,1
    86b0:	18faa604 	addi	r3,r3,-5480
    86b4:	dc800215 	stw	r18,8(sp)
    86b8:	dc400115 	stw	r17,4(sp)
    86bc:	dc000015 	stw	r16,0(sp)
    86c0:	2023883a 	mov	r17,r4
    86c4:	2825883a 	mov	r18,r5
    86c8:	dfc00315 	stw	ra,12(sp)
    86cc:	3021883a 	mov	r16,r6
    86d0:	3009883a 	mov	r4,r6
    86d4:	180b883a 	mov	r5,r3
    86d8:	30000926 	beq	r6,zero,8700 <_setlocale_r+0x58>
    86dc:	000a2ac0 	call	a2ac <strcmp>
    86e0:	8009883a 	mov	r4,r16
    86e4:	01400074 	movhi	r5,1
    86e8:	297a2d04 	addi	r5,r5,-5964
    86ec:	10000b1e 	bne	r2,zero,871c <_setlocale_r+0x74>
    86f0:	8c000d15 	stw	r16,52(r17)
    86f4:	8c800c15 	stw	r18,48(r17)
    86f8:	00c00074 	movhi	r3,1
    86fc:	18faa604 	addi	r3,r3,-5480
    8700:	1805883a 	mov	r2,r3
    8704:	dfc00317 	ldw	ra,12(sp)
    8708:	dc800217 	ldw	r18,8(sp)
    870c:	dc400117 	ldw	r17,4(sp)
    8710:	dc000017 	ldw	r16,0(sp)
    8714:	dec00404 	addi	sp,sp,16
    8718:	f800283a 	ret
    871c:	000a2ac0 	call	a2ac <strcmp>
    8720:	0007883a 	mov	r3,zero
    8724:	103ff226 	beq	r2,zero,86f0 <_setlocale_r+0x48>
    8728:	003ff506 	br	8700 <_setlocale_r+0x58>

0000872c <setlocale>:
    872c:	01800074 	movhi	r6,1
    8730:	31834a04 	addi	r6,r6,3368
    8734:	2007883a 	mov	r3,r4
    8738:	31000017 	ldw	r4,0(r6)
    873c:	280d883a 	mov	r6,r5
    8740:	180b883a 	mov	r5,r3
    8744:	00086a81 	jmpi	86a8 <_setlocale_r>

00008748 <__smakebuf_r>:
    8748:	2880030b 	ldhu	r2,12(r5)
    874c:	deffed04 	addi	sp,sp,-76
    8750:	dc401015 	stw	r17,64(sp)
    8754:	1080008c 	andi	r2,r2,2
    8758:	dc000f15 	stw	r16,60(sp)
    875c:	dfc01215 	stw	ra,72(sp)
    8760:	dc801115 	stw	r18,68(sp)
    8764:	2821883a 	mov	r16,r5
    8768:	2023883a 	mov	r17,r4
    876c:	10000b26 	beq	r2,zero,879c <__smakebuf_r+0x54>
    8770:	28c010c4 	addi	r3,r5,67
    8774:	00800044 	movi	r2,1
    8778:	28800515 	stw	r2,20(r5)
    877c:	28c00415 	stw	r3,16(r5)
    8780:	28c00015 	stw	r3,0(r5)
    8784:	dfc01217 	ldw	ra,72(sp)
    8788:	dc801117 	ldw	r18,68(sp)
    878c:	dc401017 	ldw	r17,64(sp)
    8790:	dc000f17 	ldw	r16,60(sp)
    8794:	dec01304 	addi	sp,sp,76
    8798:	f800283a 	ret
    879c:	2940038f 	ldh	r5,14(r5)
    87a0:	28002116 	blt	r5,zero,8828 <__smakebuf_r+0xe0>
    87a4:	d80d883a 	mov	r6,sp
    87a8:	000a6280 	call	a628 <_fstat_r>
    87ac:	10001e16 	blt	r2,zero,8828 <__smakebuf_r+0xe0>
    87b0:	d8800117 	ldw	r2,4(sp)
    87b4:	00e00014 	movui	r3,32768
    87b8:	113c000c 	andi	r4,r2,61440
    87bc:	20c03126 	beq	r4,r3,8884 <__smakebuf_r+0x13c>
    87c0:	8080030b 	ldhu	r2,12(r16)
    87c4:	00c80004 	movi	r3,8192
    87c8:	10820014 	ori	r2,r2,2048
    87cc:	8080030d 	sth	r2,12(r16)
    87d0:	20c01e26 	beq	r4,r3,884c <__smakebuf_r+0x104>
    87d4:	04810004 	movi	r18,1024
    87d8:	8809883a 	mov	r4,r17
    87dc:	900b883a 	mov	r5,r18
    87e0:	00035180 	call	3518 <_malloc_r>
    87e4:	1009883a 	mov	r4,r2
    87e8:	10003126 	beq	r2,zero,88b0 <__smakebuf_r+0x168>
    87ec:	80c0030b 	ldhu	r3,12(r16)
    87f0:	00800034 	movhi	r2,0
    87f4:	109ead04 	addi	r2,r2,31412
    87f8:	88800f15 	stw	r2,60(r17)
    87fc:	18c02014 	ori	r3,r3,128
    8800:	84800515 	stw	r18,20(r16)
    8804:	80c0030d 	sth	r3,12(r16)
    8808:	81000415 	stw	r4,16(r16)
    880c:	81000015 	stw	r4,0(r16)
    8810:	dfc01217 	ldw	ra,72(sp)
    8814:	dc801117 	ldw	r18,68(sp)
    8818:	dc401017 	ldw	r17,64(sp)
    881c:	dc000f17 	ldw	r16,60(sp)
    8820:	dec01304 	addi	sp,sp,76
    8824:	f800283a 	ret
    8828:	80c0030b 	ldhu	r3,12(r16)
    882c:	1880200c 	andi	r2,r3,128
    8830:	10000426 	beq	r2,zero,8844 <__smakebuf_r+0xfc>
    8834:	04801004 	movi	r18,64
    8838:	18820014 	ori	r2,r3,2048
    883c:	8080030d 	sth	r2,12(r16)
    8840:	003fe506 	br	87d8 <__smakebuf_r+0x90>
    8844:	04810004 	movi	r18,1024
    8848:	003ffb06 	br	8838 <__smakebuf_r+0xf0>
    884c:	8140038f 	ldh	r5,14(r16)
    8850:	8809883a 	mov	r4,r17
    8854:	000a69c0 	call	a69c <_isatty_r>
    8858:	103fde26 	beq	r2,zero,87d4 <__smakebuf_r+0x8c>
    885c:	8080030b 	ldhu	r2,12(r16)
    8860:	80c010c4 	addi	r3,r16,67
    8864:	04810004 	movi	r18,1024
    8868:	10800054 	ori	r2,r2,1
    886c:	8080030d 	sth	r2,12(r16)
    8870:	00800044 	movi	r2,1
    8874:	80c00415 	stw	r3,16(r16)
    8878:	80800515 	stw	r2,20(r16)
    887c:	80c00015 	stw	r3,0(r16)
    8880:	003fd506 	br	87d8 <__smakebuf_r+0x90>
    8884:	80c00a17 	ldw	r3,40(r16)
    8888:	00800074 	movhi	r2,1
    888c:	10a85a04 	addi	r2,r2,-24216
    8890:	18bfcb1e 	bne	r3,r2,87c0 <__smakebuf_r+0x78>
    8894:	8080030b 	ldhu	r2,12(r16)
    8898:	00c10004 	movi	r3,1024
    889c:	1825883a 	mov	r18,r3
    88a0:	10c4b03a 	or	r2,r2,r3
    88a4:	8080030d 	sth	r2,12(r16)
    88a8:	80c01315 	stw	r3,76(r16)
    88ac:	003fca06 	br	87d8 <__smakebuf_r+0x90>
    88b0:	8100030b 	ldhu	r4,12(r16)
    88b4:	2080800c 	andi	r2,r4,512
    88b8:	103fb21e 	bne	r2,zero,8784 <__smakebuf_r+0x3c>
    88bc:	80c010c4 	addi	r3,r16,67
    88c0:	21000094 	ori	r4,r4,2
    88c4:	00800044 	movi	r2,1
    88c8:	80800515 	stw	r2,20(r16)
    88cc:	8100030d 	sth	r4,12(r16)
    88d0:	80c00415 	stw	r3,16(r16)
    88d4:	80c00015 	stw	r3,0(r16)
    88d8:	003faa06 	br	8784 <__smakebuf_r+0x3c>

000088dc <memchr>:
    88dc:	008000c4 	movi	r2,3
    88e0:	29403fcc 	andi	r5,r5,255
    88e4:	2007883a 	mov	r3,r4
    88e8:	1180022e 	bgeu	r2,r6,88f4 <memchr+0x18>
    88ec:	2084703a 	and	r2,r4,r2
    88f0:	10000b26 	beq	r2,zero,8920 <memchr+0x44>
    88f4:	313fffc4 	addi	r4,r6,-1
    88f8:	3000051e 	bne	r6,zero,8910 <memchr+0x34>
    88fc:	00002c06 	br	89b0 <memchr+0xd4>
    8900:	213fffc4 	addi	r4,r4,-1
    8904:	00bfffc4 	movi	r2,-1
    8908:	18c00044 	addi	r3,r3,1
    890c:	20802826 	beq	r4,r2,89b0 <memchr+0xd4>
    8910:	18800003 	ldbu	r2,0(r3)
    8914:	28bffa1e 	bne	r5,r2,8900 <memchr+0x24>
    8918:	1805883a 	mov	r2,r3
    891c:	f800283a 	ret
    8920:	0011883a 	mov	r8,zero
    8924:	0007883a 	mov	r3,zero
    8928:	01c00104 	movi	r7,4
    892c:	4004923a 	slli	r2,r8,8
    8930:	18c00044 	addi	r3,r3,1
    8934:	1151883a 	add	r8,r2,r5
    8938:	19fffc1e 	bne	r3,r7,892c <memchr+0x50>
    893c:	02bfbff4 	movhi	r10,65279
    8940:	52bfbfc4 	addi	r10,r10,-257
    8944:	02602074 	movhi	r9,32897
    8948:	4a602004 	addi	r9,r9,-32640
    894c:	02c000c4 	movi	r11,3
    8950:	20800017 	ldw	r2,0(r4)
    8954:	31bfff04 	addi	r6,r6,-4
    8958:	200f883a 	mov	r7,r4
    895c:	1204f03a 	xor	r2,r2,r8
    8960:	1287883a 	add	r3,r2,r10
    8964:	1a46703a 	and	r3,r3,r9
    8968:	0084303a 	nor	r2,zero,r2
    896c:	10c4703a 	and	r2,r2,r3
    8970:	10000b26 	beq	r2,zero,89a0 <memchr+0xc4>
    8974:	20800003 	ldbu	r2,0(r4)
    8978:	28800f26 	beq	r5,r2,89b8 <memchr+0xdc>
    897c:	20800043 	ldbu	r2,1(r4)
    8980:	21c00044 	addi	r7,r4,1
    8984:	28800c26 	beq	r5,r2,89b8 <memchr+0xdc>
    8988:	20800083 	ldbu	r2,2(r4)
    898c:	21c00084 	addi	r7,r4,2
    8990:	28800926 	beq	r5,r2,89b8 <memchr+0xdc>
    8994:	208000c3 	ldbu	r2,3(r4)
    8998:	21c000c4 	addi	r7,r4,3
    899c:	28800626 	beq	r5,r2,89b8 <memchr+0xdc>
    89a0:	21000104 	addi	r4,r4,4
    89a4:	59bfea36 	bltu	r11,r6,8950 <memchr+0x74>
    89a8:	2007883a 	mov	r3,r4
    89ac:	003fd106 	br	88f4 <memchr+0x18>
    89b0:	0005883a 	mov	r2,zero
    89b4:	f800283a 	ret
    89b8:	3805883a 	mov	r2,r7
    89bc:	f800283a 	ret

000089c0 <memmove>:
    89c0:	2807883a 	mov	r3,r5
    89c4:	2011883a 	mov	r8,r4
    89c8:	29000c2e 	bgeu	r5,r4,89fc <memmove+0x3c>
    89cc:	298f883a 	add	r7,r5,r6
    89d0:	21c00a2e 	bgeu	r4,r7,89fc <memmove+0x3c>
    89d4:	30000726 	beq	r6,zero,89f4 <memmove+0x34>
    89d8:	2187883a 	add	r3,r4,r6
    89dc:	198dc83a 	sub	r6,r3,r6
    89e0:	39ffffc4 	addi	r7,r7,-1
    89e4:	38800003 	ldbu	r2,0(r7)
    89e8:	18ffffc4 	addi	r3,r3,-1
    89ec:	18800005 	stb	r2,0(r3)
    89f0:	19bffb1e 	bne	r3,r6,89e0 <memmove+0x20>
    89f4:	2005883a 	mov	r2,r4
    89f8:	f800283a 	ret
    89fc:	01c003c4 	movi	r7,15
    8a00:	39800a36 	bltu	r7,r6,8a2c <memmove+0x6c>
    8a04:	303ffb26 	beq	r6,zero,89f4 <memmove+0x34>
    8a08:	400f883a 	mov	r7,r8
    8a0c:	320d883a 	add	r6,r6,r8
    8a10:	28800003 	ldbu	r2,0(r5)
    8a14:	29400044 	addi	r5,r5,1
    8a18:	38800005 	stb	r2,0(r7)
    8a1c:	39c00044 	addi	r7,r7,1
    8a20:	39bffb1e 	bne	r7,r6,8a10 <memmove+0x50>
    8a24:	2005883a 	mov	r2,r4
    8a28:	f800283a 	ret
    8a2c:	1904b03a 	or	r2,r3,r4
    8a30:	108000cc 	andi	r2,r2,3
    8a34:	103ff31e 	bne	r2,zero,8a04 <memmove+0x44>
    8a38:	3811883a 	mov	r8,r7
    8a3c:	180b883a 	mov	r5,r3
    8a40:	200f883a 	mov	r7,r4
    8a44:	28c00017 	ldw	r3,0(r5)
    8a48:	31bffc04 	addi	r6,r6,-16
    8a4c:	38c00015 	stw	r3,0(r7)
    8a50:	28800117 	ldw	r2,4(r5)
    8a54:	38800115 	stw	r2,4(r7)
    8a58:	28c00217 	ldw	r3,8(r5)
    8a5c:	38c00215 	stw	r3,8(r7)
    8a60:	28800317 	ldw	r2,12(r5)
    8a64:	29400404 	addi	r5,r5,16
    8a68:	38800315 	stw	r2,12(r7)
    8a6c:	39c00404 	addi	r7,r7,16
    8a70:	41bff436 	bltu	r8,r6,8a44 <memmove+0x84>
    8a74:	008000c4 	movi	r2,3
    8a78:	1180072e 	bgeu	r2,r6,8a98 <memmove+0xd8>
    8a7c:	1007883a 	mov	r3,r2
    8a80:	28800017 	ldw	r2,0(r5)
    8a84:	31bfff04 	addi	r6,r6,-4
    8a88:	29400104 	addi	r5,r5,4
    8a8c:	38800015 	stw	r2,0(r7)
    8a90:	39c00104 	addi	r7,r7,4
    8a94:	19bffa36 	bltu	r3,r6,8a80 <memmove+0xc0>
    8a98:	3811883a 	mov	r8,r7
    8a9c:	003fd906 	br	8a04 <memmove+0x44>

00008aa0 <memset>:
    8aa0:	008000c4 	movi	r2,3
    8aa4:	29403fcc 	andi	r5,r5,255
    8aa8:	2007883a 	mov	r3,r4
    8aac:	1180022e 	bgeu	r2,r6,8ab8 <memset+0x18>
    8ab0:	2084703a 	and	r2,r4,r2
    8ab4:	10000826 	beq	r2,zero,8ad8 <memset+0x38>
    8ab8:	30000526 	beq	r6,zero,8ad0 <memset+0x30>
    8abc:	2805883a 	mov	r2,r5
    8ac0:	30cd883a 	add	r6,r6,r3
    8ac4:	18800005 	stb	r2,0(r3)
    8ac8:	18c00044 	addi	r3,r3,1
    8acc:	19bffd1e 	bne	r3,r6,8ac4 <memset+0x24>
    8ad0:	2005883a 	mov	r2,r4
    8ad4:	f800283a 	ret
    8ad8:	2804923a 	slli	r2,r5,8
    8adc:	020003c4 	movi	r8,15
    8ae0:	200f883a 	mov	r7,r4
    8ae4:	2884b03a 	or	r2,r5,r2
    8ae8:	1006943a 	slli	r3,r2,16
    8aec:	10c6b03a 	or	r3,r2,r3
    8af0:	41800a2e 	bgeu	r8,r6,8b1c <memset+0x7c>
    8af4:	4005883a 	mov	r2,r8
    8af8:	31bffc04 	addi	r6,r6,-16
    8afc:	38c00015 	stw	r3,0(r7)
    8b00:	38c00115 	stw	r3,4(r7)
    8b04:	38c00215 	stw	r3,8(r7)
    8b08:	38c00315 	stw	r3,12(r7)
    8b0c:	39c00404 	addi	r7,r7,16
    8b10:	11bff936 	bltu	r2,r6,8af8 <memset+0x58>
    8b14:	008000c4 	movi	r2,3
    8b18:	1180052e 	bgeu	r2,r6,8b30 <memset+0x90>
    8b1c:	31bfff04 	addi	r6,r6,-4
    8b20:	008000c4 	movi	r2,3
    8b24:	38c00015 	stw	r3,0(r7)
    8b28:	39c00104 	addi	r7,r7,4
    8b2c:	11bffb36 	bltu	r2,r6,8b1c <memset+0x7c>
    8b30:	3807883a 	mov	r3,r7
    8b34:	003fe006 	br	8ab8 <memset+0x18>

00008b38 <_Bfree>:
    8b38:	28000826 	beq	r5,zero,8b5c <_Bfree+0x24>
    8b3c:	28800117 	ldw	r2,4(r5)
    8b40:	21001317 	ldw	r4,76(r4)
    8b44:	1085883a 	add	r2,r2,r2
    8b48:	1085883a 	add	r2,r2,r2
    8b4c:	1105883a 	add	r2,r2,r4
    8b50:	10c00017 	ldw	r3,0(r2)
    8b54:	28c00015 	stw	r3,0(r5)
    8b58:	11400015 	stw	r5,0(r2)
    8b5c:	f800283a 	ret

00008b60 <__hi0bits>:
    8b60:	20bfffec 	andhi	r2,r4,65535
    8b64:	10001426 	beq	r2,zero,8bb8 <__hi0bits+0x58>
    8b68:	0007883a 	mov	r3,zero
    8b6c:	20bfc02c 	andhi	r2,r4,65280
    8b70:	1000021e 	bne	r2,zero,8b7c <__hi0bits+0x1c>
    8b74:	2008923a 	slli	r4,r4,8
    8b78:	18c00204 	addi	r3,r3,8
    8b7c:	20bc002c 	andhi	r2,r4,61440
    8b80:	1000021e 	bne	r2,zero,8b8c <__hi0bits+0x2c>
    8b84:	2008913a 	slli	r4,r4,4
    8b88:	18c00104 	addi	r3,r3,4
    8b8c:	20b0002c 	andhi	r2,r4,49152
    8b90:	1000031e 	bne	r2,zero,8ba0 <__hi0bits+0x40>
    8b94:	2105883a 	add	r2,r4,r4
    8b98:	18c00084 	addi	r3,r3,2
    8b9c:	1089883a 	add	r4,r2,r2
    8ba0:	20000316 	blt	r4,zero,8bb0 <__hi0bits+0x50>
    8ba4:	2090002c 	andhi	r2,r4,16384
    8ba8:	10000626 	beq	r2,zero,8bc4 <__hi0bits+0x64>
    8bac:	18c00044 	addi	r3,r3,1
    8bb0:	1805883a 	mov	r2,r3
    8bb4:	f800283a 	ret
    8bb8:	2008943a 	slli	r4,r4,16
    8bbc:	00c00404 	movi	r3,16
    8bc0:	003fea06 	br	8b6c <__hi0bits+0xc>
    8bc4:	00c00804 	movi	r3,32
    8bc8:	1805883a 	mov	r2,r3
    8bcc:	f800283a 	ret

00008bd0 <__lo0bits>:
    8bd0:	20c00017 	ldw	r3,0(r4)
    8bd4:	188001cc 	andi	r2,r3,7
    8bd8:	10000a26 	beq	r2,zero,8c04 <__lo0bits+0x34>
    8bdc:	1880004c 	andi	r2,r3,1
    8be0:	1005003a 	cmpeq	r2,r2,zero
    8be4:	10002126 	beq	r2,zero,8c6c <__lo0bits+0x9c>
    8be8:	1880008c 	andi	r2,r3,2
    8bec:	1000251e 	bne	r2,zero,8c84 <__lo0bits+0xb4>
    8bf0:	1804d0ba 	srli	r2,r3,2
    8bf4:	01400084 	movi	r5,2
    8bf8:	20800015 	stw	r2,0(r4)
    8bfc:	2805883a 	mov	r2,r5
    8c00:	f800283a 	ret
    8c04:	18bfffcc 	andi	r2,r3,65535
    8c08:	10001526 	beq	r2,zero,8c60 <__lo0bits+0x90>
    8c0c:	000b883a 	mov	r5,zero
    8c10:	18803fcc 	andi	r2,r3,255
    8c14:	1000021e 	bne	r2,zero,8c20 <__lo0bits+0x50>
    8c18:	1806d23a 	srli	r3,r3,8
    8c1c:	29400204 	addi	r5,r5,8
    8c20:	188003cc 	andi	r2,r3,15
    8c24:	1000021e 	bne	r2,zero,8c30 <__lo0bits+0x60>
    8c28:	1806d13a 	srli	r3,r3,4
    8c2c:	29400104 	addi	r5,r5,4
    8c30:	188000cc 	andi	r2,r3,3
    8c34:	1000021e 	bne	r2,zero,8c40 <__lo0bits+0x70>
    8c38:	1806d0ba 	srli	r3,r3,2
    8c3c:	29400084 	addi	r5,r5,2
    8c40:	1880004c 	andi	r2,r3,1
    8c44:	1000031e 	bne	r2,zero,8c54 <__lo0bits+0x84>
    8c48:	1806d07a 	srli	r3,r3,1
    8c4c:	18000a26 	beq	r3,zero,8c78 <__lo0bits+0xa8>
    8c50:	29400044 	addi	r5,r5,1
    8c54:	2805883a 	mov	r2,r5
    8c58:	20c00015 	stw	r3,0(r4)
    8c5c:	f800283a 	ret
    8c60:	1806d43a 	srli	r3,r3,16
    8c64:	01400404 	movi	r5,16
    8c68:	003fe906 	br	8c10 <__lo0bits+0x40>
    8c6c:	000b883a 	mov	r5,zero
    8c70:	2805883a 	mov	r2,r5
    8c74:	f800283a 	ret
    8c78:	01400804 	movi	r5,32
    8c7c:	2805883a 	mov	r2,r5
    8c80:	f800283a 	ret
    8c84:	1804d07a 	srli	r2,r3,1
    8c88:	01400044 	movi	r5,1
    8c8c:	20800015 	stw	r2,0(r4)
    8c90:	003fda06 	br	8bfc <__lo0bits+0x2c>

00008c94 <__mcmp>:
    8c94:	20800417 	ldw	r2,16(r4)
    8c98:	28c00417 	ldw	r3,16(r5)
    8c9c:	10cfc83a 	sub	r7,r2,r3
    8ca0:	38000c1e 	bne	r7,zero,8cd4 <__mcmp+0x40>
    8ca4:	18c5883a 	add	r2,r3,r3
    8ca8:	1085883a 	add	r2,r2,r2
    8cac:	10c00504 	addi	r3,r2,20
    8cb0:	21000504 	addi	r4,r4,20
    8cb4:	28cb883a 	add	r5,r5,r3
    8cb8:	2085883a 	add	r2,r4,r2
    8cbc:	10bfff04 	addi	r2,r2,-4
    8cc0:	297fff04 	addi	r5,r5,-4
    8cc4:	11800017 	ldw	r6,0(r2)
    8cc8:	28c00017 	ldw	r3,0(r5)
    8ccc:	30c0031e 	bne	r6,r3,8cdc <__mcmp+0x48>
    8cd0:	20bffa36 	bltu	r4,r2,8cbc <__mcmp+0x28>
    8cd4:	3805883a 	mov	r2,r7
    8cd8:	f800283a 	ret
    8cdc:	30c00336 	bltu	r6,r3,8cec <__mcmp+0x58>
    8ce0:	01c00044 	movi	r7,1
    8ce4:	3805883a 	mov	r2,r7
    8ce8:	f800283a 	ret
    8cec:	01ffffc4 	movi	r7,-1
    8cf0:	003ff806 	br	8cd4 <__mcmp+0x40>

00008cf4 <__ulp>:
    8cf4:	295ffc2c 	andhi	r5,r5,32752
    8cf8:	013f3034 	movhi	r4,64704
    8cfc:	290b883a 	add	r5,r5,r4
    8d00:	0145c83a 	sub	r2,zero,r5
    8d04:	1007d53a 	srai	r3,r2,20
    8d08:	000d883a 	mov	r6,zero
    8d0c:	0140040e 	bge	zero,r5,8d20 <__ulp+0x2c>
    8d10:	280f883a 	mov	r7,r5
    8d14:	3807883a 	mov	r3,r7
    8d18:	3005883a 	mov	r2,r6
    8d1c:	f800283a 	ret
    8d20:	008004c4 	movi	r2,19
    8d24:	193ffb04 	addi	r4,r3,-20
    8d28:	10c00c0e 	bge	r2,r3,8d5c <__ulp+0x68>
    8d2c:	008007c4 	movi	r2,31
    8d30:	1107c83a 	sub	r3,r2,r4
    8d34:	00800784 	movi	r2,30
    8d38:	01400044 	movi	r5,1
    8d3c:	11000216 	blt	r2,r4,8d48 <__ulp+0x54>
    8d40:	00800044 	movi	r2,1
    8d44:	10ca983a 	sll	r5,r2,r3
    8d48:	000f883a 	mov	r7,zero
    8d4c:	280d883a 	mov	r6,r5
    8d50:	3807883a 	mov	r3,r7
    8d54:	3005883a 	mov	r2,r6
    8d58:	f800283a 	ret
    8d5c:	00800234 	movhi	r2,8
    8d60:	10cfd83a 	sra	r7,r2,r3
    8d64:	000d883a 	mov	r6,zero
    8d68:	3005883a 	mov	r2,r6
    8d6c:	3807883a 	mov	r3,r7
    8d70:	f800283a 	ret

00008d74 <__b2d>:
    8d74:	20800417 	ldw	r2,16(r4)
    8d78:	defff904 	addi	sp,sp,-28
    8d7c:	dd000415 	stw	r20,16(sp)
    8d80:	1085883a 	add	r2,r2,r2
    8d84:	25000504 	addi	r20,r4,20
    8d88:	1085883a 	add	r2,r2,r2
    8d8c:	dc000015 	stw	r16,0(sp)
    8d90:	a0a1883a 	add	r16,r20,r2
    8d94:	dd400515 	stw	r21,20(sp)
    8d98:	857fff17 	ldw	r21,-4(r16)
    8d9c:	dc400115 	stw	r17,4(sp)
    8da0:	dfc00615 	stw	ra,24(sp)
    8da4:	a809883a 	mov	r4,r21
    8da8:	2823883a 	mov	r17,r5
    8dac:	dcc00315 	stw	r19,12(sp)
    8db0:	dc800215 	stw	r18,8(sp)
    8db4:	0008b600 	call	8b60 <__hi0bits>
    8db8:	100b883a 	mov	r5,r2
    8dbc:	00800804 	movi	r2,32
    8dc0:	1145c83a 	sub	r2,r2,r5
    8dc4:	88800015 	stw	r2,0(r17)
    8dc8:	00800284 	movi	r2,10
    8dcc:	80ffff04 	addi	r3,r16,-4
    8dd0:	11401416 	blt	r2,r5,8e24 <__b2d+0xb0>
    8dd4:	008002c4 	movi	r2,11
    8dd8:	1149c83a 	sub	r4,r2,r5
    8ddc:	a0c02736 	bltu	r20,r3,8e7c <__b2d+0x108>
    8de0:	000d883a 	mov	r6,zero
    8de4:	28800544 	addi	r2,r5,21
    8de8:	a906d83a 	srl	r3,r21,r4
    8dec:	a884983a 	sll	r2,r21,r2
    8df0:	1ccffc34 	orhi	r19,r3,16368
    8df4:	11a4b03a 	or	r18,r2,r6
    8df8:	9005883a 	mov	r2,r18
    8dfc:	9807883a 	mov	r3,r19
    8e00:	dfc00617 	ldw	ra,24(sp)
    8e04:	dd400517 	ldw	r21,20(sp)
    8e08:	dd000417 	ldw	r20,16(sp)
    8e0c:	dcc00317 	ldw	r19,12(sp)
    8e10:	dc800217 	ldw	r18,8(sp)
    8e14:	dc400117 	ldw	r17,4(sp)
    8e18:	dc000017 	ldw	r16,0(sp)
    8e1c:	dec00704 	addi	sp,sp,28
    8e20:	f800283a 	ret
    8e24:	a0c00e36 	bltu	r20,r3,8e60 <__b2d+0xec>
    8e28:	293ffd44 	addi	r4,r5,-11
    8e2c:	000d883a 	mov	r6,zero
    8e30:	20000f26 	beq	r4,zero,8e70 <__b2d+0xfc>
    8e34:	00800804 	movi	r2,32
    8e38:	110bc83a 	sub	r5,r2,r4
    8e3c:	a0c01236 	bltu	r20,r3,8e88 <__b2d+0x114>
    8e40:	000f883a 	mov	r7,zero
    8e44:	a904983a 	sll	r2,r21,r4
    8e48:	3146d83a 	srl	r3,r6,r5
    8e4c:	3108983a 	sll	r4,r6,r4
    8e50:	108ffc34 	orhi	r2,r2,16368
    8e54:	18a6b03a 	or	r19,r3,r2
    8e58:	3924b03a 	or	r18,r7,r4
    8e5c:	003fe606 	br	8df8 <__b2d+0x84>
    8e60:	293ffd44 	addi	r4,r5,-11
    8e64:	81bffe17 	ldw	r6,-8(r16)
    8e68:	80fffe04 	addi	r3,r16,-8
    8e6c:	203ff11e 	bne	r4,zero,8e34 <__b2d+0xc0>
    8e70:	accffc34 	orhi	r19,r21,16368
    8e74:	3025883a 	mov	r18,r6
    8e78:	003fdf06 	br	8df8 <__b2d+0x84>
    8e7c:	18bfff17 	ldw	r2,-4(r3)
    8e80:	110cd83a 	srl	r6,r2,r4
    8e84:	003fd706 	br	8de4 <__b2d+0x70>
    8e88:	18bfff17 	ldw	r2,-4(r3)
    8e8c:	114ed83a 	srl	r7,r2,r5
    8e90:	003fec06 	br	8e44 <__b2d+0xd0>

00008e94 <__ratio>:
    8e94:	defff904 	addi	sp,sp,-28
    8e98:	dc400215 	stw	r17,8(sp)
    8e9c:	2823883a 	mov	r17,r5
    8ea0:	d80b883a 	mov	r5,sp
    8ea4:	dfc00615 	stw	ra,24(sp)
    8ea8:	dd000515 	stw	r20,20(sp)
    8eac:	dcc00415 	stw	r19,16(sp)
    8eb0:	dc800315 	stw	r18,12(sp)
    8eb4:	2025883a 	mov	r18,r4
    8eb8:	0008d740 	call	8d74 <__b2d>
    8ebc:	8809883a 	mov	r4,r17
    8ec0:	d9400104 	addi	r5,sp,4
    8ec4:	1027883a 	mov	r19,r2
    8ec8:	1829883a 	mov	r20,r3
    8ecc:	0008d740 	call	8d74 <__b2d>
    8ed0:	89000417 	ldw	r4,16(r17)
    8ed4:	91c00417 	ldw	r7,16(r18)
    8ed8:	d9800117 	ldw	r6,4(sp)
    8edc:	180b883a 	mov	r5,r3
    8ee0:	390fc83a 	sub	r7,r7,r4
    8ee4:	1009883a 	mov	r4,r2
    8ee8:	d8800017 	ldw	r2,0(sp)
    8eec:	380e917a 	slli	r7,r7,5
    8ef0:	2011883a 	mov	r8,r4
    8ef4:	1185c83a 	sub	r2,r2,r6
    8ef8:	11c5883a 	add	r2,r2,r7
    8efc:	1006953a 	slli	r3,r2,20
    8f00:	2813883a 	mov	r9,r5
    8f04:	00800d0e 	bge	zero,r2,8f3c <__ratio+0xa8>
    8f08:	1d29883a 	add	r20,r3,r20
    8f0c:	a00b883a 	mov	r5,r20
    8f10:	480f883a 	mov	r7,r9
    8f14:	9809883a 	mov	r4,r19
    8f18:	400d883a 	mov	r6,r8
    8f1c:	00028f40 	call	28f4 <__divdf3>
    8f20:	dfc00617 	ldw	ra,24(sp)
    8f24:	dd000517 	ldw	r20,20(sp)
    8f28:	dcc00417 	ldw	r19,16(sp)
    8f2c:	dc800317 	ldw	r18,12(sp)
    8f30:	dc400217 	ldw	r17,8(sp)
    8f34:	dec00704 	addi	sp,sp,28
    8f38:	f800283a 	ret
    8f3c:	28d3c83a 	sub	r9,r5,r3
    8f40:	003ff206 	br	8f0c <__ratio+0x78>

00008f44 <_mprec_log10>:
    8f44:	defffe04 	addi	sp,sp,-8
    8f48:	008005c4 	movi	r2,23
    8f4c:	dc000015 	stw	r16,0(sp)
    8f50:	dfc00115 	stw	ra,4(sp)
    8f54:	2021883a 	mov	r16,r4
    8f58:	11000c16 	blt	r2,r4,8f8c <_mprec_log10+0x48>
    8f5c:	200490fa 	slli	r2,r4,3
    8f60:	00c00074 	movhi	r3,1
    8f64:	18fadb04 	addi	r3,r3,-5268
    8f68:	10c5883a 	add	r2,r2,r3
    8f6c:	12400117 	ldw	r9,4(r2)
    8f70:	12000017 	ldw	r8,0(r2)
    8f74:	4807883a 	mov	r3,r9
    8f78:	4005883a 	mov	r2,r8
    8f7c:	dfc00117 	ldw	ra,4(sp)
    8f80:	dc000017 	ldw	r16,0(sp)
    8f84:	dec00204 	addi	sp,sp,8
    8f88:	f800283a 	ret
    8f8c:	0011883a 	mov	r8,zero
    8f90:	024ffc34 	movhi	r9,16368
    8f94:	0005883a 	mov	r2,zero
    8f98:	00d00934 	movhi	r3,16420
    8f9c:	480b883a 	mov	r5,r9
    8fa0:	4009883a 	mov	r4,r8
    8fa4:	180f883a 	mov	r7,r3
    8fa8:	100d883a 	mov	r6,r2
    8fac:	00025300 	call	2530 <__muldf3>
    8fb0:	843fffc4 	addi	r16,r16,-1
    8fb4:	1011883a 	mov	r8,r2
    8fb8:	1813883a 	mov	r9,r3
    8fbc:	803ff51e 	bne	r16,zero,8f94 <_mprec_log10+0x50>
    8fc0:	4005883a 	mov	r2,r8
    8fc4:	4807883a 	mov	r3,r9
    8fc8:	dfc00117 	ldw	ra,4(sp)
    8fcc:	dc000017 	ldw	r16,0(sp)
    8fd0:	dec00204 	addi	sp,sp,8
    8fd4:	f800283a 	ret

00008fd8 <__copybits>:
    8fd8:	297fffc4 	addi	r5,r5,-1
    8fdc:	30800417 	ldw	r2,16(r6)
    8fe0:	280bd17a 	srai	r5,r5,5
    8fe4:	31800504 	addi	r6,r6,20
    8fe8:	1085883a 	add	r2,r2,r2
    8fec:	294b883a 	add	r5,r5,r5
    8ff0:	294b883a 	add	r5,r5,r5
    8ff4:	1085883a 	add	r2,r2,r2
    8ff8:	290b883a 	add	r5,r5,r4
    8ffc:	3087883a 	add	r3,r6,r2
    9000:	29400104 	addi	r5,r5,4
    9004:	30c0052e 	bgeu	r6,r3,901c <__copybits+0x44>
    9008:	30800017 	ldw	r2,0(r6)
    900c:	31800104 	addi	r6,r6,4
    9010:	20800015 	stw	r2,0(r4)
    9014:	21000104 	addi	r4,r4,4
    9018:	30fffb36 	bltu	r6,r3,9008 <__copybits+0x30>
    901c:	2140032e 	bgeu	r4,r5,902c <__copybits+0x54>
    9020:	20000015 	stw	zero,0(r4)
    9024:	21000104 	addi	r4,r4,4
    9028:	217ffd36 	bltu	r4,r5,9020 <__copybits+0x48>
    902c:	f800283a 	ret

00009030 <__any_on>:
    9030:	20800417 	ldw	r2,16(r4)
    9034:	2807d17a 	srai	r3,r5,5
    9038:	21000504 	addi	r4,r4,20
    903c:	10c00d0e 	bge	r2,r3,9074 <__any_on+0x44>
    9040:	1085883a 	add	r2,r2,r2
    9044:	1085883a 	add	r2,r2,r2
    9048:	208d883a 	add	r6,r4,r2
    904c:	2180182e 	bgeu	r4,r6,90b0 <__any_on+0x80>
    9050:	30bfff17 	ldw	r2,-4(r6)
    9054:	30ffff04 	addi	r3,r6,-4
    9058:	1000041e 	bne	r2,zero,906c <__any_on+0x3c>
    905c:	20c0142e 	bgeu	r4,r3,90b0 <__any_on+0x80>
    9060:	18ffff04 	addi	r3,r3,-4
    9064:	18800017 	ldw	r2,0(r3)
    9068:	103ffc26 	beq	r2,zero,905c <__any_on+0x2c>
    906c:	00800044 	movi	r2,1
    9070:	f800283a 	ret
    9074:	18800a0e 	bge	r3,r2,90a0 <__any_on+0x70>
    9078:	294007cc 	andi	r5,r5,31
    907c:	28000826 	beq	r5,zero,90a0 <__any_on+0x70>
    9080:	18c5883a 	add	r2,r3,r3
    9084:	1085883a 	add	r2,r2,r2
    9088:	208d883a 	add	r6,r4,r2
    908c:	30c00017 	ldw	r3,0(r6)
    9090:	1944d83a 	srl	r2,r3,r5
    9094:	1144983a 	sll	r2,r2,r5
    9098:	18bff41e 	bne	r3,r2,906c <__any_on+0x3c>
    909c:	003feb06 	br	904c <__any_on+0x1c>
    90a0:	18c5883a 	add	r2,r3,r3
    90a4:	1085883a 	add	r2,r2,r2
    90a8:	208d883a 	add	r6,r4,r2
    90ac:	003fe706 	br	904c <__any_on+0x1c>
    90b0:	0005883a 	mov	r2,zero
    90b4:	f800283a 	ret

000090b8 <_Balloc>:
    90b8:	20c01317 	ldw	r3,76(r4)
    90bc:	defffb04 	addi	sp,sp,-20
    90c0:	dcc00315 	stw	r19,12(sp)
    90c4:	dc800215 	stw	r18,8(sp)
    90c8:	dfc00415 	stw	ra,16(sp)
    90cc:	2825883a 	mov	r18,r5
    90d0:	dc400115 	stw	r17,4(sp)
    90d4:	dc000015 	stw	r16,0(sp)
    90d8:	2027883a 	mov	r19,r4
    90dc:	01800404 	movi	r6,16
    90e0:	01400104 	movi	r5,4
    90e4:	18001726 	beq	r3,zero,9144 <_Balloc+0x8c>
    90e8:	01400044 	movi	r5,1
    90ec:	9485883a 	add	r2,r18,r18
    90f0:	2ca2983a 	sll	r17,r5,r18
    90f4:	1085883a 	add	r2,r2,r2
    90f8:	10c7883a 	add	r3,r2,r3
    90fc:	1c000017 	ldw	r16,0(r3)
    9100:	8c4d883a 	add	r6,r17,r17
    9104:	318d883a 	add	r6,r6,r6
    9108:	9809883a 	mov	r4,r19
    910c:	31800504 	addi	r6,r6,20
    9110:	80001226 	beq	r16,zero,915c <_Balloc+0xa4>
    9114:	80800017 	ldw	r2,0(r16)
    9118:	18800015 	stw	r2,0(r3)
    911c:	80000415 	stw	zero,16(r16)
    9120:	80000315 	stw	zero,12(r16)
    9124:	8005883a 	mov	r2,r16
    9128:	dfc00417 	ldw	ra,16(sp)
    912c:	dcc00317 	ldw	r19,12(sp)
    9130:	dc800217 	ldw	r18,8(sp)
    9134:	dc400117 	ldw	r17,4(sp)
    9138:	dc000017 	ldw	r16,0(sp)
    913c:	dec00504 	addi	sp,sp,20
    9140:	f800283a 	ret
    9144:	000a3e00 	call	a3e0 <_calloc_r>
    9148:	1007883a 	mov	r3,r2
    914c:	0021883a 	mov	r16,zero
    9150:	98801315 	stw	r2,76(r19)
    9154:	103fe41e 	bne	r2,zero,90e8 <_Balloc+0x30>
    9158:	003ff206 	br	9124 <_Balloc+0x6c>
    915c:	000a3e00 	call	a3e0 <_calloc_r>
    9160:	103ff026 	beq	r2,zero,9124 <_Balloc+0x6c>
    9164:	1021883a 	mov	r16,r2
    9168:	14800115 	stw	r18,4(r2)
    916c:	14400215 	stw	r17,8(r2)
    9170:	003fea06 	br	911c <_Balloc+0x64>

00009174 <__d2b>:
    9174:	defff504 	addi	sp,sp,-44
    9178:	dcc00515 	stw	r19,20(sp)
    917c:	04c00044 	movi	r19,1
    9180:	dc000215 	stw	r16,8(sp)
    9184:	2821883a 	mov	r16,r5
    9188:	980b883a 	mov	r5,r19
    918c:	ddc00915 	stw	r23,36(sp)
    9190:	dd800815 	stw	r22,32(sp)
    9194:	dd400715 	stw	r21,28(sp)
    9198:	dd000615 	stw	r20,24(sp)
    919c:	dc800415 	stw	r18,16(sp)
    91a0:	dc400315 	stw	r17,12(sp)
    91a4:	dfc00a15 	stw	ra,40(sp)
    91a8:	3023883a 	mov	r17,r6
    91ac:	382d883a 	mov	r22,r7
    91b0:	ddc00b17 	ldw	r23,44(sp)
    91b4:	00090b80 	call	90b8 <_Balloc>
    91b8:	1025883a 	mov	r18,r2
    91bc:	00a00034 	movhi	r2,32768
    91c0:	10bfffc4 	addi	r2,r2,-1
    91c4:	8888703a 	and	r4,r17,r2
    91c8:	202ad53a 	srli	r21,r4,20
    91cc:	00800434 	movhi	r2,16
    91d0:	10bfffc4 	addi	r2,r2,-1
    91d4:	8886703a 	and	r3,r17,r2
    91d8:	a829003a 	cmpeq	r20,r21,zero
    91dc:	800b883a 	mov	r5,r16
    91e0:	d8c00115 	stw	r3,4(sp)
    91e4:	94000504 	addi	r16,r18,20
    91e8:	a000021e 	bne	r20,zero,91f4 <__d2b+0x80>
    91ec:	18c00434 	orhi	r3,r3,16
    91f0:	d8c00115 	stw	r3,4(sp)
    91f4:	28002726 	beq	r5,zero,9294 <__d2b+0x120>
    91f8:	d809883a 	mov	r4,sp
    91fc:	d9400015 	stw	r5,0(sp)
    9200:	0008bd00 	call	8bd0 <__lo0bits>
    9204:	100d883a 	mov	r6,r2
    9208:	10003526 	beq	r2,zero,92e0 <__d2b+0x16c>
    920c:	d8c00117 	ldw	r3,4(sp)
    9210:	00800804 	movi	r2,32
    9214:	1185c83a 	sub	r2,r2,r6
    9218:	d9000017 	ldw	r4,0(sp)
    921c:	1886983a 	sll	r3,r3,r2
    9220:	1906b03a 	or	r3,r3,r4
    9224:	90c00515 	stw	r3,20(r18)
    9228:	d8c00117 	ldw	r3,4(sp)
    922c:	1986d83a 	srl	r3,r3,r6
    9230:	d8c00115 	stw	r3,4(sp)
    9234:	180b003a 	cmpeq	r5,r3,zero
    9238:	00800084 	movi	r2,2
    923c:	114bc83a 	sub	r5,r2,r5
    9240:	80c00115 	stw	r3,4(r16)
    9244:	91400415 	stw	r5,16(r18)
    9248:	a0001a1e 	bne	r20,zero,92b4 <__d2b+0x140>
    924c:	3545883a 	add	r2,r6,r21
    9250:	10bef344 	addi	r2,r2,-1075
    9254:	00c00d44 	movi	r3,53
    9258:	b0800015 	stw	r2,0(r22)
    925c:	1987c83a 	sub	r3,r3,r6
    9260:	b8c00015 	stw	r3,0(r23)
    9264:	9005883a 	mov	r2,r18
    9268:	dfc00a17 	ldw	ra,40(sp)
    926c:	ddc00917 	ldw	r23,36(sp)
    9270:	dd800817 	ldw	r22,32(sp)
    9274:	dd400717 	ldw	r21,28(sp)
    9278:	dd000617 	ldw	r20,24(sp)
    927c:	dcc00517 	ldw	r19,20(sp)
    9280:	dc800417 	ldw	r18,16(sp)
    9284:	dc400317 	ldw	r17,12(sp)
    9288:	dc000217 	ldw	r16,8(sp)
    928c:	dec00b04 	addi	sp,sp,44
    9290:	f800283a 	ret
    9294:	d9000104 	addi	r4,sp,4
    9298:	0008bd00 	call	8bd0 <__lo0bits>
    929c:	11800804 	addi	r6,r2,32
    92a0:	d8800117 	ldw	r2,4(sp)
    92a4:	94c00415 	stw	r19,16(r18)
    92a8:	980b883a 	mov	r5,r19
    92ac:	90800515 	stw	r2,20(r18)
    92b0:	a03fe626 	beq	r20,zero,924c <__d2b+0xd8>
    92b4:	2945883a 	add	r2,r5,r5
    92b8:	1085883a 	add	r2,r2,r2
    92bc:	1405883a 	add	r2,r2,r16
    92c0:	113fff17 	ldw	r4,-4(r2)
    92c4:	30fef384 	addi	r3,r6,-1074
    92c8:	2820917a 	slli	r16,r5,5
    92cc:	b0c00015 	stw	r3,0(r22)
    92d0:	0008b600 	call	8b60 <__hi0bits>
    92d4:	80a1c83a 	sub	r16,r16,r2
    92d8:	bc000015 	stw	r16,0(r23)
    92dc:	003fe106 	br	9264 <__d2b+0xf0>
    92e0:	d8800017 	ldw	r2,0(sp)
    92e4:	90800515 	stw	r2,20(r18)
    92e8:	d8c00117 	ldw	r3,4(sp)
    92ec:	003fd106 	br	9234 <__d2b+0xc0>

000092f0 <__mdiff>:
    92f0:	defffb04 	addi	sp,sp,-20
    92f4:	dc000015 	stw	r16,0(sp)
    92f8:	2821883a 	mov	r16,r5
    92fc:	dc800215 	stw	r18,8(sp)
    9300:	300b883a 	mov	r5,r6
    9304:	2025883a 	mov	r18,r4
    9308:	8009883a 	mov	r4,r16
    930c:	dc400115 	stw	r17,4(sp)
    9310:	dfc00415 	stw	ra,16(sp)
    9314:	dcc00315 	stw	r19,12(sp)
    9318:	3023883a 	mov	r17,r6
    931c:	0008c940 	call	8c94 <__mcmp>
    9320:	10004226 	beq	r2,zero,942c <__mdiff+0x13c>
    9324:	10005016 	blt	r2,zero,9468 <__mdiff+0x178>
    9328:	0027883a 	mov	r19,zero
    932c:	81400117 	ldw	r5,4(r16)
    9330:	9009883a 	mov	r4,r18
    9334:	00090b80 	call	90b8 <_Balloc>
    9338:	1019883a 	mov	r12,r2
    933c:	82800417 	ldw	r10,16(r16)
    9340:	88800417 	ldw	r2,16(r17)
    9344:	81800504 	addi	r6,r16,20
    9348:	5287883a 	add	r3,r10,r10
    934c:	1085883a 	add	r2,r2,r2
    9350:	18c7883a 	add	r3,r3,r3
    9354:	1085883a 	add	r2,r2,r2
    9358:	8a000504 	addi	r8,r17,20
    935c:	64c00315 	stw	r19,12(r12)
    9360:	30db883a 	add	r13,r6,r3
    9364:	4097883a 	add	r11,r8,r2
    9368:	61c00504 	addi	r7,r12,20
    936c:	0013883a 	mov	r9,zero
    9370:	31000017 	ldw	r4,0(r6)
    9374:	41400017 	ldw	r5,0(r8)
    9378:	42000104 	addi	r8,r8,4
    937c:	20bfffcc 	andi	r2,r4,65535
    9380:	28ffffcc 	andi	r3,r5,65535
    9384:	10c5c83a 	sub	r2,r2,r3
    9388:	1245883a 	add	r2,r2,r9
    938c:	2008d43a 	srli	r4,r4,16
    9390:	280ad43a 	srli	r5,r5,16
    9394:	1007d43a 	srai	r3,r2,16
    9398:	3880000d 	sth	r2,0(r7)
    939c:	2149c83a 	sub	r4,r4,r5
    93a0:	20c9883a 	add	r4,r4,r3
    93a4:	3900008d 	sth	r4,2(r7)
    93a8:	31800104 	addi	r6,r6,4
    93ac:	39c00104 	addi	r7,r7,4
    93b0:	2013d43a 	srai	r9,r4,16
    93b4:	42ffee36 	bltu	r8,r11,9370 <__mdiff+0x80>
    93b8:	33400c2e 	bgeu	r6,r13,93ec <__mdiff+0xfc>
    93bc:	30800017 	ldw	r2,0(r6)
    93c0:	31800104 	addi	r6,r6,4
    93c4:	10ffffcc 	andi	r3,r2,65535
    93c8:	1a47883a 	add	r3,r3,r9
    93cc:	1004d43a 	srli	r2,r2,16
    93d0:	1809d43a 	srai	r4,r3,16
    93d4:	38c0000d 	sth	r3,0(r7)
    93d8:	1105883a 	add	r2,r2,r4
    93dc:	3880008d 	sth	r2,2(r7)
    93e0:	1013d43a 	srai	r9,r2,16
    93e4:	39c00104 	addi	r7,r7,4
    93e8:	337ff436 	bltu	r6,r13,93bc <__mdiff+0xcc>
    93ec:	38bfff17 	ldw	r2,-4(r7)
    93f0:	38ffff04 	addi	r3,r7,-4
    93f4:	1000041e 	bne	r2,zero,9408 <__mdiff+0x118>
    93f8:	18ffff04 	addi	r3,r3,-4
    93fc:	18800017 	ldw	r2,0(r3)
    9400:	52bfffc4 	addi	r10,r10,-1
    9404:	103ffc26 	beq	r2,zero,93f8 <__mdiff+0x108>
    9408:	6005883a 	mov	r2,r12
    940c:	62800415 	stw	r10,16(r12)
    9410:	dfc00417 	ldw	ra,16(sp)
    9414:	dcc00317 	ldw	r19,12(sp)
    9418:	dc800217 	ldw	r18,8(sp)
    941c:	dc400117 	ldw	r17,4(sp)
    9420:	dc000017 	ldw	r16,0(sp)
    9424:	dec00504 	addi	sp,sp,20
    9428:	f800283a 	ret
    942c:	9009883a 	mov	r4,r18
    9430:	000b883a 	mov	r5,zero
    9434:	00090b80 	call	90b8 <_Balloc>
    9438:	1019883a 	mov	r12,r2
    943c:	00800044 	movi	r2,1
    9440:	60800415 	stw	r2,16(r12)
    9444:	6005883a 	mov	r2,r12
    9448:	60000515 	stw	zero,20(r12)
    944c:	dfc00417 	ldw	ra,16(sp)
    9450:	dcc00317 	ldw	r19,12(sp)
    9454:	dc800217 	ldw	r18,8(sp)
    9458:	dc400117 	ldw	r17,4(sp)
    945c:	dc000017 	ldw	r16,0(sp)
    9460:	dec00504 	addi	sp,sp,20
    9464:	f800283a 	ret
    9468:	880d883a 	mov	r6,r17
    946c:	04c00044 	movi	r19,1
    9470:	8023883a 	mov	r17,r16
    9474:	3021883a 	mov	r16,r6
    9478:	003fac06 	br	932c <__mdiff+0x3c>

0000947c <__lshift>:
    947c:	defff904 	addi	sp,sp,-28
    9480:	28800417 	ldw	r2,16(r5)
    9484:	dc000015 	stw	r16,0(sp)
    9488:	3021d17a 	srai	r16,r6,5
    948c:	28c00217 	ldw	r3,8(r5)
    9490:	10800044 	addi	r2,r2,1
    9494:	dc400115 	stw	r17,4(sp)
    9498:	80a3883a 	add	r17,r16,r2
    949c:	dd400515 	stw	r21,20(sp)
    94a0:	dd000415 	stw	r20,16(sp)
    94a4:	dc800215 	stw	r18,8(sp)
    94a8:	dfc00615 	stw	ra,24(sp)
    94ac:	2825883a 	mov	r18,r5
    94b0:	dcc00315 	stw	r19,12(sp)
    94b4:	3029883a 	mov	r20,r6
    94b8:	202b883a 	mov	r21,r4
    94bc:	29400117 	ldw	r5,4(r5)
    94c0:	1c40030e 	bge	r3,r17,94d0 <__lshift+0x54>
    94c4:	18c7883a 	add	r3,r3,r3
    94c8:	29400044 	addi	r5,r5,1
    94cc:	1c7ffd16 	blt	r3,r17,94c4 <__lshift+0x48>
    94d0:	a809883a 	mov	r4,r21
    94d4:	00090b80 	call	90b8 <_Balloc>
    94d8:	1027883a 	mov	r19,r2
    94dc:	11400504 	addi	r5,r2,20
    94e0:	0400090e 	bge	zero,r16,9508 <__lshift+0x8c>
    94e4:	2805883a 	mov	r2,r5
    94e8:	0007883a 	mov	r3,zero
    94ec:	18c00044 	addi	r3,r3,1
    94f0:	10000015 	stw	zero,0(r2)
    94f4:	10800104 	addi	r2,r2,4
    94f8:	80fffc1e 	bne	r16,r3,94ec <__lshift+0x70>
    94fc:	8405883a 	add	r2,r16,r16
    9500:	1085883a 	add	r2,r2,r2
    9504:	288b883a 	add	r5,r5,r2
    9508:	90800417 	ldw	r2,16(r18)
    950c:	91000504 	addi	r4,r18,20
    9510:	a18007cc 	andi	r6,r20,31
    9514:	1085883a 	add	r2,r2,r2
    9518:	1085883a 	add	r2,r2,r2
    951c:	208f883a 	add	r7,r4,r2
    9520:	30001e26 	beq	r6,zero,959c <__lshift+0x120>
    9524:	00800804 	movi	r2,32
    9528:	1191c83a 	sub	r8,r2,r6
    952c:	0007883a 	mov	r3,zero
    9530:	20800017 	ldw	r2,0(r4)
    9534:	1184983a 	sll	r2,r2,r6
    9538:	1884b03a 	or	r2,r3,r2
    953c:	28800015 	stw	r2,0(r5)
    9540:	20c00017 	ldw	r3,0(r4)
    9544:	21000104 	addi	r4,r4,4
    9548:	29400104 	addi	r5,r5,4
    954c:	1a06d83a 	srl	r3,r3,r8
    9550:	21fff736 	bltu	r4,r7,9530 <__lshift+0xb4>
    9554:	28c00015 	stw	r3,0(r5)
    9558:	18000126 	beq	r3,zero,9560 <__lshift+0xe4>
    955c:	8c400044 	addi	r17,r17,1
    9560:	88bfffc4 	addi	r2,r17,-1
    9564:	98800415 	stw	r2,16(r19)
    9568:	a809883a 	mov	r4,r21
    956c:	900b883a 	mov	r5,r18
    9570:	0008b380 	call	8b38 <_Bfree>
    9574:	9805883a 	mov	r2,r19
    9578:	dfc00617 	ldw	ra,24(sp)
    957c:	dd400517 	ldw	r21,20(sp)
    9580:	dd000417 	ldw	r20,16(sp)
    9584:	dcc00317 	ldw	r19,12(sp)
    9588:	dc800217 	ldw	r18,8(sp)
    958c:	dc400117 	ldw	r17,4(sp)
    9590:	dc000017 	ldw	r16,0(sp)
    9594:	dec00704 	addi	sp,sp,28
    9598:	f800283a 	ret
    959c:	20800017 	ldw	r2,0(r4)
    95a0:	21000104 	addi	r4,r4,4
    95a4:	28800015 	stw	r2,0(r5)
    95a8:	29400104 	addi	r5,r5,4
    95ac:	21ffec2e 	bgeu	r4,r7,9560 <__lshift+0xe4>
    95b0:	20800017 	ldw	r2,0(r4)
    95b4:	21000104 	addi	r4,r4,4
    95b8:	28800015 	stw	r2,0(r5)
    95bc:	29400104 	addi	r5,r5,4
    95c0:	21fff636 	bltu	r4,r7,959c <__lshift+0x120>
    95c4:	003fe606 	br	9560 <__lshift+0xe4>

000095c8 <__multiply>:
    95c8:	defff904 	addi	sp,sp,-28
    95cc:	dcc00315 	stw	r19,12(sp)
    95d0:	dc800215 	stw	r18,8(sp)
    95d4:	2cc00417 	ldw	r19,16(r5)
    95d8:	34800417 	ldw	r18,16(r6)
    95dc:	dd000415 	stw	r20,16(sp)
    95e0:	dc400115 	stw	r17,4(sp)
    95e4:	dfc00615 	stw	ra,24(sp)
    95e8:	dd400515 	stw	r21,20(sp)
    95ec:	dc000015 	stw	r16,0(sp)
    95f0:	2823883a 	mov	r17,r5
    95f4:	3029883a 	mov	r20,r6
    95f8:	9c80040e 	bge	r19,r18,960c <__multiply+0x44>
    95fc:	9027883a 	mov	r19,r18
    9600:	2c800417 	ldw	r18,16(r5)
    9604:	2829883a 	mov	r20,r5
    9608:	3023883a 	mov	r17,r6
    960c:	88800217 	ldw	r2,8(r17)
    9610:	9ca1883a 	add	r16,r19,r18
    9614:	89400117 	ldw	r5,4(r17)
    9618:	1400010e 	bge	r2,r16,9620 <__multiply+0x58>
    961c:	29400044 	addi	r5,r5,1
    9620:	00090b80 	call	90b8 <_Balloc>
    9624:	102b883a 	mov	r21,r2
    9628:	8405883a 	add	r2,r16,r16
    962c:	1085883a 	add	r2,r2,r2
    9630:	a9000504 	addi	r4,r21,20
    9634:	209d883a 	add	r14,r4,r2
    9638:	2380042e 	bgeu	r4,r14,964c <__multiply+0x84>
    963c:	2005883a 	mov	r2,r4
    9640:	10000015 	stw	zero,0(r2)
    9644:	10800104 	addi	r2,r2,4
    9648:	13bffd36 	bltu	r2,r14,9640 <__multiply+0x78>
    964c:	9485883a 	add	r2,r18,r18
    9650:	9cc7883a 	add	r3,r19,r19
    9654:	a1800504 	addi	r6,r20,20
    9658:	1085883a 	add	r2,r2,r2
    965c:	8b400504 	addi	r13,r17,20
    9660:	18c7883a 	add	r3,r3,r3
    9664:	309f883a 	add	r15,r6,r2
    9668:	68d7883a 	add	r11,r13,r3
    966c:	33c03b2e 	bgeu	r6,r15,975c <__multiply+0x194>
    9670:	2019883a 	mov	r12,r4
    9674:	30800017 	ldw	r2,0(r6)
    9678:	127fffcc 	andi	r9,r2,65535
    967c:	48001826 	beq	r9,zero,96e0 <__multiply+0x118>
    9680:	6811883a 	mov	r8,r13
    9684:	600f883a 	mov	r7,r12
    9688:	0015883a 	mov	r10,zero
    968c:	40c00017 	ldw	r3,0(r8)
    9690:	39400017 	ldw	r5,0(r7)
    9694:	42000104 	addi	r8,r8,4
    9698:	193fffcc 	andi	r4,r3,65535
    969c:	4909383a 	mul	r4,r9,r4
    96a0:	1806d43a 	srli	r3,r3,16
    96a4:	28bfffcc 	andi	r2,r5,65535
    96a8:	5085883a 	add	r2,r10,r2
    96ac:	2089883a 	add	r4,r4,r2
    96b0:	48c7383a 	mul	r3,r9,r3
    96b4:	280ad43a 	srli	r5,r5,16
    96b8:	2004d43a 	srli	r2,r4,16
    96bc:	3900000d 	sth	r4,0(r7)
    96c0:	1947883a 	add	r3,r3,r5
    96c4:	10c5883a 	add	r2,r2,r3
    96c8:	3880008d 	sth	r2,2(r7)
    96cc:	1014d43a 	srli	r10,r2,16
    96d0:	39c00104 	addi	r7,r7,4
    96d4:	42ffed36 	bltu	r8,r11,968c <__multiply+0xc4>
    96d8:	3a800015 	stw	r10,0(r7)
    96dc:	30800017 	ldw	r2,0(r6)
    96e0:	1012d43a 	srli	r9,r2,16
    96e4:	48001926 	beq	r9,zero,974c <__multiply+0x184>
    96e8:	60800017 	ldw	r2,0(r12)
    96ec:	6811883a 	mov	r8,r13
    96f0:	600f883a 	mov	r7,r12
    96f4:	0015883a 	mov	r10,zero
    96f8:	100b883a 	mov	r5,r2
    96fc:	41000017 	ldw	r4,0(r8)
    9700:	2806d43a 	srli	r3,r5,16
    9704:	3880000d 	sth	r2,0(r7)
    9708:	20bfffcc 	andi	r2,r4,65535
    970c:	4885383a 	mul	r2,r9,r2
    9710:	50c7883a 	add	r3,r10,r3
    9714:	2008d43a 	srli	r4,r4,16
    9718:	10c5883a 	add	r2,r2,r3
    971c:	3880008d 	sth	r2,2(r7)
    9720:	39c00104 	addi	r7,r7,4
    9724:	39400017 	ldw	r5,0(r7)
    9728:	4909383a 	mul	r4,r9,r4
    972c:	1004d43a 	srli	r2,r2,16
    9730:	28ffffcc 	andi	r3,r5,65535
    9734:	20c9883a 	add	r4,r4,r3
    9738:	1105883a 	add	r2,r2,r4
    973c:	42000104 	addi	r8,r8,4
    9740:	1014d43a 	srli	r10,r2,16
    9744:	42ffed36 	bltu	r8,r11,96fc <__multiply+0x134>
    9748:	38800015 	stw	r2,0(r7)
    974c:	31800104 	addi	r6,r6,4
    9750:	33c0022e 	bgeu	r6,r15,975c <__multiply+0x194>
    9754:	63000104 	addi	r12,r12,4
    9758:	003fc606 	br	9674 <__multiply+0xac>
    975c:	0400090e 	bge	zero,r16,9784 <__multiply+0x1bc>
    9760:	70bfff17 	ldw	r2,-4(r14)
    9764:	70ffff04 	addi	r3,r14,-4
    9768:	10000326 	beq	r2,zero,9778 <__multiply+0x1b0>
    976c:	00000506 	br	9784 <__multiply+0x1bc>
    9770:	18800017 	ldw	r2,0(r3)
    9774:	1000031e 	bne	r2,zero,9784 <__multiply+0x1bc>
    9778:	843fffc4 	addi	r16,r16,-1
    977c:	18ffff04 	addi	r3,r3,-4
    9780:	803ffb1e 	bne	r16,zero,9770 <__multiply+0x1a8>
    9784:	a805883a 	mov	r2,r21
    9788:	ac000415 	stw	r16,16(r21)
    978c:	dfc00617 	ldw	ra,24(sp)
    9790:	dd400517 	ldw	r21,20(sp)
    9794:	dd000417 	ldw	r20,16(sp)
    9798:	dcc00317 	ldw	r19,12(sp)
    979c:	dc800217 	ldw	r18,8(sp)
    97a0:	dc400117 	ldw	r17,4(sp)
    97a4:	dc000017 	ldw	r16,0(sp)
    97a8:	dec00704 	addi	sp,sp,28
    97ac:	f800283a 	ret

000097b0 <__i2b>:
    97b0:	defffd04 	addi	sp,sp,-12
    97b4:	dc000015 	stw	r16,0(sp)
    97b8:	04000044 	movi	r16,1
    97bc:	dc800115 	stw	r18,4(sp)
    97c0:	2825883a 	mov	r18,r5
    97c4:	800b883a 	mov	r5,r16
    97c8:	dfc00215 	stw	ra,8(sp)
    97cc:	00090b80 	call	90b8 <_Balloc>
    97d0:	14000415 	stw	r16,16(r2)
    97d4:	14800515 	stw	r18,20(r2)
    97d8:	dfc00217 	ldw	ra,8(sp)
    97dc:	dc800117 	ldw	r18,4(sp)
    97e0:	dc000017 	ldw	r16,0(sp)
    97e4:	dec00304 	addi	sp,sp,12
    97e8:	f800283a 	ret

000097ec <__multadd>:
    97ec:	defffa04 	addi	sp,sp,-24
    97f0:	dc800215 	stw	r18,8(sp)
    97f4:	2c800417 	ldw	r18,16(r5)
    97f8:	dd000415 	stw	r20,16(sp)
    97fc:	dcc00315 	stw	r19,12(sp)
    9800:	dc000015 	stw	r16,0(sp)
    9804:	dfc00515 	stw	ra,20(sp)
    9808:	3821883a 	mov	r16,r7
    980c:	dc400115 	stw	r17,4(sp)
    9810:	2827883a 	mov	r19,r5
    9814:	2029883a 	mov	r20,r4
    9818:	2a000504 	addi	r8,r5,20
    981c:	000f883a 	mov	r7,zero
    9820:	40800017 	ldw	r2,0(r8)
    9824:	39c00044 	addi	r7,r7,1
    9828:	10ffffcc 	andi	r3,r2,65535
    982c:	1987383a 	mul	r3,r3,r6
    9830:	1004d43a 	srli	r2,r2,16
    9834:	1c07883a 	add	r3,r3,r16
    9838:	180ad43a 	srli	r5,r3,16
    983c:	1185383a 	mul	r2,r2,r6
    9840:	18ffffcc 	andi	r3,r3,65535
    9844:	1145883a 	add	r2,r2,r5
    9848:	1008943a 	slli	r4,r2,16
    984c:	1020d43a 	srli	r16,r2,16
    9850:	20c9883a 	add	r4,r4,r3
    9854:	41000015 	stw	r4,0(r8)
    9858:	42000104 	addi	r8,r8,4
    985c:	3cbff016 	blt	r7,r18,9820 <__multadd+0x34>
    9860:	80000826 	beq	r16,zero,9884 <__multadd+0x98>
    9864:	98800217 	ldw	r2,8(r19)
    9868:	90800f0e 	bge	r18,r2,98a8 <__multadd+0xbc>
    986c:	9485883a 	add	r2,r18,r18
    9870:	1085883a 	add	r2,r2,r2
    9874:	14c5883a 	add	r2,r2,r19
    9878:	90c00044 	addi	r3,r18,1
    987c:	14000515 	stw	r16,20(r2)
    9880:	98c00415 	stw	r3,16(r19)
    9884:	9805883a 	mov	r2,r19
    9888:	dfc00517 	ldw	ra,20(sp)
    988c:	dd000417 	ldw	r20,16(sp)
    9890:	dcc00317 	ldw	r19,12(sp)
    9894:	dc800217 	ldw	r18,8(sp)
    9898:	dc400117 	ldw	r17,4(sp)
    989c:	dc000017 	ldw	r16,0(sp)
    98a0:	dec00604 	addi	sp,sp,24
    98a4:	f800283a 	ret
    98a8:	99400117 	ldw	r5,4(r19)
    98ac:	a009883a 	mov	r4,r20
    98b0:	29400044 	addi	r5,r5,1
    98b4:	00090b80 	call	90b8 <_Balloc>
    98b8:	99800417 	ldw	r6,16(r19)
    98bc:	99400304 	addi	r5,r19,12
    98c0:	11000304 	addi	r4,r2,12
    98c4:	318d883a 	add	r6,r6,r6
    98c8:	318d883a 	add	r6,r6,r6
    98cc:	31800204 	addi	r6,r6,8
    98d0:	1023883a 	mov	r17,r2
    98d4:	0003c580 	call	3c58 <memcpy>
    98d8:	980b883a 	mov	r5,r19
    98dc:	a009883a 	mov	r4,r20
    98e0:	0008b380 	call	8b38 <_Bfree>
    98e4:	8827883a 	mov	r19,r17
    98e8:	003fe006 	br	986c <__multadd+0x80>

000098ec <__pow5mult>:
    98ec:	defffa04 	addi	sp,sp,-24
    98f0:	308000cc 	andi	r2,r6,3
    98f4:	dd000415 	stw	r20,16(sp)
    98f8:	dcc00315 	stw	r19,12(sp)
    98fc:	dc000015 	stw	r16,0(sp)
    9900:	dfc00515 	stw	ra,20(sp)
    9904:	dc800215 	stw	r18,8(sp)
    9908:	dc400115 	stw	r17,4(sp)
    990c:	3021883a 	mov	r16,r6
    9910:	2027883a 	mov	r19,r4
    9914:	2829883a 	mov	r20,r5
    9918:	10002b1e 	bne	r2,zero,99c8 <__pow5mult+0xdc>
    991c:	8025d0ba 	srai	r18,r16,2
    9920:	90001b26 	beq	r18,zero,9990 <__pow5mult+0xa4>
    9924:	9c001217 	ldw	r16,72(r19)
    9928:	8000081e 	bne	r16,zero,994c <__pow5mult+0x60>
    992c:	00003006 	br	99f0 <__pow5mult+0x104>
    9930:	800b883a 	mov	r5,r16
    9934:	800d883a 	mov	r6,r16
    9938:	9809883a 	mov	r4,r19
    993c:	90001426 	beq	r18,zero,9990 <__pow5mult+0xa4>
    9940:	80800017 	ldw	r2,0(r16)
    9944:	10001b26 	beq	r2,zero,99b4 <__pow5mult+0xc8>
    9948:	1021883a 	mov	r16,r2
    994c:	9080004c 	andi	r2,r18,1
    9950:	1005003a 	cmpeq	r2,r2,zero
    9954:	9025d07a 	srai	r18,r18,1
    9958:	800d883a 	mov	r6,r16
    995c:	9809883a 	mov	r4,r19
    9960:	a00b883a 	mov	r5,r20
    9964:	103ff21e 	bne	r2,zero,9930 <__pow5mult+0x44>
    9968:	00095c80 	call	95c8 <__multiply>
    996c:	a00b883a 	mov	r5,r20
    9970:	9809883a 	mov	r4,r19
    9974:	1023883a 	mov	r17,r2
    9978:	0008b380 	call	8b38 <_Bfree>
    997c:	8829883a 	mov	r20,r17
    9980:	800b883a 	mov	r5,r16
    9984:	800d883a 	mov	r6,r16
    9988:	9809883a 	mov	r4,r19
    998c:	903fec1e 	bne	r18,zero,9940 <__pow5mult+0x54>
    9990:	a005883a 	mov	r2,r20
    9994:	dfc00517 	ldw	ra,20(sp)
    9998:	dd000417 	ldw	r20,16(sp)
    999c:	dcc00317 	ldw	r19,12(sp)
    99a0:	dc800217 	ldw	r18,8(sp)
    99a4:	dc400117 	ldw	r17,4(sp)
    99a8:	dc000017 	ldw	r16,0(sp)
    99ac:	dec00604 	addi	sp,sp,24
    99b0:	f800283a 	ret
    99b4:	00095c80 	call	95c8 <__multiply>
    99b8:	80800015 	stw	r2,0(r16)
    99bc:	1021883a 	mov	r16,r2
    99c0:	10000015 	stw	zero,0(r2)
    99c4:	003fe106 	br	994c <__pow5mult+0x60>
    99c8:	1085883a 	add	r2,r2,r2
    99cc:	00c00074 	movhi	r3,1
    99d0:	18fb2104 	addi	r3,r3,-4988
    99d4:	1085883a 	add	r2,r2,r2
    99d8:	10c5883a 	add	r2,r2,r3
    99dc:	11bfff17 	ldw	r6,-4(r2)
    99e0:	000f883a 	mov	r7,zero
    99e4:	00097ec0 	call	97ec <__multadd>
    99e8:	1029883a 	mov	r20,r2
    99ec:	003fcb06 	br	991c <__pow5mult+0x30>
    99f0:	9809883a 	mov	r4,r19
    99f4:	01409c44 	movi	r5,625
    99f8:	00097b00 	call	97b0 <__i2b>
    99fc:	98801215 	stw	r2,72(r19)
    9a00:	1021883a 	mov	r16,r2
    9a04:	10000015 	stw	zero,0(r2)
    9a08:	003fd006 	br	994c <__pow5mult+0x60>

00009a0c <__s2b>:
    9a0c:	defff904 	addi	sp,sp,-28
    9a10:	dcc00315 	stw	r19,12(sp)
    9a14:	dc800215 	stw	r18,8(sp)
    9a18:	2827883a 	mov	r19,r5
    9a1c:	2025883a 	mov	r18,r4
    9a20:	01400244 	movi	r5,9
    9a24:	39000204 	addi	r4,r7,8
    9a28:	dd000415 	stw	r20,16(sp)
    9a2c:	dc400115 	stw	r17,4(sp)
    9a30:	dfc00615 	stw	ra,24(sp)
    9a34:	dd400515 	stw	r21,20(sp)
    9a38:	dc000015 	stw	r16,0(sp)
    9a3c:	3829883a 	mov	r20,r7
    9a40:	3023883a 	mov	r17,r6
    9a44:	000b6a80 	call	b6a8 <__divsi3>
    9a48:	00c00044 	movi	r3,1
    9a4c:	1880350e 	bge	r3,r2,9b24 <__s2b+0x118>
    9a50:	000b883a 	mov	r5,zero
    9a54:	18c7883a 	add	r3,r3,r3
    9a58:	29400044 	addi	r5,r5,1
    9a5c:	18bffd16 	blt	r3,r2,9a54 <__s2b+0x48>
    9a60:	9009883a 	mov	r4,r18
    9a64:	00090b80 	call	90b8 <_Balloc>
    9a68:	1011883a 	mov	r8,r2
    9a6c:	d8800717 	ldw	r2,28(sp)
    9a70:	00c00044 	movi	r3,1
    9a74:	01800244 	movi	r6,9
    9a78:	40800515 	stw	r2,20(r8)
    9a7c:	40c00415 	stw	r3,16(r8)
    9a80:	3440260e 	bge	r6,r17,9b1c <__s2b+0x110>
    9a84:	3021883a 	mov	r16,r6
    9a88:	99ab883a 	add	r21,r19,r6
    9a8c:	9c05883a 	add	r2,r19,r16
    9a90:	11c00007 	ldb	r7,0(r2)
    9a94:	400b883a 	mov	r5,r8
    9a98:	9009883a 	mov	r4,r18
    9a9c:	39fff404 	addi	r7,r7,-48
    9aa0:	01800284 	movi	r6,10
    9aa4:	00097ec0 	call	97ec <__multadd>
    9aa8:	84000044 	addi	r16,r16,1
    9aac:	1011883a 	mov	r8,r2
    9ab0:	8c3ff61e 	bne	r17,r16,9a8c <__s2b+0x80>
    9ab4:	ac45883a 	add	r2,r21,r17
    9ab8:	117ffe04 	addi	r5,r2,-8
    9abc:	880d883a 	mov	r6,r17
    9ac0:	35000c0e 	bge	r6,r20,9af4 <__s2b+0xe8>
    9ac4:	a185c83a 	sub	r2,r20,r6
    9ac8:	2821883a 	mov	r16,r5
    9acc:	28a3883a 	add	r17,r5,r2
    9ad0:	81c00007 	ldb	r7,0(r16)
    9ad4:	400b883a 	mov	r5,r8
    9ad8:	9009883a 	mov	r4,r18
    9adc:	39fff404 	addi	r7,r7,-48
    9ae0:	01800284 	movi	r6,10
    9ae4:	00097ec0 	call	97ec <__multadd>
    9ae8:	84000044 	addi	r16,r16,1
    9aec:	1011883a 	mov	r8,r2
    9af0:	847ff71e 	bne	r16,r17,9ad0 <__s2b+0xc4>
    9af4:	4005883a 	mov	r2,r8
    9af8:	dfc00617 	ldw	ra,24(sp)
    9afc:	dd400517 	ldw	r21,20(sp)
    9b00:	dd000417 	ldw	r20,16(sp)
    9b04:	dcc00317 	ldw	r19,12(sp)
    9b08:	dc800217 	ldw	r18,8(sp)
    9b0c:	dc400117 	ldw	r17,4(sp)
    9b10:	dc000017 	ldw	r16,0(sp)
    9b14:	dec00704 	addi	sp,sp,28
    9b18:	f800283a 	ret
    9b1c:	99400284 	addi	r5,r19,10
    9b20:	003fe706 	br	9ac0 <__s2b+0xb4>
    9b24:	000b883a 	mov	r5,zero
    9b28:	003fcd06 	br	9a60 <__s2b+0x54>

00009b2c <_realloc_r>:
    9b2c:	defff404 	addi	sp,sp,-48
    9b30:	dd800815 	stw	r22,32(sp)
    9b34:	dc800415 	stw	r18,16(sp)
    9b38:	dc400315 	stw	r17,12(sp)
    9b3c:	dfc00b15 	stw	ra,44(sp)
    9b40:	df000a15 	stw	fp,40(sp)
    9b44:	ddc00915 	stw	r23,36(sp)
    9b48:	dd400715 	stw	r21,28(sp)
    9b4c:	dd000615 	stw	r20,24(sp)
    9b50:	dcc00515 	stw	r19,20(sp)
    9b54:	dc000215 	stw	r16,8(sp)
    9b58:	2825883a 	mov	r18,r5
    9b5c:	3023883a 	mov	r17,r6
    9b60:	202d883a 	mov	r22,r4
    9b64:	2800c926 	beq	r5,zero,9e8c <_realloc_r+0x360>
    9b68:	000bbcc0 	call	bbcc <__malloc_lock>
    9b6c:	943ffe04 	addi	r16,r18,-8
    9b70:	88c002c4 	addi	r3,r17,11
    9b74:	00800584 	movi	r2,22
    9b78:	82000117 	ldw	r8,4(r16)
    9b7c:	10c01b2e 	bgeu	r2,r3,9bec <_realloc_r+0xc0>
    9b80:	00bffe04 	movi	r2,-8
    9b84:	188e703a 	and	r7,r3,r2
    9b88:	3839883a 	mov	fp,r7
    9b8c:	38001a16 	blt	r7,zero,9bf8 <_realloc_r+0xcc>
    9b90:	e4401936 	bltu	fp,r17,9bf8 <_realloc_r+0xcc>
    9b94:	013fff04 	movi	r4,-4
    9b98:	4126703a 	and	r19,r8,r4
    9b9c:	99c02616 	blt	r19,r7,9c38 <_realloc_r+0x10c>
    9ba0:	802b883a 	mov	r21,r16
    9ba4:	9829883a 	mov	r20,r19
    9ba8:	84000204 	addi	r16,r16,8
    9bac:	a80f883a 	mov	r7,r21
    9bb0:	a70dc83a 	sub	r6,r20,fp
    9bb4:	008003c4 	movi	r2,15
    9bb8:	1180c136 	bltu	r2,r6,9ec0 <_realloc_r+0x394>
    9bbc:	38800117 	ldw	r2,4(r7)
    9bc0:	a549883a 	add	r4,r20,r21
    9bc4:	1080004c 	andi	r2,r2,1
    9bc8:	a084b03a 	or	r2,r20,r2
    9bcc:	38800115 	stw	r2,4(r7)
    9bd0:	20c00117 	ldw	r3,4(r4)
    9bd4:	18c00054 	ori	r3,r3,1
    9bd8:	20c00115 	stw	r3,4(r4)
    9bdc:	b009883a 	mov	r4,r22
    9be0:	000bbd00 	call	bbd0 <__malloc_unlock>
    9be4:	8023883a 	mov	r17,r16
    9be8:	00000606 	br	9c04 <_realloc_r+0xd8>
    9bec:	01c00404 	movi	r7,16
    9bf0:	3839883a 	mov	fp,r7
    9bf4:	e47fe72e 	bgeu	fp,r17,9b94 <_realloc_r+0x68>
    9bf8:	00800304 	movi	r2,12
    9bfc:	0023883a 	mov	r17,zero
    9c00:	b0800015 	stw	r2,0(r22)
    9c04:	8805883a 	mov	r2,r17
    9c08:	dfc00b17 	ldw	ra,44(sp)
    9c0c:	df000a17 	ldw	fp,40(sp)
    9c10:	ddc00917 	ldw	r23,36(sp)
    9c14:	dd800817 	ldw	r22,32(sp)
    9c18:	dd400717 	ldw	r21,28(sp)
    9c1c:	dd000617 	ldw	r20,24(sp)
    9c20:	dcc00517 	ldw	r19,20(sp)
    9c24:	dc800417 	ldw	r18,16(sp)
    9c28:	dc400317 	ldw	r17,12(sp)
    9c2c:	dc000217 	ldw	r16,8(sp)
    9c30:	dec00c04 	addi	sp,sp,48
    9c34:	f800283a 	ret
    9c38:	00800074 	movhi	r2,1
    9c3c:	10bc9104 	addi	r2,r2,-3516
    9c40:	12400217 	ldw	r9,8(r2)
    9c44:	84cd883a 	add	r6,r16,r19
    9c48:	802b883a 	mov	r21,r16
    9c4c:	3240b926 	beq	r6,r9,9f34 <_realloc_r+0x408>
    9c50:	31400117 	ldw	r5,4(r6)
    9c54:	00bfff84 	movi	r2,-2
    9c58:	2884703a 	and	r2,r5,r2
    9c5c:	1185883a 	add	r2,r2,r6
    9c60:	10c00117 	ldw	r3,4(r2)
    9c64:	18c0004c 	andi	r3,r3,1
    9c68:	1807003a 	cmpeq	r3,r3,zero
    9c6c:	1800a326 	beq	r3,zero,9efc <_realloc_r+0x3d0>
    9c70:	2908703a 	and	r4,r5,r4
    9c74:	9929883a 	add	r20,r19,r4
    9c78:	a1c0a30e 	bge	r20,r7,9f08 <_realloc_r+0x3dc>
    9c7c:	4080004c 	andi	r2,r8,1
    9c80:	1000551e 	bne	r2,zero,9dd8 <_realloc_r+0x2ac>
    9c84:	80800017 	ldw	r2,0(r16)
    9c88:	80afc83a 	sub	r23,r16,r2
    9c8c:	b8c00117 	ldw	r3,4(r23)
    9c90:	00bfff04 	movi	r2,-4
    9c94:	1884703a 	and	r2,r3,r2
    9c98:	30002e26 	beq	r6,zero,9d54 <_realloc_r+0x228>
    9c9c:	3240b926 	beq	r6,r9,9f84 <_realloc_r+0x458>
    9ca0:	98a9883a 	add	r20,r19,r2
    9ca4:	2509883a 	add	r4,r4,r20
    9ca8:	d9000015 	stw	r4,0(sp)
    9cac:	21c02a16 	blt	r4,r7,9d58 <_realloc_r+0x22c>
    9cb0:	30800317 	ldw	r2,12(r6)
    9cb4:	30c00217 	ldw	r3,8(r6)
    9cb8:	01400904 	movi	r5,36
    9cbc:	99bfff04 	addi	r6,r19,-4
    9cc0:	18800315 	stw	r2,12(r3)
    9cc4:	10c00215 	stw	r3,8(r2)
    9cc8:	b9000317 	ldw	r4,12(r23)
    9ccc:	b8800217 	ldw	r2,8(r23)
    9cd0:	b82b883a 	mov	r21,r23
    9cd4:	bc000204 	addi	r16,r23,8
    9cd8:	20800215 	stw	r2,8(r4)
    9cdc:	11000315 	stw	r4,12(r2)
    9ce0:	2980e436 	bltu	r5,r6,a074 <_realloc_r+0x548>
    9ce4:	008004c4 	movi	r2,19
    9ce8:	9009883a 	mov	r4,r18
    9cec:	8011883a 	mov	r8,r16
    9cf0:	11800f2e 	bgeu	r2,r6,9d30 <_realloc_r+0x204>
    9cf4:	90800017 	ldw	r2,0(r18)
    9cf8:	ba000404 	addi	r8,r23,16
    9cfc:	91000204 	addi	r4,r18,8
    9d00:	b8800215 	stw	r2,8(r23)
    9d04:	90c00117 	ldw	r3,4(r18)
    9d08:	008006c4 	movi	r2,27
    9d0c:	b8c00315 	stw	r3,12(r23)
    9d10:	1180072e 	bgeu	r2,r6,9d30 <_realloc_r+0x204>
    9d14:	90c00217 	ldw	r3,8(r18)
    9d18:	ba000604 	addi	r8,r23,24
    9d1c:	91000404 	addi	r4,r18,16
    9d20:	b8c00415 	stw	r3,16(r23)
    9d24:	90800317 	ldw	r2,12(r18)
    9d28:	b8800515 	stw	r2,20(r23)
    9d2c:	3140e726 	beq	r6,r5,a0cc <_realloc_r+0x5a0>
    9d30:	20800017 	ldw	r2,0(r4)
    9d34:	dd000017 	ldw	r20,0(sp)
    9d38:	b80f883a 	mov	r7,r23
    9d3c:	40800015 	stw	r2,0(r8)
    9d40:	20c00117 	ldw	r3,4(r4)
    9d44:	40c00115 	stw	r3,4(r8)
    9d48:	20800217 	ldw	r2,8(r4)
    9d4c:	40800215 	stw	r2,8(r8)
    9d50:	003f9706 	br	9bb0 <_realloc_r+0x84>
    9d54:	98a9883a 	add	r20,r19,r2
    9d58:	a1c01f16 	blt	r20,r7,9dd8 <_realloc_r+0x2ac>
    9d5c:	b8c00317 	ldw	r3,12(r23)
    9d60:	b8800217 	ldw	r2,8(r23)
    9d64:	99bfff04 	addi	r6,r19,-4
    9d68:	01400904 	movi	r5,36
    9d6c:	b82b883a 	mov	r21,r23
    9d70:	18800215 	stw	r2,8(r3)
    9d74:	10c00315 	stw	r3,12(r2)
    9d78:	bc000204 	addi	r16,r23,8
    9d7c:	2980c336 	bltu	r5,r6,a08c <_realloc_r+0x560>
    9d80:	008004c4 	movi	r2,19
    9d84:	9009883a 	mov	r4,r18
    9d88:	8011883a 	mov	r8,r16
    9d8c:	11800f2e 	bgeu	r2,r6,9dcc <_realloc_r+0x2a0>
    9d90:	90800017 	ldw	r2,0(r18)
    9d94:	ba000404 	addi	r8,r23,16
    9d98:	91000204 	addi	r4,r18,8
    9d9c:	b8800215 	stw	r2,8(r23)
    9da0:	90c00117 	ldw	r3,4(r18)
    9da4:	008006c4 	movi	r2,27
    9da8:	b8c00315 	stw	r3,12(r23)
    9dac:	1180072e 	bgeu	r2,r6,9dcc <_realloc_r+0x2a0>
    9db0:	90c00217 	ldw	r3,8(r18)
    9db4:	ba000604 	addi	r8,r23,24
    9db8:	91000404 	addi	r4,r18,16
    9dbc:	b8c00415 	stw	r3,16(r23)
    9dc0:	90800317 	ldw	r2,12(r18)
    9dc4:	b8800515 	stw	r2,20(r23)
    9dc8:	3140c726 	beq	r6,r5,a0e8 <_realloc_r+0x5bc>
    9dcc:	20800017 	ldw	r2,0(r4)
    9dd0:	b80f883a 	mov	r7,r23
    9dd4:	003fd906 	br	9d3c <_realloc_r+0x210>
    9dd8:	880b883a 	mov	r5,r17
    9ddc:	b009883a 	mov	r4,r22
    9de0:	00035180 	call	3518 <_malloc_r>
    9de4:	1023883a 	mov	r17,r2
    9de8:	10002526 	beq	r2,zero,9e80 <_realloc_r+0x354>
    9dec:	80800117 	ldw	r2,4(r16)
    9df0:	00ffff84 	movi	r3,-2
    9df4:	893ffe04 	addi	r4,r17,-8
    9df8:	10c4703a 	and	r2,r2,r3
    9dfc:	8085883a 	add	r2,r16,r2
    9e00:	20809526 	beq	r4,r2,a058 <_realloc_r+0x52c>
    9e04:	99bfff04 	addi	r6,r19,-4
    9e08:	01c00904 	movi	r7,36
    9e0c:	39804536 	bltu	r7,r6,9f24 <_realloc_r+0x3f8>
    9e10:	008004c4 	movi	r2,19
    9e14:	9009883a 	mov	r4,r18
    9e18:	880b883a 	mov	r5,r17
    9e1c:	11800f2e 	bgeu	r2,r6,9e5c <_realloc_r+0x330>
    9e20:	90800017 	ldw	r2,0(r18)
    9e24:	89400204 	addi	r5,r17,8
    9e28:	91000204 	addi	r4,r18,8
    9e2c:	88800015 	stw	r2,0(r17)
    9e30:	90c00117 	ldw	r3,4(r18)
    9e34:	008006c4 	movi	r2,27
    9e38:	88c00115 	stw	r3,4(r17)
    9e3c:	1180072e 	bgeu	r2,r6,9e5c <_realloc_r+0x330>
    9e40:	90c00217 	ldw	r3,8(r18)
    9e44:	89400404 	addi	r5,r17,16
    9e48:	91000404 	addi	r4,r18,16
    9e4c:	88c00215 	stw	r3,8(r17)
    9e50:	90800317 	ldw	r2,12(r18)
    9e54:	88800315 	stw	r2,12(r17)
    9e58:	31c09126 	beq	r6,r7,a0a0 <_realloc_r+0x574>
    9e5c:	20800017 	ldw	r2,0(r4)
    9e60:	28800015 	stw	r2,0(r5)
    9e64:	20c00117 	ldw	r3,4(r4)
    9e68:	28c00115 	stw	r3,4(r5)
    9e6c:	20800217 	ldw	r2,8(r4)
    9e70:	28800215 	stw	r2,8(r5)
    9e74:	900b883a 	mov	r5,r18
    9e78:	b009883a 	mov	r4,r22
    9e7c:	0007d540 	call	7d54 <_free_r>
    9e80:	b009883a 	mov	r4,r22
    9e84:	000bbd00 	call	bbd0 <__malloc_unlock>
    9e88:	003f5e06 	br	9c04 <_realloc_r+0xd8>
    9e8c:	300b883a 	mov	r5,r6
    9e90:	dfc00b17 	ldw	ra,44(sp)
    9e94:	df000a17 	ldw	fp,40(sp)
    9e98:	ddc00917 	ldw	r23,36(sp)
    9e9c:	dd800817 	ldw	r22,32(sp)
    9ea0:	dd400717 	ldw	r21,28(sp)
    9ea4:	dd000617 	ldw	r20,24(sp)
    9ea8:	dcc00517 	ldw	r19,20(sp)
    9eac:	dc800417 	ldw	r18,16(sp)
    9eb0:	dc400317 	ldw	r17,12(sp)
    9eb4:	dc000217 	ldw	r16,8(sp)
    9eb8:	dec00c04 	addi	sp,sp,48
    9ebc:	00035181 	jmpi	3518 <_malloc_r>
    9ec0:	38800117 	ldw	r2,4(r7)
    9ec4:	e54b883a 	add	r5,fp,r21
    9ec8:	31000054 	ori	r4,r6,1
    9ecc:	1080004c 	andi	r2,r2,1
    9ed0:	1704b03a 	or	r2,r2,fp
    9ed4:	38800115 	stw	r2,4(r7)
    9ed8:	29000115 	stw	r4,4(r5)
    9edc:	2987883a 	add	r3,r5,r6
    9ee0:	18800117 	ldw	r2,4(r3)
    9ee4:	29400204 	addi	r5,r5,8
    9ee8:	b009883a 	mov	r4,r22
    9eec:	10800054 	ori	r2,r2,1
    9ef0:	18800115 	stw	r2,4(r3)
    9ef4:	0007d540 	call	7d54 <_free_r>
    9ef8:	003f3806 	br	9bdc <_realloc_r+0xb0>
    9efc:	000d883a 	mov	r6,zero
    9f00:	0009883a 	mov	r4,zero
    9f04:	003f5d06 	br	9c7c <_realloc_r+0x150>
    9f08:	30c00217 	ldw	r3,8(r6)
    9f0c:	30800317 	ldw	r2,12(r6)
    9f10:	800f883a 	mov	r7,r16
    9f14:	84000204 	addi	r16,r16,8
    9f18:	10c00215 	stw	r3,8(r2)
    9f1c:	18800315 	stw	r2,12(r3)
    9f20:	003f2306 	br	9bb0 <_realloc_r+0x84>
    9f24:	8809883a 	mov	r4,r17
    9f28:	900b883a 	mov	r5,r18
    9f2c:	00089c00 	call	89c0 <memmove>
    9f30:	003fd006 	br	9e74 <_realloc_r+0x348>
    9f34:	30800117 	ldw	r2,4(r6)
    9f38:	e0c00404 	addi	r3,fp,16
    9f3c:	1108703a 	and	r4,r2,r4
    9f40:	9905883a 	add	r2,r19,r4
    9f44:	10ff4d16 	blt	r2,r3,9c7c <_realloc_r+0x150>
    9f48:	1705c83a 	sub	r2,r2,fp
    9f4c:	870b883a 	add	r5,r16,fp
    9f50:	10800054 	ori	r2,r2,1
    9f54:	28800115 	stw	r2,4(r5)
    9f58:	80c00117 	ldw	r3,4(r16)
    9f5c:	00800074 	movhi	r2,1
    9f60:	10bc9104 	addi	r2,r2,-3516
    9f64:	b009883a 	mov	r4,r22
    9f68:	18c0004c 	andi	r3,r3,1
    9f6c:	e0c6b03a 	or	r3,fp,r3
    9f70:	11400215 	stw	r5,8(r2)
    9f74:	80c00115 	stw	r3,4(r16)
    9f78:	000bbd00 	call	bbd0 <__malloc_unlock>
    9f7c:	84400204 	addi	r17,r16,8
    9f80:	003f2006 	br	9c04 <_realloc_r+0xd8>
    9f84:	98a9883a 	add	r20,r19,r2
    9f88:	2509883a 	add	r4,r4,r20
    9f8c:	e0800404 	addi	r2,fp,16
    9f90:	d9000115 	stw	r4,4(sp)
    9f94:	20bf7016 	blt	r4,r2,9d58 <_realloc_r+0x22c>
    9f98:	b8c00317 	ldw	r3,12(r23)
    9f9c:	b8800217 	ldw	r2,8(r23)
    9fa0:	99bfff04 	addi	r6,r19,-4
    9fa4:	01400904 	movi	r5,36
    9fa8:	18800215 	stw	r2,8(r3)
    9fac:	10c00315 	stw	r3,12(r2)
    9fb0:	bc400204 	addi	r17,r23,8
    9fb4:	29804136 	bltu	r5,r6,a0bc <_realloc_r+0x590>
    9fb8:	008004c4 	movi	r2,19
    9fbc:	9009883a 	mov	r4,r18
    9fc0:	880f883a 	mov	r7,r17
    9fc4:	11800f2e 	bgeu	r2,r6,a004 <_realloc_r+0x4d8>
    9fc8:	90800017 	ldw	r2,0(r18)
    9fcc:	b9c00404 	addi	r7,r23,16
    9fd0:	91000204 	addi	r4,r18,8
    9fd4:	b8800215 	stw	r2,8(r23)
    9fd8:	90c00117 	ldw	r3,4(r18)
    9fdc:	008006c4 	movi	r2,27
    9fe0:	b8c00315 	stw	r3,12(r23)
    9fe4:	1180072e 	bgeu	r2,r6,a004 <_realloc_r+0x4d8>
    9fe8:	90c00217 	ldw	r3,8(r18)
    9fec:	b9c00604 	addi	r7,r23,24
    9ff0:	91000404 	addi	r4,r18,16
    9ff4:	b8c00415 	stw	r3,16(r23)
    9ff8:	90800317 	ldw	r2,12(r18)
    9ffc:	b8800515 	stw	r2,20(r23)
    a000:	31404026 	beq	r6,r5,a104 <_realloc_r+0x5d8>
    a004:	20800017 	ldw	r2,0(r4)
    a008:	38800015 	stw	r2,0(r7)
    a00c:	20c00117 	ldw	r3,4(r4)
    a010:	38c00115 	stw	r3,4(r7)
    a014:	20800217 	ldw	r2,8(r4)
    a018:	38800215 	stw	r2,8(r7)
    a01c:	d8c00117 	ldw	r3,4(sp)
    a020:	bf0b883a 	add	r5,r23,fp
    a024:	b009883a 	mov	r4,r22
    a028:	1f05c83a 	sub	r2,r3,fp
    a02c:	10800054 	ori	r2,r2,1
    a030:	28800115 	stw	r2,4(r5)
    a034:	b8c00117 	ldw	r3,4(r23)
    a038:	00800074 	movhi	r2,1
    a03c:	10bc9104 	addi	r2,r2,-3516
    a040:	11400215 	stw	r5,8(r2)
    a044:	18c0004c 	andi	r3,r3,1
    a048:	e0c6b03a 	or	r3,fp,r3
    a04c:	b8c00115 	stw	r3,4(r23)
    a050:	000bbd00 	call	bbd0 <__malloc_unlock>
    a054:	003eeb06 	br	9c04 <_realloc_r+0xd8>
    a058:	20800117 	ldw	r2,4(r4)
    a05c:	00ffff04 	movi	r3,-4
    a060:	800f883a 	mov	r7,r16
    a064:	10c4703a 	and	r2,r2,r3
    a068:	98a9883a 	add	r20,r19,r2
    a06c:	84000204 	addi	r16,r16,8
    a070:	003ecf06 	br	9bb0 <_realloc_r+0x84>
    a074:	900b883a 	mov	r5,r18
    a078:	8009883a 	mov	r4,r16
    a07c:	00089c00 	call	89c0 <memmove>
    a080:	dd000017 	ldw	r20,0(sp)
    a084:	b80f883a 	mov	r7,r23
    a088:	003ec906 	br	9bb0 <_realloc_r+0x84>
    a08c:	900b883a 	mov	r5,r18
    a090:	8009883a 	mov	r4,r16
    a094:	00089c00 	call	89c0 <memmove>
    a098:	b80f883a 	mov	r7,r23
    a09c:	003ec406 	br	9bb0 <_realloc_r+0x84>
    a0a0:	90c00417 	ldw	r3,16(r18)
    a0a4:	89400604 	addi	r5,r17,24
    a0a8:	91000604 	addi	r4,r18,24
    a0ac:	88c00415 	stw	r3,16(r17)
    a0b0:	90800517 	ldw	r2,20(r18)
    a0b4:	88800515 	stw	r2,20(r17)
    a0b8:	003f6806 	br	9e5c <_realloc_r+0x330>
    a0bc:	900b883a 	mov	r5,r18
    a0c0:	8809883a 	mov	r4,r17
    a0c4:	00089c00 	call	89c0 <memmove>
    a0c8:	003fd406 	br	a01c <_realloc_r+0x4f0>
    a0cc:	90c00417 	ldw	r3,16(r18)
    a0d0:	91000604 	addi	r4,r18,24
    a0d4:	ba000804 	addi	r8,r23,32
    a0d8:	b8c00615 	stw	r3,24(r23)
    a0dc:	90800517 	ldw	r2,20(r18)
    a0e0:	b8800715 	stw	r2,28(r23)
    a0e4:	003f1206 	br	9d30 <_realloc_r+0x204>
    a0e8:	90c00417 	ldw	r3,16(r18)
    a0ec:	91000604 	addi	r4,r18,24
    a0f0:	ba000804 	addi	r8,r23,32
    a0f4:	b8c00615 	stw	r3,24(r23)
    a0f8:	90800517 	ldw	r2,20(r18)
    a0fc:	b8800715 	stw	r2,28(r23)
    a100:	003f3206 	br	9dcc <_realloc_r+0x2a0>
    a104:	90c00417 	ldw	r3,16(r18)
    a108:	91000604 	addi	r4,r18,24
    a10c:	b9c00804 	addi	r7,r23,32
    a110:	b8c00615 	stw	r3,24(r23)
    a114:	90800517 	ldw	r2,20(r18)
    a118:	b8800715 	stw	r2,28(r23)
    a11c:	003fb906 	br	a004 <_realloc_r+0x4d8>

0000a120 <__isinfd>:
    a120:	200d883a 	mov	r6,r4
    a124:	0109c83a 	sub	r4,zero,r4
    a128:	2188b03a 	or	r4,r4,r6
    a12c:	2008d7fa 	srli	r4,r4,31
    a130:	00a00034 	movhi	r2,32768
    a134:	10bfffc4 	addi	r2,r2,-1
    a138:	1144703a 	and	r2,r2,r5
    a13c:	2088b03a 	or	r4,r4,r2
    a140:	009ffc34 	movhi	r2,32752
    a144:	1105c83a 	sub	r2,r2,r4
    a148:	0087c83a 	sub	r3,zero,r2
    a14c:	10c4b03a 	or	r2,r2,r3
    a150:	1004d7fa 	srli	r2,r2,31
    a154:	00c00044 	movi	r3,1
    a158:	1885c83a 	sub	r2,r3,r2
    a15c:	f800283a 	ret

0000a160 <__sclose>:
    a160:	2940038f 	ldh	r5,14(r5)
    a164:	000a4941 	jmpi	a494 <_close_r>

0000a168 <__sseek>:
    a168:	defffe04 	addi	sp,sp,-8
    a16c:	dc000015 	stw	r16,0(sp)
    a170:	2821883a 	mov	r16,r5
    a174:	2940038f 	ldh	r5,14(r5)
    a178:	dfc00115 	stw	ra,4(sp)
    a17c:	000a70c0 	call	a70c <_lseek_r>
    a180:	1007883a 	mov	r3,r2
    a184:	00bfffc4 	movi	r2,-1
    a188:	18800926 	beq	r3,r2,a1b0 <__sseek+0x48>
    a18c:	8080030b 	ldhu	r2,12(r16)
    a190:	80c01415 	stw	r3,80(r16)
    a194:	10840014 	ori	r2,r2,4096
    a198:	8080030d 	sth	r2,12(r16)
    a19c:	1805883a 	mov	r2,r3
    a1a0:	dfc00117 	ldw	ra,4(sp)
    a1a4:	dc000017 	ldw	r16,0(sp)
    a1a8:	dec00204 	addi	sp,sp,8
    a1ac:	f800283a 	ret
    a1b0:	8080030b 	ldhu	r2,12(r16)
    a1b4:	10bbffcc 	andi	r2,r2,61439
    a1b8:	8080030d 	sth	r2,12(r16)
    a1bc:	1805883a 	mov	r2,r3
    a1c0:	dfc00117 	ldw	ra,4(sp)
    a1c4:	dc000017 	ldw	r16,0(sp)
    a1c8:	dec00204 	addi	sp,sp,8
    a1cc:	f800283a 	ret

0000a1d0 <__swrite>:
    a1d0:	2880030b 	ldhu	r2,12(r5)
    a1d4:	defffb04 	addi	sp,sp,-20
    a1d8:	dcc00315 	stw	r19,12(sp)
    a1dc:	1080400c 	andi	r2,r2,256
    a1e0:	dc800215 	stw	r18,8(sp)
    a1e4:	dc400115 	stw	r17,4(sp)
    a1e8:	dc000015 	stw	r16,0(sp)
    a1ec:	3027883a 	mov	r19,r6
    a1f0:	3825883a 	mov	r18,r7
    a1f4:	dfc00415 	stw	ra,16(sp)
    a1f8:	2821883a 	mov	r16,r5
    a1fc:	000d883a 	mov	r6,zero
    a200:	01c00084 	movi	r7,2
    a204:	2023883a 	mov	r17,r4
    a208:	10000226 	beq	r2,zero,a214 <__swrite+0x44>
    a20c:	2940038f 	ldh	r5,14(r5)
    a210:	000a70c0 	call	a70c <_lseek_r>
    a214:	8080030b 	ldhu	r2,12(r16)
    a218:	8140038f 	ldh	r5,14(r16)
    a21c:	8809883a 	mov	r4,r17
    a220:	10bbffcc 	andi	r2,r2,61439
    a224:	980d883a 	mov	r6,r19
    a228:	900f883a 	mov	r7,r18
    a22c:	8080030d 	sth	r2,12(r16)
    a230:	dfc00417 	ldw	ra,16(sp)
    a234:	dcc00317 	ldw	r19,12(sp)
    a238:	dc800217 	ldw	r18,8(sp)
    a23c:	dc400117 	ldw	r17,4(sp)
    a240:	dc000017 	ldw	r16,0(sp)
    a244:	dec00504 	addi	sp,sp,20
    a248:	000a3681 	jmpi	a368 <_write_r>

0000a24c <__sread>:
    a24c:	defffe04 	addi	sp,sp,-8
    a250:	dc000015 	stw	r16,0(sp)
    a254:	2821883a 	mov	r16,r5
    a258:	2940038f 	ldh	r5,14(r5)
    a25c:	dfc00115 	stw	ra,4(sp)
    a260:	000a7840 	call	a784 <_read_r>
    a264:	1007883a 	mov	r3,r2
    a268:	10000816 	blt	r2,zero,a28c <__sread+0x40>
    a26c:	80801417 	ldw	r2,80(r16)
    a270:	10c5883a 	add	r2,r2,r3
    a274:	80801415 	stw	r2,80(r16)
    a278:	1805883a 	mov	r2,r3
    a27c:	dfc00117 	ldw	ra,4(sp)
    a280:	dc000017 	ldw	r16,0(sp)
    a284:	dec00204 	addi	sp,sp,8
    a288:	f800283a 	ret
    a28c:	8080030b 	ldhu	r2,12(r16)
    a290:	10bbffcc 	andi	r2,r2,61439
    a294:	8080030d 	sth	r2,12(r16)
    a298:	1805883a 	mov	r2,r3
    a29c:	dfc00117 	ldw	ra,4(sp)
    a2a0:	dc000017 	ldw	r16,0(sp)
    a2a4:	dec00204 	addi	sp,sp,8
    a2a8:	f800283a 	ret

0000a2ac <strcmp>:
    a2ac:	2144b03a 	or	r2,r4,r5
    a2b0:	108000cc 	andi	r2,r2,3
    a2b4:	10001d1e 	bne	r2,zero,a32c <strcmp+0x80>
    a2b8:	200f883a 	mov	r7,r4
    a2bc:	28800017 	ldw	r2,0(r5)
    a2c0:	21000017 	ldw	r4,0(r4)
    a2c4:	280d883a 	mov	r6,r5
    a2c8:	2080161e 	bne	r4,r2,a324 <strcmp+0x78>
    a2cc:	023fbff4 	movhi	r8,65279
    a2d0:	423fbfc4 	addi	r8,r8,-257
    a2d4:	2207883a 	add	r3,r4,r8
    a2d8:	01602074 	movhi	r5,32897
    a2dc:	29602004 	addi	r5,r5,-32640
    a2e0:	1946703a 	and	r3,r3,r5
    a2e4:	0104303a 	nor	r2,zero,r4
    a2e8:	10c4703a 	and	r2,r2,r3
    a2ec:	10001c1e 	bne	r2,zero,a360 <strcmp+0xb4>
    a2f0:	4013883a 	mov	r9,r8
    a2f4:	2811883a 	mov	r8,r5
    a2f8:	00000106 	br	a300 <strcmp+0x54>
    a2fc:	1800181e 	bne	r3,zero,a360 <strcmp+0xb4>
    a300:	39c00104 	addi	r7,r7,4
    a304:	39000017 	ldw	r4,0(r7)
    a308:	31800104 	addi	r6,r6,4
    a30c:	31400017 	ldw	r5,0(r6)
    a310:	2245883a 	add	r2,r4,r9
    a314:	1204703a 	and	r2,r2,r8
    a318:	0106303a 	nor	r3,zero,r4
    a31c:	1886703a 	and	r3,r3,r2
    a320:	217ff626 	beq	r4,r5,a2fc <strcmp+0x50>
    a324:	3809883a 	mov	r4,r7
    a328:	300b883a 	mov	r5,r6
    a32c:	20c00007 	ldb	r3,0(r4)
    a330:	1800051e 	bne	r3,zero,a348 <strcmp+0x9c>
    a334:	00000606 	br	a350 <strcmp+0xa4>
    a338:	21000044 	addi	r4,r4,1
    a33c:	20c00007 	ldb	r3,0(r4)
    a340:	29400044 	addi	r5,r5,1
    a344:	18000226 	beq	r3,zero,a350 <strcmp+0xa4>
    a348:	28800007 	ldb	r2,0(r5)
    a34c:	18bffa26 	beq	r3,r2,a338 <strcmp+0x8c>
    a350:	20c00003 	ldbu	r3,0(r4)
    a354:	28800003 	ldbu	r2,0(r5)
    a358:	1885c83a 	sub	r2,r3,r2
    a35c:	f800283a 	ret
    a360:	0005883a 	mov	r2,zero
    a364:	f800283a 	ret

0000a368 <_write_r>:
    a368:	defffd04 	addi	sp,sp,-12
    a36c:	dc000015 	stw	r16,0(sp)
    a370:	04000074 	movhi	r16,1
    a374:	840b3a04 	addi	r16,r16,11496
    a378:	dc400115 	stw	r17,4(sp)
    a37c:	80000015 	stw	zero,0(r16)
    a380:	2023883a 	mov	r17,r4
    a384:	2809883a 	mov	r4,r5
    a388:	300b883a 	mov	r5,r6
    a38c:	380d883a 	mov	r6,r7
    a390:	dfc00215 	stw	ra,8(sp)
    a394:	000bf440 	call	bf44 <write>
    a398:	1007883a 	mov	r3,r2
    a39c:	00bfffc4 	movi	r2,-1
    a3a0:	18800626 	beq	r3,r2,a3bc <_write_r+0x54>
    a3a4:	1805883a 	mov	r2,r3
    a3a8:	dfc00217 	ldw	ra,8(sp)
    a3ac:	dc400117 	ldw	r17,4(sp)
    a3b0:	dc000017 	ldw	r16,0(sp)
    a3b4:	dec00304 	addi	sp,sp,12
    a3b8:	f800283a 	ret
    a3bc:	80800017 	ldw	r2,0(r16)
    a3c0:	103ff826 	beq	r2,zero,a3a4 <_write_r+0x3c>
    a3c4:	88800015 	stw	r2,0(r17)
    a3c8:	1805883a 	mov	r2,r3
    a3cc:	dfc00217 	ldw	ra,8(sp)
    a3d0:	dc400117 	ldw	r17,4(sp)
    a3d4:	dc000017 	ldw	r16,0(sp)
    a3d8:	dec00304 	addi	sp,sp,12
    a3dc:	f800283a 	ret

0000a3e0 <_calloc_r>:
    a3e0:	298b383a 	mul	r5,r5,r6
    a3e4:	defffe04 	addi	sp,sp,-8
    a3e8:	dc000015 	stw	r16,0(sp)
    a3ec:	dfc00115 	stw	ra,4(sp)
    a3f0:	00035180 	call	3518 <_malloc_r>
    a3f4:	1021883a 	mov	r16,r2
    a3f8:	01c00904 	movi	r7,36
    a3fc:	10000d26 	beq	r2,zero,a434 <_calloc_r+0x54>
    a400:	10ffff17 	ldw	r3,-4(r2)
    a404:	1009883a 	mov	r4,r2
    a408:	00bfff04 	movi	r2,-4
    a40c:	1886703a 	and	r3,r3,r2
    a410:	1887883a 	add	r3,r3,r2
    a414:	180d883a 	mov	r6,r3
    a418:	000b883a 	mov	r5,zero
    a41c:	38c01736 	bltu	r7,r3,a47c <_calloc_r+0x9c>
    a420:	008004c4 	movi	r2,19
    a424:	10c00836 	bltu	r2,r3,a448 <_calloc_r+0x68>
    a428:	20000215 	stw	zero,8(r4)
    a42c:	20000015 	stw	zero,0(r4)
    a430:	20000115 	stw	zero,4(r4)
    a434:	8005883a 	mov	r2,r16
    a438:	dfc00117 	ldw	ra,4(sp)
    a43c:	dc000017 	ldw	r16,0(sp)
    a440:	dec00204 	addi	sp,sp,8
    a444:	f800283a 	ret
    a448:	008006c4 	movi	r2,27
    a44c:	80000015 	stw	zero,0(r16)
    a450:	80000115 	stw	zero,4(r16)
    a454:	81000204 	addi	r4,r16,8
    a458:	10fff32e 	bgeu	r2,r3,a428 <_calloc_r+0x48>
    a45c:	80000215 	stw	zero,8(r16)
    a460:	80000315 	stw	zero,12(r16)
    a464:	81000404 	addi	r4,r16,16
    a468:	19ffef1e 	bne	r3,r7,a428 <_calloc_r+0x48>
    a46c:	81000604 	addi	r4,r16,24
    a470:	80000415 	stw	zero,16(r16)
    a474:	80000515 	stw	zero,20(r16)
    a478:	003feb06 	br	a428 <_calloc_r+0x48>
    a47c:	0008aa00 	call	8aa0 <memset>
    a480:	8005883a 	mov	r2,r16
    a484:	dfc00117 	ldw	ra,4(sp)
    a488:	dc000017 	ldw	r16,0(sp)
    a48c:	dec00204 	addi	sp,sp,8
    a490:	f800283a 	ret

0000a494 <_close_r>:
    a494:	defffd04 	addi	sp,sp,-12
    a498:	dc000015 	stw	r16,0(sp)
    a49c:	04000074 	movhi	r16,1
    a4a0:	840b3a04 	addi	r16,r16,11496
    a4a4:	dc400115 	stw	r17,4(sp)
    a4a8:	80000015 	stw	zero,0(r16)
    a4ac:	2023883a 	mov	r17,r4
    a4b0:	2809883a 	mov	r4,r5
    a4b4:	dfc00215 	stw	ra,8(sp)
    a4b8:	000b7780 	call	b778 <close>
    a4bc:	1007883a 	mov	r3,r2
    a4c0:	00bfffc4 	movi	r2,-1
    a4c4:	18800626 	beq	r3,r2,a4e0 <_close_r+0x4c>
    a4c8:	1805883a 	mov	r2,r3
    a4cc:	dfc00217 	ldw	ra,8(sp)
    a4d0:	dc400117 	ldw	r17,4(sp)
    a4d4:	dc000017 	ldw	r16,0(sp)
    a4d8:	dec00304 	addi	sp,sp,12
    a4dc:	f800283a 	ret
    a4e0:	80800017 	ldw	r2,0(r16)
    a4e4:	103ff826 	beq	r2,zero,a4c8 <_close_r+0x34>
    a4e8:	88800015 	stw	r2,0(r17)
    a4ec:	1805883a 	mov	r2,r3
    a4f0:	dfc00217 	ldw	ra,8(sp)
    a4f4:	dc400117 	ldw	r17,4(sp)
    a4f8:	dc000017 	ldw	r16,0(sp)
    a4fc:	dec00304 	addi	sp,sp,12
    a500:	f800283a 	ret

0000a504 <_fclose_r>:
    a504:	defffc04 	addi	sp,sp,-16
    a508:	dc400115 	stw	r17,4(sp)
    a50c:	dc000015 	stw	r16,0(sp)
    a510:	dfc00315 	stw	ra,12(sp)
    a514:	dc800215 	stw	r18,8(sp)
    a518:	2821883a 	mov	r16,r5
    a51c:	2023883a 	mov	r17,r4
    a520:	28002926 	beq	r5,zero,a5c8 <_fclose_r+0xc4>
    a524:	00079c00 	call	79c0 <__sfp_lock_acquire>
    a528:	88000226 	beq	r17,zero,a534 <_fclose_r+0x30>
    a52c:	88800e17 	ldw	r2,56(r17)
    a530:	10002d26 	beq	r2,zero,a5e8 <_fclose_r+0xe4>
    a534:	8080030f 	ldh	r2,12(r16)
    a538:	10002226 	beq	r2,zero,a5c4 <_fclose_r+0xc0>
    a53c:	8809883a 	mov	r4,r17
    a540:	800b883a 	mov	r5,r16
    a544:	00077380 	call	7738 <_fflush_r>
    a548:	1025883a 	mov	r18,r2
    a54c:	80800b17 	ldw	r2,44(r16)
    a550:	10000426 	beq	r2,zero,a564 <_fclose_r+0x60>
    a554:	81400717 	ldw	r5,28(r16)
    a558:	8809883a 	mov	r4,r17
    a55c:	103ee83a 	callr	r2
    a560:	10002a16 	blt	r2,zero,a60c <_fclose_r+0x108>
    a564:	8080030b 	ldhu	r2,12(r16)
    a568:	1080200c 	andi	r2,r2,128
    a56c:	1000231e 	bne	r2,zero,a5fc <_fclose_r+0xf8>
    a570:	81400c17 	ldw	r5,48(r16)
    a574:	28000526 	beq	r5,zero,a58c <_fclose_r+0x88>
    a578:	80801004 	addi	r2,r16,64
    a57c:	28800226 	beq	r5,r2,a588 <_fclose_r+0x84>
    a580:	8809883a 	mov	r4,r17
    a584:	0007d540 	call	7d54 <_free_r>
    a588:	80000c15 	stw	zero,48(r16)
    a58c:	81401117 	ldw	r5,68(r16)
    a590:	28000326 	beq	r5,zero,a5a0 <_fclose_r+0x9c>
    a594:	8809883a 	mov	r4,r17
    a598:	0007d540 	call	7d54 <_free_r>
    a59c:	80001115 	stw	zero,68(r16)
    a5a0:	8000030d 	sth	zero,12(r16)
    a5a4:	00079c40 	call	79c4 <__sfp_lock_release>
    a5a8:	9005883a 	mov	r2,r18
    a5ac:	dfc00317 	ldw	ra,12(sp)
    a5b0:	dc800217 	ldw	r18,8(sp)
    a5b4:	dc400117 	ldw	r17,4(sp)
    a5b8:	dc000017 	ldw	r16,0(sp)
    a5bc:	dec00404 	addi	sp,sp,16
    a5c0:	f800283a 	ret
    a5c4:	00079c40 	call	79c4 <__sfp_lock_release>
    a5c8:	0025883a 	mov	r18,zero
    a5cc:	9005883a 	mov	r2,r18
    a5d0:	dfc00317 	ldw	ra,12(sp)
    a5d4:	dc800217 	ldw	r18,8(sp)
    a5d8:	dc400117 	ldw	r17,4(sp)
    a5dc:	dc000017 	ldw	r16,0(sp)
    a5e0:	dec00404 	addi	sp,sp,16
    a5e4:	f800283a 	ret
    a5e8:	8809883a 	mov	r4,r17
    a5ec:	00079d00 	call	79d0 <__sinit>
    a5f0:	8080030f 	ldh	r2,12(r16)
    a5f4:	103fd11e 	bne	r2,zero,a53c <_fclose_r+0x38>
    a5f8:	003ff206 	br	a5c4 <_fclose_r+0xc0>
    a5fc:	81400417 	ldw	r5,16(r16)
    a600:	8809883a 	mov	r4,r17
    a604:	0007d540 	call	7d54 <_free_r>
    a608:	003fd906 	br	a570 <_fclose_r+0x6c>
    a60c:	04bfffc4 	movi	r18,-1
    a610:	003fd406 	br	a564 <_fclose_r+0x60>

0000a614 <fclose>:
    a614:	00800074 	movhi	r2,1
    a618:	10834a04 	addi	r2,r2,3368
    a61c:	200b883a 	mov	r5,r4
    a620:	11000017 	ldw	r4,0(r2)
    a624:	000a5041 	jmpi	a504 <_fclose_r>

0000a628 <_fstat_r>:
    a628:	defffd04 	addi	sp,sp,-12
    a62c:	dc000015 	stw	r16,0(sp)
    a630:	04000074 	movhi	r16,1
    a634:	840b3a04 	addi	r16,r16,11496
    a638:	dc400115 	stw	r17,4(sp)
    a63c:	80000015 	stw	zero,0(r16)
    a640:	2023883a 	mov	r17,r4
    a644:	2809883a 	mov	r4,r5
    a648:	300b883a 	mov	r5,r6
    a64c:	dfc00215 	stw	ra,8(sp)
    a650:	000b8600 	call	b860 <fstat>
    a654:	1007883a 	mov	r3,r2
    a658:	00bfffc4 	movi	r2,-1
    a65c:	18800626 	beq	r3,r2,a678 <_fstat_r+0x50>
    a660:	1805883a 	mov	r2,r3
    a664:	dfc00217 	ldw	ra,8(sp)
    a668:	dc400117 	ldw	r17,4(sp)
    a66c:	dc000017 	ldw	r16,0(sp)
    a670:	dec00304 	addi	sp,sp,12
    a674:	f800283a 	ret
    a678:	80800017 	ldw	r2,0(r16)
    a67c:	103ff826 	beq	r2,zero,a660 <_fstat_r+0x38>
    a680:	88800015 	stw	r2,0(r17)
    a684:	1805883a 	mov	r2,r3
    a688:	dfc00217 	ldw	ra,8(sp)
    a68c:	dc400117 	ldw	r17,4(sp)
    a690:	dc000017 	ldw	r16,0(sp)
    a694:	dec00304 	addi	sp,sp,12
    a698:	f800283a 	ret

0000a69c <_isatty_r>:
    a69c:	defffd04 	addi	sp,sp,-12
    a6a0:	dc000015 	stw	r16,0(sp)
    a6a4:	04000074 	movhi	r16,1
    a6a8:	840b3a04 	addi	r16,r16,11496
    a6ac:	dc400115 	stw	r17,4(sp)
    a6b0:	80000015 	stw	zero,0(r16)
    a6b4:	2023883a 	mov	r17,r4
    a6b8:	2809883a 	mov	r4,r5
    a6bc:	dfc00215 	stw	ra,8(sp)
    a6c0:	000b99c0 	call	b99c <isatty>
    a6c4:	1007883a 	mov	r3,r2
    a6c8:	00bfffc4 	movi	r2,-1
    a6cc:	18800626 	beq	r3,r2,a6e8 <_isatty_r+0x4c>
    a6d0:	1805883a 	mov	r2,r3
    a6d4:	dfc00217 	ldw	ra,8(sp)
    a6d8:	dc400117 	ldw	r17,4(sp)
    a6dc:	dc000017 	ldw	r16,0(sp)
    a6e0:	dec00304 	addi	sp,sp,12
    a6e4:	f800283a 	ret
    a6e8:	80800017 	ldw	r2,0(r16)
    a6ec:	103ff826 	beq	r2,zero,a6d0 <_isatty_r+0x34>
    a6f0:	88800015 	stw	r2,0(r17)
    a6f4:	1805883a 	mov	r2,r3
    a6f8:	dfc00217 	ldw	ra,8(sp)
    a6fc:	dc400117 	ldw	r17,4(sp)
    a700:	dc000017 	ldw	r16,0(sp)
    a704:	dec00304 	addi	sp,sp,12
    a708:	f800283a 	ret

0000a70c <_lseek_r>:
    a70c:	defffd04 	addi	sp,sp,-12
    a710:	dc000015 	stw	r16,0(sp)
    a714:	04000074 	movhi	r16,1
    a718:	840b3a04 	addi	r16,r16,11496
    a71c:	dc400115 	stw	r17,4(sp)
    a720:	80000015 	stw	zero,0(r16)
    a724:	2023883a 	mov	r17,r4
    a728:	2809883a 	mov	r4,r5
    a72c:	300b883a 	mov	r5,r6
    a730:	380d883a 	mov	r6,r7
    a734:	dfc00215 	stw	ra,8(sp)
    a738:	000bae40 	call	bae4 <lseek>
    a73c:	1007883a 	mov	r3,r2
    a740:	00bfffc4 	movi	r2,-1
    a744:	18800626 	beq	r3,r2,a760 <_lseek_r+0x54>
    a748:	1805883a 	mov	r2,r3
    a74c:	dfc00217 	ldw	ra,8(sp)
    a750:	dc400117 	ldw	r17,4(sp)
    a754:	dc000017 	ldw	r16,0(sp)
    a758:	dec00304 	addi	sp,sp,12
    a75c:	f800283a 	ret
    a760:	80800017 	ldw	r2,0(r16)
    a764:	103ff826 	beq	r2,zero,a748 <_lseek_r+0x3c>
    a768:	88800015 	stw	r2,0(r17)
    a76c:	1805883a 	mov	r2,r3
    a770:	dfc00217 	ldw	ra,8(sp)
    a774:	dc400117 	ldw	r17,4(sp)
    a778:	dc000017 	ldw	r16,0(sp)
    a77c:	dec00304 	addi	sp,sp,12
    a780:	f800283a 	ret

0000a784 <_read_r>:
    a784:	defffd04 	addi	sp,sp,-12
    a788:	dc000015 	stw	r16,0(sp)
    a78c:	04000074 	movhi	r16,1
    a790:	840b3a04 	addi	r16,r16,11496
    a794:	dc400115 	stw	r17,4(sp)
    a798:	80000015 	stw	zero,0(r16)
    a79c:	2023883a 	mov	r17,r4
    a7a0:	2809883a 	mov	r4,r5
    a7a4:	300b883a 	mov	r5,r6
    a7a8:	380d883a 	mov	r6,r7
    a7ac:	dfc00215 	stw	ra,8(sp)
    a7b0:	000bdd80 	call	bdd8 <read>
    a7b4:	1007883a 	mov	r3,r2
    a7b8:	00bfffc4 	movi	r2,-1
    a7bc:	18800626 	beq	r3,r2,a7d8 <_read_r+0x54>
    a7c0:	1805883a 	mov	r2,r3
    a7c4:	dfc00217 	ldw	ra,8(sp)
    a7c8:	dc400117 	ldw	r17,4(sp)
    a7cc:	dc000017 	ldw	r16,0(sp)
    a7d0:	dec00304 	addi	sp,sp,12
    a7d4:	f800283a 	ret
    a7d8:	80800017 	ldw	r2,0(r16)
    a7dc:	103ff826 	beq	r2,zero,a7c0 <_read_r+0x3c>
    a7e0:	88800015 	stw	r2,0(r17)
    a7e4:	1805883a 	mov	r2,r3
    a7e8:	dfc00217 	ldw	ra,8(sp)
    a7ec:	dc400117 	ldw	r17,4(sp)
    a7f0:	dc000017 	ldw	r16,0(sp)
    a7f4:	dec00304 	addi	sp,sp,12
    a7f8:	f800283a 	ret

0000a7fc <__udivdi3>:
    a7fc:	defff004 	addi	sp,sp,-64
    a800:	2005883a 	mov	r2,r4
    a804:	3011883a 	mov	r8,r6
    a808:	df000e15 	stw	fp,56(sp)
    a80c:	dd000a15 	stw	r20,40(sp)
    a810:	dc000615 	stw	r16,24(sp)
    a814:	dfc00f15 	stw	ra,60(sp)
    a818:	ddc00d15 	stw	r23,52(sp)
    a81c:	dd800c15 	stw	r22,48(sp)
    a820:	dd400b15 	stw	r21,44(sp)
    a824:	dcc00915 	stw	r19,36(sp)
    a828:	dc800815 	stw	r18,32(sp)
    a82c:	dc400715 	stw	r17,28(sp)
    a830:	4021883a 	mov	r16,r8
    a834:	1039883a 	mov	fp,r2
    a838:	2829883a 	mov	r20,r5
    a83c:	38003b1e 	bne	r7,zero,a92c <__udivdi3+0x130>
    a840:	2a005c36 	bltu	r5,r8,a9b4 <__udivdi3+0x1b8>
    a844:	4000a626 	beq	r8,zero,aae0 <__udivdi3+0x2e4>
    a848:	00bfffd4 	movui	r2,65535
    a84c:	14009e36 	bltu	r2,r16,aac8 <__udivdi3+0x2cc>
    a850:	00803fc4 	movi	r2,255
    a854:	14013d36 	bltu	r2,r16,ad4c <__udivdi3+0x550>
    a858:	000b883a 	mov	r5,zero
    a85c:	0005883a 	mov	r2,zero
    a860:	8084d83a 	srl	r2,r16,r2
    a864:	01000074 	movhi	r4,1
    a868:	213a6604 	addi	r4,r4,-5736
    a86c:	01800804 	movi	r6,32
    a870:	1105883a 	add	r2,r2,r4
    a874:	10c00003 	ldbu	r3,0(r2)
    a878:	28c7883a 	add	r3,r5,r3
    a87c:	30edc83a 	sub	r22,r6,r3
    a880:	b000ee1e 	bne	r22,zero,ac3c <__udivdi3+0x440>
    a884:	802ad43a 	srli	r21,r16,16
    a888:	00800044 	movi	r2,1
    a88c:	a423c83a 	sub	r17,r20,r16
    a890:	85ffffcc 	andi	r23,r16,65535
    a894:	d8800315 	stw	r2,12(sp)
    a898:	8809883a 	mov	r4,r17
    a89c:	a80b883a 	mov	r5,r21
    a8a0:	000b7680 	call	b768 <__udivsi3>
    a8a4:	8809883a 	mov	r4,r17
    a8a8:	a80b883a 	mov	r5,r21
    a8ac:	102d883a 	mov	r22,r2
    a8b0:	000b7700 	call	b770 <__umodsi3>
    a8b4:	1004943a 	slli	r2,r2,16
    a8b8:	e006d43a 	srli	r3,fp,16
    a8bc:	bda3383a 	mul	r17,r23,r22
    a8c0:	10c4b03a 	or	r2,r2,r3
    a8c4:	1440042e 	bgeu	r2,r17,a8d8 <__udivdi3+0xdc>
    a8c8:	1405883a 	add	r2,r2,r16
    a8cc:	b5bfffc4 	addi	r22,r22,-1
    a8d0:	14000136 	bltu	r2,r16,a8d8 <__udivdi3+0xdc>
    a8d4:	14413d36 	bltu	r2,r17,adcc <__udivdi3+0x5d0>
    a8d8:	1463c83a 	sub	r17,r2,r17
    a8dc:	8809883a 	mov	r4,r17
    a8e0:	a80b883a 	mov	r5,r21
    a8e4:	000b7680 	call	b768 <__udivsi3>
    a8e8:	8809883a 	mov	r4,r17
    a8ec:	a80b883a 	mov	r5,r21
    a8f0:	1029883a 	mov	r20,r2
    a8f4:	000b7700 	call	b770 <__umodsi3>
    a8f8:	1004943a 	slli	r2,r2,16
    a8fc:	bd09383a 	mul	r4,r23,r20
    a900:	e0ffffcc 	andi	r3,fp,65535
    a904:	10c4b03a 	or	r2,r2,r3
    a908:	1100042e 	bgeu	r2,r4,a91c <__udivdi3+0x120>
    a90c:	8085883a 	add	r2,r16,r2
    a910:	a53fffc4 	addi	r20,r20,-1
    a914:	14000136 	bltu	r2,r16,a91c <__udivdi3+0x120>
    a918:	11012036 	bltu	r2,r4,ad9c <__udivdi3+0x5a0>
    a91c:	b004943a 	slli	r2,r22,16
    a920:	d9000317 	ldw	r4,12(sp)
    a924:	a084b03a 	or	r2,r20,r2
    a928:	00001506 	br	a980 <__udivdi3+0x184>
    a92c:	380d883a 	mov	r6,r7
    a930:	29c06236 	bltu	r5,r7,aabc <__udivdi3+0x2c0>
    a934:	00bfffd4 	movui	r2,65535
    a938:	11c05a36 	bltu	r2,r7,aaa4 <__udivdi3+0x2a8>
    a93c:	00803fc4 	movi	r2,255
    a940:	11c0fc36 	bltu	r2,r7,ad34 <__udivdi3+0x538>
    a944:	000b883a 	mov	r5,zero
    a948:	0005883a 	mov	r2,zero
    a94c:	3084d83a 	srl	r2,r6,r2
    a950:	01000074 	movhi	r4,1
    a954:	213a6604 	addi	r4,r4,-5736
    a958:	01c00804 	movi	r7,32
    a95c:	1105883a 	add	r2,r2,r4
    a960:	10c00003 	ldbu	r3,0(r2)
    a964:	28c7883a 	add	r3,r5,r3
    a968:	38efc83a 	sub	r23,r7,r3
    a96c:	b800691e 	bne	r23,zero,ab14 <__udivdi3+0x318>
    a970:	35000136 	bltu	r6,r20,a978 <__udivdi3+0x17c>
    a974:	e4005136 	bltu	fp,r16,aabc <__udivdi3+0x2c0>
    a978:	00800044 	movi	r2,1
    a97c:	0009883a 	mov	r4,zero
    a980:	2007883a 	mov	r3,r4
    a984:	dfc00f17 	ldw	ra,60(sp)
    a988:	df000e17 	ldw	fp,56(sp)
    a98c:	ddc00d17 	ldw	r23,52(sp)
    a990:	dd800c17 	ldw	r22,48(sp)
    a994:	dd400b17 	ldw	r21,44(sp)
    a998:	dd000a17 	ldw	r20,40(sp)
    a99c:	dcc00917 	ldw	r19,36(sp)
    a9a0:	dc800817 	ldw	r18,32(sp)
    a9a4:	dc400717 	ldw	r17,28(sp)
    a9a8:	dc000617 	ldw	r16,24(sp)
    a9ac:	dec01004 	addi	sp,sp,64
    a9b0:	f800283a 	ret
    a9b4:	00bfffd4 	movui	r2,65535
    a9b8:	12005036 	bltu	r2,r8,aafc <__udivdi3+0x300>
    a9bc:	00803fc4 	movi	r2,255
    a9c0:	1200e836 	bltu	r2,r8,ad64 <__udivdi3+0x568>
    a9c4:	000b883a 	mov	r5,zero
    a9c8:	0005883a 	mov	r2,zero
    a9cc:	8084d83a 	srl	r2,r16,r2
    a9d0:	01000074 	movhi	r4,1
    a9d4:	213a6604 	addi	r4,r4,-5736
    a9d8:	01800804 	movi	r6,32
    a9dc:	1105883a 	add	r2,r2,r4
    a9e0:	10c00003 	ldbu	r3,0(r2)
    a9e4:	28c7883a 	add	r3,r5,r3
    a9e8:	30cbc83a 	sub	r5,r6,r3
    a9ec:	28000626 	beq	r5,zero,aa08 <__udivdi3+0x20c>
    a9f0:	3145c83a 	sub	r2,r6,r5
    a9f4:	e084d83a 	srl	r2,fp,r2
    a9f8:	a146983a 	sll	r3,r20,r5
    a9fc:	e178983a 	sll	fp,fp,r5
    aa00:	8160983a 	sll	r16,r16,r5
    aa04:	18a8b03a 	or	r20,r3,r2
    aa08:	802ad43a 	srli	r21,r16,16
    aa0c:	a009883a 	mov	r4,r20
    aa10:	85ffffcc 	andi	r23,r16,65535
    aa14:	a80b883a 	mov	r5,r21
    aa18:	000b7680 	call	b768 <__udivsi3>
    aa1c:	a009883a 	mov	r4,r20
    aa20:	a80b883a 	mov	r5,r21
    aa24:	102d883a 	mov	r22,r2
    aa28:	000b7700 	call	b770 <__umodsi3>
    aa2c:	1004943a 	slli	r2,r2,16
    aa30:	e006d43a 	srli	r3,fp,16
    aa34:	bda3383a 	mul	r17,r23,r22
    aa38:	10c4b03a 	or	r2,r2,r3
    aa3c:	1440042e 	bgeu	r2,r17,aa50 <__udivdi3+0x254>
    aa40:	1405883a 	add	r2,r2,r16
    aa44:	b5bfffc4 	addi	r22,r22,-1
    aa48:	14000136 	bltu	r2,r16,aa50 <__udivdi3+0x254>
    aa4c:	1440d536 	bltu	r2,r17,ada4 <__udivdi3+0x5a8>
    aa50:	1463c83a 	sub	r17,r2,r17
    aa54:	8809883a 	mov	r4,r17
    aa58:	a80b883a 	mov	r5,r21
    aa5c:	000b7680 	call	b768 <__udivsi3>
    aa60:	8809883a 	mov	r4,r17
    aa64:	a80b883a 	mov	r5,r21
    aa68:	1029883a 	mov	r20,r2
    aa6c:	000b7700 	call	b770 <__umodsi3>
    aa70:	1004943a 	slli	r2,r2,16
    aa74:	bd09383a 	mul	r4,r23,r20
    aa78:	e0ffffcc 	andi	r3,fp,65535
    aa7c:	10c4b03a 	or	r2,r2,r3
    aa80:	1100042e 	bgeu	r2,r4,aa94 <__udivdi3+0x298>
    aa84:	8085883a 	add	r2,r16,r2
    aa88:	a53fffc4 	addi	r20,r20,-1
    aa8c:	14000136 	bltu	r2,r16,aa94 <__udivdi3+0x298>
    aa90:	1100c736 	bltu	r2,r4,adb0 <__udivdi3+0x5b4>
    aa94:	b004943a 	slli	r2,r22,16
    aa98:	0009883a 	mov	r4,zero
    aa9c:	a084b03a 	or	r2,r20,r2
    aaa0:	003fb706 	br	a980 <__udivdi3+0x184>
    aaa4:	00804034 	movhi	r2,256
    aaa8:	10bfffc4 	addi	r2,r2,-1
    aaac:	11c0a436 	bltu	r2,r7,ad40 <__udivdi3+0x544>
    aab0:	01400404 	movi	r5,16
    aab4:	2805883a 	mov	r2,r5
    aab8:	003fa406 	br	a94c <__udivdi3+0x150>
    aabc:	0005883a 	mov	r2,zero
    aac0:	0009883a 	mov	r4,zero
    aac4:	003fae06 	br	a980 <__udivdi3+0x184>
    aac8:	00804034 	movhi	r2,256
    aacc:	10bfffc4 	addi	r2,r2,-1
    aad0:	1400a136 	bltu	r2,r16,ad58 <__udivdi3+0x55c>
    aad4:	01400404 	movi	r5,16
    aad8:	2805883a 	mov	r2,r5
    aadc:	003f6006 	br	a860 <__udivdi3+0x64>
    aae0:	01000044 	movi	r4,1
    aae4:	000b883a 	mov	r5,zero
    aae8:	000b7680 	call	b768 <__udivsi3>
    aaec:	1021883a 	mov	r16,r2
    aaf0:	00bfffd4 	movui	r2,65535
    aaf4:	143ff436 	bltu	r2,r16,aac8 <__udivdi3+0x2cc>
    aaf8:	003f5506 	br	a850 <__udivdi3+0x54>
    aafc:	00804034 	movhi	r2,256
    ab00:	10bfffc4 	addi	r2,r2,-1
    ab04:	12009a36 	bltu	r2,r8,ad70 <__udivdi3+0x574>
    ab08:	01400404 	movi	r5,16
    ab0c:	2805883a 	mov	r2,r5
    ab10:	003fae06 	br	a9cc <__udivdi3+0x1d0>
    ab14:	3dc5c83a 	sub	r2,r7,r23
    ab18:	35c8983a 	sll	r4,r6,r23
    ab1c:	8086d83a 	srl	r3,r16,r2
    ab20:	a0a2d83a 	srl	r17,r20,r2
    ab24:	e084d83a 	srl	r2,fp,r2
    ab28:	20eab03a 	or	r21,r4,r3
    ab2c:	a82cd43a 	srli	r22,r21,16
    ab30:	a5c6983a 	sll	r3,r20,r23
    ab34:	8809883a 	mov	r4,r17
    ab38:	b00b883a 	mov	r5,r22
    ab3c:	1886b03a 	or	r3,r3,r2
    ab40:	d8c00215 	stw	r3,8(sp)
    ab44:	000b7680 	call	b768 <__udivsi3>
    ab48:	8809883a 	mov	r4,r17
    ab4c:	b00b883a 	mov	r5,r22
    ab50:	1029883a 	mov	r20,r2
    ab54:	000b7700 	call	b770 <__umodsi3>
    ab58:	a8ffffcc 	andi	r3,r21,65535
    ab5c:	d8c00515 	stw	r3,20(sp)
    ab60:	d9000217 	ldw	r4,8(sp)
    ab64:	d9400517 	ldw	r5,20(sp)
    ab68:	1004943a 	slli	r2,r2,16
    ab6c:	2006d43a 	srli	r3,r4,16
    ab70:	85e0983a 	sll	r16,r16,r23
    ab74:	2d23383a 	mul	r17,r5,r20
    ab78:	10c4b03a 	or	r2,r2,r3
    ab7c:	dc000015 	stw	r16,0(sp)
    ab80:	1440032e 	bgeu	r2,r17,ab90 <__udivdi3+0x394>
    ab84:	1545883a 	add	r2,r2,r21
    ab88:	a53fffc4 	addi	r20,r20,-1
    ab8c:	15407f2e 	bgeu	r2,r21,ad8c <__udivdi3+0x590>
    ab90:	1463c83a 	sub	r17,r2,r17
    ab94:	8809883a 	mov	r4,r17
    ab98:	b00b883a 	mov	r5,r22
    ab9c:	000b7680 	call	b768 <__udivsi3>
    aba0:	8809883a 	mov	r4,r17
    aba4:	b00b883a 	mov	r5,r22
    aba8:	1021883a 	mov	r16,r2
    abac:	000b7700 	call	b770 <__umodsi3>
    abb0:	d8c00517 	ldw	r3,20(sp)
    abb4:	d9000217 	ldw	r4,8(sp)
    abb8:	1004943a 	slli	r2,r2,16
    abbc:	1c0f383a 	mul	r7,r3,r16
    abc0:	20ffffcc 	andi	r3,r4,65535
    abc4:	10e2b03a 	or	r17,r2,r3
    abc8:	89c0032e 	bgeu	r17,r7,abd8 <__udivdi3+0x3dc>
    abcc:	8d63883a 	add	r17,r17,r21
    abd0:	843fffc4 	addi	r16,r16,-1
    abd4:	8d40692e 	bgeu	r17,r21,ad7c <__udivdi3+0x580>
    abd8:	a008943a 	slli	r4,r20,16
    abdc:	d9400017 	ldw	r5,0(sp)
    abe0:	89e3c83a 	sub	r17,r17,r7
    abe4:	8110b03a 	or	r8,r16,r4
    abe8:	280cd43a 	srli	r6,r5,16
    abec:	28ffffcc 	andi	r3,r5,65535
    abf0:	40bfffcc 	andi	r2,r8,65535
    abf4:	400ad43a 	srli	r5,r8,16
    abf8:	10d3383a 	mul	r9,r2,r3
    abfc:	1185383a 	mul	r2,r2,r6
    ac00:	28c7383a 	mul	r3,r5,r3
    ac04:	4808d43a 	srli	r4,r9,16
    ac08:	298b383a 	mul	r5,r5,r6
    ac0c:	10c5883a 	add	r2,r2,r3
    ac10:	2089883a 	add	r4,r4,r2
    ac14:	20c0022e 	bgeu	r4,r3,ac20 <__udivdi3+0x424>
    ac18:	00800074 	movhi	r2,1
    ac1c:	288b883a 	add	r5,r5,r2
    ac20:	2004d43a 	srli	r2,r4,16
    ac24:	288b883a 	add	r5,r5,r2
    ac28:	89403f36 	bltu	r17,r5,ad28 <__udivdi3+0x52c>
    ac2c:	89403926 	beq	r17,r5,ad14 <__udivdi3+0x518>
    ac30:	4005883a 	mov	r2,r8
    ac34:	0009883a 	mov	r4,zero
    ac38:	003f5106 	br	a980 <__udivdi3+0x184>
    ac3c:	85a0983a 	sll	r16,r16,r22
    ac40:	3585c83a 	sub	r2,r6,r22
    ac44:	a0a2d83a 	srl	r17,r20,r2
    ac48:	802ad43a 	srli	r21,r16,16
    ac4c:	e084d83a 	srl	r2,fp,r2
    ac50:	a586983a 	sll	r3,r20,r22
    ac54:	8809883a 	mov	r4,r17
    ac58:	a80b883a 	mov	r5,r21
    ac5c:	1886b03a 	or	r3,r3,r2
    ac60:	d8c00115 	stw	r3,4(sp)
    ac64:	000b7680 	call	b768 <__udivsi3>
    ac68:	8809883a 	mov	r4,r17
    ac6c:	a80b883a 	mov	r5,r21
    ac70:	d8800415 	stw	r2,16(sp)
    ac74:	000b7700 	call	b770 <__umodsi3>
    ac78:	d9000117 	ldw	r4,4(sp)
    ac7c:	d9400417 	ldw	r5,16(sp)
    ac80:	1004943a 	slli	r2,r2,16
    ac84:	85ffffcc 	andi	r23,r16,65535
    ac88:	2006d43a 	srli	r3,r4,16
    ac8c:	b963383a 	mul	r17,r23,r5
    ac90:	10c4b03a 	or	r2,r2,r3
    ac94:	1440042e 	bgeu	r2,r17,aca8 <__udivdi3+0x4ac>
    ac98:	297fffc4 	addi	r5,r5,-1
    ac9c:	1405883a 	add	r2,r2,r16
    aca0:	d9400415 	stw	r5,16(sp)
    aca4:	1400442e 	bgeu	r2,r16,adb8 <__udivdi3+0x5bc>
    aca8:	1463c83a 	sub	r17,r2,r17
    acac:	8809883a 	mov	r4,r17
    acb0:	a80b883a 	mov	r5,r21
    acb4:	000b7680 	call	b768 <__udivsi3>
    acb8:	8809883a 	mov	r4,r17
    acbc:	a80b883a 	mov	r5,r21
    acc0:	1029883a 	mov	r20,r2
    acc4:	000b7700 	call	b770 <__umodsi3>
    acc8:	d9400117 	ldw	r5,4(sp)
    accc:	1004943a 	slli	r2,r2,16
    acd0:	bd09383a 	mul	r4,r23,r20
    acd4:	28ffffcc 	andi	r3,r5,65535
    acd8:	10c6b03a 	or	r3,r2,r3
    acdc:	1900062e 	bgeu	r3,r4,acf8 <__udivdi3+0x4fc>
    ace0:	1c07883a 	add	r3,r3,r16
    ace4:	a53fffc4 	addi	r20,r20,-1
    ace8:	1c000336 	bltu	r3,r16,acf8 <__udivdi3+0x4fc>
    acec:	1900022e 	bgeu	r3,r4,acf8 <__udivdi3+0x4fc>
    acf0:	a53fffc4 	addi	r20,r20,-1
    acf4:	1c07883a 	add	r3,r3,r16
    acf8:	d9400417 	ldw	r5,16(sp)
    acfc:	e5b8983a 	sll	fp,fp,r22
    ad00:	1923c83a 	sub	r17,r3,r4
    ad04:	2804943a 	slli	r2,r5,16
    ad08:	a0a8b03a 	or	r20,r20,r2
    ad0c:	dd000315 	stw	r20,12(sp)
    ad10:	003ee106 	br	a898 <__udivdi3+0x9c>
    ad14:	2004943a 	slli	r2,r4,16
    ad18:	e5c8983a 	sll	r4,fp,r23
    ad1c:	48ffffcc 	andi	r3,r9,65535
    ad20:	10c5883a 	add	r2,r2,r3
    ad24:	20bfc22e 	bgeu	r4,r2,ac30 <__udivdi3+0x434>
    ad28:	40bfffc4 	addi	r2,r8,-1
    ad2c:	0009883a 	mov	r4,zero
    ad30:	003f1306 	br	a980 <__udivdi3+0x184>
    ad34:	01400204 	movi	r5,8
    ad38:	2805883a 	mov	r2,r5
    ad3c:	003f0306 	br	a94c <__udivdi3+0x150>
    ad40:	01400604 	movi	r5,24
    ad44:	2805883a 	mov	r2,r5
    ad48:	003f0006 	br	a94c <__udivdi3+0x150>
    ad4c:	01400204 	movi	r5,8
    ad50:	2805883a 	mov	r2,r5
    ad54:	003ec206 	br	a860 <__udivdi3+0x64>
    ad58:	01400604 	movi	r5,24
    ad5c:	2805883a 	mov	r2,r5
    ad60:	003ebf06 	br	a860 <__udivdi3+0x64>
    ad64:	01400204 	movi	r5,8
    ad68:	2805883a 	mov	r2,r5
    ad6c:	003f1706 	br	a9cc <__udivdi3+0x1d0>
    ad70:	01400604 	movi	r5,24
    ad74:	2805883a 	mov	r2,r5
    ad78:	003f1406 	br	a9cc <__udivdi3+0x1d0>
    ad7c:	89ff962e 	bgeu	r17,r7,abd8 <__udivdi3+0x3dc>
    ad80:	8d63883a 	add	r17,r17,r21
    ad84:	843fffc4 	addi	r16,r16,-1
    ad88:	003f9306 	br	abd8 <__udivdi3+0x3dc>
    ad8c:	147f802e 	bgeu	r2,r17,ab90 <__udivdi3+0x394>
    ad90:	a53fffc4 	addi	r20,r20,-1
    ad94:	1545883a 	add	r2,r2,r21
    ad98:	003f7d06 	br	ab90 <__udivdi3+0x394>
    ad9c:	a53fffc4 	addi	r20,r20,-1
    ada0:	003ede06 	br	a91c <__udivdi3+0x120>
    ada4:	b5bfffc4 	addi	r22,r22,-1
    ada8:	1405883a 	add	r2,r2,r16
    adac:	003f2806 	br	aa50 <__udivdi3+0x254>
    adb0:	a53fffc4 	addi	r20,r20,-1
    adb4:	003f3706 	br	aa94 <__udivdi3+0x298>
    adb8:	147fbb2e 	bgeu	r2,r17,aca8 <__udivdi3+0x4ac>
    adbc:	297fffc4 	addi	r5,r5,-1
    adc0:	1405883a 	add	r2,r2,r16
    adc4:	d9400415 	stw	r5,16(sp)
    adc8:	003fb706 	br	aca8 <__udivdi3+0x4ac>
    adcc:	b5bfffc4 	addi	r22,r22,-1
    add0:	1405883a 	add	r2,r2,r16
    add4:	003ec006 	br	a8d8 <__udivdi3+0xdc>

0000add8 <__umoddi3>:
    add8:	defff104 	addi	sp,sp,-60
    addc:	dd800b15 	stw	r22,44(sp)
    ade0:	dd000915 	stw	r20,36(sp)
    ade4:	dc000515 	stw	r16,20(sp)
    ade8:	dfc00e15 	stw	ra,56(sp)
    adec:	df000d15 	stw	fp,52(sp)
    adf0:	ddc00c15 	stw	r23,48(sp)
    adf4:	dd400a15 	stw	r21,40(sp)
    adf8:	dcc00815 	stw	r19,32(sp)
    adfc:	dc800715 	stw	r18,28(sp)
    ae00:	dc400615 	stw	r17,24(sp)
    ae04:	3021883a 	mov	r16,r6
    ae08:	202d883a 	mov	r22,r4
    ae0c:	2829883a 	mov	r20,r5
    ae10:	38002b1e 	bne	r7,zero,aec0 <__umoddi3+0xe8>
    ae14:	29805036 	bltu	r5,r6,af58 <__umoddi3+0x180>
    ae18:	30008a26 	beq	r6,zero,b044 <__umoddi3+0x26c>
    ae1c:	00bfffd4 	movui	r2,65535
    ae20:	14008236 	bltu	r2,r16,b02c <__umoddi3+0x254>
    ae24:	00803fc4 	movi	r2,255
    ae28:	14013636 	bltu	r2,r16,b304 <__umoddi3+0x52c>
    ae2c:	000b883a 	mov	r5,zero
    ae30:	0005883a 	mov	r2,zero
    ae34:	8084d83a 	srl	r2,r16,r2
    ae38:	01000074 	movhi	r4,1
    ae3c:	213a6604 	addi	r4,r4,-5736
    ae40:	01800804 	movi	r6,32
    ae44:	1105883a 	add	r2,r2,r4
    ae48:	10c00003 	ldbu	r3,0(r2)
    ae4c:	28c7883a 	add	r3,r5,r3
    ae50:	30efc83a 	sub	r23,r6,r3
    ae54:	b800941e 	bne	r23,zero,b0a8 <__umoddi3+0x2d0>
    ae58:	802ad43a 	srli	r21,r16,16
    ae5c:	a423c83a 	sub	r17,r20,r16
    ae60:	0039883a 	mov	fp,zero
    ae64:	853fffcc 	andi	r20,r16,65535
    ae68:	8809883a 	mov	r4,r17
    ae6c:	a80b883a 	mov	r5,r21
    ae70:	000b7680 	call	b768 <__udivsi3>
    ae74:	8809883a 	mov	r4,r17
    ae78:	a80b883a 	mov	r5,r21
    ae7c:	a0a3383a 	mul	r17,r20,r2
    ae80:	000b7700 	call	b770 <__umodsi3>
    ae84:	1004943a 	slli	r2,r2,16
    ae88:	b006d43a 	srli	r3,r22,16
    ae8c:	10c4b03a 	or	r2,r2,r3
    ae90:	1440032e 	bgeu	r2,r17,aea0 <__umoddi3+0xc8>
    ae94:	1405883a 	add	r2,r2,r16
    ae98:	14000136 	bltu	r2,r16,aea0 <__umoddi3+0xc8>
    ae9c:	14413536 	bltu	r2,r17,b374 <__umoddi3+0x59c>
    aea0:	1463c83a 	sub	r17,r2,r17
    aea4:	8809883a 	mov	r4,r17
    aea8:	a80b883a 	mov	r5,r21
    aeac:	000b7680 	call	b768 <__udivsi3>
    aeb0:	8809883a 	mov	r4,r17
    aeb4:	a0a3383a 	mul	r17,r20,r2
    aeb8:	a80b883a 	mov	r5,r21
    aebc:	00004d06 	br	aff4 <__umoddi3+0x21c>
    aec0:	380d883a 	mov	r6,r7
    aec4:	29c0102e 	bgeu	r5,r7,af08 <__umoddi3+0x130>
    aec8:	2011883a 	mov	r8,r4
    aecc:	2813883a 	mov	r9,r5
    aed0:	4005883a 	mov	r2,r8
    aed4:	4807883a 	mov	r3,r9
    aed8:	dfc00e17 	ldw	ra,56(sp)
    aedc:	df000d17 	ldw	fp,52(sp)
    aee0:	ddc00c17 	ldw	r23,48(sp)
    aee4:	dd800b17 	ldw	r22,44(sp)
    aee8:	dd400a17 	ldw	r21,40(sp)
    aeec:	dd000917 	ldw	r20,36(sp)
    aef0:	dcc00817 	ldw	r19,32(sp)
    aef4:	dc800717 	ldw	r18,28(sp)
    aef8:	dc400617 	ldw	r17,24(sp)
    aefc:	dc000517 	ldw	r16,20(sp)
    af00:	dec00f04 	addi	sp,sp,60
    af04:	f800283a 	ret
    af08:	00bfffd4 	movui	r2,65535
    af0c:	11c05a36 	bltu	r2,r7,b078 <__umoddi3+0x2a0>
    af10:	00803fc4 	movi	r2,255
    af14:	11c0fe36 	bltu	r2,r7,b310 <__umoddi3+0x538>
    af18:	000b883a 	mov	r5,zero
    af1c:	0005883a 	mov	r2,zero
    af20:	3084d83a 	srl	r2,r6,r2
    af24:	01000074 	movhi	r4,1
    af28:	213a6604 	addi	r4,r4,-5736
    af2c:	01c00804 	movi	r7,32
    af30:	1105883a 	add	r2,r2,r4
    af34:	10c00003 	ldbu	r3,0(r2)
    af38:	28c7883a 	add	r3,r5,r3
    af3c:	38ebc83a 	sub	r21,r7,r3
    af40:	a800851e 	bne	r21,zero,b158 <__umoddi3+0x380>
    af44:	35005236 	bltu	r6,r20,b090 <__umoddi3+0x2b8>
    af48:	b400512e 	bgeu	r22,r16,b090 <__umoddi3+0x2b8>
    af4c:	b011883a 	mov	r8,r22
    af50:	a013883a 	mov	r9,r20
    af54:	003fde06 	br	aed0 <__umoddi3+0xf8>
    af58:	00bfffd4 	movui	r2,65535
    af5c:	11804036 	bltu	r2,r6,b060 <__umoddi3+0x288>
    af60:	00803fc4 	movi	r2,255
    af64:	1180ed36 	bltu	r2,r6,b31c <__umoddi3+0x544>
    af68:	000b883a 	mov	r5,zero
    af6c:	0005883a 	mov	r2,zero
    af70:	8084d83a 	srl	r2,r16,r2
    af74:	01000074 	movhi	r4,1
    af78:	213a6604 	addi	r4,r4,-5736
    af7c:	01800804 	movi	r6,32
    af80:	1105883a 	add	r2,r2,r4
    af84:	10c00003 	ldbu	r3,0(r2)
    af88:	28c7883a 	add	r3,r5,r3
    af8c:	30c7c83a 	sub	r3,r6,r3
    af90:	1800bf1e 	bne	r3,zero,b290 <__umoddi3+0x4b8>
    af94:	0039883a 	mov	fp,zero
    af98:	802ad43a 	srli	r21,r16,16
    af9c:	a009883a 	mov	r4,r20
    afa0:	85ffffcc 	andi	r23,r16,65535
    afa4:	a80b883a 	mov	r5,r21
    afa8:	000b7680 	call	b768 <__udivsi3>
    afac:	a009883a 	mov	r4,r20
    afb0:	a80b883a 	mov	r5,r21
    afb4:	b8a3383a 	mul	r17,r23,r2
    afb8:	000b7700 	call	b770 <__umodsi3>
    afbc:	1004943a 	slli	r2,r2,16
    afc0:	b006d43a 	srli	r3,r22,16
    afc4:	10c4b03a 	or	r2,r2,r3
    afc8:	1440032e 	bgeu	r2,r17,afd8 <__umoddi3+0x200>
    afcc:	1405883a 	add	r2,r2,r16
    afd0:	14000136 	bltu	r2,r16,afd8 <__umoddi3+0x200>
    afd4:	1440e536 	bltu	r2,r17,b36c <__umoddi3+0x594>
    afd8:	1463c83a 	sub	r17,r2,r17
    afdc:	8809883a 	mov	r4,r17
    afe0:	a80b883a 	mov	r5,r21
    afe4:	000b7680 	call	b768 <__udivsi3>
    afe8:	8809883a 	mov	r4,r17
    afec:	b8a3383a 	mul	r17,r23,r2
    aff0:	a80b883a 	mov	r5,r21
    aff4:	000b7700 	call	b770 <__umodsi3>
    aff8:	1004943a 	slli	r2,r2,16
    affc:	b0ffffcc 	andi	r3,r22,65535
    b000:	10c4b03a 	or	r2,r2,r3
    b004:	1440042e 	bgeu	r2,r17,b018 <__umoddi3+0x240>
    b008:	1405883a 	add	r2,r2,r16
    b00c:	14000236 	bltu	r2,r16,b018 <__umoddi3+0x240>
    b010:	1440012e 	bgeu	r2,r17,b018 <__umoddi3+0x240>
    b014:	1405883a 	add	r2,r2,r16
    b018:	1445c83a 	sub	r2,r2,r17
    b01c:	1724d83a 	srl	r18,r2,fp
    b020:	0013883a 	mov	r9,zero
    b024:	9011883a 	mov	r8,r18
    b028:	003fa906 	br	aed0 <__umoddi3+0xf8>
    b02c:	00804034 	movhi	r2,256
    b030:	10bfffc4 	addi	r2,r2,-1
    b034:	1400b036 	bltu	r2,r16,b2f8 <__umoddi3+0x520>
    b038:	01400404 	movi	r5,16
    b03c:	2805883a 	mov	r2,r5
    b040:	003f7c06 	br	ae34 <__umoddi3+0x5c>
    b044:	01000044 	movi	r4,1
    b048:	000b883a 	mov	r5,zero
    b04c:	000b7680 	call	b768 <__udivsi3>
    b050:	1021883a 	mov	r16,r2
    b054:	00bfffd4 	movui	r2,65535
    b058:	143ff436 	bltu	r2,r16,b02c <__umoddi3+0x254>
    b05c:	003f7106 	br	ae24 <__umoddi3+0x4c>
    b060:	00804034 	movhi	r2,256
    b064:	10bfffc4 	addi	r2,r2,-1
    b068:	1180af36 	bltu	r2,r6,b328 <__umoddi3+0x550>
    b06c:	01400404 	movi	r5,16
    b070:	2805883a 	mov	r2,r5
    b074:	003fbe06 	br	af70 <__umoddi3+0x198>
    b078:	00804034 	movhi	r2,256
    b07c:	10bfffc4 	addi	r2,r2,-1
    b080:	11c0ac36 	bltu	r2,r7,b334 <__umoddi3+0x55c>
    b084:	01400404 	movi	r5,16
    b088:	2805883a 	mov	r2,r5
    b08c:	003fa406 	br	af20 <__umoddi3+0x148>
    b090:	b409c83a 	sub	r4,r22,r16
    b094:	b105803a 	cmpltu	r2,r22,r4
    b098:	a187c83a 	sub	r3,r20,r6
    b09c:	18a9c83a 	sub	r20,r3,r2
    b0a0:	202d883a 	mov	r22,r4
    b0a4:	003fa906 	br	af4c <__umoddi3+0x174>
    b0a8:	85e0983a 	sll	r16,r16,r23
    b0ac:	35c5c83a 	sub	r2,r6,r23
    b0b0:	a0a2d83a 	srl	r17,r20,r2
    b0b4:	802ad43a 	srli	r21,r16,16
    b0b8:	b084d83a 	srl	r2,r22,r2
    b0bc:	a5c6983a 	sll	r3,r20,r23
    b0c0:	8809883a 	mov	r4,r17
    b0c4:	a80b883a 	mov	r5,r21
    b0c8:	1886b03a 	or	r3,r3,r2
    b0cc:	d8c00115 	stw	r3,4(sp)
    b0d0:	853fffcc 	andi	r20,r16,65535
    b0d4:	000b7680 	call	b768 <__udivsi3>
    b0d8:	8809883a 	mov	r4,r17
    b0dc:	a80b883a 	mov	r5,r21
    b0e0:	a0a3383a 	mul	r17,r20,r2
    b0e4:	000b7700 	call	b770 <__umodsi3>
    b0e8:	d9000117 	ldw	r4,4(sp)
    b0ec:	1004943a 	slli	r2,r2,16
    b0f0:	b839883a 	mov	fp,r23
    b0f4:	2006d43a 	srli	r3,r4,16
    b0f8:	10c4b03a 	or	r2,r2,r3
    b0fc:	1440022e 	bgeu	r2,r17,b108 <__umoddi3+0x330>
    b100:	1405883a 	add	r2,r2,r16
    b104:	1400962e 	bgeu	r2,r16,b360 <__umoddi3+0x588>
    b108:	1463c83a 	sub	r17,r2,r17
    b10c:	8809883a 	mov	r4,r17
    b110:	a80b883a 	mov	r5,r21
    b114:	000b7680 	call	b768 <__udivsi3>
    b118:	8809883a 	mov	r4,r17
    b11c:	a80b883a 	mov	r5,r21
    b120:	a0a3383a 	mul	r17,r20,r2
    b124:	000b7700 	call	b770 <__umodsi3>
    b128:	d9400117 	ldw	r5,4(sp)
    b12c:	1004943a 	slli	r2,r2,16
    b130:	28ffffcc 	andi	r3,r5,65535
    b134:	10c4b03a 	or	r2,r2,r3
    b138:	1440042e 	bgeu	r2,r17,b14c <__umoddi3+0x374>
    b13c:	1405883a 	add	r2,r2,r16
    b140:	14000236 	bltu	r2,r16,b14c <__umoddi3+0x374>
    b144:	1440012e 	bgeu	r2,r17,b14c <__umoddi3+0x374>
    b148:	1405883a 	add	r2,r2,r16
    b14c:	b5ec983a 	sll	r22,r22,r23
    b150:	1463c83a 	sub	r17,r2,r17
    b154:	003f4406 	br	ae68 <__umoddi3+0x90>
    b158:	3d4fc83a 	sub	r7,r7,r21
    b15c:	3546983a 	sll	r3,r6,r21
    b160:	81c4d83a 	srl	r2,r16,r7
    b164:	a1e2d83a 	srl	r17,r20,r7
    b168:	a54c983a 	sll	r6,r20,r21
    b16c:	18aeb03a 	or	r23,r3,r2
    b170:	b828d43a 	srli	r20,r23,16
    b174:	b1c4d83a 	srl	r2,r22,r7
    b178:	8809883a 	mov	r4,r17
    b17c:	a00b883a 	mov	r5,r20
    b180:	308cb03a 	or	r6,r6,r2
    b184:	d9c00315 	stw	r7,12(sp)
    b188:	d9800215 	stw	r6,8(sp)
    b18c:	000b7680 	call	b768 <__udivsi3>
    b190:	8809883a 	mov	r4,r17
    b194:	a00b883a 	mov	r5,r20
    b198:	1039883a 	mov	fp,r2
    b19c:	000b7700 	call	b770 <__umodsi3>
    b1a0:	b8ffffcc 	andi	r3,r23,65535
    b1a4:	d8c00415 	stw	r3,16(sp)
    b1a8:	d9000217 	ldw	r4,8(sp)
    b1ac:	d9400417 	ldw	r5,16(sp)
    b1b0:	1004943a 	slli	r2,r2,16
    b1b4:	2006d43a 	srli	r3,r4,16
    b1b8:	8560983a 	sll	r16,r16,r21
    b1bc:	2f23383a 	mul	r17,r5,fp
    b1c0:	10c4b03a 	or	r2,r2,r3
    b1c4:	dc000015 	stw	r16,0(sp)
    b1c8:	b56c983a 	sll	r22,r22,r21
    b1cc:	1440032e 	bgeu	r2,r17,b1dc <__umoddi3+0x404>
    b1d0:	15c5883a 	add	r2,r2,r23
    b1d4:	e73fffc4 	addi	fp,fp,-1
    b1d8:	15c05d2e 	bgeu	r2,r23,b350 <__umoddi3+0x578>
    b1dc:	1463c83a 	sub	r17,r2,r17
    b1e0:	8809883a 	mov	r4,r17
    b1e4:	a00b883a 	mov	r5,r20
    b1e8:	000b7680 	call	b768 <__udivsi3>
    b1ec:	8809883a 	mov	r4,r17
    b1f0:	a00b883a 	mov	r5,r20
    b1f4:	1021883a 	mov	r16,r2
    b1f8:	000b7700 	call	b770 <__umodsi3>
    b1fc:	d8c00417 	ldw	r3,16(sp)
    b200:	d9000217 	ldw	r4,8(sp)
    b204:	1004943a 	slli	r2,r2,16
    b208:	1c23383a 	mul	r17,r3,r16
    b20c:	20ffffcc 	andi	r3,r4,65535
    b210:	10ceb03a 	or	r7,r2,r3
    b214:	3c40032e 	bgeu	r7,r17,b224 <__umoddi3+0x44c>
    b218:	3dcf883a 	add	r7,r7,r23
    b21c:	843fffc4 	addi	r16,r16,-1
    b220:	3dc0472e 	bgeu	r7,r23,b340 <__umoddi3+0x568>
    b224:	e004943a 	slli	r2,fp,16
    b228:	d9400017 	ldw	r5,0(sp)
    b22c:	3c4fc83a 	sub	r7,r7,r17
    b230:	8084b03a 	or	r2,r16,r2
    b234:	28ffffcc 	andi	r3,r5,65535
    b238:	280cd43a 	srli	r6,r5,16
    b23c:	100ad43a 	srli	r5,r2,16
    b240:	10bfffcc 	andi	r2,r2,65535
    b244:	10d1383a 	mul	r8,r2,r3
    b248:	28c7383a 	mul	r3,r5,r3
    b24c:	1185383a 	mul	r2,r2,r6
    b250:	4008d43a 	srli	r4,r8,16
    b254:	298b383a 	mul	r5,r5,r6
    b258:	10c5883a 	add	r2,r2,r3
    b25c:	2089883a 	add	r4,r4,r2
    b260:	20c0022e 	bgeu	r4,r3,b26c <__umoddi3+0x494>
    b264:	00800074 	movhi	r2,1
    b268:	288b883a 	add	r5,r5,r2
    b26c:	2004d43a 	srli	r2,r4,16
    b270:	2008943a 	slli	r4,r4,16
    b274:	40ffffcc 	andi	r3,r8,65535
    b278:	288b883a 	add	r5,r5,r2
    b27c:	20c9883a 	add	r4,r4,r3
    b280:	39400b36 	bltu	r7,r5,b2b0 <__umoddi3+0x4d8>
    b284:	39403d26 	beq	r7,r5,b37c <__umoddi3+0x5a4>
    b288:	394bc83a 	sub	r5,r7,r5
    b28c:	00000f06 	br	b2cc <__umoddi3+0x4f4>
    b290:	30c5c83a 	sub	r2,r6,r3
    b294:	1839883a 	mov	fp,r3
    b298:	b084d83a 	srl	r2,r22,r2
    b29c:	a0c6983a 	sll	r3,r20,r3
    b2a0:	8720983a 	sll	r16,r16,fp
    b2a4:	b72c983a 	sll	r22,r22,fp
    b2a8:	18a8b03a 	or	r20,r3,r2
    b2ac:	003f3a06 	br	af98 <__umoddi3+0x1c0>
    b2b0:	d8c00017 	ldw	r3,0(sp)
    b2b4:	20c5c83a 	sub	r2,r4,r3
    b2b8:	2089803a 	cmpltu	r4,r4,r2
    b2bc:	2dc7c83a 	sub	r3,r5,r23
    b2c0:	1907c83a 	sub	r3,r3,r4
    b2c4:	38cbc83a 	sub	r5,r7,r3
    b2c8:	1009883a 	mov	r4,r2
    b2cc:	b105c83a 	sub	r2,r22,r4
    b2d0:	b087803a 	cmpltu	r3,r22,r2
    b2d4:	28c7c83a 	sub	r3,r5,r3
    b2d8:	d9400317 	ldw	r5,12(sp)
    b2dc:	1544d83a 	srl	r2,r2,r21
    b2e0:	1948983a 	sll	r4,r3,r5
    b2e4:	1d46d83a 	srl	r3,r3,r21
    b2e8:	20a4b03a 	or	r18,r4,r2
    b2ec:	9011883a 	mov	r8,r18
    b2f0:	1813883a 	mov	r9,r3
    b2f4:	003ef606 	br	aed0 <__umoddi3+0xf8>
    b2f8:	01400604 	movi	r5,24
    b2fc:	2805883a 	mov	r2,r5
    b300:	003ecc06 	br	ae34 <__umoddi3+0x5c>
    b304:	01400204 	movi	r5,8
    b308:	2805883a 	mov	r2,r5
    b30c:	003ec906 	br	ae34 <__umoddi3+0x5c>
    b310:	01400204 	movi	r5,8
    b314:	2805883a 	mov	r2,r5
    b318:	003f0106 	br	af20 <__umoddi3+0x148>
    b31c:	01400204 	movi	r5,8
    b320:	2805883a 	mov	r2,r5
    b324:	003f1206 	br	af70 <__umoddi3+0x198>
    b328:	01400604 	movi	r5,24
    b32c:	2805883a 	mov	r2,r5
    b330:	003f0f06 	br	af70 <__umoddi3+0x198>
    b334:	01400604 	movi	r5,24
    b338:	2805883a 	mov	r2,r5
    b33c:	003ef806 	br	af20 <__umoddi3+0x148>
    b340:	3c7fb82e 	bgeu	r7,r17,b224 <__umoddi3+0x44c>
    b344:	843fffc4 	addi	r16,r16,-1
    b348:	3dcf883a 	add	r7,r7,r23
    b34c:	003fb506 	br	b224 <__umoddi3+0x44c>
    b350:	147fa22e 	bgeu	r2,r17,b1dc <__umoddi3+0x404>
    b354:	e73fffc4 	addi	fp,fp,-1
    b358:	15c5883a 	add	r2,r2,r23
    b35c:	003f9f06 	br	b1dc <__umoddi3+0x404>
    b360:	147f692e 	bgeu	r2,r17,b108 <__umoddi3+0x330>
    b364:	1405883a 	add	r2,r2,r16
    b368:	003f6706 	br	b108 <__umoddi3+0x330>
    b36c:	1405883a 	add	r2,r2,r16
    b370:	003f1906 	br	afd8 <__umoddi3+0x200>
    b374:	1405883a 	add	r2,r2,r16
    b378:	003ec906 	br	aea0 <__umoddi3+0xc8>
    b37c:	b13fcc36 	bltu	r22,r4,b2b0 <__umoddi3+0x4d8>
    b380:	000b883a 	mov	r5,zero
    b384:	003fd106 	br	b2cc <__umoddi3+0x4f4>

0000b388 <__eqdf2>:
    b388:	deffef04 	addi	sp,sp,-68
    b38c:	dc400f15 	stw	r17,60(sp)
    b390:	dc400404 	addi	r17,sp,16
    b394:	2005883a 	mov	r2,r4
    b398:	2807883a 	mov	r3,r5
    b39c:	dc000e15 	stw	r16,56(sp)
    b3a0:	d809883a 	mov	r4,sp
    b3a4:	880b883a 	mov	r5,r17
    b3a8:	dc000904 	addi	r16,sp,36
    b3ac:	d8c00115 	stw	r3,4(sp)
    b3b0:	d8800015 	stw	r2,0(sp)
    b3b4:	d9800215 	stw	r6,8(sp)
    b3b8:	dfc01015 	stw	ra,64(sp)
    b3bc:	d9c00315 	stw	r7,12(sp)
    b3c0:	00032e00 	call	32e0 <__unpack_d>
    b3c4:	d9000204 	addi	r4,sp,8
    b3c8:	800b883a 	mov	r5,r16
    b3cc:	00032e00 	call	32e0 <__unpack_d>
    b3d0:	d8800417 	ldw	r2,16(sp)
    b3d4:	00c00044 	movi	r3,1
    b3d8:	180d883a 	mov	r6,r3
    b3dc:	1880062e 	bgeu	r3,r2,b3f8 <__eqdf2+0x70>
    b3e0:	d8800917 	ldw	r2,36(sp)
    b3e4:	8809883a 	mov	r4,r17
    b3e8:	800b883a 	mov	r5,r16
    b3ec:	1880022e 	bgeu	r3,r2,b3f8 <__eqdf2+0x70>
    b3f0:	00034180 	call	3418 <__fpcmp_parts_d>
    b3f4:	100d883a 	mov	r6,r2
    b3f8:	3005883a 	mov	r2,r6
    b3fc:	dfc01017 	ldw	ra,64(sp)
    b400:	dc400f17 	ldw	r17,60(sp)
    b404:	dc000e17 	ldw	r16,56(sp)
    b408:	dec01104 	addi	sp,sp,68
    b40c:	f800283a 	ret

0000b410 <__nedf2>:
    b410:	deffef04 	addi	sp,sp,-68
    b414:	dc400f15 	stw	r17,60(sp)
    b418:	dc400404 	addi	r17,sp,16
    b41c:	2005883a 	mov	r2,r4
    b420:	2807883a 	mov	r3,r5
    b424:	dc000e15 	stw	r16,56(sp)
    b428:	d809883a 	mov	r4,sp
    b42c:	880b883a 	mov	r5,r17
    b430:	dc000904 	addi	r16,sp,36
    b434:	d8c00115 	stw	r3,4(sp)
    b438:	d8800015 	stw	r2,0(sp)
    b43c:	d9800215 	stw	r6,8(sp)
    b440:	dfc01015 	stw	ra,64(sp)
    b444:	d9c00315 	stw	r7,12(sp)
    b448:	00032e00 	call	32e0 <__unpack_d>
    b44c:	d9000204 	addi	r4,sp,8
    b450:	800b883a 	mov	r5,r16
    b454:	00032e00 	call	32e0 <__unpack_d>
    b458:	d8800417 	ldw	r2,16(sp)
    b45c:	00c00044 	movi	r3,1
    b460:	180d883a 	mov	r6,r3
    b464:	1880062e 	bgeu	r3,r2,b480 <__nedf2+0x70>
    b468:	d8800917 	ldw	r2,36(sp)
    b46c:	8809883a 	mov	r4,r17
    b470:	800b883a 	mov	r5,r16
    b474:	1880022e 	bgeu	r3,r2,b480 <__nedf2+0x70>
    b478:	00034180 	call	3418 <__fpcmp_parts_d>
    b47c:	100d883a 	mov	r6,r2
    b480:	3005883a 	mov	r2,r6
    b484:	dfc01017 	ldw	ra,64(sp)
    b488:	dc400f17 	ldw	r17,60(sp)
    b48c:	dc000e17 	ldw	r16,56(sp)
    b490:	dec01104 	addi	sp,sp,68
    b494:	f800283a 	ret

0000b498 <__floatunsidf>:
    b498:	defff204 	addi	sp,sp,-56
    b49c:	dfc00d15 	stw	ra,52(sp)
    b4a0:	ddc00c15 	stw	r23,48(sp)
    b4a4:	dd800b15 	stw	r22,44(sp)
    b4a8:	dd400a15 	stw	r21,40(sp)
    b4ac:	dd000915 	stw	r20,36(sp)
    b4b0:	dcc00815 	stw	r19,32(sp)
    b4b4:	dc800715 	stw	r18,28(sp)
    b4b8:	dc400615 	stw	r17,24(sp)
    b4bc:	dc000515 	stw	r16,20(sp)
    b4c0:	d8000115 	stw	zero,4(sp)
    b4c4:	20000f1e 	bne	r4,zero,b504 <__floatunsidf+0x6c>
    b4c8:	00800084 	movi	r2,2
    b4cc:	d8800015 	stw	r2,0(sp)
    b4d0:	d809883a 	mov	r4,sp
    b4d4:	0002fcc0 	call	2fcc <__pack_d>
    b4d8:	dfc00d17 	ldw	ra,52(sp)
    b4dc:	ddc00c17 	ldw	r23,48(sp)
    b4e0:	dd800b17 	ldw	r22,44(sp)
    b4e4:	dd400a17 	ldw	r21,40(sp)
    b4e8:	dd000917 	ldw	r20,36(sp)
    b4ec:	dcc00817 	ldw	r19,32(sp)
    b4f0:	dc800717 	ldw	r18,28(sp)
    b4f4:	dc400617 	ldw	r17,24(sp)
    b4f8:	dc000517 	ldw	r16,20(sp)
    b4fc:	dec00e04 	addi	sp,sp,56
    b500:	f800283a 	ret
    b504:	008000c4 	movi	r2,3
    b508:	00c00f04 	movi	r3,60
    b50c:	002f883a 	mov	r23,zero
    b510:	202d883a 	mov	r22,r4
    b514:	d8800015 	stw	r2,0(sp)
    b518:	d8c00215 	stw	r3,8(sp)
    b51c:	d9000315 	stw	r4,12(sp)
    b520:	ddc00415 	stw	r23,16(sp)
    b524:	0002f4c0 	call	2f4c <__clzsi2>
    b528:	12400744 	addi	r9,r2,29
    b52c:	48000b16 	blt	r9,zero,b55c <__floatunsidf+0xc4>
    b530:	483fe726 	beq	r9,zero,b4d0 <__floatunsidf+0x38>
    b534:	10bfff44 	addi	r2,r2,-3
    b538:	10002e16 	blt	r2,zero,b5f4 <__floatunsidf+0x15c>
    b53c:	b0a2983a 	sll	r17,r22,r2
    b540:	0021883a 	mov	r16,zero
    b544:	d8800217 	ldw	r2,8(sp)
    b548:	dc400415 	stw	r17,16(sp)
    b54c:	dc000315 	stw	r16,12(sp)
    b550:	1245c83a 	sub	r2,r2,r9
    b554:	d8800215 	stw	r2,8(sp)
    b558:	003fdd06 	br	b4d0 <__floatunsidf+0x38>
    b55c:	0255c83a 	sub	r10,zero,r9
    b560:	51bff804 	addi	r6,r10,-32
    b564:	30001b16 	blt	r6,zero,b5d4 <__floatunsidf+0x13c>
    b568:	b9a8d83a 	srl	r20,r23,r6
    b56c:	002b883a 	mov	r21,zero
    b570:	000f883a 	mov	r7,zero
    b574:	01000044 	movi	r4,1
    b578:	0011883a 	mov	r8,zero
    b57c:	30002516 	blt	r6,zero,b614 <__floatunsidf+0x17c>
    b580:	21a6983a 	sll	r19,r4,r6
    b584:	0025883a 	mov	r18,zero
    b588:	00bfffc4 	movi	r2,-1
    b58c:	9089883a 	add	r4,r18,r2
    b590:	988b883a 	add	r5,r19,r2
    b594:	248d803a 	cmpltu	r6,r4,r18
    b598:	314b883a 	add	r5,r6,r5
    b59c:	b104703a 	and	r2,r22,r4
    b5a0:	b946703a 	and	r3,r23,r5
    b5a4:	10c4b03a 	or	r2,r2,r3
    b5a8:	10000226 	beq	r2,zero,b5b4 <__floatunsidf+0x11c>
    b5ac:	01c00044 	movi	r7,1
    b5b0:	0011883a 	mov	r8,zero
    b5b4:	d9000217 	ldw	r4,8(sp)
    b5b8:	a1c4b03a 	or	r2,r20,r7
    b5bc:	aa06b03a 	or	r3,r21,r8
    b5c0:	2249c83a 	sub	r4,r4,r9
    b5c4:	d8c00415 	stw	r3,16(sp)
    b5c8:	d9000215 	stw	r4,8(sp)
    b5cc:	d8800315 	stw	r2,12(sp)
    b5d0:	003fbf06 	br	b4d0 <__floatunsidf+0x38>
    b5d4:	bdc7883a 	add	r3,r23,r23
    b5d8:	008007c4 	movi	r2,31
    b5dc:	1285c83a 	sub	r2,r2,r10
    b5e0:	1886983a 	sll	r3,r3,r2
    b5e4:	b2a8d83a 	srl	r20,r22,r10
    b5e8:	baaad83a 	srl	r21,r23,r10
    b5ec:	1d28b03a 	or	r20,r3,r20
    b5f0:	003fdf06 	br	b570 <__floatunsidf+0xd8>
    b5f4:	b006d07a 	srli	r3,r22,1
    b5f8:	008007c4 	movi	r2,31
    b5fc:	1245c83a 	sub	r2,r2,r9
    b600:	1886d83a 	srl	r3,r3,r2
    b604:	ba62983a 	sll	r17,r23,r9
    b608:	b260983a 	sll	r16,r22,r9
    b60c:	1c62b03a 	or	r17,r3,r17
    b610:	003fcc06 	br	b544 <__floatunsidf+0xac>
    b614:	2006d07a 	srli	r3,r4,1
    b618:	008007c4 	movi	r2,31
    b61c:	1285c83a 	sub	r2,r2,r10
    b620:	18a6d83a 	srl	r19,r3,r2
    b624:	22a4983a 	sll	r18,r4,r10
    b628:	003fd706 	br	b588 <__floatunsidf+0xf0>

0000b62c <udivmodsi4>:
    b62c:	29001b2e 	bgeu	r5,r4,b69c <udivmodsi4+0x70>
    b630:	28001a16 	blt	r5,zero,b69c <udivmodsi4+0x70>
    b634:	00800044 	movi	r2,1
    b638:	0007883a 	mov	r3,zero
    b63c:	01c007c4 	movi	r7,31
    b640:	00000306 	br	b650 <udivmodsi4+0x24>
    b644:	19c01326 	beq	r3,r7,b694 <udivmodsi4+0x68>
    b648:	18c00044 	addi	r3,r3,1
    b64c:	28000416 	blt	r5,zero,b660 <udivmodsi4+0x34>
    b650:	294b883a 	add	r5,r5,r5
    b654:	1085883a 	add	r2,r2,r2
    b658:	293ffa36 	bltu	r5,r4,b644 <udivmodsi4+0x18>
    b65c:	10000d26 	beq	r2,zero,b694 <udivmodsi4+0x68>
    b660:	0007883a 	mov	r3,zero
    b664:	21400236 	bltu	r4,r5,b670 <udivmodsi4+0x44>
    b668:	2149c83a 	sub	r4,r4,r5
    b66c:	1886b03a 	or	r3,r3,r2
    b670:	1004d07a 	srli	r2,r2,1
    b674:	280ad07a 	srli	r5,r5,1
    b678:	103ffa1e 	bne	r2,zero,b664 <udivmodsi4+0x38>
    b67c:	30000226 	beq	r6,zero,b688 <udivmodsi4+0x5c>
    b680:	2005883a 	mov	r2,r4
    b684:	f800283a 	ret
    b688:	1809883a 	mov	r4,r3
    b68c:	2005883a 	mov	r2,r4
    b690:	f800283a 	ret
    b694:	0007883a 	mov	r3,zero
    b698:	003ff806 	br	b67c <udivmodsi4+0x50>
    b69c:	00800044 	movi	r2,1
    b6a0:	0007883a 	mov	r3,zero
    b6a4:	003fef06 	br	b664 <udivmodsi4+0x38>

0000b6a8 <__divsi3>:
    b6a8:	defffe04 	addi	sp,sp,-8
    b6ac:	dc000015 	stw	r16,0(sp)
    b6b0:	dfc00115 	stw	ra,4(sp)
    b6b4:	0021883a 	mov	r16,zero
    b6b8:	20000c16 	blt	r4,zero,b6ec <__divsi3+0x44>
    b6bc:	000d883a 	mov	r6,zero
    b6c0:	28000e16 	blt	r5,zero,b6fc <__divsi3+0x54>
    b6c4:	000b62c0 	call	b62c <udivmodsi4>
    b6c8:	1007883a 	mov	r3,r2
    b6cc:	8005003a 	cmpeq	r2,r16,zero
    b6d0:	1000011e 	bne	r2,zero,b6d8 <__divsi3+0x30>
    b6d4:	00c7c83a 	sub	r3,zero,r3
    b6d8:	1805883a 	mov	r2,r3
    b6dc:	dfc00117 	ldw	ra,4(sp)
    b6e0:	dc000017 	ldw	r16,0(sp)
    b6e4:	dec00204 	addi	sp,sp,8
    b6e8:	f800283a 	ret
    b6ec:	0109c83a 	sub	r4,zero,r4
    b6f0:	04000044 	movi	r16,1
    b6f4:	000d883a 	mov	r6,zero
    b6f8:	283ff20e 	bge	r5,zero,b6c4 <__divsi3+0x1c>
    b6fc:	014bc83a 	sub	r5,zero,r5
    b700:	8021003a 	cmpeq	r16,r16,zero
    b704:	003fef06 	br	b6c4 <__divsi3+0x1c>

0000b708 <__modsi3>:
    b708:	deffff04 	addi	sp,sp,-4
    b70c:	dfc00015 	stw	ra,0(sp)
    b710:	01800044 	movi	r6,1
    b714:	2807883a 	mov	r3,r5
    b718:	20000416 	blt	r4,zero,b72c <__modsi3+0x24>
    b71c:	28000c16 	blt	r5,zero,b750 <__modsi3+0x48>
    b720:	dfc00017 	ldw	ra,0(sp)
    b724:	dec00104 	addi	sp,sp,4
    b728:	000b62c1 	jmpi	b62c <udivmodsi4>
    b72c:	0109c83a 	sub	r4,zero,r4
    b730:	28000b16 	blt	r5,zero,b760 <__modsi3+0x58>
    b734:	180b883a 	mov	r5,r3
    b738:	01800044 	movi	r6,1
    b73c:	000b62c0 	call	b62c <udivmodsi4>
    b740:	0085c83a 	sub	r2,zero,r2
    b744:	dfc00017 	ldw	ra,0(sp)
    b748:	dec00104 	addi	sp,sp,4
    b74c:	f800283a 	ret
    b750:	014bc83a 	sub	r5,zero,r5
    b754:	dfc00017 	ldw	ra,0(sp)
    b758:	dec00104 	addi	sp,sp,4
    b75c:	000b62c1 	jmpi	b62c <udivmodsi4>
    b760:	0147c83a 	sub	r3,zero,r5
    b764:	003ff306 	br	b734 <__modsi3+0x2c>

0000b768 <__udivsi3>:
    b768:	000d883a 	mov	r6,zero
    b76c:	000b62c1 	jmpi	b62c <udivmodsi4>

0000b770 <__umodsi3>:
    b770:	01800044 	movi	r6,1
    b774:	000b62c1 	jmpi	b62c <udivmodsi4>

0000b778 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b778:	defffd04 	addi	sp,sp,-12
    b77c:	dfc00215 	stw	ra,8(sp)
    b780:	dc400115 	stw	r17,4(sp)
    b784:	dc000015 	stw	r16,0(sp)
    b788:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b78c:	20001c16 	blt	r4,zero,b800 <close+0x88>
    b790:	20c00324 	muli	r3,r4,12
    b794:	00800074 	movhi	r2,1
    b798:	10bda004 	addi	r2,r2,-2432
    b79c:	1889883a 	add	r4,r3,r2

  if (fd)
    b7a0:	20001726 	beq	r4,zero,b800 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b7a4:	20800017 	ldw	r2,0(r4)
    b7a8:	10800417 	ldw	r2,16(r2)
    b7ac:	10002126 	beq	r2,zero,b834 <close+0xbc>
    b7b0:	103ee83a 	callr	r2
    b7b4:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b7b8:	8009883a 	mov	r4,r16
    b7bc:	000bed00 	call	bed0 <alt_release_fd>
    if (rval < 0)
    b7c0:	88000216 	blt	r17,zero,b7cc <close+0x54>
    b7c4:	0005883a 	mov	r2,zero
    b7c8:	00001d06 	br	b840 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    b7cc:	00800074 	movhi	r2,1
    b7d0:	10835504 	addi	r2,r2,3412
    b7d4:	10800017 	ldw	r2,0(r2)
    b7d8:	1000031e 	bne	r2,zero,b7e8 <close+0x70>
    b7dc:	00c00074 	movhi	r3,1
    b7e0:	18cb3a04 	addi	r3,r3,11496
    b7e4:	00000206 	br	b7f0 <close+0x78>
    b7e8:	103ee83a 	callr	r2
    b7ec:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    b7f0:	0445c83a 	sub	r2,zero,r17
    b7f4:	18800015 	stw	r2,0(r3)
    b7f8:	00bfffc4 	movi	r2,-1
    b7fc:	00001006 	br	b840 <close+0xc8>
    b800:	00800074 	movhi	r2,1
    b804:	10835504 	addi	r2,r2,3412
    b808:	10800017 	ldw	r2,0(r2)
    b80c:	1000031e 	bne	r2,zero,b81c <close+0xa4>
    b810:	00c00074 	movhi	r3,1
    b814:	18cb3a04 	addi	r3,r3,11496
    b818:	00000206 	br	b824 <close+0xac>
    b81c:	103ee83a 	callr	r2
    b820:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b824:	00801444 	movi	r2,81
    b828:	18800015 	stw	r2,0(r3)
    b82c:	00bfffc4 	movi	r2,-1
    b830:	00000306 	br	b840 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b834:	8009883a 	mov	r4,r16
    b838:	000bed00 	call	bed0 <alt_release_fd>
    b83c:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    b840:	dfc00217 	ldw	ra,8(sp)
    b844:	dc400117 	ldw	r17,4(sp)
    b848:	dc000017 	ldw	r16,0(sp)
    b84c:	dec00304 	addi	sp,sp,12
    b850:	f800283a 	ret

0000b854 <alt_dcache_flush>:
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b854:	f800283a 	ret

0000b858 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    b858:	3005883a 	mov	r2,r6
    b85c:	f800283a 	ret

0000b860 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b860:	deffff04 	addi	sp,sp,-4
    b864:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b868:	20000e16 	blt	r4,zero,b8a4 <fstat+0x44>
    b86c:	20c00324 	muli	r3,r4,12
    b870:	00800074 	movhi	r2,1
    b874:	10bda004 	addi	r2,r2,-2432
    b878:	1889883a 	add	r4,r3,r2
  
  if (fd)
    b87c:	20000926 	beq	r4,zero,b8a4 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b880:	20800017 	ldw	r2,0(r4)
    b884:	10800817 	ldw	r2,32(r2)
    b888:	10000226 	beq	r2,zero,b894 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    b88c:	103ee83a 	callr	r2
    b890:	00001006 	br	b8d4 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b894:	00880004 	movi	r2,8192
    b898:	28800115 	stw	r2,4(r5)
    b89c:	0005883a 	mov	r2,zero
    b8a0:	00000c06 	br	b8d4 <fstat+0x74>
    b8a4:	00800074 	movhi	r2,1
    b8a8:	10835504 	addi	r2,r2,3412
    b8ac:	10800017 	ldw	r2,0(r2)
    b8b0:	1000031e 	bne	r2,zero,b8c0 <fstat+0x60>
    b8b4:	00c00074 	movhi	r3,1
    b8b8:	18cb3a04 	addi	r3,r3,11496
    b8bc:	00000206 	br	b8c8 <fstat+0x68>
    b8c0:	103ee83a 	callr	r2
    b8c4:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b8c8:	00801444 	movi	r2,81
    b8cc:	18800015 	stw	r2,0(r3)
    b8d0:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    b8d4:	dfc00017 	ldw	ra,0(sp)
    b8d8:	dec00104 	addi	sp,sp,4
    b8dc:	f800283a 	ret

0000b8e0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    b8e0:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b8e4:	008007c4 	movi	r2,31
    b8e8:	1100022e 	bgeu	r2,r4,b8f4 <alt_irq_register+0x14>
    b8ec:	00bffa84 	movi	r2,-22
    b8f0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b8f4:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b8f8:	013fff84 	movi	r4,-2
    b8fc:	4104703a 	and	r2,r8,r4
    b900:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    b904:	380490fa 	slli	r2,r7,3
    b908:	00c00234 	movhi	r3,8
    b90c:	18ccca04 	addi	r3,r3,13096
    b910:	10c5883a 	add	r2,r2,r3
    b914:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    b918:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    b91c:	30000e26 	beq	r6,zero,b958 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b920:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b924:	2904703a 	and	r2,r5,r4
    b928:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    b92c:	00c00074 	movhi	r3,1
    b930:	18cb3e04 	addi	r3,r3,11512
    b934:	19000017 	ldw	r4,0(r3)
    b938:	00800044 	movi	r2,1
    b93c:	11c4983a 	sll	r2,r2,r7
    b940:	1104b03a 	or	r2,r2,r4
    b944:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b948:	18800017 	ldw	r2,0(r3)
    b94c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b950:	2801703a 	wrctl	status,r5
    b954:	00000e06 	br	b990 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b958:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b95c:	00bfff84 	movi	r2,-2
    b960:	2884703a 	and	r2,r5,r2
    b964:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    b968:	00c00074 	movhi	r3,1
    b96c:	18cb3e04 	addi	r3,r3,11512
    b970:	19000017 	ldw	r4,0(r3)
    b974:	00bfff84 	movi	r2,-2
    b978:	11c4183a 	rol	r2,r2,r7
    b97c:	1104703a 	and	r2,r2,r4
    b980:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b984:	18800017 	ldw	r2,0(r3)
    b988:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b98c:	2801703a 	wrctl	status,r5
    b990:	4001703a 	wrctl	status,r8
    b994:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    b998:	f800283a 	ret

0000b99c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b99c:	defff004 	addi	sp,sp,-64
    b9a0:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b9a4:	20000f16 	blt	r4,zero,b9e4 <isatty+0x48>
    b9a8:	20c00324 	muli	r3,r4,12
    b9ac:	00800074 	movhi	r2,1
    b9b0:	10bda004 	addi	r2,r2,-2432
    b9b4:	1885883a 	add	r2,r3,r2
  
  if (fd)
    b9b8:	10000a26 	beq	r2,zero,b9e4 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b9bc:	10800017 	ldw	r2,0(r2)
    b9c0:	10800817 	ldw	r2,32(r2)
    b9c4:	1000021e 	bne	r2,zero,b9d0 <isatty+0x34>
    b9c8:	00800044 	movi	r2,1
    b9cc:	00001106 	br	ba14 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b9d0:	d80b883a 	mov	r5,sp
    b9d4:	000b8600 	call	b860 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b9d8:	d8800117 	ldw	r2,4(sp)
    b9dc:	10880020 	cmpeqi	r2,r2,8192
    b9e0:	00000c06 	br	ba14 <isatty+0x78>
    b9e4:	00800074 	movhi	r2,1
    b9e8:	10835504 	addi	r2,r2,3412
    b9ec:	10800017 	ldw	r2,0(r2)
    b9f0:	1000031e 	bne	r2,zero,ba00 <isatty+0x64>
    b9f4:	00c00074 	movhi	r3,1
    b9f8:	18cb3a04 	addi	r3,r3,11496
    b9fc:	00000206 	br	ba08 <isatty+0x6c>
    ba00:	103ee83a 	callr	r2
    ba04:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ba08:	00801444 	movi	r2,81
    ba0c:	18800015 	stw	r2,0(r3)
    ba10:	0005883a 	mov	r2,zero
    return 0;
  }
}
    ba14:	dfc00f17 	ldw	ra,60(sp)
    ba18:	dec01004 	addi	sp,sp,64
    ba1c:	f800283a 	ret

0000ba20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ba20:	deffff04 	addi	sp,sp,-4
    ba24:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ba28:	01000074 	movhi	r4,1
    ba2c:	21035c04 	addi	r4,r4,3440
    ba30:	00c00074 	movhi	r3,1
    ba34:	18fb9104 	addi	r3,r3,-4540

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    ba38:	20c00926 	beq	r4,r3,ba60 <alt_load+0x40>
    ba3c:	01800074 	movhi	r6,1
    ba40:	31835c04 	addi	r6,r6,3440
  {
    while( to != end )
    ba44:	19800626 	beq	r3,r6,ba60 <alt_load+0x40>
    ba48:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    ba4c:	20800017 	ldw	r2,0(r4)
    ba50:	18800015 	stw	r2,0(r3)
    ba54:	1947883a 	add	r3,r3,r5
    ba58:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ba5c:	30fffb1e 	bne	r6,r3,ba4c <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ba60:	01000034 	movhi	r4,0
    ba64:	21000804 	addi	r4,r4,32
    ba68:	00c00034 	movhi	r3,0
    ba6c:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    ba70:	20c00926 	beq	r4,r3,ba98 <alt_load+0x78>
    ba74:	01800034 	movhi	r6,0
    ba78:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
    ba7c:	19800626 	beq	r3,r6,ba98 <alt_load+0x78>
    ba80:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    ba84:	20800017 	ldw	r2,0(r4)
    ba88:	18800015 	stw	r2,0(r3)
    ba8c:	1947883a 	add	r3,r3,r5
    ba90:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ba94:	30fffb1e 	bne	r6,r3,ba84 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ba98:	01000074 	movhi	r4,1
    ba9c:	2139fd04 	addi	r4,r4,-6156
    baa0:	00c00074 	movhi	r3,1
    baa4:	18f9fd04 	addi	r3,r3,-6156

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    baa8:	20c00926 	beq	r4,r3,bad0 <alt_load+0xb0>
    baac:	01800074 	movhi	r6,1
    bab0:	31bb9104 	addi	r6,r6,-4540
  {
    while( to != end )
    bab4:	19800626 	beq	r3,r6,bad0 <alt_load+0xb0>
    bab8:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    babc:	20800017 	ldw	r2,0(r4)
    bac0:	18800015 	stw	r2,0(r3)
    bac4:	1947883a 	add	r3,r3,r5
    bac8:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    bacc:	30fffb1e 	bne	r6,r3,babc <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    bad0:	000dc540 	call	dc54 <alt_dcache_flush_all>
  alt_icache_flush_all();
    bad4:	000dd380 	call	dd38 <alt_icache_flush_all>
}
    bad8:	dfc00017 	ldw	ra,0(sp)
    badc:	dec00104 	addi	sp,sp,4
    bae0:	f800283a 	ret

0000bae4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    bae4:	defffe04 	addi	sp,sp,-8
    bae8:	dfc00115 	stw	ra,4(sp)
    baec:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    baf0:	2000020e 	bge	r4,zero,bafc <lseek+0x18>
    baf4:	043febc4 	movi	r16,-81
    baf8:	00000d06 	br	bb30 <lseek+0x4c>
    bafc:	20c00324 	muli	r3,r4,12
    bb00:	00800074 	movhi	r2,1
    bb04:	10bda004 	addi	r2,r2,-2432
    bb08:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    bb0c:	20001526 	beq	r4,zero,bb64 <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    bb10:	20800017 	ldw	r2,0(r4)
    bb14:	10800717 	ldw	r2,28(r2)
    bb18:	1000021e 	bne	r2,zero,bb24 <lseek+0x40>
    bb1c:	043fde84 	movi	r16,-134
    bb20:	00000306 	br	bb30 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    bb24:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    bb28:	1000100e 	bge	r2,zero,bb6c <lseek+0x88>
    bb2c:	1021883a 	mov	r16,r2
    bb30:	00800074 	movhi	r2,1
    bb34:	10835504 	addi	r2,r2,3412
    bb38:	10800017 	ldw	r2,0(r2)
    bb3c:	1000031e 	bne	r2,zero,bb4c <lseek+0x68>
    bb40:	00c00074 	movhi	r3,1
    bb44:	18cb3a04 	addi	r3,r3,11496
    bb48:	00000206 	br	bb54 <lseek+0x70>
    bb4c:	103ee83a 	callr	r2
    bb50:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    bb54:	0405c83a 	sub	r2,zero,r16
    bb58:	18800015 	stw	r2,0(r3)
    bb5c:	00bfffc4 	movi	r2,-1
    bb60:	00000206 	br	bb6c <lseek+0x88>
    bb64:	043febc4 	movi	r16,-81
    bb68:	003ff106 	br	bb30 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    bb6c:	dfc00117 	ldw	ra,4(sp)
    bb70:	dc000017 	ldw	r16,0(sp)
    bb74:	dec00204 	addi	sp,sp,8
    bb78:	f800283a 	ret

0000bb7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    bb7c:	defffe04 	addi	sp,sp,-8
    bb80:	dfc00115 	stw	ra,4(sp)
    bb84:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    bb88:	0009883a 	mov	r4,zero
    bb8c:	000c0380 	call	c038 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    bb90:	000c0580 	call	c058 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    bb94:	01800074 	movhi	r6,1
    bb98:	31bb2704 	addi	r6,r6,-4964
    bb9c:	3009883a 	mov	r4,r6
    bba0:	300b883a 	mov	r5,r6
    bba4:	000ddbc0 	call	ddbc <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    bba8:	d1281a17 	ldw	r4,-24472(gp)
    bbac:	d1681b17 	ldw	r5,-24468(gp)
    bbb0:	d1a81c17 	ldw	r6,-24464(gp)
    bbb4:	000189c0 	call	189c <main>
    bbb8:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    bbbc:	01000044 	movi	r4,1
    bbc0:	000b7780 	call	b778 <close>
  exit (result);
    bbc4:	8009883a 	mov	r4,r16
    bbc8:	000e2440 	call	e244 <exit>

0000bbcc <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    bbcc:	f800283a 	ret

0000bbd0 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    bbd0:	f800283a 	ret

0000bbd4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    bbd4:	defff804 	addi	sp,sp,-32
    bbd8:	dfc00415 	stw	ra,16(sp)
    bbdc:	dc800315 	stw	r18,12(sp)
    bbe0:	dc400215 	stw	r17,8(sp)
    bbe4:	dc000115 	stw	r16,4(sp)
    bbe8:	d9400515 	stw	r5,20(sp)
    bbec:	d9800615 	stw	r6,24(sp)
    bbf0:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    bbf4:	d8800504 	addi	r2,sp,20
    bbf8:	d8800015 	stw	r2,0(sp)
    bbfc:	2023883a 	mov	r17,r4
    bc00:	00005d06 	br	bd78 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    bc04:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    bc08:	21003fcc 	andi	r4,r4,255
    bc0c:	2100201c 	xori	r4,r4,128
    bc10:	213fe004 	addi	r4,r4,-128
    bc14:	00800944 	movi	r2,37
    bc18:	20800226 	beq	r4,r2,bc24 <alt_printf+0x50>
        {
            alt_putchar(c);
    bc1c:	000bdb00 	call	bdb0 <alt_putchar>
    bc20:	00005506 	br	bd78 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    bc24:	89400003 	ldbu	r5,0(r17)
    bc28:	8c400044 	addi	r17,r17,1
    bc2c:	29003fcc 	andi	r4,r5,255
    bc30:	2100201c 	xori	r4,r4,128
    bc34:	213fe004 	addi	r4,r4,-128
    bc38:	20005726 	beq	r4,zero,bd98 <alt_printf+0x1c4>
            {
                if (c == '%')
    bc3c:	00800944 	movi	r2,37
    bc40:	2080021e 	bne	r4,r2,bc4c <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    bc44:	000bdb00 	call	bdb0 <alt_putchar>
    bc48:	00004b06 	br	bd78 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
    bc4c:	28c03fcc 	andi	r3,r5,255
    bc50:	18c0201c 	xori	r3,r3,128
    bc54:	18ffe004 	addi	r3,r3,-128
    bc58:	008018c4 	movi	r2,99
    bc5c:	1880061e 	bne	r3,r2,bc78 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
    bc60:	d8c00017 	ldw	r3,0(sp)
    bc64:	18800104 	addi	r2,r3,4
    bc68:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    bc6c:	19000017 	ldw	r4,0(r3)
    bc70:	000bdb00 	call	bdb0 <alt_putchar>
    bc74:	00004006 	br	bd78 <alt_printf+0x1a4>
                }
                else if (c == 'x')
    bc78:	28c03fcc 	andi	r3,r5,255
    bc7c:	18c0201c 	xori	r3,r3,128
    bc80:	18ffe004 	addi	r3,r3,-128
    bc84:	00801e04 	movi	r2,120
    bc88:	1880231e 	bne	r3,r2,bd18 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    bc8c:	d8c00017 	ldw	r3,0(sp)
    bc90:	18800104 	addi	r2,r3,4
    bc94:	d8800015 	stw	r2,0(sp)
    bc98:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    bc9c:	90000326 	beq	r18,zero,bcac <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    bca0:	90bc002c 	andhi	r2,r18,61440
    bca4:	10000426 	beq	r2,zero,bcb8 <alt_printf+0xe4>
    bca8:	00003906 	br	bd90 <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    bcac:	01000c04 	movi	r4,48
    bcb0:	000bdb00 	call	bdb0 <alt_putchar>
    bcb4:	00003006 	br	bd78 <alt_printf+0x1a4>
                        continue;
    bcb8:	04000704 	movi	r16,28
    bcbc:	013fff04 	movi	r4,-4
    bcc0:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    bcc4:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    bcc8:	1c04983a 	sll	r2,r3,r16
    bccc:	9084703a 	and	r2,r18,r2
    bcd0:	103ffc26 	beq	r2,zero,bcc4 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    bcd4:	80002816 	blt	r16,zero,bd78 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    bcd8:	008003c4 	movi	r2,15
    bcdc:	1404983a 	sll	r2,r2,r16
    bce0:	9084703a 	and	r2,r18,r2
    bce4:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    bce8:	00800244 	movi	r2,9
    bcec:	10c00236 	bltu	r2,r3,bcf8 <alt_printf+0x124>
                            c = '0' + digit;
    bcf0:	19000c04 	addi	r4,r3,48
    bcf4:	00000106 	br	bcfc <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
    bcf8:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    bcfc:	21003fcc 	andi	r4,r4,255
    bd00:	2100201c 	xori	r4,r4,128
    bd04:	213fe004 	addi	r4,r4,-128
    bd08:	000bdb00 	call	bdb0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    bd0c:	843fff04 	addi	r16,r16,-4
    bd10:	80001916 	blt	r16,zero,bd78 <alt_printf+0x1a4>
    bd14:	003ff006 	br	bcd8 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    bd18:	28c03fcc 	andi	r3,r5,255
    bd1c:	18c0201c 	xori	r3,r3,128
    bd20:	18ffe004 	addi	r3,r3,-128
    bd24:	00801cc4 	movi	r2,115
    bd28:	1880131e 	bne	r3,r2,bd78 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    bd2c:	d8800017 	ldw	r2,0(sp)
    bd30:	10c00104 	addi	r3,r2,4
    bd34:	d8c00015 	stw	r3,0(sp)
    bd38:	14000017 	ldw	r16,0(r2)

                    while(*s)
    bd3c:	81000003 	ldbu	r4,0(r16)
    bd40:	20803fcc 	andi	r2,r4,255
    bd44:	1080201c 	xori	r2,r2,128
    bd48:	10bfe004 	addi	r2,r2,-128
    bd4c:	10000a26 	beq	r2,zero,bd78 <alt_printf+0x1a4>
                      alt_putchar(*s++);
    bd50:	84000044 	addi	r16,r16,1
    bd54:	21003fcc 	andi	r4,r4,255
    bd58:	2100201c 	xori	r4,r4,128
    bd5c:	213fe004 	addi	r4,r4,-128
    bd60:	000bdb00 	call	bdb0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    bd64:	81000003 	ldbu	r4,0(r16)
    bd68:	20803fcc 	andi	r2,r4,255
    bd6c:	1080201c 	xori	r2,r2,128
    bd70:	10bfe004 	addi	r2,r2,-128
    bd74:	103ff61e 	bne	r2,zero,bd50 <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    bd78:	89000003 	ldbu	r4,0(r17)
    bd7c:	20803fcc 	andi	r2,r4,255
    bd80:	1080201c 	xori	r2,r2,128
    bd84:	10bfe004 	addi	r2,r2,-128
    bd88:	103f9e1e 	bne	r2,zero,bc04 <alt_printf+0x30>
    bd8c:	00000206 	br	bd98 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
    bd90:	04000704 	movi	r16,28
    bd94:	003fd006 	br	bcd8 <alt_printf+0x104>
    bd98:	dfc00417 	ldw	ra,16(sp)
    bd9c:	dc800317 	ldw	r18,12(sp)
    bda0:	dc400217 	ldw	r17,8(sp)
    bda4:	dc000117 	ldw	r16,4(sp)
    bda8:	dec00804 	addi	sp,sp,32
    bdac:	f800283a 	ret

0000bdb0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    bdb0:	deffff04 	addi	sp,sp,-4
    bdb4:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    bdb8:	00800074 	movhi	r2,1
    bdbc:	10834a04 	addi	r2,r2,3368
    bdc0:	10800017 	ldw	r2,0(r2)
    bdc4:	11400217 	ldw	r5,8(r2)
    bdc8:	000e2f00 	call	e2f0 <putc>
#endif
}
    bdcc:	dfc00017 	ldw	ra,0(sp)
    bdd0:	dec00104 	addi	sp,sp,4
    bdd4:	f800283a 	ret

0000bdd8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    bdd8:	defffe04 	addi	sp,sp,-8
    bddc:	dfc00115 	stw	ra,4(sp)
    bde0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bde4:	20002916 	blt	r4,zero,be8c <read+0xb4>
    bde8:	20c00324 	muli	r3,r4,12
    bdec:	00800074 	movhi	r2,1
    bdf0:	10bda004 	addi	r2,r2,-2432
    bdf4:	1889883a 	add	r4,r3,r2
  
  if (fd)
    bdf8:	20002426 	beq	r4,zero,be8c <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    bdfc:	20800217 	ldw	r2,8(r4)
    be00:	108000cc 	andi	r2,r2,3
    be04:	00c00044 	movi	r3,1
    be08:	10c01326 	beq	r2,r3,be58 <read+0x80>
    be0c:	20800017 	ldw	r2,0(r4)
    be10:	10800517 	ldw	r2,20(r2)
    be14:	10001026 	beq	r2,zero,be58 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    be18:	103ee83a 	callr	r2
    be1c:	1021883a 	mov	r16,r2
    be20:	1000260e 	bge	r2,zero,bebc <read+0xe4>
    be24:	00800074 	movhi	r2,1
    be28:	10835504 	addi	r2,r2,3412
    be2c:	10800017 	ldw	r2,0(r2)
    be30:	1000031e 	bne	r2,zero,be40 <read+0x68>
    be34:	00c00074 	movhi	r3,1
    be38:	18cb3a04 	addi	r3,r3,11496
    be3c:	00000206 	br	be48 <read+0x70>
    be40:	103ee83a 	callr	r2
    be44:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    be48:	0405c83a 	sub	r2,zero,r16
    be4c:	18800015 	stw	r2,0(r3)
    be50:	043fffc4 	movi	r16,-1
    be54:	00001906 	br	bebc <read+0xe4>
    be58:	00800074 	movhi	r2,1
    be5c:	10835504 	addi	r2,r2,3412
    be60:	10800017 	ldw	r2,0(r2)
    be64:	1000031e 	bne	r2,zero,be74 <read+0x9c>
    be68:	00c00074 	movhi	r3,1
    be6c:	18cb3a04 	addi	r3,r3,11496
    be70:	00000206 	br	be7c <read+0xa4>
    be74:	103ee83a 	callr	r2
    be78:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    be7c:	00800344 	movi	r2,13
    be80:	18800015 	stw	r2,0(r3)
    be84:	043fffc4 	movi	r16,-1
    be88:	00000c06 	br	bebc <read+0xe4>
    be8c:	00800074 	movhi	r2,1
    be90:	10835504 	addi	r2,r2,3412
    be94:	10800017 	ldw	r2,0(r2)
    be98:	1000031e 	bne	r2,zero,bea8 <read+0xd0>
    be9c:	00c00074 	movhi	r3,1
    bea0:	18cb3a04 	addi	r3,r3,11496
    bea4:	00000206 	br	beb0 <read+0xd8>
    bea8:	103ee83a 	callr	r2
    beac:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    beb0:	00801444 	movi	r2,81
    beb4:	18800015 	stw	r2,0(r3)
    beb8:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    bebc:	8005883a 	mov	r2,r16
    bec0:	dfc00117 	ldw	ra,4(sp)
    bec4:	dc000017 	ldw	r16,0(sp)
    bec8:	dec00204 	addi	sp,sp,8
    becc:	f800283a 	ret

0000bed0 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    bed0:	00800084 	movi	r2,2
    bed4:	1100060e 	bge	r2,r4,bef0 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    bed8:	20800324 	muli	r2,r4,12
    bedc:	00c00074 	movhi	r3,1
    bee0:	18fda004 	addi	r3,r3,-2432
    bee4:	10c5883a 	add	r2,r2,r3
    bee8:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    beec:	10000015 	stw	zero,0(r2)
    bef0:	f800283a 	ret

0000bef4 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bef4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bef8:	00bfff84 	movi	r2,-2
    befc:	2884703a 	and	r2,r5,r2
    bf00:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    bf04:	d0a03217 	ldw	r2,-32568(gp)
    bf08:	108000c4 	addi	r2,r2,3
    bf0c:	00ffff04 	movi	r3,-4
    bf10:	10c6703a 	and	r3,r2,r3
    bf14:	d0e03215 	stw	r3,-32568(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    bf18:	1909883a 	add	r4,r3,r4
    bf1c:	00820034 	movhi	r2,2048
    bf20:	10800004 	addi	r2,r2,0
    bf24:	1100032e 	bgeu	r2,r4,bf34 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf28:	2801703a 	wrctl	status,r5
    bf2c:	00ffffc4 	movi	r3,-1
    bf30:	00000206 	br	bf3c <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    bf34:	d1203215 	stw	r4,-32568(gp)
    bf38:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    bf3c:	1805883a 	mov	r2,r3
    bf40:	f800283a 	ret

0000bf44 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    bf44:	defffe04 	addi	sp,sp,-8
    bf48:	dfc00115 	stw	ra,4(sp)
    bf4c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bf50:	20002816 	blt	r4,zero,bff4 <write+0xb0>
    bf54:	20c00324 	muli	r3,r4,12
    bf58:	00800074 	movhi	r2,1
    bf5c:	10bda004 	addi	r2,r2,-2432
    bf60:	1889883a 	add	r4,r3,r2
  
  if (fd)
    bf64:	20002326 	beq	r4,zero,bff4 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    bf68:	20800217 	ldw	r2,8(r4)
    bf6c:	108000cc 	andi	r2,r2,3
    bf70:	10001326 	beq	r2,zero,bfc0 <write+0x7c>
    bf74:	20800017 	ldw	r2,0(r4)
    bf78:	10800617 	ldw	r2,24(r2)
    bf7c:	10001026 	beq	r2,zero,bfc0 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    bf80:	103ee83a 	callr	r2
    bf84:	1021883a 	mov	r16,r2
    bf88:	1000260e 	bge	r2,zero,c024 <write+0xe0>
    bf8c:	00800074 	movhi	r2,1
    bf90:	10835504 	addi	r2,r2,3412
    bf94:	10800017 	ldw	r2,0(r2)
    bf98:	1000031e 	bne	r2,zero,bfa8 <write+0x64>
    bf9c:	00c00074 	movhi	r3,1
    bfa0:	18cb3a04 	addi	r3,r3,11496
    bfa4:	00000206 	br	bfb0 <write+0x6c>
    bfa8:	103ee83a 	callr	r2
    bfac:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    bfb0:	0405c83a 	sub	r2,zero,r16
    bfb4:	18800015 	stw	r2,0(r3)
    bfb8:	043fffc4 	movi	r16,-1
    bfbc:	00001906 	br	c024 <write+0xe0>
    bfc0:	00800074 	movhi	r2,1
    bfc4:	10835504 	addi	r2,r2,3412
    bfc8:	10800017 	ldw	r2,0(r2)
    bfcc:	1000031e 	bne	r2,zero,bfdc <write+0x98>
    bfd0:	00c00074 	movhi	r3,1
    bfd4:	18cb3a04 	addi	r3,r3,11496
    bfd8:	00000206 	br	bfe4 <write+0xa0>
    bfdc:	103ee83a 	callr	r2
    bfe0:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    bfe4:	00800344 	movi	r2,13
    bfe8:	18800015 	stw	r2,0(r3)
    bfec:	043fffc4 	movi	r16,-1
    bff0:	00000c06 	br	c024 <write+0xe0>
    bff4:	00800074 	movhi	r2,1
    bff8:	10835504 	addi	r2,r2,3412
    bffc:	10800017 	ldw	r2,0(r2)
    c000:	1000031e 	bne	r2,zero,c010 <write+0xcc>
    c004:	00c00074 	movhi	r3,1
    c008:	18cb3a04 	addi	r3,r3,11496
    c00c:	00000206 	br	c018 <write+0xd4>
    c010:	103ee83a 	callr	r2
    c014:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    c018:	00801444 	movi	r2,81
    c01c:	18800015 	stw	r2,0(r3)
    c020:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    c024:	8005883a 	mov	r2,r16
    c028:	dfc00117 	ldw	ra,4(sp)
    c02c:	dc000017 	ldw	r16,0(sp)
    c030:	dec00204 	addi	sp,sp,8
    c034:	f800283a 	ret

0000c038 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c038:	deffff04 	addi	sp,sp,-4
    c03c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    c040:	000e0d80 	call	e0d8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c044:	00800044 	movi	r2,1
    c048:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c04c:	dfc00017 	ldw	ra,0(sp)
    c050:	dec00104 	addi	sp,sp,4
    c054:	f800283a 	ret

0000c058 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c058:	defffc04 	addi	sp,sp,-16
    c05c:	dfc00315 	stw	ra,12(sp)
    c060:	dc800215 	stw	r18,8(sp)
    c064:	dc400115 	stw	r17,4(sp)
    c068:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    c06c:	04000204 	movi	r16,8
    c070:	01040034 	movhi	r4,4096
    c074:	21080004 	addi	r4,r4,8192
    c078:	000b883a 	mov	r5,zero
    c07c:	000d883a 	mov	r6,zero
    c080:	800f883a 	mov	r7,r16
    c084:	000cf800 	call	cf80 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    c088:	04400074 	movhi	r17,1
    c08c:	8c7e0a04 	addi	r17,r17,-2008
    c090:	8809883a 	mov	r4,r17
    c094:	000b883a 	mov	r5,zero
    c098:	800d883a 	mov	r6,r16
    c09c:	000c44c0 	call	c44c <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c0a0:	04000074 	movhi	r16,1
    c0a4:	84035204 	addi	r16,r16,3400
    c0a8:	893ff604 	addi	r4,r17,-40
    c0ac:	800b883a 	mov	r5,r16
    c0b0:	000dc580 	call	dc58 <alt_dev_llist_insert>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
    c0b4:	01000074 	movhi	r4,1
    c0b8:	21021804 	addi	r4,r4,2144
    c0bc:	000b883a 	mov	r5,zero
    c0c0:	018000c4 	movi	r6,3
    c0c4:	000c9600 	call	c960 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
    c0c8:	04800104 	movi	r18,4
    c0cc:	01000074 	movhi	r4,1
    c0d0:	21022404 	addi	r4,r4,2192
    c0d4:	000b883a 	mov	r5,zero
    c0d8:	900d883a 	mov	r6,r18
    c0dc:	000c9600 	call	c960 <alt_avalon_sgdma_init>
    c0e0:	01000074 	movhi	r4,1
    c0e4:	21023004 	addi	r4,r4,2240
    c0e8:	800b883a 	mov	r5,r16
    c0ec:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c0f0:	01000074 	movhi	r4,1
    c0f4:	21023b04 	addi	r4,r4,2284
    c0f8:	800b883a 	mov	r5,r16
    c0fc:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c100:	01000074 	movhi	r4,1
    c104:	21024704 	addi	r4,r4,2332
    c108:	800b883a 	mov	r5,r16
    c10c:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c110:	01000074 	movhi	r4,1
    c114:	21025304 	addi	r4,r4,2380
    c118:	800b883a 	mov	r5,r16
    c11c:	000dc580 	call	dc58 <alt_dev_llist_insert>
    ALTERA_ETH_TSE_INIT ( ENET, enet);
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER, Accelerometer);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( CAMERA_CONFIG, Camera_Config);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( ONBOARD_AV, OnBoard_AV);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    c120:	04400074 	movhi	r17,1
    c124:	8c425f04 	addi	r17,r17,2428
    c128:	8809883a 	mov	r4,r17
    c12c:	000d0b40 	call	d0b4 <alt_up_character_lcd_init>
    c130:	8809883a 	mov	r4,r17
    c134:	800b883a 	mov	r5,r16
    c138:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c13c:	01000074 	movhi	r4,1
    c140:	21026a04 	addi	r4,r4,2472
    c144:	800b883a 	mov	r5,r16
    c148:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c14c:	01000074 	movhi	r4,1
    c150:	21027504 	addi	r4,r4,2516
    c154:	800b883a 	mov	r5,r16
    c158:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c15c:	01000074 	movhi	r4,1
    c160:	21028004 	addi	r4,r4,2560
    c164:	800b883a 	mov	r5,r16
    c168:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c16c:	01000074 	movhi	r4,1
    c170:	21028b04 	addi	r4,r4,2604
    c174:	800b883a 	mov	r5,r16
    c178:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c17c:	01000074 	movhi	r4,1
    c180:	21029604 	addi	r4,r4,2648
    c184:	800b883a 	mov	r5,r16
    c188:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c18c:	01000074 	movhi	r4,1
    c190:	2102a104 	addi	r4,r4,2692
    c194:	800b883a 	mov	r5,r16
    c198:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c19c:	01000074 	movhi	r4,1
    c1a0:	2102ac04 	addi	r4,r4,2736
    c1a4:	800b883a 	mov	r5,r16
    c1a8:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c1ac:	01000074 	movhi	r4,1
    c1b0:	2102b704 	addi	r4,r4,2780
    c1b4:	800b883a 	mov	r5,r16
    c1b8:	000dc580 	call	dc58 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    c1bc:	04400074 	movhi	r17,1
    c1c0:	8c42c204 	addi	r17,r17,2824
    c1c4:	8809883a 	mov	r4,r17
    c1c8:	000d7b80 	call	d7b8 <alt_up_ps2_init>
    c1cc:	8809883a 	mov	r4,r17
    c1d0:	800b883a 	mov	r5,r16
    c1d4:	000dc580 	call	dc58 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    c1d8:	04400074 	movhi	r17,1
    c1dc:	8c42d004 	addi	r17,r17,2880
    c1e0:	8809883a 	mov	r4,r17
    c1e4:	000d7b80 	call	d7b8 <alt_up_ps2_init>
    c1e8:	8809883a 	mov	r4,r17
    c1ec:	800b883a 	mov	r5,r16
    c1f0:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c1f4:	01000074 	movhi	r4,1
    c1f8:	2102de04 	addi	r4,r4,2936
    c1fc:	800b883a 	mov	r5,r16
    c200:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c204:	01000074 	movhi	r4,1
    c208:	2102e904 	addi	r4,r4,2980
    c20c:	800b883a 	mov	r5,r16
    c210:	000dc580 	call	dc58 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( LCD_CHAR_BUFFER, LCD_Char_Buffer);
    c214:	01000074 	movhi	r4,1
    c218:	2102f604 	addi	r4,r4,3032
    c21c:	20800a17 	ldw	r2,40(r4)
    c220:	1485883a 	add	r2,r2,r18
    c224:	10c0000b 	ldhu	r3,0(r2)
    c228:	20c00c15 	stw	r3,48(r4)
    c22c:	10800017 	ldw	r2,0(r2)
    c230:	100ad43a 	srli	r5,r2,16
    c234:	21400d15 	stw	r5,52(r4)
    c238:	00801004 	movi	r2,64
    c23c:	10c00436 	bltu	r2,r3,c250 <alt_sys_init+0x1f8>
    c240:	00800fc4 	movi	r2,63
    c244:	20800f15 	stw	r2,60(r4)
    c248:	00800184 	movi	r2,6
    c24c:	20801015 	stw	r2,64(r4)
    c250:	00800804 	movi	r2,32
    c254:	11400436 	bltu	r2,r5,c268 <alt_sys_init+0x210>
    c258:	00c007c4 	movi	r3,31
    c25c:	00800074 	movhi	r2,1
    c260:	1082f604 	addi	r2,r2,3032
    c264:	10c01115 	stw	r3,68(r2)
    c268:	04000074 	movhi	r16,1
    c26c:	8402f604 	addi	r16,r16,3032
    c270:	8009883a 	mov	r4,r16
    c274:	000db700 	call	db70 <alt_up_char_buffer_init>
    c278:	8009883a 	mov	r4,r16
    c27c:	01400074 	movhi	r5,1
    c280:	29435204 	addi	r5,r5,3400
    c284:	000dc580 	call	dc58 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    c288:	01000074 	movhi	r4,1
    c28c:	21030804 	addi	r4,r4,3104
    c290:	20800a17 	ldw	r2,40(r4)
    c294:	10800104 	addi	r2,r2,4
    c298:	10c0000b 	ldhu	r3,0(r2)
    c29c:	20c00c15 	stw	r3,48(r4)
    c2a0:	10800017 	ldw	r2,0(r2)
    c2a4:	100ad43a 	srli	r5,r2,16
    c2a8:	21400d15 	stw	r5,52(r4)
    c2ac:	00801004 	movi	r2,64
    c2b0:	10c00436 	bltu	r2,r3,c2c4 <alt_sys_init+0x26c>
    c2b4:	00800fc4 	movi	r2,63
    c2b8:	20800f15 	stw	r2,60(r4)
    c2bc:	00800184 	movi	r2,6
    c2c0:	20801015 	stw	r2,64(r4)
    c2c4:	00800804 	movi	r2,32
    c2c8:	11400436 	bltu	r2,r5,c2dc <alt_sys_init+0x284>
    c2cc:	00c007c4 	movi	r3,31
    c2d0:	00800074 	movhi	r2,1
    c2d4:	10830804 	addi	r2,r2,3104
    c2d8:	10c01115 	stw	r3,68(r2)
    c2dc:	04000074 	movhi	r16,1
    c2e0:	84030804 	addi	r16,r16,3104
    c2e4:	8009883a 	mov	r4,r16
    c2e8:	000db700 	call	db70 <alt_up_char_buffer_init>
    c2ec:	04400074 	movhi	r17,1
    c2f0:	8c435204 	addi	r17,r17,3400
    c2f4:	8009883a 	mov	r4,r16
    c2f8:	880b883a 	mov	r5,r17
    c2fc:	000dc580 	call	dc58 <alt_dev_llist_insert>
    c300:	01000074 	movhi	r4,1
    c304:	21031a04 	addi	r4,r4,3176
    c308:	880b883a 	mov	r5,r17
    c30c:	000dc580 	call	dc58 <alt_dev_llist_insert>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
}
    c310:	dfc00317 	ldw	ra,12(sp)
    c314:	dc800217 	ldw	r18,8(sp)
    c318:	dc400117 	ldw	r17,4(sp)
    c31c:	dc000017 	ldw	r16,0(sp)
    c320:	dec00404 	addi	sp,sp,16
    c324:	f800283a 	ret

0000c328 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c328:	deffff04 	addi	sp,sp,-4
    c32c:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c330:	21000017 	ldw	r4,0(r4)
    c334:	21000a04 	addi	r4,r4,40
    c338:	000c5f80 	call	c5f8 <altera_avalon_jtag_uart_ioctl>
}
    c33c:	dfc00017 	ldw	ra,0(sp)
    c340:	dec00104 	addi	sp,sp,4
    c344:	f800283a 	ret

0000c348 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c348:	deffff04 	addi	sp,sp,-4
    c34c:	dfc00015 	stw	ra,0(sp)
    c350:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c354:	21000017 	ldw	r4,0(r4)
    c358:	21000a04 	addi	r4,r4,40
    c35c:	11400217 	ldw	r5,8(r2)
    c360:	000c3c00 	call	c3c0 <altera_avalon_jtag_uart_close>
}
    c364:	dfc00017 	ldw	ra,0(sp)
    c368:	dec00104 	addi	sp,sp,4
    c36c:	f800283a 	ret

0000c370 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c370:	deffff04 	addi	sp,sp,-4
    c374:	dfc00015 	stw	ra,0(sp)
    c378:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c37c:	21000017 	ldw	r4,0(r4)
    c380:	21000a04 	addi	r4,r4,40
    c384:	11c00217 	ldw	r7,8(r2)
    c388:	000c7d40 	call	c7d4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c38c:	dfc00017 	ldw	ra,0(sp)
    c390:	dec00104 	addi	sp,sp,4
    c394:	f800283a 	ret

0000c398 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c398:	deffff04 	addi	sp,sp,-4
    c39c:	dfc00015 	stw	ra,0(sp)
    c3a0:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c3a4:	21000017 	ldw	r4,0(r4)
    c3a8:	21000a04 	addi	r4,r4,40
    c3ac:	11c00217 	ldw	r7,8(r2)
    c3b0:	000c66c0 	call	c66c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c3b4:	dfc00017 	ldw	ra,0(sp)
    c3b8:	dec00104 	addi	sp,sp,4
    c3bc:	f800283a 	ret

0000c3c0 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c3c0:	21800c17 	ldw	r6,48(r4)
    c3c4:	2950000c 	andi	r5,r5,16384
    c3c8:	280b003a 	cmpeq	r5,r5,zero
    c3cc:	00000306 	br	c3dc <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    c3d0:	2800021e 	bne	r5,zero,c3dc <altera_avalon_jtag_uart_close+0x1c>
    c3d4:	00bffd44 	movi	r2,-11
    c3d8:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c3dc:	20800d17 	ldw	r2,52(r4)
    c3e0:	11800326 	beq	r2,r6,c3f0 <altera_avalon_jtag_uart_close+0x30>
    c3e4:	20c00917 	ldw	r3,36(r4)
    c3e8:	20800117 	ldw	r2,4(r4)
    c3ec:	18bff836 	bltu	r3,r2,c3d0 <altera_avalon_jtag_uart_close+0x10>
    c3f0:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    c3f4:	f800283a 	ret

0000c3f8 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c3f8:	20800017 	ldw	r2,0(r4)
    c3fc:	10c00104 	addi	r3,r2,4
    c400:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c404:	01410004 	movi	r5,1024
    c408:	1144703a 	and	r2,r2,r5
    c40c:	10000526 	beq	r2,zero,c424 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c410:	20800817 	ldw	r2,32(r4)
    c414:	1144b03a 	or	r2,r2,r5
    c418:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    c41c:	20000915 	stw	zero,36(r4)
    c420:	00000606 	br	c43c <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c424:	20c00917 	ldw	r3,36(r4)
    c428:	00a00034 	movhi	r2,32768
    c42c:	10bfff04 	addi	r2,r2,-4
    c430:	10c00236 	bltu	r2,r3,c43c <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    c434:	18800044 	addi	r2,r3,1
    c438:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c43c:	00800074 	movhi	r2,1
    c440:	108b4204 	addi	r2,r2,11528
    c444:	10800017 	ldw	r2,0(r2)
    c448:	f800283a 	ret

0000c44c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c44c:	defffe04 	addi	sp,sp,-8
    c450:	dfc00115 	stw	ra,4(sp)
    c454:	dc000015 	stw	r16,0(sp)
    c458:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c45c:	00c00044 	movi	r3,1
    c460:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c464:	20800017 	ldw	r2,0(r4)
    c468:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    c46c:	3009883a 	mov	r4,r6
    c470:	800b883a 	mov	r5,r16
    c474:	01800074 	movhi	r6,1
    c478:	31b13104 	addi	r6,r6,-15164
    c47c:	000b8e00 	call	b8e0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c480:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c484:	81000204 	addi	r4,r16,8
    c488:	00800074 	movhi	r2,1
    c48c:	108b4204 	addi	r2,r2,11528
    c490:	11400017 	ldw	r5,0(r2)
    c494:	01800074 	movhi	r6,1
    c498:	31b0fe04 	addi	r6,r6,-15368
    c49c:	800f883a 	mov	r7,r16
    c4a0:	000dbc00 	call	dbc0 <alt_alarm_start>
    c4a4:	1000030e 	bge	r2,zero,c4b4 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c4a8:	00a00034 	movhi	r2,32768
    c4ac:	10bfffc4 	addi	r2,r2,-1
    c4b0:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c4b4:	dfc00117 	ldw	ra,4(sp)
    c4b8:	dc000017 	ldw	r16,0(sp)
    c4bc:	dec00204 	addi	sp,sp,8
    c4c0:	f800283a 	ret

0000c4c4 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    c4c4:	22000017 	ldw	r8,0(r4)
    c4c8:	03800104 	movi	r14,4
    c4cc:	4399883a 	add	r12,r8,r14
    c4d0:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c4d4:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c4d8:	5880c00c 	andi	r2,r11,768
    c4dc:	10004526 	beq	r2,zero,c5f4 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c4e0:	5880400c 	andi	r2,r11,256
    c4e4:	10002126 	beq	r2,zero,c56c <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c4e8:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    c4ec:	10800044 	addi	r2,r2,1
    c4f0:	1081ffcc 	andi	r2,r2,2047
    c4f4:	20c00b17 	ldw	r3,44(r4)
    c4f8:	10c01626 	beq	r2,r3,c554 <altera_avalon_jtag_uart_irq+0x90>
    c4fc:	02a00014 	movui	r10,32768
    c500:	02400e04 	movi	r9,56
    c504:	01c00044 	movi	r7,1
    c508:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c50c:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c510:	2a84703a 	and	r2,r5,r10
    c514:	10000d26 	beq	r2,zero,c54c <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c518:	20800a17 	ldw	r2,40(r4)
    c51c:	1105883a 	add	r2,r2,r4
    c520:	1245883a 	add	r2,r2,r9
    c524:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c528:	20800a17 	ldw	r2,40(r4)
    c52c:	11c5883a 	add	r2,r2,r7
    c530:	1184703a 	and	r2,r2,r6
    c534:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c538:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    c53c:	11c5883a 	add	r2,r2,r7
    c540:	1184703a 	and	r2,r2,r6
    c544:	20c00b17 	ldw	r3,44(r4)
    c548:	10fff01e 	bne	r2,r3,c50c <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c54c:	2b44703a 	and	r2,r5,r13
    c550:	10000626 	beq	r2,zero,c56c <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c554:	20800817 	ldw	r2,32(r4)
    c558:	00ffff84 	movi	r3,-2
    c55c:	10c4703a 	and	r2,r2,r3
    c560:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c564:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c568:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c56c:	5880800c 	andi	r2,r11,512
    c570:	103fd826 	beq	r2,zero,c4d4 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c574:	5b44703a 	and	r2,r11,r13
    c578:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    c57c:	283fd526 	beq	r5,zero,c4d4 <altera_avalon_jtag_uart_irq+0x10>
    c580:	20c00d17 	ldw	r3,52(r4)
    c584:	20800c17 	ldw	r2,48(r4)
    c588:	18801126 	beq	r3,r2,c5d0 <altera_avalon_jtag_uart_irq+0x10c>
    c58c:	02420e04 	movi	r9,2104
    c590:	01800044 	movi	r6,1
    c594:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c598:	20800d17 	ldw	r2,52(r4)
    c59c:	1105883a 	add	r2,r2,r4
    c5a0:	1245883a 	add	r2,r2,r9
    c5a4:	10800007 	ldb	r2,0(r2)
    c5a8:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c5ac:	20800d17 	ldw	r2,52(r4)
    c5b0:	1185883a 	add	r2,r2,r6
    c5b4:	11c4703a 	and	r2,r2,r7
    c5b8:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c5bc:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c5c0:	283fc426 	beq	r5,zero,c4d4 <altera_avalon_jtag_uart_irq+0x10>
    c5c4:	20c00d17 	ldw	r3,52(r4)
    c5c8:	20800c17 	ldw	r2,48(r4)
    c5cc:	18bff21e 	bne	r3,r2,c598 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c5d0:	20c00817 	ldw	r3,32(r4)
    c5d4:	00bfff44 	movi	r2,-3
    c5d8:	1886703a 	and	r3,r3,r2
    c5dc:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c5e0:	20800017 	ldw	r2,0(r4)
    c5e4:	1385883a 	add	r2,r2,r14
    c5e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c5ec:	60800037 	ldwio	r2,0(r12)
    c5f0:	003fb806 	br	c4d4 <altera_avalon_jtag_uart_irq+0x10>
    c5f4:	f800283a 	ret

0000c5f8 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    c5f8:	009a8044 	movi	r2,27137
    c5fc:	28800326 	beq	r5,r2,c60c <altera_avalon_jtag_uart_ioctl+0x14>
    c600:	009a8084 	movi	r2,27138
    c604:	2880171e 	bne	r5,r2,c664 <altera_avalon_jtag_uart_ioctl+0x6c>
    c608:	00000d06 	br	c640 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c60c:	20c00117 	ldw	r3,4(r4)
    c610:	00a00034 	movhi	r2,32768
    c614:	10bfffc4 	addi	r2,r2,-1
    c618:	18801226 	beq	r3,r2,c664 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c61c:	31800017 	ldw	r6,0(r6)
    c620:	30ffff84 	addi	r3,r6,-2
    c624:	10bfff44 	addi	r2,r2,-3
    c628:	10c0022e 	bgeu	r2,r3,c634 <altera_avalon_jtag_uart_ioctl+0x3c>
    c62c:	01a00034 	movhi	r6,32768
    c630:	31bfff84 	addi	r6,r6,-2
    c634:	21800115 	stw	r6,4(r4)
    c638:	0005883a 	mov	r2,zero
    c63c:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c640:	20c00117 	ldw	r3,4(r4)
    c644:	00a00034 	movhi	r2,32768
    c648:	10bfffc4 	addi	r2,r2,-1
    c64c:	18800526 	beq	r3,r2,c664 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c650:	20800917 	ldw	r2,36(r4)
    c654:	10c5803a 	cmpltu	r2,r2,r3
    c658:	30800015 	stw	r2,0(r6)
    c65c:	0005883a 	mov	r2,zero
    c660:	f800283a 	ret
    c664:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    c668:	f800283a 	ret

0000c66c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c66c:	defff604 	addi	sp,sp,-40
    c670:	dfc00915 	stw	ra,36(sp)
    c674:	df000815 	stw	fp,32(sp)
    c678:	ddc00715 	stw	r23,28(sp)
    c67c:	dd800615 	stw	r22,24(sp)
    c680:	dd400515 	stw	r21,20(sp)
    c684:	dd000415 	stw	r20,16(sp)
    c688:	dcc00315 	stw	r19,12(sp)
    c68c:	dc800215 	stw	r18,8(sp)
    c690:	dc400115 	stw	r17,4(sp)
    c694:	dc000015 	stw	r16,0(sp)
    c698:	2025883a 	mov	r18,r4
    c69c:	282f883a 	mov	r23,r5
    c6a0:	3027883a 	mov	r19,r6
    c6a4:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c6a8:	0180220e 	bge	zero,r6,c734 <altera_avalon_jtag_uart_read+0xc8>
    c6ac:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c6b0:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    c6b4:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    c6b8:	b4400236 	bltu	r22,r17,c6c4 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    c6bc:	b461c83a 	sub	r16,r22,r17
    c6c0:	00000206 	br	c6cc <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c6c4:	00820004 	movi	r2,2048
    c6c8:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    c6cc:	80000d26 	beq	r16,zero,c704 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    c6d0:	9829883a 	mov	r20,r19
    c6d4:	9c001d36 	bltu	r19,r16,c74c <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    c6d8:	91400e04 	addi	r5,r18,56
    c6dc:	a809883a 	mov	r4,r21
    c6e0:	2c4b883a 	add	r5,r5,r17
    c6e4:	800d883a 	mov	r6,r16
    c6e8:	0003c580 	call	3c58 <memcpy>
      ptr   += n;
    c6ec:	ac2b883a 	add	r21,r21,r16
      space -= n;
    c6f0:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c6f4:	8445883a 	add	r2,r16,r17
    c6f8:	1081ffcc 	andi	r2,r2,2047
    c6fc:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    c700:	04ffeb16 	blt	zero,r19,c6b0 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    c704:	adc01c1e 	bne	r21,r23,c778 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c708:	e090000c 	andi	r2,fp,16384
    c70c:	10000d1e 	bne	r2,zero,c744 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c710:	90800a17 	ldw	r2,40(r18)
    c714:	b080031e 	bne	r22,r2,c724 <altera_avalon_jtag_uart_read+0xb8>
    c718:	90c00917 	ldw	r3,36(r18)
    c71c:	90800117 	ldw	r2,4(r18)
    c720:	18bffb36 	bltu	r3,r2,c710 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c724:	90800a17 	ldw	r2,40(r18)
    c728:	b0800426 	beq	r22,r2,c73c <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c72c:	04c0030e 	bge	zero,r19,c73c <altera_avalon_jtag_uart_read+0xd0>
    c730:	003fde06 	br	c6ac <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    c734:	3890000c 	andi	r2,r7,16384
    c738:	1000021e 	bne	r2,zero,c744 <altera_avalon_jtag_uart_read+0xd8>
    c73c:	00bffec4 	movi	r2,-5
    c740:	00001806 	br	c7a4 <altera_avalon_jtag_uart_read+0x138>
    c744:	00bffd44 	movi	r2,-11
    c748:	00001606 	br	c7a4 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    c74c:	91400e04 	addi	r5,r18,56
    c750:	a809883a 	mov	r4,r21
    c754:	894b883a 	add	r5,r17,r5
    c758:	980d883a 	mov	r6,r19
    c75c:	0003c580 	call	3c58 <memcpy>
      ptr   += n;
    c760:	aceb883a 	add	r21,r21,r19
      space -= n;
    c764:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c768:	a445883a 	add	r2,r20,r17
    c76c:	1081ffcc 	andi	r2,r2,2047
    c770:	90800b15 	stw	r2,44(r18)
    c774:	003fe306 	br	c704 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c778:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c77c:	00bfff84 	movi	r2,-2
    c780:	2084703a 	and	r2,r4,r2
    c784:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c788:	90800817 	ldw	r2,32(r18)
    c78c:	10800054 	ori	r2,r2,1
    c790:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c794:	90c00017 	ldw	r3,0(r18)
    c798:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c79c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    c7a0:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    c7a4:	dfc00917 	ldw	ra,36(sp)
    c7a8:	df000817 	ldw	fp,32(sp)
    c7ac:	ddc00717 	ldw	r23,28(sp)
    c7b0:	dd800617 	ldw	r22,24(sp)
    c7b4:	dd400517 	ldw	r21,20(sp)
    c7b8:	dd000417 	ldw	r20,16(sp)
    c7bc:	dcc00317 	ldw	r19,12(sp)
    c7c0:	dc800217 	ldw	r18,8(sp)
    c7c4:	dc400117 	ldw	r17,4(sp)
    c7c8:	dc000017 	ldw	r16,0(sp)
    c7cc:	dec00a04 	addi	sp,sp,40
    c7d0:	f800283a 	ret

0000c7d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c7d4:	defff804 	addi	sp,sp,-32
    c7d8:	dfc00715 	stw	ra,28(sp)
    c7dc:	dd800615 	stw	r22,24(sp)
    c7e0:	dd400515 	stw	r21,20(sp)
    c7e4:	dd000415 	stw	r20,16(sp)
    c7e8:	dcc00315 	stw	r19,12(sp)
    c7ec:	dc800215 	stw	r18,8(sp)
    c7f0:	dc400115 	stw	r17,4(sp)
    c7f4:	dc000015 	stw	r16,0(sp)
    c7f8:	2021883a 	mov	r16,r4
    c7fc:	282d883a 	mov	r22,r5
    c800:	3011883a 	mov	r8,r6
    c804:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c808:	01800616 	blt	zero,r6,c824 <altera_avalon_jtag_uart_write+0x50>
    c80c:	2829883a 	mov	r20,r5
    c810:	00002106 	br	c898 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    c814:	a585c83a 	sub	r2,r20,r22
    c818:	00004306 	br	c928 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    c81c:	00bffd44 	movi	r2,-11
    c820:	00004106 	br	c928 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c824:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c828:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    c82c:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    c830:	9140032e 	bgeu	r18,r5,c840 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c834:	2c85c83a 	sub	r2,r5,r18
    c838:	11bfffc4 	addi	r6,r2,-1
    c83c:	00000606 	br	c858 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    c840:	28000326 	beq	r5,zero,c850 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c844:	00820004 	movi	r2,2048
    c848:	148dc83a 	sub	r6,r2,r18
    c84c:	00000206 	br	c858 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c850:	0081ffc4 	movi	r2,2047
    c854:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    c858:	30002626 	beq	r6,zero,c8f4 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    c85c:	4027883a 	mov	r19,r8
    c860:	3023883a 	mov	r17,r6
    c864:	4180012e 	bgeu	r8,r6,c86c <altera_avalon_jtag_uart_write+0x98>
    c868:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    c86c:	81020e04 	addi	r4,r16,2104
    c870:	2489883a 	add	r4,r4,r18
    c874:	a00b883a 	mov	r5,r20
    c878:	880d883a 	mov	r6,r17
    c87c:	0003c580 	call	3c58 <memcpy>
      ptr   += n;
    c880:	a469883a 	add	r20,r20,r17
      count -= n;
    c884:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c888:	9445883a 	add	r2,r18,r17
    c88c:	1081ffcc 	andi	r2,r2,2047
    c890:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c894:	023fe416 	blt	zero,r8,c828 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c898:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c89c:	00bfff84 	movi	r2,-2
    c8a0:	2084703a 	and	r2,r4,r2
    c8a4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c8a8:	80800817 	ldw	r2,32(r16)
    c8ac:	10800094 	ori	r2,r2,2
    c8b0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c8b4:	80c00017 	ldw	r3,0(r16)
    c8b8:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c8bc:	2001703a 	wrctl	status,r4
    c8c0:	00000706 	br	c8e0 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c8c4:	80800d17 	ldw	r2,52(r16)
    c8c8:	1140031e 	bne	r2,r5,c8d8 <altera_avalon_jtag_uart_write+0x104>
    c8cc:	80c00917 	ldw	r3,36(r16)
    c8d0:	80800117 	ldw	r2,4(r16)
    c8d4:	18bffb36 	bltu	r3,r2,c8c4 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c8d8:	80800d17 	ldw	r2,52(r16)
    c8dc:	117fed1e 	bne	r2,r5,c894 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c8e0:	b53fcc1e 	bne	r22,r20,c814 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    c8e4:	a890000c 	andi	r2,r21,16384
    c8e8:	103fcc1e 	bne	r2,zero,c81c <altera_avalon_jtag_uart_write+0x48>
    c8ec:	00bffec4 	movi	r2,-5
    c8f0:	00000d06 	br	c928 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c8f4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c8f8:	00bfff84 	movi	r2,-2
    c8fc:	2084703a 	and	r2,r4,r2
    c900:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c904:	80800817 	ldw	r2,32(r16)
    c908:	10800094 	ori	r2,r2,2
    c90c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c910:	80c00017 	ldw	r3,0(r16)
    c914:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c918:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    c91c:	a890000c 	andi	r2,r21,16384
    c920:	103fe826 	beq	r2,zero,c8c4 <altera_avalon_jtag_uart_write+0xf0>
    c924:	003fee06 	br	c8e0 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    c928:	dfc00717 	ldw	ra,28(sp)
    c92c:	dd800617 	ldw	r22,24(sp)
    c930:	dd400517 	ldw	r21,20(sp)
    c934:	dd000417 	ldw	r20,16(sp)
    c938:	dcc00317 	ldw	r19,12(sp)
    c93c:	dc800217 	ldw	r18,8(sp)
    c940:	dc400117 	ldw	r17,4(sp)
    c944:	dc000017 	ldw	r16,0(sp)
    c948:	dec00804 	addi	sp,sp,32
    c94c:	f800283a 	ret

0000c950 <alt_avalon_sgdma_register_callback>:
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
    c950:	21400915 	stw	r5,36(r4)
  dev->callback_context = context;
    c954:	21c00a15 	stw	r7,40(r4)
  dev->chain_control    = chain_control;
    c958:	21800b15 	stw	r6,44(r4)
}
    c95c:	f800283a 	ret

0000c960 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
    c960:	defffd04 	addi	sp,sp,-12
    c964:	dfc00215 	stw	ra,8(sp)
    c968:	dc400115 	stw	r17,4(sp)
    c96c:	dc000015 	stw	r16,0(sp)
    c970:	2021883a 	mov	r16,r4
    c974:	3023883a 	mov	r17,r6

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    c978:	00c00404 	movi	r3,16
    c97c:	20800317 	ldw	r2,12(r4)
    c980:	10c5883a 	add	r2,r2,r3
    c984:	01400074 	movhi	r5,1
    c988:	11400035 	stwio	r5,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    c98c:	20800317 	ldw	r2,12(r4)
    c990:	10c5883a 	add	r2,r2,r3
    c994:	11400035 	stwio	r5,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
    c998:	20800317 	ldw	r2,12(r4)
    c99c:	10c5883a 	add	r2,r2,r3
    c9a0:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    c9a4:	20c00317 	ldw	r3,12(r4)
    c9a8:	00803fc4 	movi	r2,255
    c9ac:	18800035 	stwio	r2,0(r3)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
    c9b0:	d1603304 	addi	r5,gp,-32564
    c9b4:	000dc580 	call	dc58 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
    c9b8:	8809883a 	mov	r4,r17
    c9bc:	800b883a 	mov	r5,r16
    c9c0:	01800074 	movhi	r6,1
    c9c4:	31b2e504 	addi	r6,r6,-13420
    c9c8:	000b8e00 	call	b8e0 <alt_irq_register>
#endif  
}
    c9cc:	dfc00217 	ldw	ra,8(sp)
    c9d0:	dc400117 	ldw	r17,4(sp)
    c9d4:	dc000017 	ldw	r16,0(sp)
    c9d8:	dec00304 	addi	sp,sp,12
    c9dc:	f800283a 	ret

0000c9e0 <alt_avalon_sgdma_disable_desc_poll>:
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    c9e0:	20800317 	ldw	r2,12(r4)
    c9e4:	10800404 	addi	r2,r2,16
    c9e8:	10c00037 	ldwio	r3,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    c9ec:	013fff34 	movhi	r4,65532
    c9f0:	213fffc4 	addi	r4,r4,-1
    c9f4:	1906703a 	and	r3,r3,r4
    c9f8:	10c00035 	stwio	r3,0(r2)
  
  return;
}
    c9fc:	f800283a 	ret

0000ca00 <alt_avalon_sgdma_enable_desc_poll>:
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    ca00:	21000317 	ldw	r4,12(r4)
    ca04:	21000404 	addi	r4,r4,16
    ca08:	20c00037 	ldwio	r3,0(r4)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
    ca0c:	00a00434 	movhi	r2,32784
    ca10:	10bfffc4 	addi	r2,r2,-1
    ca14:	1886703a 	and	r3,r3,r2
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    ca18:	280a953a 	slli	r5,r5,20
    ca1c:	295ffc2c 	andhi	r5,r5,32752
    ca20:	29400134 	orhi	r5,r5,4
    ca24:	1946b03a 	or	r3,r3,r5
    ca28:	20c00035 	stwio	r3,0(r4)
  
  return;
}
    ca2c:	f800283a 	ret

0000ca30 <alt_avalon_sgdma_stop>:
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    ca30:	20800317 	ldw	r2,12(r4)
    ca34:	10800404 	addi	r2,r2,16
    ca38:	10c00037 	ldwio	r3,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    ca3c:	013ff7c4 	movi	r4,-33
    ca40:	1906703a 	and	r3,r3,r4
    ca44:	10c00035 	stwio	r3,0(r2)
}
    ca48:	f800283a 	ret

0000ca4c <alt_avalon_sgdma_start>:
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    ca4c:	20c00317 	ldw	r3,12(r4)
    ca50:	18c00404 	addi	r3,r3,16
    ca54:	18800037 	ldwio	r2,0(r3)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    ca58:	10800814 	ori	r2,r2,32
    ca5c:	18800035 	stwio	r2,0(r3)
}
    ca60:	f800283a 	ret

0000ca64 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
    ca64:	200f883a 	mov	r7,r4
    ca68:	21000317 	ldw	r4,12(r4)
    ca6c:	01800404 	movi	r6,16
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    ca70:	20800037 	ldwio	r2,0(r4)
    ca74:	1184703a 	and	r2,r2,r6
    ca78:	103ffd1e 	bne	r2,zero,ca70 <alt_avalon_sgdma_do_sync_transfer+0xc>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    ca7c:	2189883a 	add	r4,r4,r6
    ca80:	20800037 	ldwio	r2,0(r4)
    ca84:	00fff7c4 	movi	r3,-33
    ca88:	10c4703a 	and	r2,r2,r3
    ca8c:	20800035 	stwio	r2,0(r4)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    ca90:	38c00317 	ldw	r3,12(r7)
    ca94:	00803fc4 	movi	r2,255
    ca98:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
    ca9c:	38800317 	ldw	r2,12(r7)
    caa0:	11400835 	stwio	r5,32(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    caa4:	38c00317 	ldw	r3,12(r7)
    caa8:	1987883a 	add	r3,r3,r6
    caac:	18800037 	ldwio	r2,0(r3)
    cab0:	10801814 	ori	r2,r2,96
    cab4:	18800035 	stwio	r2,0(r3)
    cab8:	39000317 	ldw	r4,12(r7)
    cabc:	00c00404 	movi	r3,16
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    cac0:	20800037 	ldwio	r2,0(r4)
    cac4:	10c4703a 	and	r2,r2,r3
    cac8:	103ffd1e 	bne	r2,zero,cac0 <alt_avalon_sgdma_do_sync_transfer+0x5c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
    cacc:	20c9883a 	add	r4,r4,r3
    cad0:	20800037 	ldwio	r2,0(r4)
    cad4:	00fff7c4 	movi	r3,-33
    cad8:	10c4703a 	and	r2,r2,r3
    cadc:	20800035 	stwio	r2,0(r4)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
    cae0:	39000317 	ldw	r4,12(r7)
    cae4:	20800037 	ldwio	r2,0(r4)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    cae8:	00c03fc4 	movi	r3,255
    caec:	20c00035 	stwio	r3,0(r4)

  return status;
}
    caf0:	10803fcc 	andi	r2,r2,255
    caf4:	f800283a 	ret

0000caf8 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
    caf8:	200d883a 	mov	r6,r4
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    cafc:	20800317 	ldw	r2,12(r4)
    cb00:	10800037 	ldwio	r2,0(r2)
    cb04:	1080040c 	andi	r2,r2,16
    cb08:	10000226 	beq	r2,zero,cb14 <alt_avalon_sgdma_do_async_transfer+0x1c>
    cb0c:	00bffc04 	movi	r2,-16
    cb10:	f800283a 	ret
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    cb14:	01c00404 	movi	r7,16
    cb18:	20c00317 	ldw	r3,12(r4)
    cb1c:	19c7883a 	add	r3,r3,r7
    cb20:	18800037 	ldwio	r2,0(r3)
    cb24:	013ff7c4 	movi	r4,-33
    cb28:	1104703a 	and	r2,r2,r4
    cb2c:	18800035 	stwio	r2,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    cb30:	30c00317 	ldw	r3,12(r6)
    cb34:	00803fc4 	movi	r2,255
    cb38:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
    cb3c:	30800317 	ldw	r2,12(r6)
    cb40:	11400835 	stwio	r5,32(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
    cb44:	30800917 	ldw	r2,36(r6)
    cb48:	10000926 	beq	r2,zero,cb70 <alt_avalon_sgdma_do_async_transfer+0x78>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    cb4c:	31000317 	ldw	r4,12(r6)
    cb50:	21c9883a 	add	r4,r4,r7
    cb54:	20c00037 	ldwio	r3,0(r4)

    control |= (dev->chain_control                          |
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    cb58:	30800b17 	ldw	r2,44(r6)
    cb5c:	10801814 	ori	r2,r2,96
    cb60:	1886b03a 	or	r3,r3,r2
    cb64:	20c00035 	stwio	r3,0(r4)
    cb68:	0005883a 	mov	r2,zero
    cb6c:	f800283a 	ret
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    cb70:	30800317 	ldw	r2,12(r6)
    cb74:	10800404 	addi	r2,r2,16
    cb78:	10c00037 	ldwio	r3,0(r2)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
    cb7c:	18c01814 	ori	r3,r3,96
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    cb80:	013ffbc4 	movi	r4,-17
    cb84:	1906703a 	and	r3,r3,r4
    cb88:	10c00035 	stwio	r3,0(r2)
    cb8c:	0005883a 	mov	r2,zero
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
    cb90:	f800283a 	ret

0000cb94 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
    cb94:	defffe04 	addi	sp,sp,-8
    cb98:	dfc00115 	stw	ra,4(sp)
    cb9c:	dc000015 	stw	r16,0(sp)
    cba0:	200b883a 	mov	r5,r4
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
    cba4:	01000404 	movi	r4,16
    cba8:	28c00317 	ldw	r3,12(r5)
    cbac:	1907883a 	add	r3,r3,r4
    cbb0:	18800037 	ldwio	r2,0(r3)
    cbb4:	10a00034 	orhi	r2,r2,32768
    cbb8:	18800035 	stwio	r2,0(r3)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    cbbc:	28800317 	ldw	r2,12(r5)
    cbc0:	1105883a 	add	r2,r2,r4
    cbc4:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
    cbc8:	28c00917 	ldw	r3,36(r5)
    cbcc:	18000726 	beq	r3,zero,cbec <alt_avalon_sgdma_irq+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cbd0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cbd4:	00bfff84 	movi	r2,-2
    cbd8:	8084703a 	and	r2,r16,r2
    cbdc:	1001703a 	wrctl	status,r2
    cpu_sr = alt_irq_disable_all();
    (dev->callback)(dev->callback_context);
    cbe0:	29000a17 	ldw	r4,40(r5)
    cbe4:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cbe8:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
    cbec:	dfc00117 	ldw	ra,4(sp)
    cbf0:	dc000017 	ldw	r16,0(sp)
    cbf4:	dec00204 	addi	sp,sp,8
    cbf8:	f800283a 	ret

0000cbfc <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
    cbfc:	deffff04 	addi	sp,sp,-4
    cc00:	dfc00015 	stw	ra,0(sp)
    cc04:	da000703 	ldbu	r8,28(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    cc08:	288007c3 	ldbu	r2,31(r5)
    cc0c:	10801fcc 	andi	r2,r2,127
    cc10:	288007e5 	stbio	r2,31(r5)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
    cc14:	21800005 	stb	r6,0(r4)
    cc18:	3004d23a 	srli	r2,r6,8
    cc1c:	20800045 	stb	r2,1(r4)
    cc20:	3004d43a 	srli	r2,r6,16
    cc24:	20800085 	stb	r2,2(r4)
    cc28:	300cd63a 	srli	r6,r6,24
    cc2c:	218000c5 	stb	r6,3(r4)
  desc->write_addr               = write_addr;
    cc30:	21c00205 	stb	r7,8(r4)
    cc34:	3804d23a 	srli	r2,r7,8
    cc38:	20800245 	stb	r2,9(r4)
    cc3c:	3804d43a 	srli	r2,r7,16
    cc40:	20800285 	stb	r2,10(r4)
    cc44:	380ed63a 	srli	r7,r7,24
    cc48:	21c002c5 	stb	r7,11(r4)
  desc->next                     = (alt_u32 *) next;
    cc4c:	21400405 	stb	r5,16(r4)
    cc50:	2804d23a 	srli	r2,r5,8
    cc54:	20800445 	stb	r2,17(r4)
    cc58:	2804d43a 	srli	r2,r5,16
    cc5c:	20800485 	stb	r2,18(r4)
    cc60:	280ad63a 	srli	r5,r5,24
    cc64:	214004c5 	stb	r5,19(r4)
  desc->read_addr_pad            = 0x0;
    cc68:	20000105 	stb	zero,4(r4)
    cc6c:	20000145 	stb	zero,5(r4)
    cc70:	20000185 	stb	zero,6(r4)
    cc74:	200001c5 	stb	zero,7(r4)
  desc->write_addr_pad           = 0x0;
    cc78:	20000305 	stb	zero,12(r4)
    cc7c:	20000345 	stb	zero,13(r4)
    cc80:	20000385 	stb	zero,14(r4)
    cc84:	200003c5 	stb	zero,15(r4)
  desc->next_pad                 = 0x0;
    cc88:	20000505 	stb	zero,20(r4)
    cc8c:	20000545 	stb	zero,21(r4)
    cc90:	20000585 	stb	zero,22(r4)
    cc94:	200005c5 	stb	zero,23(r4)
  desc->bytes_to_transfer        = length_or_eop;
    cc98:	d880010b 	ldhu	r2,4(sp)
    cc9c:	20800605 	stb	r2,24(r4)
    cca0:	1004d23a 	srli	r2,r2,8
    cca4:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
    cca8:	20000705 	stb	zero,28(r4)
    ccac:	20000745 	stb	zero,29(r4)
  desc->status                   = 0x0;
    ccb0:	20000785 	stb	zero,30(r4)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
    ccb4:	d8800517 	ldw	r2,20(sp)
    ccb8:	20800685 	stb	r2,26(r4)
  desc->write_burst              = write_burst;
    ccbc:	d8800617 	ldw	r2,24(sp)
    ccc0:	208006c5 	stb	r2,27(r4)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
    ccc4:	d8800217 	ldw	r2,8(sp)
    ccc8:	1005003a 	cmpeq	r2,r2,zero
    cccc:	00ffe044 	movi	r3,-127
    ccd0:	188fc83a 	sub	r7,r3,r2
    ccd4:	d8800317 	ldw	r2,12(sp)
    ccd8:	1004c03a 	cmpne	r2,r2,zero
    ccdc:	108d883a 	add	r6,r2,r2
    cce0:	d8800417 	ldw	r2,16(sp)
    cce4:	1004c03a 	cmpne	r2,r2,zero
    cce8:	100a90ba 	slli	r5,r2,2
    ccec:	40803fcc 	andi	r2,r8,255
    ccf0:	1000021e 	bne	r2,zero,ccfc <alt_avalon_sgdma_construct_descriptor_burst+0x100>
    ccf4:	0007883a 	mov	r3,zero
    ccf8:	00000206 	br	cd04 <alt_avalon_sgdma_construct_descriptor_burst+0x108>
    ccfc:	408003cc 	andi	r2,r8,15
    cd00:	100690fa 	slli	r3,r2,3
    cd04:	3144b03a 	or	r2,r6,r5
    cd08:	38c6b03a 	or	r3,r7,r3
    cd0c:	10c4b03a 	or	r2,r2,r3
    cd10:	208007c5 	stb	r2,31(r4)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
    cd14:	01400804 	movi	r5,32
    cd18:	000dfd00 	call	dfd0 <alt_remap_uncached>
}
    cd1c:	dfc00017 	ldw	ra,0(sp)
    cd20:	dec00104 	addi	sp,sp,4
    cd24:	f800283a 	ret

0000cd28 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
    cd28:	defff804 	addi	sp,sp,-32
    cd2c:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
    cd30:	d880080b 	ldhu	r2,32(sp)
    cd34:	d8800015 	stw	r2,0(sp)
    cd38:	d8800917 	ldw	r2,36(sp)
    cd3c:	d8800115 	stw	r2,4(sp)
    cd40:	d8800a17 	ldw	r2,40(sp)
    cd44:	d8800215 	stw	r2,8(sp)
    cd48:	d8800b17 	ldw	r2,44(sp)
    cd4c:	d8800315 	stw	r2,12(sp)
    cd50:	d8000415 	stw	zero,16(sp)
    cd54:	d8000515 	stw	zero,20(sp)
    cd58:	d8800c03 	ldbu	r2,48(sp)
    cd5c:	d8800615 	stw	r2,24(sp)
    cd60:	000cbfc0 	call	cbfc <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
    cd64:	dfc00717 	ldw	ra,28(sp)
    cd68:	dec00804 	addi	sp,sp,32
    cd6c:	f800283a 	ret

0000cd70 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
    cd70:	defff804 	addi	sp,sp,-32
    cd74:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
    cd78:	39ffffcc 	andi	r7,r7,65535
    cd7c:	d9c00015 	stw	r7,0(sp)
    cd80:	d8800a17 	ldw	r2,40(sp)
    cd84:	d8800115 	stw	r2,4(sp)
    cd88:	d8800817 	ldw	r2,32(sp)
    cd8c:	d8800215 	stw	r2,8(sp)
    cd90:	d8800917 	ldw	r2,36(sp)
    cd94:	d8800315 	stw	r2,12(sp)
    cd98:	d8800b17 	ldw	r2,44(sp)
    cd9c:	d8800415 	stw	r2,16(sp)
    cda0:	d8000515 	stw	zero,20(sp)
    cda4:	d8800c03 	ldbu	r2,48(sp)
    cda8:	d8800615 	stw	r2,24(sp)
    cdac:	000f883a 	mov	r7,zero
    cdb0:	000cbfc0 	call	cbfc <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
    cdb4:	dfc00717 	ldw	ra,28(sp)
    cdb8:	dec00804 	addi	sp,sp,32
    cdbc:	f800283a 	ret

0000cdc0 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
    cdc0:	defffa04 	addi	sp,sp,-24
    cdc4:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
    cdc8:	d8800617 	ldw	r2,24(sp)
    cdcc:	d8800015 	stw	r2,0(sp)
    cdd0:	d8800717 	ldw	r2,28(sp)
    cdd4:	d8800115 	stw	r2,4(sp)
    cdd8:	d8800817 	ldw	r2,32(sp)
    cddc:	d8800215 	stw	r2,8(sp)
    cde0:	d8000315 	stw	zero,12(sp)
    cde4:	d8800903 	ldbu	r2,36(sp)
    cde8:	d8800415 	stw	r2,16(sp)
    cdec:	39ffffcc 	andi	r7,r7,65535
    cdf0:	000cd700 	call	cd70 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
    cdf4:	dfc00517 	ldw	ra,20(sp)
    cdf8:	dec00604 	addi	sp,sp,24
    cdfc:	f800283a 	ret

0000ce00 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
    ce00:	defff804 	addi	sp,sp,-32
    ce04:	dfc00715 	stw	ra,28(sp)
    ce08:	3007883a 	mov	r3,r6
  alt_avalon_sgdma_construct_descriptor_burst(
    ce0c:	39ffffcc 	andi	r7,r7,65535
    ce10:	d9c00015 	stw	r7,0(sp)
    ce14:	d8000115 	stw	zero,4(sp)
    ce18:	d8000215 	stw	zero,8(sp)
    ce1c:	d8800817 	ldw	r2,32(sp)
    ce20:	d8800315 	stw	r2,12(sp)
    ce24:	d8000415 	stw	zero,16(sp)
    ce28:	d8800917 	ldw	r2,36(sp)
    ce2c:	d8800515 	stw	r2,20(sp)
    ce30:	d8000615 	stw	zero,24(sp)
    ce34:	000d883a 	mov	r6,zero
    ce38:	180f883a 	mov	r7,r3
    ce3c:	000cbfc0 	call	cbfc <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
    ce40:	dfc00717 	ldw	ra,28(sp)
    ce44:	dec00804 	addi	sp,sp,32
    ce48:	f800283a 	ret

0000ce4c <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
    ce4c:	defffd04 	addi	sp,sp,-12
    ce50:	dfc00215 	stw	ra,8(sp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
    ce54:	d8800317 	ldw	r2,12(sp)
    ce58:	d8800015 	stw	r2,0(sp)
    ce5c:	d8000115 	stw	zero,4(sp)
    ce60:	39ffffcc 	andi	r7,r7,65535
    ce64:	000ce000 	call	ce00 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
    ce68:	dfc00217 	ldw	ra,8(sp)
    ce6c:	dec00304 	addi	sp,sp,12
    ce70:	f800283a 	ret

0000ce74 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
    ce74:	defff804 	addi	sp,sp,-32
    ce78:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
    ce7c:	d880080b 	ldhu	r2,32(sp)
    ce80:	d8800015 	stw	r2,0(sp)
    ce84:	d8000115 	stw	zero,4(sp)
    ce88:	d8800917 	ldw	r2,36(sp)
    ce8c:	d8800215 	stw	r2,8(sp)
    ce90:	d8800a17 	ldw	r2,40(sp)
    ce94:	d8800315 	stw	r2,12(sp)
    ce98:	d8800b17 	ldw	r2,44(sp)
    ce9c:	d8800415 	stw	r2,16(sp)
    cea0:	d8800c17 	ldw	r2,48(sp)
    cea4:	d8800515 	stw	r2,20(sp)
    cea8:	d8000615 	stw	zero,24(sp)
    ceac:	000cbfc0 	call	cbfc <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
    ceb0:	dfc00717 	ldw	ra,28(sp)
    ceb4:	dec00804 	addi	sp,sp,32
    ceb8:	f800283a 	ret

0000cebc <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
    cebc:	defffa04 	addi	sp,sp,-24
    cec0:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
    cec4:	d880060b 	ldhu	r2,24(sp)
    cec8:	d8800015 	stw	r2,0(sp)
    cecc:	d8800717 	ldw	r2,28(sp)
    ced0:	d8800115 	stw	r2,4(sp)
    ced4:	d8800817 	ldw	r2,32(sp)
    ced8:	d8800215 	stw	r2,8(sp)
    cedc:	d8000315 	stw	zero,12(sp)
    cee0:	d8000415 	stw	zero,16(sp)
    cee4:	000ce740 	call	ce74 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
    cee8:	dfc00517 	ldw	ra,20(sp)
    ceec:	dec00604 	addi	sp,sp,24
    cef0:	f800283a 	ret

0000cef4 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
    cef4:	defffe04 	addi	sp,sp,-8
    cef8:	dfc00115 	stw	ra,4(sp)
    cefc:	dc000015 	stw	r16,0(sp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
    cf00:	d1603304 	addi	r5,gp,-32564
    cf04:	000dcc80 	call	dcc8 <alt_find_dev>
    cf08:	1021883a 	mov	r16,r2

  if (NULL == dev) {
    cf0c:	10000b1e 	bne	r2,zero,cf3c <alt_avalon_sgdma_open+0x48>
    cf10:	00800074 	movhi	r2,1
    cf14:	10835504 	addi	r2,r2,3412
    cf18:	10800017 	ldw	r2,0(r2)
    cf1c:	1000031e 	bne	r2,zero,cf2c <alt_avalon_sgdma_open+0x38>
    cf20:	00c00074 	movhi	r3,1
    cf24:	18cb3a04 	addi	r3,r3,11496
    cf28:	00000206 	br	cf34 <alt_avalon_sgdma_open+0x40>
    cf2c:	103ee83a 	callr	r2
    cf30:	1007883a 	mov	r3,r2
    ALT_ERRNO = ENODEV;
    cf34:	008004c4 	movi	r2,19
    cf38:	18800015 	stw	r2,0(r3)
  }

  return dev;
}
    cf3c:	8005883a 	mov	r2,r16
    cf40:	dfc00117 	ldw	ra,4(sp)
    cf44:	dc000017 	ldw	r16,0(sp)
    cf48:	dec00204 	addi	sp,sp,8
    cf4c:	f800283a 	ret

0000cf50 <alt_avalon_sgdma_check_descriptor_status>:
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
    cf50:	208007a3 	ldbuio	r2,30(r4)
    cf54:	10801fcc 	andi	r2,r2,127
    cf58:	10000226 	beq	r2,zero,cf64 <alt_avalon_sgdma_check_descriptor_status+0x14>
    cf5c:	00bffec4 	movi	r2,-5
    cf60:	f800283a 	ret
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
    cf64:	208007e3 	ldbuio	r2,31(r4)
    cf68:	1080200c 	andi	r2,r2,128
    cf6c:	10000226 	beq	r2,zero,cf78 <alt_avalon_sgdma_check_descriptor_status+0x28>
    cf70:	00bfe244 	movi	r2,-119
    cf74:	f800283a 	ret
    cf78:	0005883a 	mov	r2,zero
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
  }

    return 0;
}
    cf7c:	f800283a 	ret

0000cf80 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    cf80:	deffff04 	addi	sp,sp,-4
    cf84:	dfc00015 	stw	ra,0(sp)
    cf88:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    cf8c:	00c00074 	movhi	r3,1
    cf90:	18cb4204 	addi	r3,r3,11528
    cf94:	18800017 	ldw	r2,0(r3)
    cf98:	1000011e 	bne	r2,zero,cfa0 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    cf9c:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    cfa0:	008001c4 	movi	r2,7
    cfa4:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    cfa8:	3009883a 	mov	r4,r6
    cfac:	01800074 	movhi	r6,1
    cfb0:	31b3f104 	addi	r6,r6,-12348
    cfb4:	000b8e00 	call	b8e0 <alt_irq_register>
#endif  
}
    cfb8:	dfc00017 	ldw	ra,0(sp)
    cfbc:	dec00104 	addi	sp,sp,4
    cfc0:	f800283a 	ret

0000cfc4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    cfc4:	defffe04 	addi	sp,sp,-8
    cfc8:	dfc00115 	stw	ra,4(sp)
    cfcc:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    cfd0:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    cfd4:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cfd8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cfdc:	00bfff84 	movi	r2,-2
    cfe0:	8084703a 	and	r2,r16,r2
    cfe4:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    cfe8:	000e02c0 	call	e02c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cfec:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    cff0:	dfc00117 	ldw	ra,4(sp)
    cff4:	dc000017 	ldw	r16,0(sp)
    cff8:	dec00204 	addi	sp,sp,8
    cffc:	f800283a 	ret

0000d000 <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    d000:	2800021e 	bne	r5,zero,d00c <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
    d004:	2005883a 	mov	r2,r4
    d008:	00000106 	br	d010 <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    d00c:	20801014 	ori	r2,r4,64
    d010:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    d014:	10802014 	ori	r2,r2,128
    d018:	f800283a 	ret

0000d01c <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    d01c:	28c00003 	ldbu	r3,0(r5)
    d020:	18803fcc 	andi	r2,r3,255
    d024:	1080201c 	xori	r2,r2,128
    d028:	10bfe004 	addi	r2,r2,-128
    d02c:	10000d26 	beq	r2,zero,d064 <alt_up_character_lcd_string+0x48>
    d030:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    d034:	20800a17 	ldw	r2,40(r4)
    d038:	1185883a 	add	r2,r2,r6
    d03c:	18c03fcc 	andi	r3,r3,255
    d040:	18c0201c 	xori	r3,r3,128
    d044:	18ffe004 	addi	r3,r3,-128
    d048:	10c00025 	stbio	r3,0(r2)
		++ptr;
    d04c:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    d050:	28c00003 	ldbu	r3,0(r5)
    d054:	18803fcc 	andi	r2,r3,255
    d058:	1080201c 	xori	r2,r2,128
    d05c:	10bfe004 	addi	r2,r2,-128
    d060:	103ff41e 	bne	r2,zero,d034 <alt_up_character_lcd_string+0x18>
    d064:	f800283a 	ret

0000d068 <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    d068:	30000926 	beq	r6,zero,d090 <alt_up_character_lcd_write+0x28>
    d06c:	000f883a 	mov	r7,zero
    d070:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    d074:	20800a17 	ldw	r2,40(r4)
    d078:	1205883a 	add	r2,r2,r8
    d07c:	3947883a 	add	r3,r7,r5
    d080:	18c00007 	ldb	r3,0(r3)
    d084:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    d088:	3a0f883a 	add	r7,r7,r8
    d08c:	31fff91e 	bne	r6,r7,d074 <alt_up_character_lcd_write+0xc>
    d090:	f800283a 	ret

0000d094 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    d094:	deffff04 	addi	sp,sp,-4
    d098:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    d09c:	21000017 	ldw	r4,0(r4)
    d0a0:	000d0680 	call	d068 <alt_up_character_lcd_write>
	return 0;
}
    d0a4:	0005883a 	mov	r2,zero
    d0a8:	dfc00017 	ldw	ra,0(sp)
    d0ac:	dec00104 	addi	sp,sp,4
    d0b0:	f800283a 	ret

0000d0b4 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    d0b4:	20c00a17 	ldw	r3,40(r4)
    d0b8:	00800044 	movi	r2,1
    d0bc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    d0c0:	f800283a 	ret

0000d0c4 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    d0c4:	20800a17 	ldw	r2,40(r4)
    d0c8:	29403fcc 	andi	r5,r5,255
    d0cc:	11400025 	stbio	r5,0(r2)
}
    d0d0:	f800283a 	ret

0000d0d4 <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    d0d4:	deffff04 	addi	sp,sp,-4
    d0d8:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    d0dc:	014003c4 	movi	r5,15
    d0e0:	000d0c40 	call	d0c4 <alt_up_character_lcd_send_cmd>
}
    d0e4:	dfc00017 	ldw	ra,0(sp)
    d0e8:	dec00104 	addi	sp,sp,4
    d0ec:	f800283a 	ret

0000d0f0 <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    d0f0:	deffff04 	addi	sp,sp,-4
    d0f4:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    d0f8:	01400304 	movi	r5,12
    d0fc:	000d0c40 	call	d0c4 <alt_up_character_lcd_send_cmd>
}
    d100:	dfc00017 	ldw	ra,0(sp)
    d104:	dec00104 	addi	sp,sp,4
    d108:	f800283a 	ret

0000d10c <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    d10c:	defffd04 	addi	sp,sp,-12
    d110:	dfc00215 	stw	ra,8(sp)
    d114:	dc400115 	stw	r17,4(sp)
    d118:	dc000015 	stw	r16,0(sp)
    d11c:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    d120:	008009c4 	movi	r2,39
    d124:	11400e36 	bltu	r2,r5,d160 <alt_up_character_lcd_erase_pos+0x54>
    d128:	04400044 	movi	r17,1
    d12c:	89800c36 	bltu	r17,r6,d160 <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    d130:	2809883a 	mov	r4,r5
    d134:	300b883a 	mov	r5,r6
    d138:	000d0000 	call	d000 <get_DDRAM_addr>
    d13c:	8009883a 	mov	r4,r16
    d140:	11403fcc 	andi	r5,r2,255
    d144:	000d0c40 	call	d0c4 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    d148:	80800a17 	ldw	r2,40(r16)
    d14c:	1445883a 	add	r2,r2,r17
    d150:	00c00084 	movi	r3,2
    d154:	10c00025 	stbio	r3,0(r2)
    d158:	0005883a 	mov	r2,zero
    d15c:	00000106 	br	d164 <alt_up_character_lcd_erase_pos+0x58>
	return 0;
    d160:	00bfffc4 	movi	r2,-1
}
    d164:	dfc00217 	ldw	ra,8(sp)
    d168:	dc400117 	ldw	r17,4(sp)
    d16c:	dc000017 	ldw	r16,0(sp)
    d170:	dec00304 	addi	sp,sp,12
    d174:	f800283a 	ret

0000d178 <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    d178:	defffa04 	addi	sp,sp,-24
    d17c:	dfc00515 	stw	ra,20(sp)
    d180:	dd000415 	stw	r20,16(sp)
    d184:	dcc00315 	stw	r19,12(sp)
    d188:	dc800215 	stw	r18,8(sp)
    d18c:	dc400115 	stw	r17,4(sp)
    d190:	dc000015 	stw	r16,0(sp)
    d194:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    d198:	28001326 	beq	r5,zero,d1e8 <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    d19c:	0140020e 	bge	zero,r5,d1a8 <alt_up_character_lcd_shift_display+0x30>
    d1a0:	05000704 	movi	r20,28
    d1a4:	00000106 	br	d1ac <alt_up_character_lcd_shift_display+0x34>
    d1a8:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    d1ac:	2800010e 	bge	r5,zero,d1b4 <alt_up_character_lcd_shift_display+0x3c>
    d1b0:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    d1b4:	00bfffc4 	movi	r2,-1
    d1b8:	28a1883a 	add	r16,r5,r2
    d1bc:	80c03fcc 	andi	r3,r16,255
    d1c0:	10803fcc 	andi	r2,r2,255
    d1c4:	18800826 	beq	r3,r2,d1e8 <alt_up_character_lcd_shift_display+0x70>
    d1c8:	04bfffc4 	movi	r18,-1
    d1cc:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    d1d0:	9809883a 	mov	r4,r19
    d1d4:	a1403fcc 	andi	r5,r20,255
    d1d8:	000d0c40 	call	d0c4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    d1dc:	84a1883a 	add	r16,r16,r18
    d1e0:	80803fcc 	andi	r2,r16,255
    d1e4:	147ffa1e 	bne	r2,r17,d1d0 <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    d1e8:	dfc00517 	ldw	ra,20(sp)
    d1ec:	dd000417 	ldw	r20,16(sp)
    d1f0:	dcc00317 	ldw	r19,12(sp)
    d1f4:	dc800217 	ldw	r18,8(sp)
    d1f8:	dc400117 	ldw	r17,4(sp)
    d1fc:	dc000017 	ldw	r16,0(sp)
    d200:	dec00604 	addi	sp,sp,24
    d204:	f800283a 	ret

0000d208 <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    d208:	defffa04 	addi	sp,sp,-24
    d20c:	dfc00515 	stw	ra,20(sp)
    d210:	dd000415 	stw	r20,16(sp)
    d214:	dcc00315 	stw	r19,12(sp)
    d218:	dc800215 	stw	r18,8(sp)
    d21c:	dc400115 	stw	r17,4(sp)
    d220:	dc000015 	stw	r16,0(sp)
    d224:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    d228:	28001326 	beq	r5,zero,d278 <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    d22c:	0140020e 	bge	zero,r5,d238 <alt_up_character_lcd_shift_cursor+0x30>
    d230:	05000504 	movi	r20,20
    d234:	00000106 	br	d23c <alt_up_character_lcd_shift_cursor+0x34>
    d238:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    d23c:	2800010e 	bge	r5,zero,d244 <alt_up_character_lcd_shift_cursor+0x3c>
    d240:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    d244:	00bfffc4 	movi	r2,-1
    d248:	28a1883a 	add	r16,r5,r2
    d24c:	80c03fcc 	andi	r3,r16,255
    d250:	10803fcc 	andi	r2,r2,255
    d254:	18800826 	beq	r3,r2,d278 <alt_up_character_lcd_shift_cursor+0x70>
    d258:	04bfffc4 	movi	r18,-1
    d25c:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    d260:	9809883a 	mov	r4,r19
    d264:	a1403fcc 	andi	r5,r20,255
    d268:	000d0c40 	call	d0c4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    d26c:	84a1883a 	add	r16,r16,r18
    d270:	80803fcc 	andi	r2,r16,255
    d274:	147ffa1e 	bne	r2,r17,d260 <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    d278:	dfc00517 	ldw	ra,20(sp)
    d27c:	dd000417 	ldw	r20,16(sp)
    d280:	dcc00317 	ldw	r19,12(sp)
    d284:	dc800217 	ldw	r18,8(sp)
    d288:	dc400117 	ldw	r17,4(sp)
    d28c:	dc000017 	ldw	r16,0(sp)
    d290:	dec00604 	addi	sp,sp,24
    d294:	f800283a 	ret

0000d298 <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    d298:	defffe04 	addi	sp,sp,-8
    d29c:	dfc00115 	stw	ra,4(sp)
    d2a0:	dc000015 	stw	r16,0(sp)
    d2a4:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    d2a8:	008009c4 	movi	r2,39
    d2ac:	11400a36 	bltu	r2,r5,d2d8 <alt_up_character_lcd_set_cursor_pos+0x40>
    d2b0:	00800044 	movi	r2,1
    d2b4:	11800836 	bltu	r2,r6,d2d8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    d2b8:	2809883a 	mov	r4,r5
    d2bc:	300b883a 	mov	r5,r6
    d2c0:	000d0000 	call	d000 <get_DDRAM_addr>
    d2c4:	8009883a 	mov	r4,r16
    d2c8:	11403fcc 	andi	r5,r2,255
    d2cc:	000d0c40 	call	d0c4 <alt_up_character_lcd_send_cmd>
    d2d0:	0005883a 	mov	r2,zero
    d2d4:	00000106 	br	d2dc <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    d2d8:	00bfffc4 	movi	r2,-1
}
    d2dc:	dfc00117 	ldw	ra,4(sp)
    d2e0:	dc000017 	ldw	r16,0(sp)
    d2e4:	dec00204 	addi	sp,sp,8
    d2e8:	f800283a 	ret

0000d2ec <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    d2ec:	deffff04 	addi	sp,sp,-4
    d2f0:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    d2f4:	01400074 	movhi	r5,1
    d2f8:	29435204 	addi	r5,r5,3400
    d2fc:	000dcc80 	call	dcc8 <alt_find_dev>

  return dev;
}
    d300:	dfc00017 	ldw	ra,0(sp)
    d304:	dec00104 	addi	sp,sp,4
    d308:	f800283a 	ret

0000d30c <alt_up_irda_check_parity>:
}

int alt_up_irda_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    d30c:	200495ba 	slli	r2,r4,22
}
    d310:	1005d7fa 	srai	r2,r2,31
    d314:	f800283a 	ret

0000d318 <alt_up_irda_open_dev>:
	}
	return count;
}

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    d318:	deffff04 	addi	sp,sp,-4
    d31c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    d320:	01400074 	movhi	r5,1
    d324:	29435204 	addi	r5,r5,3400
    d328:	000dcc80 	call	dcc8 <alt_find_dev>

  return dev;
}
    d32c:	dfc00017 	ldw	ra,0(sp)
    d330:	dec00104 	addi	sp,sp,4
    d334:	f800283a 	ret

0000d338 <alt_up_irda_read_data>:
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
	return 0;
}

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    d338:	defffd04 	addi	sp,sp,-12
    d33c:	dfc00215 	stw	ra,8(sp)
    d340:	dc400115 	stw	r17,4(sp)
    d344:	dc000015 	stw	r16,0(sp)
    d348:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    d34c:	20800a17 	ldw	r2,40(r4)
    d350:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    d354:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_irda_check_parity(data_reg);
    d358:	8009883a 	mov	r4,r16
    d35c:	000d30c0 	call	d30c <alt_up_irda_check_parity>
    d360:	88800005 	stb	r2,0(r17)
    d364:	8420000c 	andi	r16,r16,32768
    d368:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
}
    d36c:	80bfffc4 	addi	r2,r16,-1
    d370:	dfc00217 	ldw	ra,8(sp)
    d374:	dc400117 	ldw	r17,4(sp)
    d378:	dc000017 	ldw	r16,0(sp)
    d37c:	dec00304 	addi	sp,sp,12
    d380:	f800283a 	ret

0000d384 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    d384:	defff904 	addi	sp,sp,-28
    d388:	dfc00615 	stw	ra,24(sp)
    d38c:	dd000515 	stw	r20,20(sp)
    d390:	dcc00415 	stw	r19,16(sp)
    d394:	dc800315 	stw	r18,12(sp)
    d398:	dc400215 	stw	r17,8(sp)
    d39c:	dc000115 	stw	r16,4(sp)
    d3a0:	2821883a 	mov	r16,r5
    d3a4:	3029883a 	mov	r20,r6
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    d3a8:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    d3ac:	3000021e 	bne	r6,zero,d3b8 <alt_up_irda_read_fd+0x34>
    d3b0:	0025883a 	mov	r18,zero
    d3b4:	00000a06 	br	d3e0 <alt_up_irda_read_fd+0x5c>
    d3b8:	0025883a 	mov	r18,zero
    d3bc:	04400044 	movi	r17,1
    d3c0:	800b883a 	mov	r5,r16
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    d3c4:	8461883a 	add	r16,r16,r17
    d3c8:	9809883a 	mov	r4,r19
    d3cc:	d80d883a 	mov	r6,sp
    d3d0:	000d3380 	call	d338 <alt_up_irda_read_data>
    d3d4:	1000021e 	bne	r2,zero,d3e0 <alt_up_irda_read_fd+0x5c>
			count++;
    d3d8:	9465883a 	add	r18,r18,r17
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    d3dc:	a4bff81e 	bne	r20,r18,d3c0 <alt_up_irda_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    d3e0:	9005883a 	mov	r2,r18
    d3e4:	dfc00617 	ldw	ra,24(sp)
    d3e8:	dd000517 	ldw	r20,20(sp)
    d3ec:	dcc00417 	ldw	r19,16(sp)
    d3f0:	dc800317 	ldw	r18,12(sp)
    d3f4:	dc400217 	ldw	r17,8(sp)
    d3f8:	dc000117 	ldw	r16,4(sp)
    d3fc:	dec00704 	addi	sp,sp,28
    d400:	f800283a 	ret

0000d404 <alt_up_irda_get_available_space_in_write_FIFO>:
}

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    d404:	20800a17 	ldw	r2,40(r4)
    d408:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
}
    d40c:	1004d43a 	srli	r2,r2,16
    d410:	f800283a 	ret

0000d414 <alt_up_irda_write_data>:
}

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    d414:	20800a17 	ldw	r2,40(r4)
    d418:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    d41c:	29403fcc 	andi	r5,r5,255
    d420:	11400035 	stwio	r5,0(r2)
	return 0;
}
    d424:	0005883a 	mov	r2,zero
    d428:	f800283a 	ret

0000d42c <alt_up_irda_write_fd>:
	}
	return count;
}

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    d42c:	defffa04 	addi	sp,sp,-24
    d430:	dfc00515 	stw	ra,20(sp)
    d434:	dd000415 	stw	r20,16(sp)
    d438:	dcc00315 	stw	r19,12(sp)
    d43c:	dc800215 	stw	r18,8(sp)
    d440:	dc400115 	stw	r17,4(sp)
    d444:	dc000015 	stw	r16,0(sp)
    d448:	3029883a 	mov	r20,r6
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    d44c:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	while(len--)
    d450:	3000021e 	bne	r6,zero,d45c <alt_up_irda_write_fd+0x30>
    d454:	0025883a 	mov	r18,zero
    d458:	00000a06 	br	d484 <alt_up_irda_write_fd+0x58>
    d45c:	2821883a 	mov	r16,r5
    d460:	0025883a 	mov	r18,zero
    d464:	04400044 	movi	r17,1
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    d468:	9809883a 	mov	r4,r19
    d46c:	81403fcc 	andi	r5,r16,255
    d470:	000d4140 	call	d414 <alt_up_irda_write_data>
    d474:	1000031e 	bne	r2,zero,d484 <alt_up_irda_write_fd+0x58>
			count++;
    d478:	9465883a 	add	r18,r18,r17
    d47c:	8c21883a 	add	r16,r17,r16

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    d480:	a4bff91e 	bne	r20,r18,d468 <alt_up_irda_write_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    d484:	9005883a 	mov	r2,r18
    d488:	dfc00517 	ldw	ra,20(sp)
    d48c:	dd000417 	ldw	r20,16(sp)
    d490:	dcc00317 	ldw	r19,12(sp)
    d494:	dc800217 	ldw	r18,8(sp)
    d498:	dc400117 	ldw	r17,4(sp)
    d49c:	dc000017 	ldw	r16,0(sp)
    d4a0:	dec00604 	addi	sp,sp,24
    d4a4:	f800283a 	ret

0000d4a8 <alt_up_irda_disable_read_interrupt>:
}

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    d4a8:	20800a17 	ldw	r2,40(r4)
    d4ac:	10800104 	addi	r2,r2,4
    d4b0:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    d4b4:	013fff84 	movi	r4,-2
    d4b8:	1906703a 	and	r3,r3,r4
    d4bc:	10c00035 	stwio	r3,0(r2)
}
    d4c0:	f800283a 	ret

0000d4c4 <alt_up_irda_enable_read_interrupt>:


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    d4c4:	20c00a17 	ldw	r3,40(r4)
    d4c8:	18c00104 	addi	r3,r3,4
    d4cc:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    d4d0:	10800054 	ori	r2,r2,1
    d4d4:	18800035 	stwio	r2,0(r3)
}
    d4d8:	f800283a 	ret

0000d4dc <alt_up_irda_get_used_space_in_read_FIFO>:
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    d4dc:	20800a17 	ldw	r2,40(r4)
    d4e0:	108000ab 	ldhuio	r2,2(r2)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
}
    d4e4:	10bfffcc 	andi	r2,r2,65535
    d4e8:	f800283a 	ret

0000d4ec <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    d4ec:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    d4f0:	1004c03a 	cmpne	r2,r2,zero
    d4f4:	f800283a 	ret

0000d4f8 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    d4f8:	2080004c 	andi	r2,r4,1
    d4fc:	f800283a 	ret

0000d500 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    d500:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    d504:	1004c03a 	cmpne	r2,r2,zero
    d508:	f800283a 	ret

0000d50c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    d50c:	2004d43a 	srli	r2,r4,16
    d510:	f800283a 	ret

0000d514 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    d514:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    d518:	1004c03a 	cmpne	r2,r2,zero
    d51c:	f800283a 	ret

0000d520 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    d520:	20803fcc 	andi	r2,r4,255
    d524:	f800283a 	ret

0000d528 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    d528:	deffff04 	addi	sp,sp,-4
    d52c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    d530:	01400074 	movhi	r5,1
    d534:	29435204 	addi	r5,r5,3400
    d538:	000dcc80 	call	dcc8 <alt_find_dev>

  return dev;
}
    d53c:	dfc00017 	ldw	ra,0(sp)
    d540:	dec00104 	addi	sp,sp,4
    d544:	f800283a 	ret

0000d548 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    d548:	defffe04 	addi	sp,sp,-8
    d54c:	dfc00115 	stw	ra,4(sp)
    d550:	dc000015 	stw	r16,0(sp)
    d554:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    d558:	81000037 	ldwio	r4,0(r16)
    d55c:	000d50c0 	call	d50c <read_num_bytes_available>
    d560:	10bfffcc 	andi	r2,r2,65535
    d564:	103ffc1e 	bne	r2,zero,d558 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    d568:	dfc00117 	ldw	ra,4(sp)
    d56c:	dc000017 	ldw	r16,0(sp)
    d570:	dec00204 	addi	sp,sp,8
    d574:	f800283a 	ret

0000d578 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    d578:	defffd04 	addi	sp,sp,-12
    d57c:	dfc00215 	stw	ra,8(sp)
    d580:	dc400115 	stw	r17,4(sp)
    d584:	dc000015 	stw	r16,0(sp)
    d588:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    d58c:	20800a17 	ldw	r2,40(r4)
    d590:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    d594:	8009883a 	mov	r4,r16
    d598:	000d5140 	call	d514 <read_data_valid>
    d59c:	10803fcc 	andi	r2,r2,255
    d5a0:	1000021e 	bne	r2,zero,d5ac <alt_up_ps2_read_data_byte+0x34>
    d5a4:	00bfffc4 	movi	r2,-1
    d5a8:	00000406 	br	d5bc <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    d5ac:	8009883a 	mov	r4,r16
    d5b0:	000d5200 	call	d520 <read_data_byte>
    d5b4:	88800005 	stb	r2,0(r17)
    d5b8:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    d5bc:	dfc00217 	ldw	ra,8(sp)
    d5c0:	dc400117 	ldw	r17,4(sp)
    d5c4:	dc000017 	ldw	r16,0(sp)
    d5c8:	dec00304 	addi	sp,sp,12
    d5cc:	f800283a 	ret

0000d5d0 <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    d5d0:	defffb04 	addi	sp,sp,-20
    d5d4:	dfc00415 	stw	ra,16(sp)
    d5d8:	dcc00315 	stw	r19,12(sp)
    d5dc:	dc800215 	stw	r18,8(sp)
    d5e0:	dc400115 	stw	r17,4(sp)
    d5e4:	dc000015 	stw	r16,0(sp)
    d5e8:	2025883a 	mov	r18,r4
    d5ec:	2827883a 	mov	r19,r5
    d5f0:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    d5f4:	90800a17 	ldw	r2,40(r18)
    d5f8:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    d5fc:	8009883a 	mov	r4,r16
    d600:	000d5140 	call	d514 <read_data_valid>
    d604:	10803fcc 	andi	r2,r2,255
    d608:	10000526 	beq	r2,zero,d620 <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    d60c:	8009883a 	mov	r4,r16
    d610:	000d5200 	call	d520 <read_data_byte>
    d614:	98800005 	stb	r2,0(r19)
    d618:	0005883a 	mov	r2,zero
    d61c:	00000506 	br	d634 <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    d620:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    d624:	90800c17 	ldw	r2,48(r18)
    d628:	103ff226 	beq	r2,zero,d5f4 <alt_up_ps2_read_data_byte_timeout+0x24>
    d62c:	147ff12e 	bgeu	r2,r17,d5f4 <alt_up_ps2_read_data_byte_timeout+0x24>
    d630:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    d634:	dfc00417 	ldw	ra,16(sp)
    d638:	dcc00317 	ldw	r19,12(sp)
    d63c:	dc800217 	ldw	r18,8(sp)
    d640:	dc400117 	ldw	r17,4(sp)
    d644:	dc000017 	ldw	r16,0(sp)
    d648:	dec00504 	addi	sp,sp,20
    d64c:	f800283a 	ret

0000d650 <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    d650:	deffff04 	addi	sp,sp,-4
    d654:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    d658:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    d65c:	0180010e 	bge	zero,r6,d664 <alt_up_ps2_read_fd+0x14>
    d660:	003fff06 	br	d660 <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    d664:	000d5d00 	call	d5d0 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    d668:	1005003a 	cmpeq	r2,r2,zero
    d66c:	dfc00017 	ldw	ra,0(sp)
    d670:	dec00104 	addi	sp,sp,4
    d674:	f800283a 	ret

0000d678 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    d678:	defffc04 	addi	sp,sp,-16
    d67c:	dfc00315 	stw	ra,12(sp)
    d680:	dc400215 	stw	r17,8(sp)
    d684:	dc000115 	stw	r16,4(sp)
    d688:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    d68c:	d8000005 	stb	zero,0(sp)
    d690:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    d694:	8009883a 	mov	r4,r16
    d698:	d80b883a 	mov	r5,sp
    d69c:	000d5d00 	call	d5d0 <alt_up_ps2_read_data_byte_timeout>
    d6a0:	1007883a 	mov	r3,r2
		if ( status == 0)
    d6a4:	10803fcc 	andi	r2,r2,255
    d6a8:	1000041e 	bne	r2,zero,d6bc <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    d6ac:	d8800003 	ldbu	r2,0(sp)
    d6b0:	147ff81e 	bne	r2,r17,d694 <alt_up_ps2_wait_for_ack+0x1c>
    d6b4:	0005883a 	mov	r2,zero
    d6b8:	00000106 	br	d6c0 <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    d6bc:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    d6c0:	dfc00317 	ldw	ra,12(sp)
    d6c4:	dc400217 	ldw	r17,8(sp)
    d6c8:	dc000117 	ldw	r16,4(sp)
    d6cc:	dec00404 	addi	sp,sp,16
    d6d0:	f800283a 	ret

0000d6d4 <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    d6d4:	deffff04 	addi	sp,sp,-4
    d6d8:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    d6dc:	20800a17 	ldw	r2,40(r4)
    d6e0:	29403fcc 	andi	r5,r5,255
    d6e4:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    d6e8:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    d6ec:	11000137 	ldwio	r4,4(r2)
    d6f0:	000d5000 	call	d500 <read_CE_bit>
    d6f4:	10803fcc 	andi	r2,r2,255
    d6f8:	10000226 	beq	r2,zero,d704 <alt_up_ps2_write_data_byte+0x30>
    d6fc:	00bffec4 	movi	r2,-5
    d700:	00000106 	br	d708 <alt_up_ps2_write_data_byte+0x34>
    d704:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    d708:	dfc00017 	ldw	ra,0(sp)
    d70c:	dec00104 	addi	sp,sp,4
    d710:	f800283a 	ret

0000d714 <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    d714:	defffb04 	addi	sp,sp,-20
    d718:	dfc00415 	stw	ra,16(sp)
    d71c:	dcc00315 	stw	r19,12(sp)
    d720:	dc800215 	stw	r18,8(sp)
    d724:	dc400115 	stw	r17,4(sp)
    d728:	dc000015 	stw	r16,0(sp)
    d72c:	2827883a 	mov	r19,r5
    d730:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    d734:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    d738:	01800216 	blt	zero,r6,d744 <alt_up_ps2_write_fd+0x30>
    d73c:	0021883a 	mov	r16,zero
    d740:	00000806 	br	d764 <alt_up_ps2_write_fd+0x50>
    d744:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    d748:	9c05883a 	add	r2,r19,r16
    d74c:	8809883a 	mov	r4,r17
    d750:	11400003 	ldbu	r5,0(r2)
    d754:	000d6d40 	call	d6d4 <alt_up_ps2_write_data_byte>
		if (status!=0)
    d758:	1000021e 	bne	r2,zero,d764 <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    d75c:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    d760:	943ff91e 	bne	r18,r16,d748 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    d764:	8005883a 	mov	r2,r16
    d768:	dfc00417 	ldw	ra,16(sp)
    d76c:	dcc00317 	ldw	r19,12(sp)
    d770:	dc800217 	ldw	r18,8(sp)
    d774:	dc400117 	ldw	r17,4(sp)
    d778:	dc000017 	ldw	r16,0(sp)
    d77c:	dec00504 	addi	sp,sp,20
    d780:	f800283a 	ret

0000d784 <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    d784:	defffe04 	addi	sp,sp,-8
    d788:	dfc00115 	stw	ra,4(sp)
    d78c:	dc000015 	stw	r16,0(sp)
    d790:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    d794:	29403fcc 	andi	r5,r5,255
    d798:	000d6d40 	call	d6d4 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    d79c:	1000021e 	bne	r2,zero,d7a8 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    d7a0:	8009883a 	mov	r4,r16
    d7a4:	000d6780 	call	d678 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    d7a8:	dfc00117 	ldw	ra,4(sp)
    d7ac:	dc000017 	ldw	r16,0(sp)
    d7b0:	dec00204 	addi	sp,sp,8
    d7b4:	f800283a 	ret

0000d7b8 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    d7b8:	defffd04 	addi	sp,sp,-12
    d7bc:	dfc00215 	stw	ra,8(sp)
    d7c0:	dc000115 	stw	r16,4(sp)
    d7c4:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    d7c8:	01403fc4 	movi	r5,255
    d7cc:	000d7840 	call	d784 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    d7d0:	1000171e 	bne	r2,zero,d830 <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    d7d4:	8009883a 	mov	r4,r16
    d7d8:	d80b883a 	mov	r5,sp
    d7dc:	000d5d00 	call	d5d0 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    d7e0:	1000131e 	bne	r2,zero,d830 <alt_up_ps2_init+0x78>
    d7e4:	d8c00003 	ldbu	r3,0(sp)
    d7e8:	00802a84 	movi	r2,170
    d7ec:	1880101e 	bne	r3,r2,d830 <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    d7f0:	8009883a 	mov	r4,r16
    d7f4:	d80b883a 	mov	r5,sp
    d7f8:	000d5d00 	call	d5d0 <alt_up_ps2_read_data_byte_timeout>
    d7fc:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    d800:	00bfe304 	movi	r2,-116
    d804:	1880031e 	bne	r3,r2,d814 <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    d808:	00800044 	movi	r2,1
    d80c:	80800d15 	stw	r2,52(r16)
    d810:	00000706 	br	d830 <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    d814:	1800061e 	bne	r3,zero,d830 <alt_up_ps2_init+0x78>
    d818:	d8800003 	ldbu	r2,0(sp)
    d81c:	1000041e 	bne	r2,zero,d830 <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    d820:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    d824:	8009883a 	mov	r4,r16
    d828:	01403d04 	movi	r5,244
    d82c:	000d6d40 	call	d6d4 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    d830:	dfc00217 	ldw	ra,8(sp)
    d834:	dc000117 	ldw	r16,4(sp)
    d838:	dec00304 	addi	sp,sp,12
    d83c:	f800283a 	ret

0000d840 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    d840:	20800a17 	ldw	r2,40(r4)
    d844:	10800104 	addi	r2,r2,4
    d848:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    d84c:	013fff84 	movi	r4,-2
    d850:	1906703a 	and	r3,r3,r4
    d854:	10c00035 	stwio	r3,0(r2)
}
    d858:	f800283a 	ret

0000d85c <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    d85c:	20c00a17 	ldw	r3,40(r4)
    d860:	18c00104 	addi	r3,r3,4
    d864:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    d868:	10800054 	ori	r2,r2,1
    d86c:	18800035 	stwio	r2,0(r3)
}
    d870:	f800283a 	ret

0000d874 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    d874:	200495ba 	slli	r2,r4,22
}
    d878:	1005d7fa 	srai	r2,r2,31
    d87c:	f800283a 	ret

0000d880 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    d880:	deffff04 	addi	sp,sp,-4
    d884:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    d888:	01400074 	movhi	r5,1
    d88c:	29435204 	addi	r5,r5,3400
    d890:	000dcc80 	call	dcc8 <alt_find_dev>

  return dev;
}
    d894:	dfc00017 	ldw	ra,0(sp)
    d898:	dec00104 	addi	sp,sp,4
    d89c:	f800283a 	ret

0000d8a0 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    d8a0:	defffd04 	addi	sp,sp,-12
    d8a4:	dfc00215 	stw	ra,8(sp)
    d8a8:	dc400115 	stw	r17,4(sp)
    d8ac:	dc000015 	stw	r16,0(sp)
    d8b0:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    d8b4:	20800a17 	ldw	r2,40(r4)
    d8b8:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    d8bc:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    d8c0:	8009883a 	mov	r4,r16
    d8c4:	000d8740 	call	d874 <alt_up_rs232_check_parity>
    d8c8:	88800005 	stb	r2,0(r17)
    d8cc:	8420000c 	andi	r16,r16,32768
    d8d0:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    d8d4:	80bfffc4 	addi	r2,r16,-1
    d8d8:	dfc00217 	ldw	ra,8(sp)
    d8dc:	dc400117 	ldw	r17,4(sp)
    d8e0:	dc000017 	ldw	r16,0(sp)
    d8e4:	dec00304 	addi	sp,sp,12
    d8e8:	f800283a 	ret

0000d8ec <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    d8ec:	defff904 	addi	sp,sp,-28
    d8f0:	dfc00615 	stw	ra,24(sp)
    d8f4:	dd000515 	stw	r20,20(sp)
    d8f8:	dcc00415 	stw	r19,16(sp)
    d8fc:	dc800315 	stw	r18,12(sp)
    d900:	dc400215 	stw	r17,8(sp)
    d904:	dc000115 	stw	r16,4(sp)
    d908:	2821883a 	mov	r16,r5
    d90c:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    d910:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    d914:	3000021e 	bne	r6,zero,d920 <alt_up_rs232_read_fd+0x34>
    d918:	0025883a 	mov	r18,zero
    d91c:	00000a06 	br	d948 <alt_up_rs232_read_fd+0x5c>
    d920:	0025883a 	mov	r18,zero
    d924:	04400044 	movi	r17,1
    d928:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    d92c:	8461883a 	add	r16,r16,r17
    d930:	9809883a 	mov	r4,r19
    d934:	d80d883a 	mov	r6,sp
    d938:	000d8a00 	call	d8a0 <alt_up_rs232_read_data>
    d93c:	1000021e 	bne	r2,zero,d948 <alt_up_rs232_read_fd+0x5c>
			count++;
    d940:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    d944:	a4bff81e 	bne	r20,r18,d928 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    d948:	9005883a 	mov	r2,r18
    d94c:	dfc00617 	ldw	ra,24(sp)
    d950:	dd000517 	ldw	r20,20(sp)
    d954:	dcc00417 	ldw	r19,16(sp)
    d958:	dc800317 	ldw	r18,12(sp)
    d95c:	dc400217 	ldw	r17,8(sp)
    d960:	dc000117 	ldw	r16,4(sp)
    d964:	dec00704 	addi	sp,sp,28
    d968:	f800283a 	ret

0000d96c <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    d96c:	20800a17 	ldw	r2,40(r4)
    d970:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    d974:	1004d43a 	srli	r2,r2,16
    d978:	f800283a 	ret

0000d97c <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    d97c:	20800a17 	ldw	r2,40(r4)
    d980:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    d984:	29403fcc 	andi	r5,r5,255
    d988:	11400035 	stwio	r5,0(r2)
	return 0;
}
    d98c:	0005883a 	mov	r2,zero
    d990:	f800283a 	ret

0000d994 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    d994:	defffb04 	addi	sp,sp,-20
    d998:	dfc00415 	stw	ra,16(sp)
    d99c:	dcc00315 	stw	r19,12(sp)
    d9a0:	dc800215 	stw	r18,8(sp)
    d9a4:	dc400115 	stw	r17,4(sp)
    d9a8:	dc000015 	stw	r16,0(sp)
    d9ac:	2827883a 	mov	r19,r5
    d9b0:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    d9b4:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    d9b8:	3000021e 	bne	r6,zero,d9c4 <alt_up_rs232_write_fd+0x30>
    d9bc:	0021883a 	mov	r16,zero
    d9c0:	00000806 	br	d9e4 <alt_up_rs232_write_fd+0x50>
    d9c4:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    d9c8:	84c5883a 	add	r2,r16,r19
    d9cc:	8809883a 	mov	r4,r17
    d9d0:	11400003 	ldbu	r5,0(r2)
    d9d4:	000d97c0 	call	d97c <alt_up_rs232_write_data>
    d9d8:	1000021e 	bne	r2,zero,d9e4 <alt_up_rs232_write_fd+0x50>
		{
			count++;
    d9dc:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    d9e0:	943ff91e 	bne	r18,r16,d9c8 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    d9e4:	8005883a 	mov	r2,r16
    d9e8:	dfc00417 	ldw	ra,16(sp)
    d9ec:	dcc00317 	ldw	r19,12(sp)
    d9f0:	dc800217 	ldw	r18,8(sp)
    d9f4:	dc400117 	ldw	r17,4(sp)
    d9f8:	dc000017 	ldw	r16,0(sp)
    d9fc:	dec00504 	addi	sp,sp,20
    da00:	f800283a 	ret

0000da04 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    da04:	20800a17 	ldw	r2,40(r4)
    da08:	10800104 	addi	r2,r2,4
    da0c:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    da10:	013fff84 	movi	r4,-2
    da14:	1906703a 	and	r3,r3,r4
    da18:	10c00035 	stwio	r3,0(r2)
}
    da1c:	f800283a 	ret

0000da20 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    da20:	20c00a17 	ldw	r3,40(r4)
    da24:	18c00104 	addi	r3,r3,4
    da28:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    da2c:	10800054 	ori	r2,r2,1
    da30:	18800035 	stwio	r2,0(r3)
}
    da34:	f800283a 	ret

0000da38 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    da38:	20800a17 	ldw	r2,40(r4)
    da3c:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    da40:	10bfffcc 	andi	r2,r2,65535
    da44:	f800283a 	ret

0000da48 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    da48:	20800c17 	ldw	r2,48(r4)
    da4c:	30801c2e 	bgeu	r6,r2,dac0 <alt_up_char_buffer_string+0x78>
    da50:	20800d17 	ldw	r2,52(r4)
    da54:	38801a2e 	bgeu	r7,r2,dac0 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    da58:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    da5c:	28c00003 	ldbu	r3,0(r5)
    da60:	18803fcc 	andi	r2,r3,255
    da64:	1080201c 	xori	r2,r2,128
    da68:	10bfe004 	addi	r2,r2,-128
    da6c:	10001626 	beq	r2,zero,dac8 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    da70:	3a04983a 	sll	r2,r7,r8
    da74:	308f883a 	add	r7,r6,r2
    da78:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    da7c:	20800b17 	ldw	r2,44(r4)
    da80:	3885883a 	add	r2,r7,r2
    da84:	18c03fcc 	andi	r3,r3,255
    da88:	18c0201c 	xori	r3,r3,128
    da8c:	18ffe004 	addi	r3,r3,-128
    da90:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    da94:	320d883a 	add	r6,r6,r8
    da98:	20800c17 	ldw	r2,48(r4)
    da9c:	3080082e 	bgeu	r6,r2,dac0 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    daa0:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    daa4:	28c00003 	ldbu	r3,0(r5)
    daa8:	18803fcc 	andi	r2,r3,255
    daac:	1080201c 	xori	r2,r2,128
    dab0:	10bfe004 	addi	r2,r2,-128
    dab4:	10000426 	beq	r2,zero,dac8 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    dab8:	3a0f883a 	add	r7,r7,r8
    dabc:	003fef06 	br	da7c <alt_up_char_buffer_string+0x34>
    dac0:	00bfffc4 	movi	r2,-1
    dac4:	f800283a 	ret
    dac8:	0005883a 	mov	r2,zero
	}
	return 0;
}
    dacc:	f800283a 	ret

0000dad0 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    dad0:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    dad4:	20800c17 	ldw	r2,48(r4)
    dad8:	3080112e 	bgeu	r6,r2,db20 <alt_up_char_buffer_draw+0x50>
    dadc:	20800d17 	ldw	r2,52(r4)
    dae0:	38800f2e 	bgeu	r7,r2,db20 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    dae4:	20c00f17 	ldw	r3,60(r4)
    dae8:	30c6703a 	and	r3,r6,r3
    daec:	20800e17 	ldw	r2,56(r4)
    daf0:	1886983a 	sll	r3,r3,r2
    daf4:	20801117 	ldw	r2,68(r4)
    daf8:	3884703a 	and	r2,r7,r2
    dafc:	21001017 	ldw	r4,64(r4)
    db00:	1104983a 	sll	r2,r2,r4
    db04:	1886b03a 	or	r3,r3,r2
    db08:	40800b17 	ldw	r2,44(r8)
    db0c:	1887883a 	add	r3,r3,r2
    db10:	28803fcc 	andi	r2,r5,255
    db14:	18800025 	stbio	r2,0(r3)
    db18:	0005883a 	mov	r2,zero
    db1c:	f800283a 	ret

	return 0;
    db20:	00bfffc4 	movi	r2,-1
}
    db24:	f800283a 	ret

0000db28 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    db28:	20c00a17 	ldw	r3,40(r4)
    db2c:	00800044 	movi	r2,1
    db30:	188000a5 	stbio	r2,2(r3)
    db34:	20800a17 	ldw	r2,40(r4)
    db38:	10c00084 	addi	r3,r2,2
    db3c:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    db40:	18800023 	ldbuio	r2,0(r3)
    db44:	1104703a 	and	r2,r2,r4
    db48:	103ffd1e 	bne	r2,zero,db40 <alt_up_char_buffer_clear+0x18>
	return 0;
}
    db4c:	f800283a 	ret

0000db50 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    db50:	deffff04 	addi	sp,sp,-4
    db54:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    db58:	01400074 	movhi	r5,1
    db5c:	29435204 	addi	r5,r5,3400
    db60:	000dcc80 	call	dcc8 <alt_find_dev>

  return dev;
}
    db64:	dfc00017 	ldw	ra,0(sp)
    db68:	dec00104 	addi	sp,sp,4
    db6c:	f800283a 	ret

0000db70 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    db70:	defffe04 	addi	sp,sp,-8
    db74:	dfc00115 	stw	ra,4(sp)
    db78:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    db7c:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    db80:	80800007 	ldb	r2,0(r16)
    db84:	10000a26 	beq	r2,zero,dbb0 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    db88:	8009883a 	mov	r4,r16
    db8c:	01400074 	movhi	r5,1
    db90:	297b8604 	addi	r5,r5,-4584
    db94:	000a2ac0 	call	a2ac <strcmp>
    db98:	1000021e 	bne	r2,zero,dba4 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    db9c:	80000005 	stb	zero,0(r16)
    dba0:	00000306 	br	dbb0 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    dba4:	84000044 	addi	r16,r16,1
    dba8:	80800007 	ldb	r2,0(r16)
    dbac:	103ff61e 	bne	r2,zero,db88 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    dbb0:	dfc00117 	ldw	ra,4(sp)
    dbb4:	dc000017 	ldw	r16,0(sp)
    dbb8:	dec00204 	addi	sp,sp,8
    dbbc:	f800283a 	ret

0000dbc0 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    dbc0:	00800074 	movhi	r2,1
    dbc4:	108b4204 	addi	r2,r2,11528
    dbc8:	10800017 	ldw	r2,0(r2)
    dbcc:	1000021e 	bne	r2,zero,dbd8 <alt_alarm_start+0x18>
    dbd0:	00bfde84 	movi	r2,-134
    dbd4:	f800283a 	ret
  {
    if (alarm)
    dbd8:	2000021e 	bne	r4,zero,dbe4 <alt_alarm_start+0x24>
    dbdc:	00bffa84 	movi	r2,-22
    dbe0:	f800283a 	ret
    {
      alarm->callback = callback;
    dbe4:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    dbe8:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dbec:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dbf0:	00bfff84 	movi	r2,-2
    dbf4:	3884703a 	and	r2,r7,r2
    dbf8:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    dbfc:	00800074 	movhi	r2,1
    dc00:	108b4304 	addi	r2,r2,11532
    dc04:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    dc08:	01800044 	movi	r6,1
    dc0c:	1985883a 	add	r2,r3,r6
    dc10:	2885883a 	add	r2,r5,r2
    dc14:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    dc18:	10c0022e 	bgeu	r2,r3,dc24 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    dc1c:	21800405 	stb	r6,16(r4)
    dc20:	00000106 	br	dc28 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    dc24:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    dc28:	00800074 	movhi	r2,1
    dc2c:	10835a04 	addi	r2,r2,3432
    dc30:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    dc34:	10c00017 	ldw	r3,0(r2)
    dc38:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    dc3c:	10c00017 	ldw	r3,0(r2)
    dc40:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    dc44:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dc48:	3801703a 	wrctl	status,r7
    dc4c:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    dc50:	f800283a 	ret

0000dc54 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    dc54:	f800283a 	ret

0000dc58 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    dc58:	deffff04 	addi	sp,sp,-4
    dc5c:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    dc60:	20000226 	beq	r4,zero,dc6c <alt_dev_llist_insert+0x14>
    dc64:	20800217 	ldw	r2,8(r4)
    dc68:	10000d1e 	bne	r2,zero,dca0 <alt_dev_llist_insert+0x48>
    dc6c:	00800074 	movhi	r2,1
    dc70:	10835504 	addi	r2,r2,3412
    dc74:	10800017 	ldw	r2,0(r2)
    dc78:	1000031e 	bne	r2,zero,dc88 <alt_dev_llist_insert+0x30>
    dc7c:	00c00074 	movhi	r3,1
    dc80:	18cb3a04 	addi	r3,r3,11496
    dc84:	00000206 	br	dc90 <alt_dev_llist_insert+0x38>
    dc88:	103ee83a 	callr	r2
    dc8c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    dc90:	00800584 	movi	r2,22
    dc94:	18800015 	stw	r2,0(r3)
    dc98:	00bffa84 	movi	r2,-22
    dc9c:	00000706 	br	dcbc <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    dca0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    dca4:	28800017 	ldw	r2,0(r5)
    dca8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    dcac:	28800017 	ldw	r2,0(r5)
    dcb0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    dcb4:	29000015 	stw	r4,0(r5)
    dcb8:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    dcbc:	dfc00017 	ldw	ra,0(sp)
    dcc0:	dec00104 	addi	sp,sp,4
    dcc4:	f800283a 	ret

0000dcc8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    dcc8:	defffb04 	addi	sp,sp,-20
    dccc:	dfc00415 	stw	ra,16(sp)
    dcd0:	dcc00315 	stw	r19,12(sp)
    dcd4:	dc800215 	stw	r18,8(sp)
    dcd8:	dc400115 	stw	r17,4(sp)
    dcdc:	dc000015 	stw	r16,0(sp)
    dce0:	2027883a 	mov	r19,r4
    dce4:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    dce8:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    dcec:	0003e940 	call	3e94 <strlen>
    dcf0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    dcf4:	8c000726 	beq	r17,r16,dd14 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    dcf8:	89000217 	ldw	r4,8(r17)
    dcfc:	980b883a 	mov	r5,r19
    dd00:	900d883a 	mov	r6,r18
    dd04:	000e27c0 	call	e27c <memcmp>
    dd08:	10000326 	beq	r2,zero,dd18 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    dd0c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    dd10:	847ff91e 	bne	r16,r17,dcf8 <alt_find_dev+0x30>
    dd14:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    dd18:	8805883a 	mov	r2,r17
    dd1c:	dfc00417 	ldw	ra,16(sp)
    dd20:	dcc00317 	ldw	r19,12(sp)
    dd24:	dc800217 	ldw	r18,8(sp)
    dd28:	dc400117 	ldw	r17,4(sp)
    dd2c:	dc000017 	ldw	r16,0(sp)
    dd30:	dec00504 	addi	sp,sp,20
    dd34:	f800283a 	ret

0000dd38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    dd38:	deffff04 	addi	sp,sp,-4
    dd3c:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    dd40:	0009883a 	mov	r4,zero
    dd44:	01440004 	movi	r5,4096
    dd48:	000e2080 	call	e208 <alt_icache_flush>
#endif
}
    dd4c:	dfc00017 	ldw	ra,0(sp)
    dd50:	dec00104 	addi	sp,sp,4
    dd54:	f800283a 	ret

0000dd58 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    dd58:	defffe04 	addi	sp,sp,-8
    dd5c:	dfc00115 	stw	ra,4(sp)
    dd60:	dc000015 	stw	r16,0(sp)
    dd64:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    dd68:	2809883a 	mov	r4,r5
    dd6c:	300b883a 	mov	r5,r6
    dd70:	380d883a 	mov	r6,r7
    dd74:	000de540 	call	de54 <open>
    dd78:	1009883a 	mov	r4,r2

  if (old >= 0)
    dd7c:	10000b16 	blt	r2,zero,ddac <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    dd80:	10c00324 	muli	r3,r2,12
    dd84:	00800074 	movhi	r2,1
    dd88:	10bda004 	addi	r2,r2,-2432
    dd8c:	1887883a 	add	r3,r3,r2
    dd90:	18800017 	ldw	r2,0(r3)
    dd94:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    dd98:	18800117 	ldw	r2,4(r3)
    dd9c:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    dda0:	18800217 	ldw	r2,8(r3)
    dda4:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    dda8:	000bed00 	call	bed0 <alt_release_fd>
  }
} 
    ddac:	dfc00117 	ldw	ra,4(sp)
    ddb0:	dc000017 	ldw	r16,0(sp)
    ddb4:	dec00204 	addi	sp,sp,8
    ddb8:	f800283a 	ret

0000ddbc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    ddbc:	defffa04 	addi	sp,sp,-24
    ddc0:	dfc00515 	stw	ra,20(sp)
    ddc4:	dd000415 	stw	r20,16(sp)
    ddc8:	dcc00315 	stw	r19,12(sp)
    ddcc:	dc800215 	stw	r18,8(sp)
    ddd0:	dc400115 	stw	r17,4(sp)
    ddd4:	dc000015 	stw	r16,0(sp)
    ddd8:	2005883a 	mov	r2,r4
    dddc:	2827883a 	mov	r19,r5
    dde0:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    dde4:	04000074 	movhi	r16,1
    dde8:	843da304 	addi	r16,r16,-2420
    ddec:	04800044 	movi	r18,1
    ddf0:	04407fc4 	movi	r17,511
    ddf4:	8009883a 	mov	r4,r16
    ddf8:	100b883a 	mov	r5,r2
    ddfc:	900d883a 	mov	r6,r18
    de00:	880f883a 	mov	r7,r17
    de04:	000dd580 	call	dd58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    de08:	843ffd04 	addi	r16,r16,-12
    de0c:	8009883a 	mov	r4,r16
    de10:	980b883a 	mov	r5,r19
    de14:	000d883a 	mov	r6,zero
    de18:	880f883a 	mov	r7,r17
    de1c:	000dd580 	call	dd58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    de20:	81000604 	addi	r4,r16,24
    de24:	a00b883a 	mov	r5,r20
    de28:	900d883a 	mov	r6,r18
    de2c:	880f883a 	mov	r7,r17
    de30:	000dd580 	call	dd58 <alt_open_fd>
}  
    de34:	dfc00517 	ldw	ra,20(sp)
    de38:	dd000417 	ldw	r20,16(sp)
    de3c:	dcc00317 	ldw	r19,12(sp)
    de40:	dc800217 	ldw	r18,8(sp)
    de44:	dc400117 	ldw	r17,4(sp)
    de48:	dc000017 	ldw	r16,0(sp)
    de4c:	dec00604 	addi	sp,sp,24
    de50:	f800283a 	ret

0000de54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    de54:	defff904 	addi	sp,sp,-28
    de58:	dfc00615 	stw	ra,24(sp)
    de5c:	dd400515 	stw	r21,20(sp)
    de60:	dd000415 	stw	r20,16(sp)
    de64:	dcc00315 	stw	r19,12(sp)
    de68:	dc800215 	stw	r18,8(sp)
    de6c:	dc400115 	stw	r17,4(sp)
    de70:	dc000015 	stw	r16,0(sp)
    de74:	2029883a 	mov	r20,r4
    de78:	2827883a 	mov	r19,r5
    de7c:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    de80:	01400074 	movhi	r5,1
    de84:	29435204 	addi	r5,r5,3400
    de88:	000dcc80 	call	dcc8 <alt_find_dev>
    de8c:	1021883a 	mov	r16,r2
    de90:	10000226 	beq	r2,zero,de9c <open+0x48>
    de94:	0025883a 	mov	r18,zero
    de98:	00000a06 	br	dec4 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    de9c:	a009883a 	mov	r4,r20
    dea0:	000e0e00 	call	e0e0 <alt_find_file>
    dea4:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    dea8:	1000051e 	bne	r2,zero,dec0 <open+0x6c>
    deac:	047fffc4 	movi	r17,-1
    deb0:	043ffb44 	movi	r16,-19
    deb4:	00002b06 	br	df64 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    deb8:	043ffcc4 	movi	r16,-13
    debc:	00002906 	br	df64 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    dec0:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    dec4:	8009883a 	mov	r4,r16
    dec8:	000e19c0 	call	e19c <alt_get_fd>
    decc:	1023883a 	mov	r17,r2
    ded0:	10003316 	blt	r2,zero,dfa0 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    ded4:	10800324 	muli	r2,r2,12
    ded8:	02000074 	movhi	r8,1
    dedc:	423da004 	addi	r8,r8,-2432
    dee0:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    dee4:	00900034 	movhi	r2,16384
    dee8:	10bfffc4 	addi	r2,r2,-1
    deec:	9886703a 	and	r3,r19,r2
    def0:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    def4:	9004c03a 	cmpne	r2,r18,zero
    def8:	1000121e 	bne	r2,zero,df44 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    defc:	18900034 	orhi	r2,r3,16384
    df00:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    df04:	00800074 	movhi	r2,1
    df08:	10835404 	addi	r2,r2,3408
    df0c:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    df10:	21800017 	ldw	r6,0(r4)
    df14:	000b883a 	mov	r5,zero
    df18:	4007883a 	mov	r3,r8
    df1c:	02400044 	movi	r9,1
    df20:	02000304 	movi	r8,12
    df24:	18800017 	ldw	r2,0(r3)
    df28:	1180031e 	bne	r2,r6,df38 <open+0xe4>
    df2c:	18800217 	ldw	r2,8(r3)
    df30:	1000010e 	bge	r2,zero,df38 <open+0xe4>
    df34:	193fe01e 	bne	r3,r4,deb8 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    df38:	2a4b883a 	add	r5,r5,r9
    df3c:	1a07883a 	add	r3,r3,r8
    df40:	397ff82e 	bgeu	r7,r5,df24 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    df44:	80800317 	ldw	r2,12(r16)
    df48:	10001726 	beq	r2,zero,dfa8 <open+0x154>
    df4c:	a00b883a 	mov	r5,r20
    df50:	980d883a 	mov	r6,r19
    df54:	a80f883a 	mov	r7,r21
    df58:	103ee83a 	callr	r2
    df5c:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    df60:	1000110e 	bge	r2,zero,dfa8 <open+0x154>
  {
    alt_release_fd (index);  
    df64:	8809883a 	mov	r4,r17
    df68:	000bed00 	call	bed0 <alt_release_fd>
    df6c:	00800074 	movhi	r2,1
    df70:	10835504 	addi	r2,r2,3412
    df74:	10800017 	ldw	r2,0(r2)
    df78:	1000031e 	bne	r2,zero,df88 <open+0x134>
    df7c:	00c00074 	movhi	r3,1
    df80:	18cb3a04 	addi	r3,r3,11496
    df84:	00000206 	br	df90 <open+0x13c>
    df88:	103ee83a 	callr	r2
    df8c:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    df90:	0405c83a 	sub	r2,zero,r16
    df94:	18800015 	stw	r2,0(r3)
    df98:	047fffc4 	movi	r17,-1
    df9c:	00000206 	br	dfa8 <open+0x154>
    dfa0:	1021883a 	mov	r16,r2
    dfa4:	003fef06 	br	df64 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    dfa8:	8805883a 	mov	r2,r17
    dfac:	dfc00617 	ldw	ra,24(sp)
    dfb0:	dd400517 	ldw	r21,20(sp)
    dfb4:	dd000417 	ldw	r20,16(sp)
    dfb8:	dcc00317 	ldw	r19,12(sp)
    dfbc:	dc800217 	ldw	r18,8(sp)
    dfc0:	dc400117 	ldw	r17,4(sp)
    dfc4:	dc000017 	ldw	r16,0(sp)
    dfc8:	dec00704 	addi	sp,sp,28
    dfcc:	f800283a 	ret

0000dfd0 <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
    dfd0:	defffe04 	addi	sp,sp,-8
    dfd4:	dfc00115 	stw	ra,4(sp)
    dfd8:	dc000015 	stw	r16,0(sp)
    dfdc:	2021883a 	mov	r16,r4
  alt_dcache_flush (ptr, len);
    dfe0:	000b8540 	call	b854 <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
}
    dfe4:	80a00034 	orhi	r2,r16,32768
    dfe8:	dfc00117 	ldw	ra,4(sp)
    dfec:	dc000017 	ldw	r16,0(sp)
    dff0:	dec00204 	addi	sp,sp,8
    dff4:	f800283a 	ret

0000dff8 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dff8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dffc:	00bfff84 	movi	r2,-2
    e000:	2884703a 	and	r2,r5,r2
    e004:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    e008:	20c00017 	ldw	r3,0(r4)
    e00c:	20800117 	ldw	r2,4(r4)
    e010:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    e014:	20800117 	ldw	r2,4(r4)
    e018:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    e01c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    e020:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e024:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    e028:	f800283a 	ret

0000e02c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    e02c:	defffd04 	addi	sp,sp,-12
    e030:	dfc00215 	stw	ra,8(sp)
    e034:	dc400115 	stw	r17,4(sp)
    e038:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    e03c:	d4203517 	ldw	r16,-32556(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    e040:	d0a81e17 	ldw	r2,-24456(gp)
    e044:	10800044 	addi	r2,r2,1
    e048:	d0a81e15 	stw	r2,-24456(gp)
    e04c:	00001b06 	br	e0bc <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    e050:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    e054:	80800403 	ldbu	r2,16(r16)
    e058:	10000326 	beq	r2,zero,e068 <alt_tick+0x3c>
    e05c:	d0a81e17 	ldw	r2,-24456(gp)
    e060:	1000011e 	bne	r2,zero,e068 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    e064:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    e068:	d0e81e17 	ldw	r3,-24456(gp)
    e06c:	80800217 	ldw	r2,8(r16)
    e070:	18801136 	bltu	r3,r2,e0b8 <alt_tick+0x8c>
    e074:	80800403 	ldbu	r2,16(r16)
    e078:	10000f1e 	bne	r2,zero,e0b8 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    e07c:	80800317 	ldw	r2,12(r16)
    e080:	81000517 	ldw	r4,20(r16)
    e084:	103ee83a 	callr	r2
    e088:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    e08c:	1000031e 	bne	r2,zero,e09c <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    e090:	8009883a 	mov	r4,r16
    e094:	000dff80 	call	dff8 <alt_alarm_stop>
    e098:	00000706 	br	e0b8 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    e09c:	80800217 	ldw	r2,8(r16)
    e0a0:	1885883a 	add	r2,r3,r2
    e0a4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    e0a8:	d0e81e17 	ldw	r3,-24456(gp)
    e0ac:	10c0022e 	bgeu	r2,r3,e0b8 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    e0b0:	00800044 	movi	r2,1
    e0b4:	80800405 	stb	r2,16(r16)
    e0b8:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    e0bc:	d0a03504 	addi	r2,gp,-32556
    e0c0:	80bfe31e 	bne	r16,r2,e050 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    e0c4:	dfc00217 	ldw	ra,8(sp)
    e0c8:	dc400117 	ldw	r17,4(sp)
    e0cc:	dc000017 	ldw	r16,0(sp)
    e0d0:	dec00304 	addi	sp,sp,12
    e0d4:	f800283a 	ret

0000e0d8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    e0d8:	000170fa 	wrctl	ienable,zero
}
    e0dc:	f800283a 	ret

0000e0e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    e0e0:	defff904 	addi	sp,sp,-28
    e0e4:	dfc00615 	stw	ra,24(sp)
    e0e8:	dd400515 	stw	r21,20(sp)
    e0ec:	dd000415 	stw	r20,16(sp)
    e0f0:	dcc00315 	stw	r19,12(sp)
    e0f4:	dc800215 	stw	r18,8(sp)
    e0f8:	dc400115 	stw	r17,4(sp)
    e0fc:	dc000015 	stw	r16,0(sp)
    e100:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    e104:	00800074 	movhi	r2,1
    e108:	10835004 	addi	r2,r2,3392
    e10c:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e110:	102b883a 	mov	r21,r2
    e114:	88801626 	beq	r17,r2,e170 <alt_find_file+0x90>
    e118:	053fffc4 	movi	r20,-1
    e11c:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    e120:	8c000217 	ldw	r16,8(r17)
    e124:	8009883a 	mov	r4,r16
    e128:	0003e940 	call	3e94 <strlen>
    e12c:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    e130:	8085883a 	add	r2,r16,r2
    e134:	1505883a 	add	r2,r2,r20
    e138:	10800007 	ldb	r2,0(r2)
    e13c:	14c0011e 	bne	r2,r19,e144 <alt_find_file+0x64>
    {
      len -= 1;
    e140:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    e144:	1c85883a 	add	r2,r3,r18
    e148:	10800007 	ldb	r2,0(r2)
    e14c:	14c00126 	beq	r2,r19,e154 <alt_find_file+0x74>
    e150:	1000051e 	bne	r2,zero,e168 <alt_find_file+0x88>
    e154:	8009883a 	mov	r4,r16
    e158:	900b883a 	mov	r5,r18
    e15c:	180d883a 	mov	r6,r3
    e160:	000e27c0 	call	e27c <memcmp>
    e164:	10000326 	beq	r2,zero,e174 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    e168:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e16c:	8d7fec1e 	bne	r17,r21,e120 <alt_find_file+0x40>
    e170:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    e174:	8805883a 	mov	r2,r17
    e178:	dfc00617 	ldw	ra,24(sp)
    e17c:	dd400517 	ldw	r21,20(sp)
    e180:	dd000417 	ldw	r20,16(sp)
    e184:	dcc00317 	ldw	r19,12(sp)
    e188:	dc800217 	ldw	r18,8(sp)
    e18c:	dc400117 	ldw	r17,4(sp)
    e190:	dc000017 	ldw	r16,0(sp)
    e194:	dec00704 	addi	sp,sp,28
    e198:	f800283a 	ret

0000e19c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    e19c:	000b883a 	mov	r5,zero
    e1a0:	00c00074 	movhi	r3,1
    e1a4:	18fda004 	addi	r3,r3,-2432
    e1a8:	02000304 	movi	r8,12
    e1ac:	02400074 	movhi	r9,1
    e1b0:	4a435404 	addi	r9,r9,3408
    e1b4:	01c00044 	movi	r7,1
    e1b8:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    e1bc:	18800017 	ldw	r2,0(r3)
    e1c0:	10000c1e 	bne	r2,zero,e1f4 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    e1c4:	2a05383a 	mul	r2,r5,r8
    e1c8:	00c00074 	movhi	r3,1
    e1cc:	18fda004 	addi	r3,r3,-2432
    e1d0:	10c5883a 	add	r2,r2,r3
    e1d4:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    e1d8:	48800017 	ldw	r2,0(r9)
    e1dc:	11400216 	blt	r2,r5,e1e8 <alt_get_fd+0x4c>
    e1e0:	2805883a 	mov	r2,r5
    e1e4:	f800283a 	ret
      {
        alt_max_fd = i;
    e1e8:	49400015 	stw	r5,0(r9)
    e1ec:	2805883a 	mov	r2,r5
    e1f0:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e1f4:	29cb883a 	add	r5,r5,r7
    e1f8:	1a07883a 	add	r3,r3,r8
    e1fc:	29bfef1e 	bne	r5,r6,e1bc <alt_get_fd+0x20>
    e200:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    e204:	f800283a 	ret

0000e208 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    e208:	2007883a 	mov	r3,r4
    e20c:	00840004 	movi	r2,4096
    e210:	1140012e 	bgeu	r2,r5,e218 <alt_icache_flush+0x10>
    e214:	100b883a 	mov	r5,r2
    e218:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e21c:	1940042e 	bgeu	r3,r5,e230 <alt_icache_flush+0x28>
    e220:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    e224:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e228:	1887883a 	add	r3,r3,r2
    e22c:	197ffd36 	bltu	r3,r5,e224 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    e230:	208007cc 	andi	r2,r4,31
    e234:	10000126 	beq	r2,zero,e23c <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    e238:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    e23c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    e240:	f800283a 	ret

0000e244 <exit>:
    e244:	defffe04 	addi	sp,sp,-8
    e248:	000b883a 	mov	r5,zero
    e24c:	dc000015 	stw	r16,0(sp)
    e250:	dfc00115 	stw	ra,4(sp)
    e254:	2021883a 	mov	r16,r4
    e258:	000e62c0 	call	e62c <__call_exitprocs>
    e25c:	00800074 	movhi	r2,1
    e260:	10834b04 	addi	r2,r2,3372
    e264:	11000017 	ldw	r4,0(r2)
    e268:	20800f17 	ldw	r2,60(r4)
    e26c:	10000126 	beq	r2,zero,e274 <exit+0x30>
    e270:	103ee83a 	callr	r2
    e274:	8009883a 	mov	r4,r16
    e278:	000e7dc0 	call	e7dc <_exit>

0000e27c <memcmp>:
    e27c:	00c000c4 	movi	r3,3
    e280:	1980032e 	bgeu	r3,r6,e290 <memcmp+0x14>
    e284:	2144b03a 	or	r2,r4,r5
    e288:	10c4703a 	and	r2,r2,r3
    e28c:	10000f26 	beq	r2,zero,e2cc <memcmp+0x50>
    e290:	31ffffc4 	addi	r7,r6,-1
    e294:	3000061e 	bne	r6,zero,e2b0 <memcmp+0x34>
    e298:	00000a06 	br	e2c4 <memcmp+0x48>
    e29c:	39ffffc4 	addi	r7,r7,-1
    e2a0:	00bfffc4 	movi	r2,-1
    e2a4:	21000044 	addi	r4,r4,1
    e2a8:	29400044 	addi	r5,r5,1
    e2ac:	38800526 	beq	r7,r2,e2c4 <memcmp+0x48>
    e2b0:	20c00003 	ldbu	r3,0(r4)
    e2b4:	28800003 	ldbu	r2,0(r5)
    e2b8:	18bff826 	beq	r3,r2,e29c <memcmp+0x20>
    e2bc:	1885c83a 	sub	r2,r3,r2
    e2c0:	f800283a 	ret
    e2c4:	0005883a 	mov	r2,zero
    e2c8:	f800283a 	ret
    e2cc:	180f883a 	mov	r7,r3
    e2d0:	20c00017 	ldw	r3,0(r4)
    e2d4:	28800017 	ldw	r2,0(r5)
    e2d8:	18bfed1e 	bne	r3,r2,e290 <memcmp+0x14>
    e2dc:	31bfff04 	addi	r6,r6,-4
    e2e0:	21000104 	addi	r4,r4,4
    e2e4:	29400104 	addi	r5,r5,4
    e2e8:	39bff936 	bltu	r7,r6,e2d0 <memcmp+0x54>
    e2ec:	003fe806 	br	e290 <memcmp+0x14>

0000e2f0 <putc>:
    e2f0:	defffc04 	addi	sp,sp,-16
    e2f4:	dc800215 	stw	r18,8(sp)
    e2f8:	04800074 	movhi	r18,1
    e2fc:	94834a04 	addi	r18,r18,3368
    e300:	90c00017 	ldw	r3,0(r18)
    e304:	dc400115 	stw	r17,4(sp)
    e308:	dc000015 	stw	r16,0(sp)
    e30c:	dfc00315 	stw	ra,12(sp)
    e310:	2023883a 	mov	r17,r4
    e314:	2821883a 	mov	r16,r5
    e318:	18000226 	beq	r3,zero,e324 <putc+0x34>
    e31c:	18800e17 	ldw	r2,56(r3)
    e320:	10001126 	beq	r2,zero,e368 <putc+0x78>
    e324:	80800217 	ldw	r2,8(r16)
    e328:	10ffffc4 	addi	r3,r2,-1
    e32c:	80c00215 	stw	r3,8(r16)
    e330:	18001316 	blt	r3,zero,e380 <putc+0x90>
    e334:	80800017 	ldw	r2,0(r16)
    e338:	14400005 	stb	r17,0(r2)
    e33c:	80c00017 	ldw	r3,0(r16)
    e340:	18800044 	addi	r2,r3,1
    e344:	18c00003 	ldbu	r3,0(r3)
    e348:	80800015 	stw	r2,0(r16)
    e34c:	1805883a 	mov	r2,r3
    e350:	dfc00317 	ldw	ra,12(sp)
    e354:	dc800217 	ldw	r18,8(sp)
    e358:	dc400117 	ldw	r17,4(sp)
    e35c:	dc000017 	ldw	r16,0(sp)
    e360:	dec00404 	addi	sp,sp,16
    e364:	f800283a 	ret
    e368:	1809883a 	mov	r4,r3
    e36c:	00079d00 	call	79d0 <__sinit>
    e370:	80800217 	ldw	r2,8(r16)
    e374:	10ffffc4 	addi	r3,r2,-1
    e378:	80c00215 	stw	r3,8(r16)
    e37c:	183fed0e 	bge	r3,zero,e334 <putc+0x44>
    e380:	80800617 	ldw	r2,24(r16)
    e384:	18800f16 	blt	r3,r2,e3c4 <putc+0xd4>
    e388:	80800017 	ldw	r2,0(r16)
    e38c:	14400005 	stb	r17,0(r2)
    e390:	81000017 	ldw	r4,0(r16)
    e394:	00800284 	movi	r2,10
    e398:	20c00003 	ldbu	r3,0(r4)
    e39c:	18801226 	beq	r3,r2,e3e8 <putc+0xf8>
    e3a0:	20800044 	addi	r2,r4,1
    e3a4:	80800015 	stw	r2,0(r16)
    e3a8:	1805883a 	mov	r2,r3
    e3ac:	dfc00317 	ldw	ra,12(sp)
    e3b0:	dc800217 	ldw	r18,8(sp)
    e3b4:	dc400117 	ldw	r17,4(sp)
    e3b8:	dc000017 	ldw	r16,0(sp)
    e3bc:	dec00404 	addi	sp,sp,16
    e3c0:	f800283a 	ret
    e3c4:	91000017 	ldw	r4,0(r18)
    e3c8:	880b883a 	mov	r5,r17
    e3cc:	800d883a 	mov	r6,r16
    e3d0:	dfc00317 	ldw	ra,12(sp)
    e3d4:	dc800217 	ldw	r18,8(sp)
    e3d8:	dc400117 	ldw	r17,4(sp)
    e3dc:	dc000017 	ldw	r16,0(sp)
    e3e0:	dec00404 	addi	sp,sp,16
    e3e4:	000e4dc1 	jmpi	e4dc <__swbuf_r>
    e3e8:	91000017 	ldw	r4,0(r18)
    e3ec:	180b883a 	mov	r5,r3
    e3f0:	003ff606 	br	e3cc <putc+0xdc>

0000e3f4 <_putc_r>:
    e3f4:	defffc04 	addi	sp,sp,-16
    e3f8:	dc400215 	stw	r17,8(sp)
    e3fc:	dc000115 	stw	r16,4(sp)
    e400:	dfc00315 	stw	ra,12(sp)
    e404:	2021883a 	mov	r16,r4
    e408:	2823883a 	mov	r17,r5
    e40c:	20000226 	beq	r4,zero,e418 <_putc_r+0x24>
    e410:	20800e17 	ldw	r2,56(r4)
    e414:	10001026 	beq	r2,zero,e458 <_putc_r+0x64>
    e418:	30800217 	ldw	r2,8(r6)
    e41c:	10ffffc4 	addi	r3,r2,-1
    e420:	30c00215 	stw	r3,8(r6)
    e424:	18001316 	blt	r3,zero,e474 <_putc_r+0x80>
    e428:	30800017 	ldw	r2,0(r6)
    e42c:	14400005 	stb	r17,0(r2)
    e430:	30c00017 	ldw	r3,0(r6)
    e434:	18800044 	addi	r2,r3,1
    e438:	18c00003 	ldbu	r3,0(r3)
    e43c:	30800015 	stw	r2,0(r6)
    e440:	1805883a 	mov	r2,r3
    e444:	dfc00317 	ldw	ra,12(sp)
    e448:	dc400217 	ldw	r17,8(sp)
    e44c:	dc000117 	ldw	r16,4(sp)
    e450:	dec00404 	addi	sp,sp,16
    e454:	f800283a 	ret
    e458:	d9800015 	stw	r6,0(sp)
    e45c:	00079d00 	call	79d0 <__sinit>
    e460:	d9800017 	ldw	r6,0(sp)
    e464:	30800217 	ldw	r2,8(r6)
    e468:	10ffffc4 	addi	r3,r2,-1
    e46c:	30c00215 	stw	r3,8(r6)
    e470:	183fed0e 	bge	r3,zero,e428 <_putc_r+0x34>
    e474:	30800617 	ldw	r2,24(r6)
    e478:	18800e16 	blt	r3,r2,e4b4 <_putc_r+0xc0>
    e47c:	30800017 	ldw	r2,0(r6)
    e480:	14400005 	stb	r17,0(r2)
    e484:	31000017 	ldw	r4,0(r6)
    e488:	00800284 	movi	r2,10
    e48c:	20c00003 	ldbu	r3,0(r4)
    e490:	18800f26 	beq	r3,r2,e4d0 <_putc_r+0xdc>
    e494:	20800044 	addi	r2,r4,1
    e498:	30800015 	stw	r2,0(r6)
    e49c:	1805883a 	mov	r2,r3
    e4a0:	dfc00317 	ldw	ra,12(sp)
    e4a4:	dc400217 	ldw	r17,8(sp)
    e4a8:	dc000117 	ldw	r16,4(sp)
    e4ac:	dec00404 	addi	sp,sp,16
    e4b0:	f800283a 	ret
    e4b4:	8009883a 	mov	r4,r16
    e4b8:	880b883a 	mov	r5,r17
    e4bc:	dfc00317 	ldw	ra,12(sp)
    e4c0:	dc400217 	ldw	r17,8(sp)
    e4c4:	dc000117 	ldw	r16,4(sp)
    e4c8:	dec00404 	addi	sp,sp,16
    e4cc:	000e4dc1 	jmpi	e4dc <__swbuf_r>
    e4d0:	8009883a 	mov	r4,r16
    e4d4:	180b883a 	mov	r5,r3
    e4d8:	003ff806 	br	e4bc <_putc_r+0xc8>

0000e4dc <__swbuf_r>:
    e4dc:	defffc04 	addi	sp,sp,-16
    e4e0:	dc400215 	stw	r17,8(sp)
    e4e4:	dc000115 	stw	r16,4(sp)
    e4e8:	dfc00315 	stw	ra,12(sp)
    e4ec:	2023883a 	mov	r17,r4
    e4f0:	2821883a 	mov	r16,r5
    e4f4:	20000226 	beq	r4,zero,e500 <__swbuf_r+0x24>
    e4f8:	20800e17 	ldw	r2,56(r4)
    e4fc:	10002f26 	beq	r2,zero,e5bc <__swbuf_r+0xe0>
    e500:	3080030b 	ldhu	r2,12(r6)
    e504:	30c00617 	ldw	r3,24(r6)
    e508:	1080020c 	andi	r2,r2,8
    e50c:	30c00215 	stw	r3,8(r6)
    e510:	10002226 	beq	r2,zero,e59c <__swbuf_r+0xc0>
    e514:	30c00417 	ldw	r3,16(r6)
    e518:	18002026 	beq	r3,zero,e59c <__swbuf_r+0xc0>
    e51c:	31000017 	ldw	r4,0(r6)
    e520:	30800517 	ldw	r2,20(r6)
    e524:	20c7c83a 	sub	r3,r4,r3
    e528:	18802f0e 	bge	r3,r2,e5e8 <__swbuf_r+0x10c>
    e52c:	19400044 	addi	r5,r3,1
    e530:	30800217 	ldw	r2,8(r6)
    e534:	84003fcc 	andi	r16,r16,255
    e538:	20c00044 	addi	r3,r4,1
    e53c:	10bfffc4 	addi	r2,r2,-1
    e540:	30800215 	stw	r2,8(r6)
    e544:	24000005 	stb	r16,0(r4)
    e548:	30800517 	ldw	r2,20(r6)
    e54c:	30c00015 	stw	r3,0(r6)
    e550:	11400c26 	beq	r2,r5,e584 <__swbuf_r+0xa8>
    e554:	3080030b 	ldhu	r2,12(r6)
    e558:	1080004c 	andi	r2,r2,1
    e55c:	1005003a 	cmpeq	r2,r2,zero
    e560:	10000626 	beq	r2,zero,e57c <__swbuf_r+0xa0>
    e564:	8005883a 	mov	r2,r16
    e568:	dfc00317 	ldw	ra,12(sp)
    e56c:	dc400217 	ldw	r17,8(sp)
    e570:	dc000117 	ldw	r16,4(sp)
    e574:	dec00404 	addi	sp,sp,16
    e578:	f800283a 	ret
    e57c:	00800284 	movi	r2,10
    e580:	80bff81e 	bne	r16,r2,e564 <__swbuf_r+0x88>
    e584:	8809883a 	mov	r4,r17
    e588:	300b883a 	mov	r5,r6
    e58c:	00077380 	call	7738 <_fflush_r>
    e590:	103ff426 	beq	r2,zero,e564 <__swbuf_r+0x88>
    e594:	043fffc4 	movi	r16,-1
    e598:	003ff206 	br	e564 <__swbuf_r+0x88>
    e59c:	300b883a 	mov	r5,r6
    e5a0:	8809883a 	mov	r4,r17
    e5a4:	d9800015 	stw	r6,0(sp)
    e5a8:	0005e300 	call	5e30 <__swsetup_r>
    e5ac:	d9800017 	ldw	r6,0(sp)
    e5b0:	1000061e 	bne	r2,zero,e5cc <__swbuf_r+0xf0>
    e5b4:	30c00417 	ldw	r3,16(r6)
    e5b8:	003fd806 	br	e51c <__swbuf_r+0x40>
    e5bc:	d9800015 	stw	r6,0(sp)
    e5c0:	00079d00 	call	79d0 <__sinit>
    e5c4:	d9800017 	ldw	r6,0(sp)
    e5c8:	003fcd06 	br	e500 <__swbuf_r+0x24>
    e5cc:	3080030b 	ldhu	r2,12(r6)
    e5d0:	00c00244 	movi	r3,9
    e5d4:	043fffc4 	movi	r16,-1
    e5d8:	10801014 	ori	r2,r2,64
    e5dc:	3080030d 	sth	r2,12(r6)
    e5e0:	88c00015 	stw	r3,0(r17)
    e5e4:	003fdf06 	br	e564 <__swbuf_r+0x88>
    e5e8:	300b883a 	mov	r5,r6
    e5ec:	8809883a 	mov	r4,r17
    e5f0:	d9800015 	stw	r6,0(sp)
    e5f4:	00077380 	call	7738 <_fflush_r>
    e5f8:	d9800017 	ldw	r6,0(sp)
    e5fc:	103fe51e 	bne	r2,zero,e594 <__swbuf_r+0xb8>
    e600:	31000017 	ldw	r4,0(r6)
    e604:	01400044 	movi	r5,1
    e608:	003fc906 	br	e530 <__swbuf_r+0x54>

0000e60c <__swbuf>:
    e60c:	01800074 	movhi	r6,1
    e610:	31834a04 	addi	r6,r6,3368
    e614:	2007883a 	mov	r3,r4
    e618:	31000017 	ldw	r4,0(r6)
    e61c:	280d883a 	mov	r6,r5
    e620:	180b883a 	mov	r5,r3
    e624:	000e4dc1 	jmpi	e4dc <__swbuf_r>

0000e628 <register_fini>:
    e628:	f800283a 	ret

0000e62c <__call_exitprocs>:
    e62c:	00800074 	movhi	r2,1
    e630:	10834b04 	addi	r2,r2,3372
    e634:	10800017 	ldw	r2,0(r2)
    e638:	defff304 	addi	sp,sp,-52
    e63c:	df000b15 	stw	fp,44(sp)
    e640:	d8800115 	stw	r2,4(sp)
    e644:	00800034 	movhi	r2,0
    e648:	108d3c04 	addi	r2,r2,13552
    e64c:	1005003a 	cmpeq	r2,r2,zero
    e650:	d8800215 	stw	r2,8(sp)
    e654:	d8800117 	ldw	r2,4(sp)
    e658:	dd400815 	stw	r21,32(sp)
    e65c:	dd000715 	stw	r20,28(sp)
    e660:	10805204 	addi	r2,r2,328
    e664:	dfc00c15 	stw	ra,48(sp)
    e668:	ddc00a15 	stw	r23,40(sp)
    e66c:	dd800915 	stw	r22,36(sp)
    e670:	dcc00615 	stw	r19,24(sp)
    e674:	dc800515 	stw	r18,20(sp)
    e678:	dc400415 	stw	r17,16(sp)
    e67c:	dc000315 	stw	r16,12(sp)
    e680:	282b883a 	mov	r21,r5
    e684:	2039883a 	mov	fp,r4
    e688:	d8800015 	stw	r2,0(sp)
    e68c:	2829003a 	cmpeq	r20,r5,zero
    e690:	d8800117 	ldw	r2,4(sp)
    e694:	14405217 	ldw	r17,328(r2)
    e698:	88001026 	beq	r17,zero,e6dc <__call_exitprocs+0xb0>
    e69c:	ddc00017 	ldw	r23,0(sp)
    e6a0:	88800117 	ldw	r2,4(r17)
    e6a4:	8c802204 	addi	r18,r17,136
    e6a8:	143fffc4 	addi	r16,r2,-1
    e6ac:	80000916 	blt	r16,zero,e6d4 <__call_exitprocs+0xa8>
    e6b0:	05bfffc4 	movi	r22,-1
    e6b4:	a000151e 	bne	r20,zero,e70c <__call_exitprocs+0xe0>
    e6b8:	8409883a 	add	r4,r16,r16
    e6bc:	2105883a 	add	r2,r4,r4
    e6c0:	1485883a 	add	r2,r2,r18
    e6c4:	10c02017 	ldw	r3,128(r2)
    e6c8:	a8c01126 	beq	r21,r3,e710 <__call_exitprocs+0xe4>
    e6cc:	843fffc4 	addi	r16,r16,-1
    e6d0:	85bff81e 	bne	r16,r22,e6b4 <__call_exitprocs+0x88>
    e6d4:	d8800217 	ldw	r2,8(sp)
    e6d8:	10003126 	beq	r2,zero,e7a0 <__call_exitprocs+0x174>
    e6dc:	dfc00c17 	ldw	ra,48(sp)
    e6e0:	df000b17 	ldw	fp,44(sp)
    e6e4:	ddc00a17 	ldw	r23,40(sp)
    e6e8:	dd800917 	ldw	r22,36(sp)
    e6ec:	dd400817 	ldw	r21,32(sp)
    e6f0:	dd000717 	ldw	r20,28(sp)
    e6f4:	dcc00617 	ldw	r19,24(sp)
    e6f8:	dc800517 	ldw	r18,20(sp)
    e6fc:	dc400417 	ldw	r17,16(sp)
    e700:	dc000317 	ldw	r16,12(sp)
    e704:	dec00d04 	addi	sp,sp,52
    e708:	f800283a 	ret
    e70c:	8409883a 	add	r4,r16,r16
    e710:	88c00117 	ldw	r3,4(r17)
    e714:	2105883a 	add	r2,r4,r4
    e718:	1445883a 	add	r2,r2,r17
    e71c:	18ffffc4 	addi	r3,r3,-1
    e720:	11800217 	ldw	r6,8(r2)
    e724:	1c001526 	beq	r3,r16,e77c <__call_exitprocs+0x150>
    e728:	10000215 	stw	zero,8(r2)
    e72c:	303fe726 	beq	r6,zero,e6cc <__call_exitprocs+0xa0>
    e730:	00c00044 	movi	r3,1
    e734:	1c06983a 	sll	r3,r3,r16
    e738:	90804017 	ldw	r2,256(r18)
    e73c:	8cc00117 	ldw	r19,4(r17)
    e740:	1884703a 	and	r2,r3,r2
    e744:	10001426 	beq	r2,zero,e798 <__call_exitprocs+0x16c>
    e748:	90804117 	ldw	r2,260(r18)
    e74c:	1884703a 	and	r2,r3,r2
    e750:	10000c1e 	bne	r2,zero,e784 <__call_exitprocs+0x158>
    e754:	2105883a 	add	r2,r4,r4
    e758:	1485883a 	add	r2,r2,r18
    e75c:	11400017 	ldw	r5,0(r2)
    e760:	e009883a 	mov	r4,fp
    e764:	303ee83a 	callr	r6
    e768:	88800117 	ldw	r2,4(r17)
    e76c:	98bfc81e 	bne	r19,r2,e690 <__call_exitprocs+0x64>
    e770:	b8800017 	ldw	r2,0(r23)
    e774:	147fd526 	beq	r2,r17,e6cc <__call_exitprocs+0xa0>
    e778:	003fc506 	br	e690 <__call_exitprocs+0x64>
    e77c:	8c000115 	stw	r16,4(r17)
    e780:	003fea06 	br	e72c <__call_exitprocs+0x100>
    e784:	2105883a 	add	r2,r4,r4
    e788:	1485883a 	add	r2,r2,r18
    e78c:	11000017 	ldw	r4,0(r2)
    e790:	303ee83a 	callr	r6
    e794:	003ff406 	br	e768 <__call_exitprocs+0x13c>
    e798:	303ee83a 	callr	r6
    e79c:	003ff206 	br	e768 <__call_exitprocs+0x13c>
    e7a0:	88800117 	ldw	r2,4(r17)
    e7a4:	1000081e 	bne	r2,zero,e7c8 <__call_exitprocs+0x19c>
    e7a8:	89000017 	ldw	r4,0(r17)
    e7ac:	20000726 	beq	r4,zero,e7cc <__call_exitprocs+0x1a0>
    e7b0:	b9000015 	stw	r4,0(r23)
    e7b4:	8809883a 	mov	r4,r17
    e7b8:	00034f00 	call	34f0 <free>
    e7bc:	bc400017 	ldw	r17,0(r23)
    e7c0:	883fb71e 	bne	r17,zero,e6a0 <__call_exitprocs+0x74>
    e7c4:	003fc506 	br	e6dc <__call_exitprocs+0xb0>
    e7c8:	89000017 	ldw	r4,0(r17)
    e7cc:	882f883a 	mov	r23,r17
    e7d0:	2023883a 	mov	r17,r4
    e7d4:	883fb21e 	bne	r17,zero,e6a0 <__call_exitprocs+0x74>
    e7d8:	003fc006 	br	e6dc <__call_exitprocs+0xb0>

0000e7dc <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e7dc:	20000226 	beq	r4,zero,e7e8 <_exit+0xc>
    ALT_SIM_FAIL();
    e7e0:	002af070 	cmpltui	zero,zero,43969
    e7e4:	00000106 	br	e7ec <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    e7e8:	002af0b0 	cmpltui	zero,zero,43970
    e7ec:	003fff06 	br	e7ec <_exit+0x10>
    e7f0:	0000e628 	cmpgeui	zero,zero,920
